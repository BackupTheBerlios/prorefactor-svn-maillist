From johnallengreen at berlios.de  Wed Jul  6 02:53:06 2005
From: johnallengreen at berlios.de (John Green at BerliOS)
Date: Wed, 6 Jul 2005 02:53:06 +0200
Subject: [Prorefactor-svn] r33 - in trunk: org.prorefactor.core/src/org/prorefactor/core org.prorefactor.core/src/org/prorefactor/nodetypes org.prorefactor.core/src/org/prorefactor/treeparser org.prorefactor.core/src/org/prorefactor/treeparser01 org.prorefactor.core/src/org/prorefactor/widgettypes org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions org.prorefactor.refactor/src/org/prorefactor/refactor
Message-ID: <200507060053.j660r6cj025261@sheep.berlios.de>

Author: johnallengreen
Date: 2005-07-06 02:52:58 +0200 (Wed, 06 Jul 2005)
New Revision: 33

Added:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLevelWidget.java
Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java
   trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/FieldRefNode.java
   trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/NodeFactory.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLookupResult.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TreeParserWrapper.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.txt
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java
   trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java
   trunk/org.prorefactor.refactor/src/org/prorefactor/refactor/RefactorSession.java
Log:
Fixed a bug where field level widgets were not being added for lookup in
in syntax for frames. Added FieldLevelWidget as a subclass of Widget. A
Field_ref node may be referencing one of these FieldLevelWidget Symbol objects.

Fixed a bug in the scope handling in TRIGGERS phrases.

Fixed bug: uppercase file names .W and .P were not being parsed.

RefactorSession.loadProject(...) now checks whether the schema file has been
modified - in which case the schema should be reloaded.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -18,6 +18,8 @@
 /**
  * Constants commonly used when working with Proparse.
  * See Proparse documentation, "Node Attributes Reference".
+ * Joanju uses 49000-49999 for scratch and otherwise non-persistent attributes.
+ * Attributes 50000+ are reserved for non-Joanju use.
  */
 public interface IConstants {
 
@@ -107,7 +109,8 @@
 	public int TO_BE_CUT = 11010;
 
 	
-	// Joanju uses 49000+ for scratch and otherwise non-persistent attributes.
+	// Joanju uses 49000-49999 for scratch and otherwise non-persistent attributes.
+	// Attributes 50000+ are reserved for non-Joanju use.
 
 
 } // interface IConstants

Modified: trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/FieldRefNode.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/FieldRefNode.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/FieldRefNode.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -15,6 +15,7 @@
 import org.prorefactor.treeparser.BufferScope;
 import org.prorefactor.treeparser.DataType;
 import org.prorefactor.treeparser.FieldBuffer;
+import org.prorefactor.treeparser.FieldLevelWidget;
 import org.prorefactor.treeparser.Primative;
 import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.Variable;
@@ -69,6 +70,10 @@
 		assert symbol!=null;
 		setLink(JPNode.SYMBOL, symbol);
 	}
+	public void setSymbol(FieldLevelWidget symbol) {
+		assert symbol!=null;
+		setLink(JPNode.SYMBOL, symbol);
+	}
 	public void setSymbol(Variable symbol) {
 		assert symbol!=null;
 		setLink(JPNode.SYMBOL, symbol);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/NodeFactory.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/NodeFactory.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/NodeFactory.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -49,7 +49,6 @@
 		case TokenTypes.FOR:
 		case TokenTypes.REPEAT:
 		case TokenTypes.FUNCTION:
-		case TokenTypes.ON:
 		case TokenTypes.PROCEDURE:
 			// We check that these are statement heads, whether the keyword is reserved or not.
 			if (parser.attrGetI(handle, IConstants.STATEHEAD) != 0 )
@@ -61,15 +60,16 @@
 			// CANFIND is reserved, and only used in the syntax for the CAN-FIND function.
 			// It is a "block" because it has special buffer/index-cursor handling.
 			return new BlockNode(handle);
-		case TokenTypes.TRIGGERS:
+		case TokenTypes.ON:
 			{
+				if (parser.attrGetI(handle, IConstants.STATEHEAD) != 0 )
+					return new BlockNode(handle);
 				int temp = parser.getHandle();
 				int childType = parser.nodeFirstChildI(handle, temp);
 				parser.releaseHandle(temp);
-				if (childType == TokenTypes.Code_block)
+				if (childType == TokenTypes.Event_list)
 					return new BlockNode(handle);
-				else
-					return new JPNode(handle);
+				return new JPNode(handle);
 			}
 		default:
 			return new JPNode(handle);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -297,9 +297,11 @@
 		int lastDot = name.lastIndexOf('.');
 		// Variable or unqualified field
 		if (lastDot == -1) {
-			// Variables come first.
+			// Variables and FieldLevelWidgets come first.
 			result.variable = symbolScope.lookupVariable(name);
 			if (result.variable != null) return result;
+			result.fieldLevelWidget = symbolScope.lookupFieldLevelWidget(name);
+			if (result.fieldLevelWidget!=null) return result;
 			// Lookup unqualified field by buffers in nearest scopes.
 			result = lookupUnqualifiedField(name);
 			// Lookup unqualified field by any table.

Added: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLevelWidget.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLevelWidget.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLevelWidget.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -0,0 +1,24 @@
+/* Created on Jun 28, 2005
+ * Authors: john
+ * 
+ * Copyright (c) 2005 Joanju (www.joanju.com)
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.prorefactor.treeparser;
+
+
+/** Field-level widgets can be used in some of the same syntax
+ * as variables can. (Ex: GUI statements such as frame definitions, display statemements, etc.)
+ * In fact, symbol names within a scope must be unique across all VARIABLEs, BROWSEs, BUTTONs,
+ * IMAGEs, and RECTANGLEs.
+ */
+public abstract class FieldLevelWidget extends Widget {
+
+	public FieldLevelWidget(String name, SymbolScope scope) {
+		super(name, scope);
+	}
+
+}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLookupResult.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLookupResult.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldLookupResult.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -20,5 +20,6 @@
 	public boolean isUnqualified = false;
 	public BufferScope bufferScope = null;
 	public Variable variable = null;
+	public FieldLevelWidget fieldLevelWidget = null;
 	public FieldBuffer field = null;
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -44,6 +44,7 @@
 	private Block rootBlock;
 	protected Map bufferMap = new HashMap();
 	protected Map callMap = new HashMap();
+	protected Map fieldLevelWidgetMap = new HashMap();
 	protected Map routineMap = new HashMap();
 	protected Map unnamedBuffers = new HashMap();
 	protected Map typeMap = new HashMap();
@@ -70,13 +71,15 @@
 	}
 
 
+	/** Add a FieldLevelWidget for names lookup. */
+	public void add(FieldLevelWidget widget) {
+	}
 	
 	/** Add a Routine for call handling. */
 	public void add(Routine routine){
 		routineMap.put(routine.getName().toLowerCase(), routine);
 	}
 
-	
 	/** Add a Variable for names lookup. */
 	public void add(Variable var) {
 		variableMap.put(var.getName().toLowerCase(), var);
@@ -84,13 +87,17 @@
 
 	/** Add a Symbol for names lookup. */
 	public void add(Symbol symbol) {
-		Integer type = new Integer(symbol.getProgressType());
-		Map map = (Map) typeMap.get(type);
-		if (map==null) {
-			map = new HashMap();
-			typeMap.put(type, map);
+		if (symbol instanceof FieldLevelWidget) {
+			fieldLevelWidgetMap.put(symbol.getName().toLowerCase(), symbol);
+		} else {
+			Integer type = new Integer(symbol.getProgressType());
+			Map map = (Map) typeMap.get(type);
+			if (map==null) {
+				map = new HashMap();
+				typeMap.put(type, map);
+			}
+			map.put(symbol.getName().toLowerCase(), symbol);
 		}
-		map.put(symbol.getName().toLowerCase(), symbol);
 	}
 
 
@@ -282,7 +289,6 @@
 	public Query lookupQuery(String name) { return (Query) lookupSymbol(QUERY, name); }
 	
 	public Stream lookupStream(String name) { return (Stream) lookupSymbol(STREAM, name); }
-
 	
 	private Object lookupSymbol(Integer symbolType, String name) {
 		Map map = (Map) typeMap.get(symbolType);
@@ -291,7 +297,16 @@
 	}
 
 
+	
+	/** Lookup a FieldLevelWidget in this scope or an enclosing scope. */
+	public FieldLevelWidget lookupFieldLevelWidget(String inName) {
+		FieldLevelWidget wid = (FieldLevelWidget) fieldLevelWidgetMap.get(inName.toLowerCase());
+		if (wid==null && parentScope!=null) return parentScope.lookupFieldLevelWidget(inName);
+		return wid;
+	}
 
+
+
 	/** Lookup a Table or a BufferSymbol, schema table first.
 	 * It seems to work like this: unabbreviated schema name, then
 	 * buffer/temp/work name, then abbreviated schema names. Sheesh.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TreeParserWrapper.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TreeParserWrapper.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TreeParserWrapper.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -129,8 +129,8 @@
 	public static void run2(IJPTreeParser tp, JPNode theAST) throws PRCException {
 		try {
 			tp.program(theAST);
-		} catch (antlr.RecognitionException e) {
-			String s = new String(e.getMessage());
+		} catch (Throwable e) {
+			String s = e.getMessage();
 			JPNode leftOff = (JPNode) tp.get_retTree();
 			if (leftOff != null) {
 				int theNode = leftOff.getHandle();
@@ -154,8 +154,6 @@
 				s += " -> No return node. Error on line one?";
 			}
 			throw new PRCException(s, e);
-		} catch (Throwable e) {
-			throw new PRCException(e.getMessage(), e);
 		}
 	} // run2
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -384,6 +384,12 @@
 			refNode.attrSet(IConstants.STORETYPE, IConstants.ST_VAR);
 			result.variable.noteReference(contextQualifier);
 		}
+		// FieldLevelWidget
+		if (result.fieldLevelWidget != null) {
+			refNode.setSymbol(result.fieldLevelWidget);
+			refNode.attrSet(IConstants.STORETYPE, IConstants.ST_VAR);
+			result.fieldLevelWidget.noteReference(contextQualifier);
+		}
 		// Buffer attributes
 		if (result.bufferScope != null) {
 			refNode.setBufferScope(result.bufferScope);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -42770,16 +42770,16 @@
 	public final void triggerphrase(AST _t) throws RecognitionException {
 		
 		AST triggerphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
-		AST t = null;
+		AST on = null;
 		
 		AST __t2285 = _t;
-		t = _t==ASTNULL ? null :(AST)_t;
+		AST tmp3035_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getFirstChild();
 		block_colon(_t);
 		_t = _retTree;
 		AST __t2286 = _t;
-		AST tmp3035_AST_in = (AST)_t;
+		AST tmp3036_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
@@ -42788,9 +42788,12 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==ON)) {
 				AST __t2288 = _t;
-				AST tmp3036_AST_in = (AST)_t;
+				on = _t==ASTNULL ? null :(AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
+				if ( inputState.guessing==0 ) {
+					action.scopeAdd(on);
+				}
 				eventlist(_t);
 				_t = _retTree;
 				{
@@ -43050,14 +43053,8 @@
 				case BLOCK_LABEL:
 				case COPYLOB:
 				{
-					if ( inputState.guessing==0 ) {
-						action.scopeAdd(t);
-					}
 					blockorstate(_t);
 					_t = _retTree;
-					if ( inputState.guessing==0 ) {
-						action.scopeClose(t);
-					}
 					break;
 				}
 				default:
@@ -43066,6 +43063,9 @@
 				}
 				}
 				}
+				if ( inputState.guessing==0 ) {
+					action.scopeClose(on);
+				}
 				_t = __t2288;
 				_t = _t.getNextSibling();
 			}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -1096,6 +1096,10 @@
 	int SYMMETRICENCRYPTIONKEY = 1089;
 	int SYMMETRICSUPPORT = 1090;
 	int TRANSINITPROCEDURE = 1091;
+	int BIGINT = 1092;
+	int TIMESTAMP = 1093;
+	int FIXCHAR = 1094;
+	int Last_Token_Number = 1095;
 	int SYMMETRICENCRYPTIONALGORITHM = 10877;
 	int PARAM = 10878;
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.txt
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.txt	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01TokenTypes.txt	2005-07-06 00:52:58 UTC (rev 33)
@@ -1085,5 +1085,9 @@
 SYMMETRICENCRYPTIONKEY=1089
 SYMMETRICSUPPORT=1090
 TRANSINITPROCEDURE=1091
+BIGINT=1092
+TIMESTAMP=1093
+FIXCHAR=1094
+Last_Token_Number=1095
 SYMMETRICENCRYPTIONALGORITHM=10877
 PARAM=10878

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2005-07-06 00:52:58 UTC (rev 33)
@@ -3287,12 +3287,12 @@
 	;
 
 triggerphrase
-	:	#(	t:TRIGGERS block_colon
+	:	#(	TRIGGERS block_colon
 			#(	Code_block
-				(	#(ON eventlist (ANYWHERE)?
-						(	PERSISTENT runstate
-						|	{action.scopeAdd(#t);} blockorstate {action.scopeClose(#t);}
-						) 
+				(	#(	on:ON {action.scopeAdd(#on);}
+						eventlist (ANYWHERE)?
+						(PERSISTENT runstate | blockorstate)
+						{action.scopeClose(#on);}
 					) 
 				)*
 			)

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -10,11 +10,11 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.FieldLevelWidget;
 import org.prorefactor.treeparser.SymbolScope;
-import org.prorefactor.treeparser.Widget;
 
 
-public class Browse extends Widget {
+public class Browse extends FieldLevelWidget {
 
 	public Browse(String name, SymbolScope scope) { super(name, scope); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -10,11 +10,11 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.FieldLevelWidget;
 import org.prorefactor.treeparser.SymbolScope;
-import org.prorefactor.treeparser.Widget;
 
 
-public class Button extends Widget {
+public class Button extends FieldLevelWidget {
 
 	public Button(String name, SymbolScope scope) { super(name, scope); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -10,11 +10,11 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.FieldLevelWidget;
 import org.prorefactor.treeparser.SymbolScope;
-import org.prorefactor.treeparser.Widget;
 
 
-public class Image extends Widget {
+public class Image extends FieldLevelWidget {
 
 	public Image(String name, SymbolScope scope) { super(name, scope); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -10,11 +10,11 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.FieldLevelWidget;
 import org.prorefactor.treeparser.SymbolScope;
-import org.prorefactor.treeparser.Widget;
 
 
-public class Rectangle extends Widget {
+public class Rectangle extends FieldLevelWidget {
 
 	public Rectangle(String name, SymbolScope scope) { super(name, scope); }
 

Modified: trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java
===================================================================
--- trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -127,7 +127,7 @@
 	
 	protected void addFile(IFile theFile) {
 		String extension = theFile.getFileExtension();
-		if (extension!=null && (extension.equals("p") || extension.equals("w")))
+		if (extension!=null && (extension.equalsIgnoreCase("p") || extension.equalsIgnoreCase("w")))
 			fileList.add(theFile);
 	}
 

Modified: trunk/org.prorefactor.refactor/src/org/prorefactor/refactor/RefactorSession.java
===================================================================
--- trunk/org.prorefactor.refactor/src/org/prorefactor/refactor/RefactorSession.java	2005-05-17 19:02:19 UTC (rev 32)
+++ trunk/org.prorefactor.refactor/src/org/prorefactor/refactor/RefactorSession.java	2005-07-06 00:52:58 UTC (rev 33)
@@ -28,6 +28,7 @@
  */
 public class RefactorSession {
 
+	private long timeStamp;
 	private ApplicationSettings appSettings = null;
 	private String projectName = null;
 	private ProgressProjectSettings progressSettings = null;
@@ -163,7 +164,10 @@
 	public void loadProject(String projectName) throws Exception {
 		if (projectName==null || projectName.length()==0)
 			throw new Exception("No project selected");
-		if (this.projectName!=null && this.projectName.equals(projectName)) return;
+		if (	this.projectName!=null
+			&&	this.projectName.equals(projectName)
+			&&	schemaFileIsCurrent()
+			) return;
 		try {appSettings.loadSettings();} catch (FileNotFoundException e) {}
 		progressSettings = new ProgressProjectSettings(getProgressSettingsFilename(projectName));
 		try {progressSettings.loadSettings();} catch (FileNotFoundException e) {}
@@ -175,6 +179,7 @@
 		try {proparseSettings.loadSettings();} catch (FileNotFoundException e) {}
 		configureProparse();
 		this.projectName = projectName;
+		timeStamp = System.currentTimeMillis();
 	}
 
 
@@ -185,6 +190,13 @@
 	}
 
 
+	/** Check that the schema file has not been modified since load. */
+	private boolean schemaFileIsCurrent() {
+		assert (proparseSettings != null);
+		File schemaFile = new File(proparseSettings.schemaFile);
+		if (! schemaFile.exists()) return true; // scratch projects might have no schema
+		return (schemaFile.lastModified() < timeStamp);
+	}
 
 
 } // class



From johnallengreen at berlios.de  Fri Jul 15 02:27:33 2005
From: johnallengreen at berlios.de (John Green at BerliOS)
Date: Fri, 15 Jul 2005 02:27:33 +0200
Subject: [Prorefactor-svn] r34 - trunk/org.prorefactor.eclipse
Message-ID: <200507150027.j6F0RXiX001446@sheep.berlios.de>

Author: johnallengreen
Date: 2005-07-15 02:26:51 +0200 (Fri, 15 Jul 2005)
New Revision: 34

Modified:
   trunk/org.prorefactor.eclipse/plugin.xml
Log:
Fixed duplicate identifier which prevented the project page "ProRefactor Environment" from being shown (first noticed with Eclipse 3.1).

Modified: trunk/org.prorefactor.eclipse/plugin.xml
===================================================================
--- trunk/org.prorefactor.eclipse/plugin.xml	2005-07-06 00:52:58 UTC (rev 33)
+++ trunk/org.prorefactor.eclipse/plugin.xml	2005-07-15 00:26:51 UTC (rev 34)
@@ -83,7 +83,7 @@
             name="ProRefactor Environment"
             class="org.prorefactor.eclipse.properties.ProgressSettings"
             nameFilter="*"
-            id="org.prorefactor.properties.proparseSettings">
+            id="org.prorefactor.properties.prorefactorEnvironment">
          <filter
                name="nature"
                value="org.prorefactor.eclipse.ProRefactorNature">



From johnallengreen at berlios.de  Mon Jul 18 23:36:13 2005
From: johnallengreen at berlios.de (John Green at BerliOS)
Date: Mon, 18 Jul 2005 23:36:13 +0200
Subject: [Prorefactor-svn] r35 - trunk/org.prorefactor.lib/stringtemplate
Message-ID: <200507182136.j6ILaDuF022998@sheep.berlios.de>

Author: johnallengreen
Date: 2005-07-18 23:36:10 +0200 (Mon, 18 Jul 2005)
New Revision: 35

Modified:
   trunk/org.prorefactor.lib/stringtemplate/doc.html
   trunk/org.prorefactor.lib/stringtemplate/release.html
   trunk/org.prorefactor.lib/stringtemplate/src.zip
   trunk/org.prorefactor.lib/stringtemplate/stringtemplate.jar
Log:
Updated StringTemplate with the latest.

Modified: trunk/org.prorefactor.lib/stringtemplate/doc.html
===================================================================
--- trunk/org.prorefactor.lib/stringtemplate/doc.html	2005-07-15 00:26:51 UTC (rev 34)
+++ trunk/org.prorefactor.lib/stringtemplate/doc.html	2005-07-18 21:36:10 UTC (rev 35)
@@ -468,7 +468,7 @@
 StringTemplate a = new StringTemplate("$user.name$, $user.phone$");
 HashMap user = new HashMap();
 user.put("name", "Terence");
-user.put("name", "none-of-your-business");
+user.put("phone", "none-of-your-business");
 a.setAttribute("user", user);
 String results = a.toString();
 </PRE></FONT>

Modified: trunk/org.prorefactor.lib/stringtemplate/release.html
===================================================================
--- trunk/org.prorefactor.lib/stringtemplate/release.html	2005-07-15 00:26:51 UTC (rev 34)
+++ trunk/org.prorefactor.lib/stringtemplate/release.html	2005-07-18 21:36:10 UTC (rev 35)
@@ -1,10 +1,10 @@
 <HTML>
 <HEAD>
 <body bgcolor=#FFFFFF text=#000000>
-<title>StringTemplate 2.1 Release Notes</title>
+<title>StringTemplate 2.2 Release Notes</title>
 </HEAD>
 <BODY>
-<H1>StringTemplate 2.1 Release Notes</H1>
+<H1>StringTemplate 2.2 Release Notes</H1>
 
 
 <P>Brought to you by that maniac that brings you
@@ -17,85 +17,200 @@
 <A HREF="http://www.stringtemplate.org"><B>http://www.stringtemplate.org</B></A> <BR>
 (StringTemplate released under BSD License)
 
-<P>Version 2.1, January 22, 2005
+<P>Version 2.2, July ??, 2005
 
-<P>2.1 is a bug fix and small feature enhancement release.  2.1 should be
-a drop-in replacement for those using <TT>StringTemplate</TT> for websites.
-Some newline handling differences exist, particularly for
-those using the group file format.  (If you are generating code not
-html, you will note some newlines are missing that used to be there;
-see the use of <TT>&lt;\n&gt;</TT> below).
+<P>2.2 fixes a few bugs, but mainly 2.2 adds lots of great new features.
+2.The features were added in response to my needs building ANTLR v3's
+2.code generator and from feedback by StringTemplate users.
+
+<P>2.2 should be a drop-in replacement for those using <TT>StringTemplate</TT>
+for websites and code generation with a few minor potential
+incompatibilities.
 <H2>Enhancements</H2>
 
 <UL>
-<LI>Added 
+<LI>You can define arguments for anonymous templates now, which is much
+nicer that using <TT>it</TT> all the time:
 
 <FONT SIZE=2><PRE>
-/** Specify a StringTemplateWriter implementing class to use for
- *  filtering output
- */
-public void setStringTemplateWriter(Class c) {
-	userSpecifiedWriter = c;
-}
+$names:{n| &lt;b&gt;$n$&lt;/b&gt;&lt;br&gt;}; separator=","$
 </PRE></FONT>
 
 
-and made StringTemplate.toString() sensitive to it.
 </LI>
-<LI>added support for nonlocal file encodings; added property
-fileCharEncoding.  The template loading routines are now sensitive to
-this property. Defaults to the file.encoding system property.
+<LI>added parallel attribute iteration where you can apply a template to
+multiple lists of values; works for anonymous templates only:
+
+<FONT SIZE=2><PRE>
+{$names,phones:{n,p | $n$: $p$}$}
+</PRE></FONT>
+
+
+An error is generated if you have too many args for the number of
+parallel lists.  Iteration proceeds while at least one of the
+attributes (<TT>names</TT> or <TT>phones</TT>, in this case) has values.
 </LI>
-<LI>updated testing harness to be same as ANTLR 3.0's which is more
-sophisticated.
+<LI>added '<TT>+</TT>' cat operator for multi-valued attributes, yielding
+single, longer multi-valued attribute.  <TT>$mine+yours$</TT> is a new list
+with both elements; all of <TT>mine</TT> first then all of <TT>yours</TT>.
 </LI>
-<LI>addressed whitespace at begin/end of template .st file issue.
-Decided to let it continue to strip all front/back whitespace and then
-make you add it directly.  This is a simple rule and can be made to do
-what you want.  It is consistent with the strip newline before &gt;&gt;
-rule too.
+<LI>any template invocation assumes sole formal argument name if just
+one formal argument defined in target template.  For example, if you
+do <TT>$bold(name)$</TT> and <TT>bold</TT> has one formal argument, then it gets the
+value of name.  This works also for template application:
+
+<FONT SIZE=2><PRE>
+test(names) ::= "&lt;names:bold(),italics()&gt;"
+bold(x) ::= "*&lt;x&gt;*"
+italics(y) ::= "_&lt;y&gt;_"
+</PRE></FONT>
+
+
+<B>Note</B>: The binding of a value to the name of a sole formal argument is
+done dynamically so that indirect template invocation and lazy
+evaluation stuff works properly.  For example <TT>(templateName)(value)</TT>
+should work for different templates with differently-named (but sole)
+formal arguments.  See unit test
+testInvokeIndirectTemplateWithSingleFormalArgs().
 </LI>
-<LI>newlines ignored before &lt;else&gt; and &lt;endif&gt;.  Rule is: kill a single
-newline after &lt;if&gt;, &lt;&lt;, &lt;else&gt;, and &lt;endif&gt; (but for &lt;endif&gt; only if
-it's on a line by itself) . Kill newlines before &lt;else&gt; and &lt;endif&gt;
-and &gt;&gt;.  the newline immediately preceding &gt;&gt; in a template group file
-is tossed out just like the newline right after the &lt;&lt;
+<LI>Added operators to get first, rest, last attribute elements; e.g.,
+<TT>first(users)</TT> yields the first value of <TT>users</TT>.  <TT>rest(users)</TT>
+returns all elements of <TT>users</TT> except the first; it returns nothing
+if <TT>users</TT> is single-valued.  This introduces a function-like syntax,
+which necessitated the "<em>assign to sole formal arg</em>" functionality
+above that supports things like <TT>bold(name)</TT>.  You can combine
+operations to say things like <TT>first(rest(names))</TT> to get second
+element.  Can say <TT>first(mine+yours)</TT> to get the first of a combine
+list.  These operators work on any iterable object.  [<em>backward
+incompatible if you used first,last,tail as an attribute or template
+name</em>]
 </LI>
-<LI>added &lt;n&gt;, &lt;r&gt;, &lt;t&gt;, &lt; &gt; (space char)
+<LI>Added maps to StringTemplate groups.  For example,
+
+<FONT SIZE=2><PRE>
+typeInitMap ::= ["int"="0", "float"="0.0", default="null"]
+</PRE></FONT>
+
+
+then within a template you can refer to them <TT>&lt;typeInitMap.int&gt;</TT>,
+which returns "0".  Those strings are actually templates, but I can't
+really think of a use for that just yet. ;) If your type name is an
+attribute not a constant like int, then use
+<TT>&lt;typeInitMap.(typeName)&gt;</TT>.  The maps are defined in the group's scope
+and are visible if no attribute hides them.  For example, if you
+define a formal argument called <TT>typeInitMap</TT> in template <TT>foo</TT> then
+<TT>foo</TT> cannot see the map defined in the group (though you could pass
+it in, which would be the point).  If a name is not an attribute and
+it's not in the group's maps table, then the super group is consulted
+etc...  You may not redefine a map and it may not have the same name
+as a template in that group.  The <TT>default</TT> value is used if you use a
+key as a property that doesn't exist.  For example <TT>&lt;typeInitMap.foo&gt;</TT>
+returns "<TT>null</TT>".
 </LI>
-<LI>added $!...!$ and &lt;!...!&gt; comments (version 2.1b3)
+<LI>Added renderers per template and group.  Templates are inherited
+from super group.  New Interface <TT>AttributeRenderer</TT> defines how an
+object is rendered to String.  Here is a renderer that display <TT>Date</TT>
+objects that renders <TT>Calendar</TT> date objects tersely.
+
+<FONT SIZE=2><PRE>
+public class DateRenderer implements AttributeRenderer {
+	public String toString(Object o) {
+		SimpleDateFormat f = new SimpleDateFormat("yyyy.MM.dd");
+		return f.format(((Calendar)o).getTime());
+	}
+}
+...
+StringTemplate st =new StringTemplate(
+		"date: &lt;created&gt;",
+		AngleBracketTemplateLexer.class);
+st.setAttribute("created", new GregorianCalendar(2005, 07-1, 05));
+st.registerRenderer(GregorianCalendar.class, new DateRenderer());
+String expecting = "date: 2005.07.05";
+</PRE></FONT>
+
+
+You can set the renderer for a class either at the group level or the
+individual template level.  Thanks to Anton Keks for his suggestion and sample
+implementation.
 </LI>
-<LI>allow HashMap, Hashtable precisely but not Map in attribute.property lookup
+<LI>literal arguments are now templates not just strings. :)
+  You can even use <TT>&lt;&lt;...&gt;&gt;</TT> literals as argument now.
+  From the bug list:
+
+<FONT SIZE=2><PRE>
+Template inclusion expressions won't accept a nested template
+as an argument.  I'd like to be able to write &lt;foo(bar={...})&gt;, which
+would mean the same thing as &lt;foo(bar="":{...})&gt;.
+</PRE></FONT>
+
+
+Now you can do <TT>&lt;foo(bar="&lt;firstName&gt; &lt;lastName&gt;")&gt;</TT>.
 </LI>
-<LI>Attribute <TT>attributes$</TT> is a text string when lint mode is on that
-recursively dumps out types, properties, etc... (no values)
+<LI>added default values for formal arguments like
+
+<FONT SIZE=2><PRE>
+bold(x="empty") ::= ...
+</PRE></FONT>
+
+
+Note: because of lazy evaluation semantics, default value templates may refer
+to argument values.  Everything is evaluated after arg values are set.
+This works for invoked templates and templates you create with code.
 </LI>
-<LI>Templates track their embedded instances; can ask for embedded
+<LI>when calling another template, y, with formal arguments from within
+a template, x, none of the
+  x parameters are visible to y because the formal parameters force you to
+  define values.  This prevents surprises and makes it easy to ensure a
+  a value is empty unless you specifically set it for that template.  The
+  problem is that you need to factor templates sometimes and want to refine
+  behavior with a subclass or just invoke another shared template but
+  <TT>&lt;y()&gt;</TT> erases all of x's parameters.  Now, use <TT>&lt;y(...)&gt;</TT> as a
+  syntax to indicate y should inherit all values.  <TT>&lt;y(name="foo", ...)&gt;</TT>
+  would set one arg, but the others are inherited whereas 
+  <TT>&lt;y(name="foo")&gt;</TT> only has <TT>name</TT> set; others are empty. You can set
+manually with
+  <TT>StringTemplate.setPassThroughAttributes()</TT>.
 </LI>
-<LI>added isXXX accessor properties so x.special invokes x.getSpecial
-then x.isSpecial if not successful.
+<LI>When a property or argument is not found, you get a better error.  I show the
+template context (nested tree of templates); e.g.,
+
+<FONT SIZE=2><PRE>
+no such attribute: decisionNumber in template context
+ [outputFile lexer cyclicDFA cyclicDFAState cyclicDFAEdge lookaheadTest]
+</PRE></FONT>
+
+
 </LI>
-<LI>Empty output for a single attribute expression one a line by itself gets no newline (i.e., you don't get a blank line).
+<LI>added ability to use indirect property names.  <TT>$user.(propName)$</TT>
+evaluates <TT>(propName)</TT> to find the name of the property and then looks
+it up in user object whereas <TT>$user.foo$</TT> looks for literally property
+<TT>foo</TT> in <TT>user</TT> object.
 </LI>
 
 </UL>
 <H2>Bug Fixes</H2>
 
 <UL>
-<LI>bug in st.attribute...if no attributes table, got null ptr exception
+<LI>When you invoke foo(x=y), x must be an attribute of foo (well if you
+have formal args defined that is) and y is evaluated within the
+context of the surrounding template; more precisely, it's evaluated in
+the context of the actual template invocation (which can have
+predefined attributes like <TT>attr</TT>, <TT>it</TT>, and <TT>i</TT>).  It's weird, but
+<TT>foo(x=x)</TT> also makes sense.  See new unit test
+<TT>testArgEvaluationContext()</TT>.  This was not working before, though I
+thought it was!
 </LI>
-<LI>fixed n refs in TestStringTemplate unit tests to be portable newline reference.
+<LI>Collections, Maps, and Iterators that are non-null but have no elements
+  return false in conditionals; e.g., $if(users)$ is false if users is
+  an empty list.
 </LI>
-<LI>STG.templateIsDefinedInThisGroup -&gt; isDefinedInThisGroup
+<LI>To define an empty template, you had to write &lt;&lt;&gt;&gt;; "" didn't work.
 </LI>
-<LI>added isDefined(name) that checks whole hierarchy
+<LI>Previous release (2.1) notes forgot to mention that I added field access
+to public object fields now instead of via just accessors.
 </LI>
-<LI>trap all antlr generated errors now and send to listener.
-</LI>
-<LI>Made null indirect template generate nothing; used to generate
-null-ptr exception.
-</LI>
 
 </UL>
-</BODY>
+
+<P></BODY>
 </HTML>

Modified: trunk/org.prorefactor.lib/stringtemplate/src.zip
===================================================================
(Binary files differ)

Modified: trunk/org.prorefactor.lib/stringtemplate/stringtemplate.jar
===================================================================
(Binary files differ)



From johnallengreen at berlios.de  Mon Jul 18 23:42:14 2005
From: johnallengreen at berlios.de (John Green at BerliOS)
Date: Mon, 18 Jul 2005 23:42:14 +0200
Subject: [Prorefactor-svn] r36 - in trunk/org.prorefactor.core: data/tp01tests src/org/prorefactor/treeparser01
Message-ID: <200507182142.j6ILgEuo023349@sheep.berlios.de>

Author: johnallengreen
Date: 2005-07-18 23:42:03 +0200 (Mon, 18 Jul 2005)
New Revision: 36

Modified:
   trunk/org.prorefactor.core/data/tp01tests/test02.expect.txt
   trunk/org.prorefactor.core/data/tp01tests/test02.out.txt
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
Log:
Updated the Tree Parser with better handling for frame names.

Modified: trunk/org.prorefactor.core/data/tp01tests/test02.expect.txt
===================================================================
--- trunk/org.prorefactor.core/data/tp01tests/test02.expect.txt	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/data/tp01tests/test02.expect.txt	2005-07-18 21:42:03 UTC (rev 36)
@@ -217,7 +217,7 @@
 disable triggers for dump of  /* 0:sports2000.Customer */ customer.
 /* Does not create buffer-scope */
 --------------------------------
-form  /* 0:sports2000.BillTo */ billto with frame f1.
+form  /* 0:sports2000.BillTo */ billto with frame  /* 0:f1 */ f1.
 /* Does not create buffer-scope */
 --------------------------------
  /* buffers=sports2000.bcust */ function f1 returns character (buffer  /* 1:sports2000.bcust */ bcust for  /* 0:sports2000.Customer */ customer):
@@ -264,8 +264,8 @@
 /* Resolves to temp-table, even though can-find does not create buffer-scope */
 --------------------------------
 def temp-table  /* 0:billto */ billto field  /* 0:billto.myfield */ myfield as char.
-form  /* 0:billto */ billto with frame frame1.
-display with frame frame1.
+form  /* 0:billto */ billto with frame  /* 0:frame1 */ frame1.
+display with frame  /* 0:frame1 */ frame1.
 /* The temp-table goes into the frame */
 --------------------------------
  /* buffers=sports2000.bb1 */ 

Modified: trunk/org.prorefactor.core/data/tp01tests/test02.out.txt
===================================================================
--- trunk/org.prorefactor.core/data/tp01tests/test02.out.txt	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/data/tp01tests/test02.out.txt	2005-07-18 21:42:03 UTC (rev 36)
@@ -217,7 +217,7 @@
 disable triggers for dump of  /* 0:sports2000.Customer */ customer.
 /* Does not create buffer-scope */
 --------------------------------
-form  /* 0:sports2000.BillTo */ billto with frame f1.
+form  /* 0:sports2000.BillTo */ billto with frame  /* 0:f1 */ f1.
 /* Does not create buffer-scope */
 --------------------------------
  /* buffers=sports2000.bcust */ function f1 returns character (buffer  /* 1:sports2000.bcust */ bcust for  /* 0:sports2000.Customer */ customer):
@@ -264,8 +264,8 @@
 /* Resolves to temp-table, even though can-find does not create buffer-scope */
 --------------------------------
 def temp-table  /* 0:billto */ billto field  /* 0:billto.myfield */ myfield as char.
-form  /* 0:billto */ billto with frame frame1.
-display with frame frame1.
+form  /* 0:billto */ billto with frame  /* 0:frame1 */ frame1.
+display with frame  /* 0:frame1 */ frame1.
 /* The temp-table goes into the frame */
 --------------------------------
  /* buffers=sports2000.bb1 */ 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java	2005-07-18 21:42:03 UTC (rev 36)
@@ -13,8 +13,12 @@
 package org.prorefactor.treeparser01;
 
 
+import org.prorefactor.core.JPNode;
+import org.prorefactor.core.TokenTypes;
 import org.prorefactor.treeparser.Symbol;
+import org.prorefactor.treeparser.SymbolFactory;
 import org.prorefactor.treeparser.Variable;
+import org.prorefactor.widgettypes.Frame;
 
 import antlr.collections.AST;
 
@@ -133,6 +137,17 @@
 	 */
 	public void fnvExpression(AST exp) {}
 
+	
+	/** A DEFINE FRAME statement is different than a frame ref. The DEFINE FRAME statement will
+	 * always add the frame to the scope (possibly "hiding" a frame symbol that is defined at
+	 * an outer scope).
+	 * A frame reference will call this function if the frame does not already exist.
+	 */
+	public void frameDef(AST defAST, AST idAST) {}
+	
+	
+	public void frameRef(AST idAST) {}
+
 		
 	/** Called by the tree parser if a FUNCTION statement is found to be any
 	 * sort of a function FORWARD, IN, or MAP TO.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2005-07-18 21:42:03 UTC (rev 36)
@@ -42,6 +42,7 @@
 import org.prorefactor.treeparser.SymbolScopeRoot;
 import org.prorefactor.treeparser.TableBuffer;
 import org.prorefactor.treeparser.Variable;
+import org.prorefactor.widgettypes.Frame;
 
 import antlr.collections.AST;
 
@@ -407,7 +408,31 @@
 		return ((FieldRefNode)refAST).getDataType();
 	}
 
+	
+	/** A DEFINE FRAME statement is different than a frame ref. The DEFINE FRAME statement will
+	 * always add the frame to the scope (possibly "hiding" a frame symbol that is defined at
+	 * an outer scope).
+	 * A frame reference will call this function if the frame does not already exist.
+	 */
+	public void frameDef(AST defAST, AST idAST) {
+		JPNode defNode = (JPNode) defAST;
+		JPNode idNode = (JPNode) idAST;
+		Frame frame = (Frame) SymbolFactory.create(TokenTypes.FRAME, idNode.getText(), currentScope);
+		frame.setDefOrIdNode(defNode);
+		currSymbol = frame;
+		idNode.setLink(JPNode.SYMBOL, frame);
+		addToScope(frame);
+	}
+	
+	
+	public void frameRef(AST idAST) {
+		JPNode idNode = (JPNode) idAST;
+		Frame frame = (Frame) currentScope.lookupWidget(TokenTypes.FRAME, idNode.getText());
+		if (frame==null) frameDef(null, idAST);
+		else idNode.setLink(JPNode.SYMBOL, frame);
+	}
 
+	
 	/** If this function definition did not list any parameters, but it had a
 	 * function forward declaration, then we use the block and scope from that
 	 * declaration, in case it is where the parameters were listed.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2005-07-18 21:42:03 UTC (rev 36)
@@ -1581,7 +1581,7 @@
 		AST dostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST d = null;
 		
-		AST __t1113 = _t;
+		AST __t1107 = _t;
 		d = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DO);
 		_t = _t.getFirstChild();
@@ -1650,7 +1650,7 @@
 		}
 		}
 		{
-		_loop1117:
+		_loop1111:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_2.member(_t.getType()))) {
@@ -1658,7 +1658,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1117;
+				break _loop1111;
 			}
 			
 		} while (true);
@@ -1672,7 +1672,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t1113;
+		_t = __t1107;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -1682,7 +1682,7 @@
 		AST forstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST f = null;
 		
-		AST __t1228 = _t;
+		AST __t1222 = _t;
 		f = _t==ASTNULL ? null :(AST)_t;
 		match(_t,FOR);
 		_t = _t.getFirstChild();
@@ -1692,7 +1692,7 @@
 		for_record_spec(_t,CQ.INITWEAK);
 		_t = _retTree;
 		{
-		_loop1230:
+		_loop1224:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_2.member(_t.getType()))) {
@@ -1700,7 +1700,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1230;
+				break _loop1224;
 			}
 			
 		} while (true);
@@ -1714,7 +1714,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t1228;
+		_t = __t1222;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -1724,7 +1724,7 @@
 		AST repeatstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t2000 = _t;
+		AST __t1995 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,REPEAT);
 		_t = _t.getFirstChild();
@@ -1793,7 +1793,7 @@
 		}
 		}
 		{
-		_loop2004:
+		_loop1999:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_2.member(_t.getType()))) {
@@ -1801,7 +1801,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop2004;
+				break _loop1999;
 			}
 			
 		} while (true);
@@ -1815,7 +1815,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t2000;
+		_t = __t1995;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -2136,7 +2136,7 @@
 		AST ref = null;
 		AST id = null;
 		
-		AST __t124 = _t;
+		AST __t122 = _t;
 		ref = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Field_ref);
 		_t = _t.getFirstChild();
@@ -2167,27 +2167,20 @@
 		switch ( _t.getType()) {
 		case FRAME:
 		{
-			AST __t127 = _t;
-			AST tmp49_AST_in = (AST)_t;
-			match(_t,FRAME);
-			_t = _t.getFirstChild();
-			AST tmp50_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
-			_t = __t127;
-			_t = _t.getNextSibling();
+			frame_ref(_t);
+			_t = _retTree;
 			break;
 		}
 		case BROWSE:
 		{
-			AST __t128 = _t;
-			AST tmp51_AST_in = (AST)_t;
+			AST __t125 = _t;
+			AST tmp49_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getFirstChild();
-			AST tmp52_AST_in = (AST)_t;
+			AST tmp50_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t128;
+			_t = __t125;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -2223,7 +2216,7 @@
 		}
 		}
 		}
-		_t = __t124;
+		_t = __t122;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.field(ref, id, contextQualifier, 0);
@@ -2239,294 +2232,294 @@
 		switch ( _t.getType()) {
 		case TRUE_KW:
 		{
-			AST tmp53_AST_in = (AST)_t;
+			AST tmp51_AST_in = (AST)_t;
 			match(_t,TRUE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FALSE_KW:
 		{
-			AST tmp54_AST_in = (AST)_t;
+			AST tmp52_AST_in = (AST)_t;
 			match(_t,FALSE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YES:
 		{
-			AST tmp55_AST_in = (AST)_t;
+			AST tmp53_AST_in = (AST)_t;
 			match(_t,YES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NO:
 		{
-			AST tmp56_AST_in = (AST)_t;
+			AST tmp54_AST_in = (AST)_t;
 			match(_t,NO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNKNOWNVALUE:
 		{
-			AST tmp57_AST_in = (AST)_t;
+			AST tmp55_AST_in = (AST)_t;
 			match(_t,UNKNOWNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QSTRING:
 		{
-			AST tmp58_AST_in = (AST)_t;
+			AST tmp56_AST_in = (AST)_t;
 			match(_t,QSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEXDATE:
 		{
-			AST tmp59_AST_in = (AST)_t;
+			AST tmp57_AST_in = (AST)_t;
 			match(_t,LEXDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMBER:
 		{
-			AST tmp60_AST_in = (AST)_t;
+			AST tmp58_AST_in = (AST)_t;
 			match(_t,NUMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NULL_KW:
 		{
-			AST tmp61_AST_in = (AST)_t;
+			AST tmp59_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOWAIT:
 		{
-			AST tmp62_AST_in = (AST)_t;
+			AST tmp60_AST_in = (AST)_t;
 			match(_t,NOWAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARELOCK:
 		{
-			AST tmp63_AST_in = (AST)_t;
+			AST tmp61_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp64_AST_in = (AST)_t;
+			AST tmp62_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp65_AST_in = (AST)_t;
+			AST tmp63_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BIGENDIAN:
 		{
-			AST tmp66_AST_in = (AST)_t;
+			AST tmp64_AST_in = (AST)_t;
 			match(_t,BIGENDIAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDCASESENSITIVE:
 		{
-			AST tmp67_AST_in = (AST)_t;
+			AST tmp65_AST_in = (AST)_t;
 			match(_t,FINDCASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDGLOBAL:
 		{
-			AST tmp68_AST_in = (AST)_t;
+			AST tmp66_AST_in = (AST)_t;
 			match(_t,FINDGLOBAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDNEXTOCCURRENCE:
 		{
-			AST tmp69_AST_in = (AST)_t;
+			AST tmp67_AST_in = (AST)_t;
 			match(_t,FINDNEXTOCCURRENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDPREVOCCURRENCE:
 		{
-			AST tmp70_AST_in = (AST)_t;
+			AST tmp68_AST_in = (AST)_t;
 			match(_t,FINDPREVOCCURRENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDSELECT:
 		{
-			AST tmp71_AST_in = (AST)_t;
+			AST tmp69_AST_in = (AST)_t;
 			match(_t,FINDSELECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDWRAPAROUND:
 		{
-			AST tmp72_AST_in = (AST)_t;
+			AST tmp70_AST_in = (AST)_t;
 			match(_t,FINDWRAPAROUND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FUNCTIONCALLTYPE:
 		{
-			AST tmp73_AST_in = (AST)_t;
+			AST tmp71_AST_in = (AST)_t;
 			match(_t,FUNCTIONCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETATTRCALLTYPE:
 		{
-			AST tmp74_AST_in = (AST)_t;
+			AST tmp72_AST_in = (AST)_t;
 			match(_t,GETATTRCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCEDURECALLTYPE:
 		{
-			AST tmp75_AST_in = (AST)_t;
+			AST tmp73_AST_in = (AST)_t;
 			match(_t,PROCEDURECALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETATTRCALLTYPE:
 		{
-			AST tmp76_AST_in = (AST)_t;
+			AST tmp74_AST_in = (AST)_t;
 			match(_t,SETATTRCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HOSTBYTEORDER:
 		{
-			AST tmp77_AST_in = (AST)_t;
+			AST tmp75_AST_in = (AST)_t;
 			match(_t,HOSTBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LITTLEENDIAN:
 		{
-			AST tmp78_AST_in = (AST)_t;
+			AST tmp76_AST_in = (AST)_t;
 			match(_t,LITTLEENDIAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READAVAILABLE:
 		{
-			AST tmp79_AST_in = (AST)_t;
+			AST tmp77_AST_in = (AST)_t;
 			match(_t,READAVAILABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READEXACTNUM:
 		{
-			AST tmp80_AST_in = (AST)_t;
+			AST tmp78_AST_in = (AST)_t;
 			match(_t,READEXACTNUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWUNMODIFIED:
 		{
-			AST tmp81_AST_in = (AST)_t;
+			AST tmp79_AST_in = (AST)_t;
 			match(_t,ROWUNMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWDELETED:
 		{
-			AST tmp82_AST_in = (AST)_t;
+			AST tmp80_AST_in = (AST)_t;
 			match(_t,ROWDELETED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWMODIFIED:
 		{
-			AST tmp83_AST_in = (AST)_t;
+			AST tmp81_AST_in = (AST)_t;
 			match(_t,ROWMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWCREATED:
 		{
-			AST tmp84_AST_in = (AST)_t;
+			AST tmp82_AST_in = (AST)_t;
 			match(_t,ROWCREATED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXCOMPLETE:
 		{
-			AST tmp85_AST_in = (AST)_t;
+			AST tmp83_AST_in = (AST)_t;
 			match(_t,SAXCOMPLETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXPARSERERROR:
 		{
-			AST tmp86_AST_in = (AST)_t;
+			AST tmp84_AST_in = (AST)_t;
 			match(_t,SAXPARSERERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXRUNNING:
 		{
-			AST tmp87_AST_in = (AST)_t;
+			AST tmp85_AST_in = (AST)_t;
 			match(_t,SAXRUNNING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXUNINITIALIZED:
 		{
-			AST tmp88_AST_in = (AST)_t;
+			AST tmp86_AST_in = (AST)_t;
 			match(_t,SAXUNINITIALIZED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCHSELF:
 		{
-			AST tmp89_AST_in = (AST)_t;
+			AST tmp87_AST_in = (AST)_t;
 			match(_t,SEARCHSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCHTARGET:
 		{
-			AST tmp90_AST_in = (AST)_t;
+			AST tmp88_AST_in = (AST)_t;
 			match(_t,SEARCHTARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWDELAYEDMINIMIZE:
 		{
-			AST tmp91_AST_in = (AST)_t;
+			AST tmp89_AST_in = (AST)_t;
 			match(_t,WINDOWDELAYEDMINIMIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWMINIMIZED:
 		{
-			AST tmp92_AST_in = (AST)_t;
+			AST tmp90_AST_in = (AST)_t;
 			match(_t,WINDOWMINIMIZED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWNORMAL:
 		{
-			AST tmp93_AST_in = (AST)_t;
+			AST tmp91_AST_in = (AST)_t;
 			match(_t,WINDOWNORMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWMAXIMIZED:
 		{
-			AST tmp94_AST_in = (AST)_t;
+			AST tmp92_AST_in = (AST)_t;
 			match(_t,WINDOWMAXIMIZED);
 			_t = _t.getNextSibling();
 			break;
@@ -2543,53 +2536,53 @@
 		
 		AST querytuningphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1911 = _t;
-		AST tmp95_AST_in = (AST)_t;
+		AST __t1906 = _t;
+		AST tmp93_AST_in = (AST)_t;
 		match(_t,QUERYTUNING);
 		_t = _t.getFirstChild();
-		AST tmp96_AST_in = (AST)_t;
+		AST tmp94_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
-		_loop1918:
+		_loop1913:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ARRAYMESSAGE:
 			{
-				AST tmp97_AST_in = (AST)_t;
+				AST tmp95_AST_in = (AST)_t;
 				match(_t,ARRAYMESSAGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOARRAYMESSAGE:
 			{
-				AST tmp98_AST_in = (AST)_t;
+				AST tmp96_AST_in = (AST)_t;
 				match(_t,NOARRAYMESSAGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BINDWHERE:
 			{
-				AST tmp99_AST_in = (AST)_t;
+				AST tmp97_AST_in = (AST)_t;
 				match(_t,BINDWHERE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOBINDWHERE:
 			{
-				AST tmp100_AST_in = (AST)_t;
+				AST tmp98_AST_in = (AST)_t;
 				match(_t,NOBINDWHERE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CACHESIZE:
 			{
-				AST __t1913 = _t;
-				AST tmp101_AST_in = (AST)_t;
+				AST __t1908 = _t;
+				AST tmp99_AST_in = (AST)_t;
 				match(_t,CACHESIZE);
 				_t = _t.getFirstChild();
-				AST tmp102_AST_in = (AST)_t;
+				AST tmp100_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				{
@@ -2597,14 +2590,14 @@
 				switch ( _t.getType()) {
 				case ROW:
 				{
-					AST tmp103_AST_in = (AST)_t;
+					AST tmp101_AST_in = (AST)_t;
 					match(_t,ROW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BYTE:
 				{
-					AST tmp104_AST_in = (AST)_t;
+					AST tmp102_AST_in = (AST)_t;
 					match(_t,BYTE);
 					_t = _t.getNextSibling();
 					break;
@@ -2619,14 +2612,14 @@
 				}
 				}
 				}
-				_t = __t1913;
+				_t = __t1908;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEBUG:
 			{
-				AST __t1915 = _t;
-				AST tmp105_AST_in = (AST)_t;
+				AST __t1910 = _t;
+				AST tmp103_AST_in = (AST)_t;
 				match(_t,DEBUG);
 				_t = _t.getFirstChild();
 				{
@@ -2634,56 +2627,56 @@
 				switch ( _t.getType()) {
 				case SQL:
 				{
-					AST tmp106_AST_in = (AST)_t;
+					AST tmp104_AST_in = (AST)_t;
 					match(_t,SQL);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EXTENDED:
 				{
-					AST tmp107_AST_in = (AST)_t;
+					AST tmp105_AST_in = (AST)_t;
 					match(_t,EXTENDED);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case CURSOR:
 				{
-					AST tmp108_AST_in = (AST)_t;
+					AST tmp106_AST_in = (AST)_t;
 					match(_t,CURSOR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DATABIND:
 				{
-					AST tmp109_AST_in = (AST)_t;
+					AST tmp107_AST_in = (AST)_t;
 					match(_t,DATABIND);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERFORMANCE:
 				{
-					AST tmp110_AST_in = (AST)_t;
+					AST tmp108_AST_in = (AST)_t;
 					match(_t,PERFORMANCE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case VERBOSE:
 				{
-					AST tmp111_AST_in = (AST)_t;
+					AST tmp109_AST_in = (AST)_t;
 					match(_t,VERBOSE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SUMMARY:
 				{
-					AST tmp112_AST_in = (AST)_t;
+					AST tmp110_AST_in = (AST)_t;
 					match(_t,SUMMARY);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case NUMBER:
 				{
-					AST tmp113_AST_in = (AST)_t;
+					AST tmp111_AST_in = (AST)_t;
 					match(_t,NUMBER);
 					_t = _t.getNextSibling();
 					break;
@@ -2698,117 +2691,117 @@
 				}
 				}
 				}
-				_t = __t1915;
+				_t = __t1910;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NODEBUG:
 			{
-				AST tmp114_AST_in = (AST)_t;
+				AST tmp112_AST_in = (AST)_t;
 				match(_t,NODEBUG);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFERLOBFETCH:
 			{
-				AST tmp115_AST_in = (AST)_t;
+				AST tmp113_AST_in = (AST)_t;
 				match(_t,DEFERLOBFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case HINT:
 			{
-				AST __t1917 = _t;
-				AST tmp116_AST_in = (AST)_t;
+				AST __t1912 = _t;
+				AST tmp114_AST_in = (AST)_t;
 				match(_t,HINT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1917;
+				_t = __t1912;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INDEXHINT:
 			{
-				AST tmp117_AST_in = (AST)_t;
+				AST tmp115_AST_in = (AST)_t;
 				match(_t,INDEXHINT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOINDEXHINT:
 			{
-				AST tmp118_AST_in = (AST)_t;
+				AST tmp116_AST_in = (AST)_t;
 				match(_t,NOINDEXHINT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case JOINBYSQLDB:
 			{
-				AST tmp119_AST_in = (AST)_t;
+				AST tmp117_AST_in = (AST)_t;
 				match(_t,JOINBYSQLDB);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOJOINBYSQLDB:
 			{
-				AST tmp120_AST_in = (AST)_t;
+				AST tmp118_AST_in = (AST)_t;
 				match(_t,NOJOINBYSQLDB);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LOOKAHEAD:
 			{
-				AST tmp121_AST_in = (AST)_t;
+				AST tmp119_AST_in = (AST)_t;
 				match(_t,LOOKAHEAD);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOLOOKAHEAD:
 			{
-				AST tmp122_AST_in = (AST)_t;
+				AST tmp120_AST_in = (AST)_t;
 				match(_t,NOLOOKAHEAD);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ORDEREDJOIN:
 			{
-				AST tmp123_AST_in = (AST)_t;
+				AST tmp121_AST_in = (AST)_t;
 				match(_t,ORDEREDJOIN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REVERSEFROM:
 			{
-				AST tmp124_AST_in = (AST)_t;
+				AST tmp122_AST_in = (AST)_t;
 				match(_t,REVERSEFROM);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SEPARATECONNECTION:
 			{
-				AST tmp125_AST_in = (AST)_t;
+				AST tmp123_AST_in = (AST)_t;
 				match(_t,SEPARATECONNECTION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOSEPARATECONNECTION:
 			{
-				AST tmp126_AST_in = (AST)_t;
+				AST tmp124_AST_in = (AST)_t;
 				match(_t,NOSEPARATECONNECTION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1918;
+				break _loop1913;
 			}
 			}
 		} while (true);
 		}
-		AST tmp127_AST_in = (AST)_t;
+		AST tmp125_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1911;
+		_t = __t1906;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -2817,8 +2810,8 @@
 		
 		AST on___phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1708 = _t;
-		AST tmp128_AST_in = (AST)_t;
+		AST __t1703 = _t;
+		AST tmp126_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getFirstChild();
 		{
@@ -2826,28 +2819,28 @@
 		switch ( _t.getType()) {
 		case ENDKEY:
 		{
-			AST tmp129_AST_in = (AST)_t;
+			AST tmp127_AST_in = (AST)_t;
 			match(_t,ENDKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERROR:
 		{
-			AST tmp130_AST_in = (AST)_t;
+			AST tmp128_AST_in = (AST)_t;
 			match(_t,ERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOP:
 		{
-			AST tmp131_AST_in = (AST)_t;
+			AST tmp129_AST_in = (AST)_t;
 			match(_t,STOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUIT:
 		{
-			AST tmp132_AST_in = (AST)_t;
+			AST tmp130_AST_in = (AST)_t;
 			match(_t,QUIT);
 			_t = _t.getNextSibling();
 			break;
@@ -2863,8 +2856,8 @@
 		switch ( _t.getType()) {
 		case UNDO:
 		{
-			AST __t1711 = _t;
-			AST tmp133_AST_in = (AST)_t;
+			AST __t1706 = _t;
+			AST tmp131_AST_in = (AST)_t;
 			match(_t,UNDO);
 			_t = _t.getFirstChild();
 			{
@@ -2872,7 +2865,7 @@
 			switch ( _t.getType()) {
 			case BLOCK_LABEL:
 			{
-				AST tmp134_AST_in = (AST)_t;
+				AST tmp132_AST_in = (AST)_t;
 				match(_t,BLOCK_LABEL);
 				_t = _t.getNextSibling();
 				break;
@@ -2887,7 +2880,7 @@
 			}
 			}
 			}
-			_t = __t1711;
+			_t = __t1706;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -2907,7 +2900,7 @@
 		switch ( _t.getType()) {
 		case COMMA:
 		{
-			AST tmp135_AST_in = (AST)_t;
+			AST tmp133_AST_in = (AST)_t;
 			match(_t,COMMA);
 			_t = _t.getNextSibling();
 			{
@@ -2915,8 +2908,8 @@
 			switch ( _t.getType()) {
 			case LEAVE:
 			{
-				AST __t1715 = _t;
-				AST tmp136_AST_in = (AST)_t;
+				AST __t1710 = _t;
+				AST tmp134_AST_in = (AST)_t;
 				match(_t,LEAVE);
 				_t = _t.getFirstChild();
 				{
@@ -2924,7 +2917,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp137_AST_in = (AST)_t;
+					AST tmp135_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -2939,14 +2932,14 @@
 				}
 				}
 				}
-				_t = __t1715;
+				_t = __t1710;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEXT:
 			{
-				AST __t1717 = _t;
-				AST tmp138_AST_in = (AST)_t;
+				AST __t1712 = _t;
+				AST tmp136_AST_in = (AST)_t;
 				match(_t,NEXT);
 				_t = _t.getFirstChild();
 				{
@@ -2954,7 +2947,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp139_AST_in = (AST)_t;
+					AST tmp137_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -2969,14 +2962,14 @@
 				}
 				}
 				}
-				_t = __t1717;
+				_t = __t1712;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETRY:
 			{
-				AST __t1719 = _t;
-				AST tmp140_AST_in = (AST)_t;
+				AST __t1714 = _t;
+				AST tmp138_AST_in = (AST)_t;
 				match(_t,RETRY);
 				_t = _t.getFirstChild();
 				{
@@ -2984,7 +2977,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp141_AST_in = (AST)_t;
+					AST tmp139_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -2999,14 +2992,14 @@
 				}
 				}
 				}
-				_t = __t1719;
+				_t = __t1714;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURN:
 			{
-				AST __t1721 = _t;
-				AST tmp142_AST_in = (AST)_t;
+				AST __t1716 = _t;
+				AST tmp140_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getFirstChild();
 				{
@@ -3022,7 +3015,7 @@
 				}
 				
 				}
-				_t = __t1721;
+				_t = __t1716;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -3044,7 +3037,7 @@
 		}
 		}
 		}
-		_t = __t1708;
+		_t = __t1703;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -3053,19 +3046,19 @@
 		
 		AST framephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1280 = _t;
-		AST tmp143_AST_in = (AST)_t;
+		AST __t1276 = _t;
+		AST tmp141_AST_in = (AST)_t;
 		match(_t,WITH);
 		_t = _t.getFirstChild();
 		{
-		_loop1310:
+		_loop1305:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ACCUM:
 			{
-				AST __t1282 = _t;
-				AST tmp144_AST_in = (AST)_t;
+				AST __t1278 = _t;
+				AST tmp142_AST_in = (AST)_t;
 				match(_t,ACCUM);
 				_t = _t.getFirstChild();
 				{
@@ -3081,65 +3074,65 @@
 				}
 				
 				}
-				_t = __t1282;
+				_t = __t1278;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ATTRSPACE:
 			{
-				AST tmp145_AST_in = (AST)_t;
+				AST tmp143_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp146_AST_in = (AST)_t;
+				AST tmp144_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CANCELBUTTON:
 			{
-				AST __t1284 = _t;
-				AST tmp147_AST_in = (AST)_t;
+				AST __t1280 = _t;
+				AST tmp145_AST_in = (AST)_t;
 				match(_t,CANCELBUTTON);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t1284;
+				_t = __t1280;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CENTERED:
 			{
-				AST tmp148_AST_in = (AST)_t;
+				AST tmp146_AST_in = (AST)_t;
 				match(_t,CENTERED);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMN:
 			{
-				AST __t1285 = _t;
-				AST tmp149_AST_in = (AST)_t;
+				AST __t1281 = _t;
+				AST tmp147_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1285;
+				_t = __t1281;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CONTEXTHELP:
 			{
-				AST tmp150_AST_in = (AST)_t;
+				AST tmp148_AST_in = (AST)_t;
 				match(_t,CONTEXTHELP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CONTEXTHELPFILE:
 			{
-				AST tmp151_AST_in = (AST)_t;
+				AST tmp149_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPFILE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -3148,369 +3141,362 @@
 			}
 			case DEFAULTBUTTON:
 			{
-				AST __t1286 = _t;
-				AST tmp152_AST_in = (AST)_t;
+				AST __t1282 = _t;
+				AST tmp150_AST_in = (AST)_t;
 				match(_t,DEFAULTBUTTON);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t1286;
+				_t = __t1282;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EXPORT:
 			{
-				AST tmp153_AST_in = (AST)_t;
+				AST tmp151_AST_in = (AST)_t;
 				match(_t,EXPORT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FITLASTCOLUMN:
 			{
-				AST tmp154_AST_in = (AST)_t;
+				AST tmp152_AST_in = (AST)_t;
 				match(_t,FITLASTCOLUMN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t1287 = _t;
-				AST tmp155_AST_in = (AST)_t;
+				AST __t1283 = _t;
+				AST tmp153_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1287;
+				_t = __t1283;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONTBASEDLAYOUT:
 			{
-				AST tmp156_AST_in = (AST)_t;
+				AST tmp154_AST_in = (AST)_t;
 				match(_t,FONTBASEDLAYOUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FRAME:
 			{
-				AST __t1288 = _t;
-				AST tmp157_AST_in = (AST)_t;
-				match(_t,FRAME);
-				_t = _t.getFirstChild();
-				AST tmp158_AST_in = (AST)_t;
-				match(_t,ID);
-				_t = _t.getNextSibling();
-				_t = __t1288;
-				_t = _t.getNextSibling();
+				frame_ref(_t);
+				_t = _retTree;
 				break;
 			}
 			case LABELFONT:
 			{
-				AST __t1289 = _t;
-				AST tmp159_AST_in = (AST)_t;
+				AST __t1284 = _t;
+				AST tmp155_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1289;
+				_t = __t1284;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELDCOLOR:
 			{
-				AST __t1290 = _t;
-				AST tmp160_AST_in = (AST)_t;
+				AST __t1285 = _t;
+				AST tmp156_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1290;
+				_t = __t1285;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFGCOLOR:
 			{
-				AST __t1291 = _t;
-				AST tmp161_AST_in = (AST)_t;
+				AST __t1286 = _t;
+				AST tmp157_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1291;
+				_t = __t1286;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELBGCOLOR:
 			{
-				AST __t1292 = _t;
-				AST tmp162_AST_in = (AST)_t;
+				AST __t1287 = _t;
+				AST tmp158_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1292;
+				_t = __t1287;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MULTIPLE:
 			{
-				AST tmp163_AST_in = (AST)_t;
+				AST tmp159_AST_in = (AST)_t;
 				match(_t,MULTIPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SINGLE:
 			{
-				AST tmp164_AST_in = (AST)_t;
+				AST tmp160_AST_in = (AST)_t;
 				match(_t,SINGLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SEPARATORS:
 			{
-				AST tmp165_AST_in = (AST)_t;
+				AST tmp161_AST_in = (AST)_t;
 				match(_t,SEPARATORS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOSEPARATORS:
 			{
-				AST tmp166_AST_in = (AST)_t;
+				AST tmp162_AST_in = (AST)_t;
 				match(_t,NOSEPARATORS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOASSIGN:
 			{
-				AST tmp167_AST_in = (AST)_t;
+				AST tmp163_AST_in = (AST)_t;
 				match(_t,NOASSIGN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOROWMARKERS:
 			{
-				AST tmp168_AST_in = (AST)_t;
+				AST tmp164_AST_in = (AST)_t;
 				match(_t,NOROWMARKERS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOSCROLLBARVERTICAL:
 			{
-				AST tmp169_AST_in = (AST)_t;
+				AST tmp165_AST_in = (AST)_t;
 				match(_t,NOSCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp170_AST_in = (AST)_t;
+				AST tmp166_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROWHEIGHTCHARS:
 			{
-				AST __t1293 = _t;
-				AST tmp171_AST_in = (AST)_t;
+				AST __t1288 = _t;
+				AST tmp167_AST_in = (AST)_t;
 				match(_t,ROWHEIGHTCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1293;
+				_t = __t1288;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROWHEIGHTPIXELS:
 			{
-				AST __t1294 = _t;
-				AST tmp172_AST_in = (AST)_t;
+				AST __t1289 = _t;
+				AST tmp168_AST_in = (AST)_t;
 				match(_t,ROWHEIGHTPIXELS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1294;
+				_t = __t1289;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EXPANDABLE:
 			{
-				AST tmp173_AST_in = (AST)_t;
+				AST tmp169_AST_in = (AST)_t;
 				match(_t,EXPANDABLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPTARGET:
 			{
-				AST tmp174_AST_in = (AST)_t;
+				AST tmp170_AST_in = (AST)_t;
 				match(_t,DROPTARGET);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOAUTOVALIDATE:
 			{
-				AST tmp175_AST_in = (AST)_t;
+				AST tmp171_AST_in = (AST)_t;
 				match(_t,NOAUTOVALIDATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCOLUMNSCROLLING:
 			{
-				AST tmp176_AST_in = (AST)_t;
+				AST tmp172_AST_in = (AST)_t;
 				match(_t,NOCOLUMNSCROLLING);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case KEEPTABORDER:
 			{
-				AST tmp177_AST_in = (AST)_t;
+				AST tmp173_AST_in = (AST)_t;
 				match(_t,KEEPTABORDER);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOBOX:
 			{
-				AST tmp178_AST_in = (AST)_t;
+				AST tmp174_AST_in = (AST)_t;
 				match(_t,NOBOX);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOEMPTYSPACE:
 			{
-				AST tmp179_AST_in = (AST)_t;
+				AST tmp175_AST_in = (AST)_t;
 				match(_t,NOEMPTYSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOHIDE:
 			{
-				AST tmp180_AST_in = (AST)_t;
+				AST tmp176_AST_in = (AST)_t;
 				match(_t,NOHIDE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOLABELS:
 			{
-				AST tmp181_AST_in = (AST)_t;
+				AST tmp177_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEDICTEXPS:
 			{
-				AST tmp182_AST_in = (AST)_t;
+				AST tmp178_AST_in = (AST)_t;
 				match(_t,USEDICTEXPS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOVALIDATE:
 			{
-				AST tmp183_AST_in = (AST)_t;
+				AST tmp179_AST_in = (AST)_t;
 				match(_t,NOVALIDATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOHELP:
 			{
-				AST tmp184_AST_in = (AST)_t;
+				AST tmp180_AST_in = (AST)_t;
 				match(_t,NOHELP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOUNDERLINE:
 			{
-				AST tmp185_AST_in = (AST)_t;
+				AST tmp181_AST_in = (AST)_t;
 				match(_t,NOUNDERLINE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OVERLAY:
 			{
-				AST tmp186_AST_in = (AST)_t;
+				AST tmp182_AST_in = (AST)_t;
 				match(_t,OVERLAY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PAGEBOTTOM:
 			{
-				AST tmp187_AST_in = (AST)_t;
+				AST tmp183_AST_in = (AST)_t;
 				match(_t,PAGEBOTTOM);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PAGETOP:
 			{
-				AST tmp188_AST_in = (AST)_t;
+				AST tmp184_AST_in = (AST)_t;
 				match(_t,PAGETOP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOTABSTOP:
 			{
-				AST tmp189_AST_in = (AST)_t;
+				AST tmp185_AST_in = (AST)_t;
 				match(_t,NOTABSTOP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETAIN:
 			{
-				AST __t1295 = _t;
-				AST tmp190_AST_in = (AST)_t;
+				AST __t1290 = _t;
+				AST tmp186_AST_in = (AST)_t;
 				match(_t,RETAIN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1295;
+				_t = __t1290;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROW:
 			{
-				AST __t1296 = _t;
-				AST tmp191_AST_in = (AST)_t;
+				AST __t1291 = _t;
+				AST tmp187_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1296;
+				_t = __t1291;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCREENIO:
 			{
-				AST tmp192_AST_in = (AST)_t;
+				AST tmp188_AST_in = (AST)_t;
 				match(_t,SCREENIO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case STREAMIO:
 			{
-				AST tmp193_AST_in = (AST)_t;
+				AST tmp189_AST_in = (AST)_t;
 				match(_t,STREAMIO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLL:
 			{
-				AST __t1297 = _t;
-				AST tmp194_AST_in = (AST)_t;
+				AST __t1292 = _t;
+				AST tmp190_AST_in = (AST)_t;
 				match(_t,SCROLL);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1297;
+				_t = __t1292;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLABLE:
 			{
-				AST tmp195_AST_in = (AST)_t;
+				AST tmp191_AST_in = (AST)_t;
 				match(_t,SCROLLABLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SIDELABELS:
 			{
-				AST tmp196_AST_in = (AST)_t;
+				AST tmp192_AST_in = (AST)_t;
 				match(_t,SIDELABELS);
 				_t = _t.getNextSibling();
 				break;
@@ -3523,7 +3509,7 @@
 			}
 			case THREED:
 			{
-				AST tmp197_AST_in = (AST)_t;
+				AST tmp193_AST_in = (AST)_t;
 				match(_t,THREED);
 				_t = _t.getNextSibling();
 				break;
@@ -3536,43 +3522,43 @@
 			}
 			case TOPONLY:
 			{
-				AST tmp198_AST_in = (AST)_t;
+				AST tmp194_AST_in = (AST)_t;
 				match(_t,TOPONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USETEXT:
 			{
-				AST tmp199_AST_in = (AST)_t;
+				AST tmp195_AST_in = (AST)_t;
 				match(_t,USETEXT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case V6FRAME:
 			{
-				AST tmp200_AST_in = (AST)_t;
+				AST tmp196_AST_in = (AST)_t;
 				match(_t,V6FRAME);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEREVVIDEO:
 			{
-				AST tmp201_AST_in = (AST)_t;
+				AST tmp197_AST_in = (AST)_t;
 				match(_t,USEREVVIDEO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEUNDERLINE:
 			{
-				AST tmp202_AST_in = (AST)_t;
+				AST tmp198_AST_in = (AST)_t;
 				match(_t,USEUNDERLINE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case VIEWAS:
 			{
-				AST __t1298 = _t;
-				AST tmp203_AST_in = (AST)_t;
+				AST __t1293 = _t;
+				AST tmp199_AST_in = (AST)_t;
 				match(_t,VIEWAS);
 				_t = _t.getFirstChild();
 				{
@@ -3580,8 +3566,8 @@
 				switch ( _t.getType()) {
 				case DIALOGBOX:
 				{
-					AST __t1300 = _t;
-					AST tmp204_AST_in = (AST)_t;
+					AST __t1295 = _t;
+					AST tmp200_AST_in = (AST)_t;
 					match(_t,DIALOGBOX);
 					_t = _t.getFirstChild();
 					{
@@ -3589,7 +3575,7 @@
 					switch ( _t.getType()) {
 					case DIALOGHELP:
 					{
-						AST tmp205_AST_in = (AST)_t;
+						AST tmp201_AST_in = (AST)_t;
 						match(_t,DIALOGHELP);
 						_t = _t.getNextSibling();
 						{
@@ -3617,28 +3603,28 @@
 					}
 					}
 					}
-					_t = __t1300;
+					_t = __t1295;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case MESSAGELINE:
 				{
-					AST tmp206_AST_in = (AST)_t;
+					AST tmp202_AST_in = (AST)_t;
 					match(_t,MESSAGELINE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STATUSBAR:
 				{
-					AST tmp207_AST_in = (AST)_t;
+					AST tmp203_AST_in = (AST)_t;
 					match(_t,STATUSBAR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOOLBAR:
 				{
-					AST __t1303 = _t;
-					AST tmp208_AST_in = (AST)_t;
+					AST __t1298 = _t;
+					AST tmp204_AST_in = (AST)_t;
 					match(_t,TOOLBAR);
 					_t = _t.getFirstChild();
 					{
@@ -3646,7 +3632,7 @@
 					switch ( _t.getType()) {
 					case ATTACHMENT:
 					{
-						AST tmp209_AST_in = (AST)_t;
+						AST tmp205_AST_in = (AST)_t;
 						match(_t,ATTACHMENT);
 						_t = _t.getNextSibling();
 						{
@@ -3654,28 +3640,28 @@
 						switch ( _t.getType()) {
 						case TOP:
 						{
-							AST tmp210_AST_in = (AST)_t;
+							AST tmp206_AST_in = (AST)_t;
 							match(_t,TOP);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case BOTTOM:
 						{
-							AST tmp211_AST_in = (AST)_t;
+							AST tmp207_AST_in = (AST)_t;
 							match(_t,BOTTOM);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case LEFT:
 						{
-							AST tmp212_AST_in = (AST)_t;
+							AST tmp208_AST_in = (AST)_t;
 							match(_t,LEFT);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case RIGHT:
 						{
-							AST tmp213_AST_in = (AST)_t;
+							AST tmp209_AST_in = (AST)_t;
 							match(_t,RIGHT);
 							_t = _t.getNextSibling();
 							break;
@@ -3698,7 +3684,7 @@
 					}
 					}
 					}
-					_t = __t1303;
+					_t = __t1298;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -3708,34 +3694,34 @@
 				}
 				}
 				}
-				_t = __t1298;
+				_t = __t1293;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTH:
 			{
-				AST __t1306 = _t;
-				AST tmp214_AST_in = (AST)_t;
+				AST __t1301 = _t;
+				AST tmp210_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1306;
+				_t = __t1301;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1307 = _t;
-				AST tmp215_AST_in = (AST)_t;
+				AST __t1302 = _t;
+				AST tmp211_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp216_AST_in = (AST)_t;
+				AST tmp212_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1307;
+				_t = __t1302;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -3771,56 +3757,56 @@
 			}
 			case With_columns:
 			{
-				AST __t1308 = _t;
-				AST tmp217_AST_in = (AST)_t;
+				AST __t1303 = _t;
+				AST tmp213_AST_in = (AST)_t;
 				match(_t,With_columns);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				AST tmp218_AST_in = (AST)_t;
+				AST tmp214_AST_in = (AST)_t;
 				match(_t,COLUMNS);
 				_t = _t.getNextSibling();
-				_t = __t1308;
+				_t = __t1303;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case With_down:
 			{
-				AST __t1309 = _t;
-				AST tmp219_AST_in = (AST)_t;
+				AST __t1304 = _t;
+				AST tmp215_AST_in = (AST)_t;
 				match(_t,With_down);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				AST tmp220_AST_in = (AST)_t;
+				AST tmp216_AST_in = (AST)_t;
 				match(_t,DOWN);
 				_t = _t.getNextSibling();
-				_t = __t1309;
+				_t = __t1304;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DOWN:
 			{
-				AST tmp221_AST_in = (AST)_t;
+				AST tmp217_AST_in = (AST)_t;
 				match(_t,DOWN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WITH:
 			{
-				AST tmp222_AST_in = (AST)_t;
+				AST tmp218_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1310;
+				break _loop1305;
 			}
 			}
 		} while (true);
 		}
-		_t = __t1280;
+		_t = __t1276;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -3829,8 +3815,8 @@
 		
 		AST collatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t393 = _t;
-		AST tmp223_AST_in = (AST)_t;
+		AST __t387 = _t;
+		AST tmp219_AST_in = (AST)_t;
 		match(_t,COLLATE);
 		_t = _t.getFirstChild();
 		funargs(_t);
@@ -3840,7 +3826,7 @@
 		switch ( _t.getType()) {
 		case DESCENDING:
 		{
-			AST tmp224_AST_in = (AST)_t;
+			AST tmp220_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
@@ -3855,7 +3841,7 @@
 		}
 		}
 		}
-		_t = __t393;
+		_t = __t387;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -3865,7 +3851,7 @@
 		AST block_preselect_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t34 = _t;
-		AST tmp225_AST_in = (AST)_t;
+		AST tmp221_AST_in = (AST)_t;
 		match(_t,PRESELECT);
 		_t = _t.getFirstChild();
 		for_record_spec(_t,CQ.INITWEAK);
@@ -3907,7 +3893,7 @@
 		}
 		}
 		}
-		AST __t1233 = _t;
+		AST __t1227 = _t;
 		rp1 = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -3916,14 +3902,14 @@
 		}
 		recordphrase(_t);
 		_t = _retTree;
-		_t = __t1233;
+		_t = __t1227;
 		_t = _t.getNextSibling();
 		{
-		_loop1237:
+		_loop1231:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp226_AST_in = (AST)_t;
+				AST tmp222_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -3950,7 +3936,7 @@
 				}
 				}
 				}
-				AST __t1236 = _t;
+				AST __t1230 = _t;
 				rp2 = _t==ASTNULL ? null :(AST)_t;
 				match(_t,RECORD_NAME);
 				_t = _t.getFirstChild();
@@ -3959,11 +3945,11 @@
 				}
 				recordphrase(_t);
 				_t = _retTree;
-				_t = __t1236;
+				_t = __t1230;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1237;
+				break _loop1231;
 			}
 			
 		} while (true);
@@ -3979,7 +3965,7 @@
 		switch ( _t.getType()) {
 		case AAMSG:
 		{
-			AST tmp227_AST_in = (AST)_t;
+			AST tmp223_AST_in = (AST)_t;
 			match(_t,AAMSG);
 			_t = _t.getNextSibling();
 			break;
@@ -3992,7 +3978,7 @@
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp228_AST_in = (AST)_t;
+			AST tmp224_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
@@ -4125,322 +4111,322 @@
 		}
 		case PAGESIZE_KW:
 		{
-			AST tmp229_AST_in = (AST)_t;
+			AST tmp225_AST_in = (AST)_t;
 			match(_t,PAGESIZE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LINECOUNTER:
 		{
-			AST tmp230_AST_in = (AST)_t;
+			AST tmp226_AST_in = (AST)_t;
 			match(_t,LINECOUNTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGENUMBER:
 		{
-			AST tmp231_AST_in = (AST)_t;
+			AST tmp227_AST_in = (AST)_t;
 			match(_t,PAGENUMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMECOL:
 		{
-			AST tmp232_AST_in = (AST)_t;
+			AST tmp228_AST_in = (AST)_t;
 			match(_t,FRAMECOL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDOWN:
 		{
-			AST tmp233_AST_in = (AST)_t;
+			AST tmp229_AST_in = (AST)_t;
 			match(_t,FRAMEDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMELINE:
 		{
-			AST tmp234_AST_in = (AST)_t;
+			AST tmp230_AST_in = (AST)_t;
 			match(_t,FRAMELINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEROW:
 		{
-			AST tmp235_AST_in = (AST)_t;
+			AST tmp231_AST_in = (AST)_t;
 			match(_t,FRAMEROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USERID:
 		{
-			AST tmp236_AST_in = (AST)_t;
+			AST tmp232_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ETIME_KW:
 		{
-			AST tmp237_AST_in = (AST)_t;
+			AST tmp233_AST_in = (AST)_t;
 			match(_t,ETIME_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBNAME:
 		{
-			AST tmp238_AST_in = (AST)_t;
+			AST tmp234_AST_in = (AST)_t;
 			match(_t,DBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TIME:
 		{
-			AST tmp239_AST_in = (AST)_t;
+			AST tmp235_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OPSYS:
 		{
-			AST tmp240_AST_in = (AST)_t;
+			AST tmp236_AST_in = (AST)_t;
 			match(_t,OPSYS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETRY:
 		{
-			AST tmp241_AST_in = (AST)_t;
+			AST tmp237_AST_in = (AST)_t;
 			match(_t,RETRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AASERIAL:
 		{
-			AST tmp242_AST_in = (AST)_t;
+			AST tmp238_AST_in = (AST)_t;
 			match(_t,AASERIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AACONTROL:
 		{
-			AST tmp243_AST_in = (AST)_t;
+			AST tmp239_AST_in = (AST)_t;
 			match(_t,AACONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGELINES:
 		{
-			AST tmp244_AST_in = (AST)_t;
+			AST tmp240_AST_in = (AST)_t;
 			match(_t,MESSAGELINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINAL:
 		{
-			AST tmp245_AST_in = (AST)_t;
+			AST tmp241_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROPATH:
 		{
-			AST tmp246_AST_in = (AST)_t;
+			AST tmp242_AST_in = (AST)_t;
 			match(_t,PROPATH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTLANGUAGE:
 		{
-			AST tmp247_AST_in = (AST)_t;
+			AST tmp243_AST_in = (AST)_t;
 			match(_t,CURRENTLANGUAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMSGS:
 		{
-			AST tmp248_AST_in = (AST)_t;
+			AST tmp244_AST_in = (AST)_t;
 			match(_t,PROMSGS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCREENLINES:
 		{
-			AST tmp249_AST_in = (AST)_t;
+			AST tmp245_AST_in = (AST)_t;
 			match(_t,SCREENLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTKEY:
 		{
-			AST tmp250_AST_in = (AST)_t;
+			AST tmp246_AST_in = (AST)_t;
 			match(_t,LASTKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFIELD:
 		{
-			AST tmp251_AST_in = (AST)_t;
+			AST tmp247_AST_in = (AST)_t;
 			match(_t,FRAMEFIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFILE:
 		{
-			AST tmp252_AST_in = (AST)_t;
+			AST tmp248_AST_in = (AST)_t;
 			match(_t,FRAMEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEVALUE:
 		{
-			AST tmp253_AST_in = (AST)_t;
+			AST tmp249_AST_in = (AST)_t;
 			match(_t,FRAMEVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GOPENDING:
 		{
-			AST tmp254_AST_in = (AST)_t;
+			AST tmp250_AST_in = (AST)_t;
 			match(_t,GOPENDING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROGRESS:
 		{
-			AST tmp255_AST_in = (AST)_t;
+			AST tmp251_AST_in = (AST)_t;
 			match(_t,PROGRESS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEINDEX:
 		{
-			AST tmp256_AST_in = (AST)_t;
+			AST tmp252_AST_in = (AST)_t;
 			match(_t,FRAMEINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDB:
 		{
-			AST tmp257_AST_in = (AST)_t;
+			AST tmp253_AST_in = (AST)_t;
 			match(_t,FRAMEDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMENAME:
 		{
-			AST tmp258_AST_in = (AST)_t;
+			AST tmp254_AST_in = (AST)_t;
 			match(_t,FRAMENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASERVERS:
 		{
-			AST tmp259_AST_in = (AST)_t;
+			AST tmp255_AST_in = (AST)_t;
 			match(_t,DATASERVERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMDBS:
 		{
-			AST tmp260_AST_in = (AST)_t;
+			AST tmp256_AST_in = (AST)_t;
 			match(_t,NUMDBS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMALIASES:
 		{
-			AST tmp261_AST_in = (AST)_t;
+			AST tmp257_AST_in = (AST)_t;
 			match(_t,NUMALIASES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISATTRSPACE:
 		{
-			AST tmp262_AST_in = (AST)_t;
+			AST tmp258_AST_in = (AST)_t;
 			match(_t,ISATTRSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCSTATUS:
 		{
-			AST tmp263_AST_in = (AST)_t;
+			AST tmp259_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCHANDLE:
 		{
-			AST tmp264_AST_in = (AST)_t;
+			AST tmp260_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURSOR:
 		{
-			AST tmp265_AST_in = (AST)_t;
+			AST tmp261_AST_in = (AST)_t;
 			match(_t,CURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSERROR:
 		{
-			AST tmp266_AST_in = (AST)_t;
+			AST tmp262_AST_in = (AST)_t;
 			match(_t,OSERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNVALUE:
 		{
-			AST tmp267_AST_in = (AST)_t;
+			AST tmp263_AST_in = (AST)_t;
 			match(_t,RETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDRIVES:
 		{
-			AST tmp268_AST_in = (AST)_t;
+			AST tmp264_AST_in = (AST)_t;
 			match(_t,OSDRIVES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROVERSION:
 		{
-			AST tmp269_AST_in = (AST)_t;
+			AST tmp265_AST_in = (AST)_t;
 			match(_t,PROVERSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSACTION:
 		{
-			AST tmp270_AST_in = (AST)_t;
+			AST tmp266_AST_in = (AST)_t;
 			match(_t,TRANSACTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MACHINECLASS:
 		{
-			AST tmp271_AST_in = (AST)_t;
+			AST tmp267_AST_in = (AST)_t;
 			match(_t,MACHINECLASS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAPCONTROL:
 		{
-			AST tmp272_AST_in = (AST)_t;
+			AST tmp268_AST_in = (AST)_t;
 			match(_t,AAPCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCODEPAGES:
 		{
-			AST tmp273_AST_in = (AST)_t;
+			AST tmp269_AST_in = (AST)_t;
 			match(_t,GETCODEPAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp274_AST_in = (AST)_t;
+			AST tmp270_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
@@ -4457,14 +4443,14 @@
 		
 		AST currentvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t663 = _t;
-		AST tmp275_AST_in = (AST)_t;
+		AST __t657 = _t;
+		AST tmp271_AST_in = (AST)_t;
 		match(_t,CURRENTVALUE);
 		_t = _t.getFirstChild();
-		AST tmp276_AST_in = (AST)_t;
+		AST tmp272_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
-		AST tmp277_AST_in = (AST)_t;
+		AST tmp273_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -4472,10 +4458,10 @@
 		switch ( _t.getType()) {
 		case COMMA:
 		{
-			AST tmp278_AST_in = (AST)_t;
+			AST tmp274_AST_in = (AST)_t;
 			match(_t,COMMA);
 			_t = _t.getNextSibling();
-			AST tmp279_AST_in = (AST)_t;
+			AST tmp275_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -4490,10 +4476,10 @@
 		}
 		}
 		}
-		AST tmp280_AST_in = (AST)_t;
+		AST tmp276_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t663;
+		_t = __t657;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4502,13 +4488,13 @@
 		
 		AST dynamiccurrentvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1127 = _t;
-		AST tmp281_AST_in = (AST)_t;
+		AST __t1121 = _t;
+		AST tmp277_AST_in = (AST)_t;
 		match(_t,DYNAMICCURRENTVALUE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1127;
+		_t = __t1121;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4517,13 +4503,13 @@
 		
 		AST entryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1173 = _t;
-		AST tmp282_AST_in = (AST)_t;
+		AST __t1167 = _t;
+		AST tmp278_AST_in = (AST)_t;
 		match(_t,ENTRY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1173;
+		_t = __t1167;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4532,19 +4518,19 @@
 		
 		AST fixcodepage_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1226 = _t;
-		AST tmp283_AST_in = (AST)_t;
+		AST __t1220 = _t;
+		AST tmp279_AST_in = (AST)_t;
 		match(_t,FIXCODEPAGE);
 		_t = _t.getFirstChild();
-		AST tmp284_AST_in = (AST)_t;
+		AST tmp280_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp285_AST_in = (AST)_t;
+		AST tmp281_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1226;
+		_t = __t1220;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4553,13 +4539,13 @@
 		
 		AST lengthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1565 = _t;
-		AST tmp286_AST_in = (AST)_t;
+		AST __t1560 = _t;
+		AST tmp282_AST_in = (AST)_t;
 		match(_t,LENGTH);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1565;
+		_t = __t1560;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4568,38 +4554,38 @@
 		
 		AST nextvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1652 = _t;
-		AST tmp287_AST_in = (AST)_t;
+		AST __t1647 = _t;
+		AST tmp283_AST_in = (AST)_t;
 		match(_t,NEXTVALUE);
 		_t = _t.getFirstChild();
-		AST tmp288_AST_in = (AST)_t;
+		AST tmp284_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
-		AST tmp289_AST_in = (AST)_t;
+		AST tmp285_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
-		_loop1654:
+		_loop1649:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp290_AST_in = (AST)_t;
+				AST tmp286_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp291_AST_in = (AST)_t;
+				AST tmp287_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1654;
+				break _loop1649;
 			}
 			
 		} while (true);
 		}
-		AST tmp292_AST_in = (AST)_t;
+		AST tmp288_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1652;
+		_t = __t1647;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4608,13 +4594,13 @@
 		
 		AST overlay_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1795 = _t;
-		AST tmp293_AST_in = (AST)_t;
+		AST __t1790 = _t;
+		AST tmp289_AST_in = (AST)_t;
 		match(_t,OVERLAY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1795;
+		_t = __t1790;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4623,13 +4609,13 @@
 		
 		AST putbits_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1886 = _t;
-		AST tmp294_AST_in = (AST)_t;
+		AST __t1881 = _t;
+		AST tmp290_AST_in = (AST)_t;
 		match(_t,PUTBITS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1886;
+		_t = __t1881;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4638,13 +4624,13 @@
 		
 		AST putbyte_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1888 = _t;
-		AST tmp295_AST_in = (AST)_t;
+		AST __t1883 = _t;
+		AST tmp291_AST_in = (AST)_t;
 		match(_t,PUTBYTE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1888;
+		_t = __t1883;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4653,13 +4639,13 @@
 		
 		AST putbytes_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1890 = _t;
-		AST tmp296_AST_in = (AST)_t;
+		AST __t1885 = _t;
+		AST tmp292_AST_in = (AST)_t;
 		match(_t,PUTBYTES);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1890;
+		_t = __t1885;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4668,13 +4654,13 @@
 		
 		AST putdouble_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1892 = _t;
-		AST tmp297_AST_in = (AST)_t;
+		AST __t1887 = _t;
+		AST tmp293_AST_in = (AST)_t;
 		match(_t,PUTDOUBLE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1892;
+		_t = __t1887;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4683,13 +4669,13 @@
 		
 		AST putfloat_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1894 = _t;
-		AST tmp298_AST_in = (AST)_t;
+		AST __t1889 = _t;
+		AST tmp294_AST_in = (AST)_t;
 		match(_t,PUTFLOAT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1894;
+		_t = __t1889;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4698,13 +4684,13 @@
 		
 		AST putlong_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1903 = _t;
-		AST tmp299_AST_in = (AST)_t;
+		AST __t1898 = _t;
+		AST tmp295_AST_in = (AST)_t;
 		match(_t,PUTLONG);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1903;
+		_t = __t1898;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4713,13 +4699,13 @@
 		
 		AST putshort_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1905 = _t;
-		AST tmp300_AST_in = (AST)_t;
+		AST __t1900 = _t;
+		AST tmp296_AST_in = (AST)_t;
 		match(_t,PUTSHORT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1905;
+		_t = __t1900;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4728,13 +4714,13 @@
 		
 		AST putstring_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1907 = _t;
-		AST tmp301_AST_in = (AST)_t;
+		AST __t1902 = _t;
+		AST tmp297_AST_in = (AST)_t;
 		match(_t,PUTSTRING);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1907;
+		_t = __t1902;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4743,13 +4729,13 @@
 		
 		AST putunsignedshort_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1909 = _t;
-		AST tmp302_AST_in = (AST)_t;
+		AST __t1904 = _t;
+		AST tmp298_AST_in = (AST)_t;
 		match(_t,PUTUNSIGNEDSHORT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1909;
+		_t = __t1904;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4758,13 +4744,13 @@
 		
 		AST rawfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1944 = _t;
-		AST tmp303_AST_in = (AST)_t;
+		AST __t1939 = _t;
+		AST tmp299_AST_in = (AST)_t;
 		match(_t,RAW);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1944;
+		_t = __t1939;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4773,13 +4759,13 @@
 		
 		AST setbyteorder_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2112 = _t;
-		AST tmp304_AST_in = (AST)_t;
+		AST __t2107 = _t;
+		AST tmp300_AST_in = (AST)_t;
 		match(_t,SETBYTEORDER);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2112;
+		_t = __t2107;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4788,13 +4774,13 @@
 		
 		AST setpointervalue_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2130 = _t;
-		AST tmp305_AST_in = (AST)_t;
+		AST __t2125 = _t;
+		AST tmp301_AST_in = (AST)_t;
 		match(_t,SETPOINTERVALUE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2130;
+		_t = __t2125;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4803,13 +4789,13 @@
 		
 		AST setsize_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2132 = _t;
-		AST tmp306_AST_in = (AST)_t;
+		AST __t2127 = _t;
+		AST tmp302_AST_in = (AST)_t;
 		match(_t,SETSIZE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2132;
+		_t = __t2127;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4818,13 +4804,13 @@
 		
 		AST substringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2193 = _t;
-		AST tmp307_AST_in = (AST)_t;
+		AST __t2188 = _t;
+		AST tmp303_AST_in = (AST)_t;
 		match(_t,SUBSTRING);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2193;
+		_t = __t2188;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4834,7 +4820,7 @@
 		AST widattr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t101 = _t;
-		AST tmp308_AST_in = (AST)_t;
+		AST tmp304_AST_in = (AST)_t;
 		match(_t,Widget_ref);
 		_t = _t.getFirstChild();
 		{
@@ -4842,7 +4828,7 @@
 		switch ( _t.getType()) {
 		case NORETURNVALUE:
 		{
-			AST tmp309_AST_in = (AST)_t;
+			AST tmp305_AST_in = (AST)_t;
 			match(_t,NORETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
@@ -4906,10 +4892,10 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJCOLON)) {
-				AST tmp310_AST_in = (AST)_t;
+				AST tmp306_AST_in = (AST)_t;
 				match(_t,OBJCOLON);
 				_t = _t.getNextSibling();
-				AST tmp311_AST_in = (AST)_t;
+				AST tmp307_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				{
@@ -4971,56 +4957,11 @@
 		case IN_KW:
 		{
 			AST __t108 = _t;
-			AST tmp312_AST_in = (AST)_t;
+			AST tmp308_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			{
-			if (_t==null) _t=ASTNULL;
-			switch ( _t.getType()) {
-			case MENU:
-			{
-				AST tmp313_AST_in = (AST)_t;
-				match(_t,MENU);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case FRAME:
-			{
-				AST tmp314_AST_in = (AST)_t;
-				match(_t,FRAME);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case BROWSE:
-			{
-				AST tmp315_AST_in = (AST)_t;
-				match(_t,BROWSE);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case SUBMENU:
-			{
-				AST tmp316_AST_in = (AST)_t;
-				match(_t,SUBMENU);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case BUFFER:
-			{
-				AST tmp317_AST_in = (AST)_t;
-				match(_t,BUFFER);
-				_t = _t.getNextSibling();
-				break;
-			}
-			default:
-			{
-				throw new NoViableAltException(_t);
-			}
-			}
-			}
-			AST tmp318_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
+			widname(_t);
+			_t = _retTree;
 			_t = __t108;
 			_t = _t.getNextSibling();
 			break;
@@ -5041,10 +4982,10 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST tmp319_AST_in = (AST)_t;
+			AST tmp309_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
-			AST tmp320_AST_in = (AST)_t;
+			AST tmp310_AST_in = (AST)_t;
 			if ( _t==null ) throw new MismatchedTokenException();
 			_t = _t.getNextSibling();
 			break;
@@ -5068,8 +5009,8 @@
 		
 		AST aatracestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t169 = _t;
-		AST tmp321_AST_in = (AST)_t;
+		AST __t164 = _t;
+		AST tmp311_AST_in = (AST)_t;
 		match(_t,AATRACE);
 		_t = _t.getFirstChild();
 		{
@@ -5115,21 +5056,21 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp322_AST_in = (AST)_t;
+					AST tmp312_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FROM:
 				{
-					AST tmp323_AST_in = (AST)_t;
+					AST tmp313_AST_in = (AST)_t;
 					match(_t,FROM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case THROUGH:
 				{
-					AST tmp324_AST_in = (AST)_t;
+					AST tmp314_AST_in = (AST)_t;
 					match(_t,THROUGH);
 					_t = _t.getNextSibling();
 					break;
@@ -5146,7 +5087,7 @@
 			}
 			case CLOSE:
 			{
-				AST tmp325_AST_in = (AST)_t;
+				AST tmp315_AST_in = (AST)_t;
 				match(_t,CLOSE);
 				_t = _t.getNextSibling();
 				break;
@@ -5161,15 +5102,15 @@
 		}
 		case OFF:
 		{
-			AST tmp326_AST_in = (AST)_t;
+			AST tmp316_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ON:
 		{
-			AST __t174 = _t;
-			AST tmp327_AST_in = (AST)_t;
+			AST __t169 = _t;
+			AST tmp317_AST_in = (AST)_t;
 			match(_t,ON);
 			_t = _t.getFirstChild();
 			{
@@ -5177,7 +5118,7 @@
 			switch ( _t.getType()) {
 			case AALIST:
 			{
-				AST tmp328_AST_in = (AST)_t;
+				AST tmp318_AST_in = (AST)_t;
 				match(_t,AALIST);
 				_t = _t.getNextSibling();
 				break;
@@ -5192,7 +5133,7 @@
 			}
 			}
 			}
-			_t = __t174;
+			_t = __t169;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5204,7 +5145,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t169;
+		_t = __t164;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5213,12 +5154,12 @@
 		
 		AST accumulatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t185 = _t;
-		AST tmp329_AST_in = (AST)_t;
+		AST __t180 = _t;
+		AST tmp319_AST_in = (AST)_t;
 		match(_t,ACCUMULATE);
 		_t = _t.getFirstChild();
 		{
-		_loop187:
+		_loop182:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -5226,14 +5167,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop187;
+				break _loop182;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t185;
+		_t = __t180;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5242,11 +5183,11 @@
 		
 		AST altertablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2422 = _t;
-		AST tmp330_AST_in = (AST)_t;
+		AST __t2417 = _t;
+		AST tmp320_AST_in = (AST)_t;
 		match(_t,ALTER);
 		_t = _t.getFirstChild();
-		AST tmp331_AST_in = (AST)_t;
+		AST tmp321_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -5256,10 +5197,10 @@
 		switch ( _t.getType()) {
 		case ADD:
 		{
-			AST tmp332_AST_in = (AST)_t;
+			AST tmp322_AST_in = (AST)_t;
 			match(_t,ADD);
 			_t = _t.getNextSibling();
-			AST tmp333_AST_in = (AST)_t;
+			AST tmp323_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			sql_col_def(_t);
@@ -5268,10 +5209,10 @@
 		}
 		case DROP:
 		{
-			AST tmp334_AST_in = (AST)_t;
+			AST tmp324_AST_in = (AST)_t;
 			match(_t,DROP);
 			_t = _t.getNextSibling();
-			AST tmp335_AST_in = (AST)_t;
+			AST tmp325_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
@@ -5280,28 +5221,28 @@
 		}
 		case ALTER:
 		{
-			AST tmp336_AST_in = (AST)_t;
+			AST tmp326_AST_in = (AST)_t;
 			match(_t,ALTER);
 			_t = _t.getNextSibling();
-			AST tmp337_AST_in = (AST)_t;
+			AST tmp327_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
 			_t = _retTree;
 			{
-			_loop2427:
+			_loop2422:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case FORMAT:
 				{
-					AST __t2425 = _t;
-					AST tmp338_AST_in = (AST)_t;
+					AST __t2420 = _t;
+					AST tmp328_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2425;
+					_t = __t2420;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -5314,13 +5255,13 @@
 				}
 				case DEFAULT:
 				{
-					AST __t2426 = _t;
-					AST tmp339_AST_in = (AST)_t;
+					AST __t2421 = _t;
+					AST tmp329_AST_in = (AST)_t;
 					match(_t,DEFAULT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2426;
+					_t = __t2421;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -5333,7 +5274,7 @@
 				}
 				default:
 				{
-					break _loop2427;
+					break _loop2422;
 				}
 				}
 			} while (true);
@@ -5348,7 +5289,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2422;
+		_t = __t2417;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5357,8 +5298,8 @@
 		
 		AST analyzestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t225 = _t;
-		AST tmp340_AST_in = (AST)_t;
+		AST __t220 = _t;
+		AST tmp330_AST_in = (AST)_t;
 		match(_t,ANALYZE);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -5370,13 +5311,13 @@
 		switch ( _t.getType()) {
 		case OUTPUT:
 		{
-			AST __t227 = _t;
-			AST tmp341_AST_in = (AST)_t;
+			AST __t222 = _t;
+			AST tmp331_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			filenameorvalue(_t);
 			_t = _retTree;
-			_t = __t227;
+			_t = __t222;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5395,41 +5336,41 @@
 		}
 		}
 		{
-		_loop229:
+		_loop224:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp342_AST_in = (AST)_t;
+				AST tmp332_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ALL:
 			{
-				AST tmp343_AST_in = (AST)_t;
+				AST tmp333_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp344_AST_in = (AST)_t;
+				AST tmp334_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop229;
+				break _loop224;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t225;
+		_t = __t220;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5438,8 +5379,8 @@
 		
 		AST applystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t231 = _t;
-		AST tmp345_AST_in = (AST)_t;
+		AST __t226 = _t;
+		AST tmp335_AST_in = (AST)_t;
 		match(_t,APPLY);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -5449,13 +5390,13 @@
 		switch ( _t.getType()) {
 		case TO:
 		{
-			AST __t233 = _t;
-			AST tmp346_AST_in = (AST)_t;
+			AST __t228 = _t;
+			AST tmp336_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			gwidget(_t);
 			_t = _retTree;
-			_t = __t233;
+			_t = __t228;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5472,7 +5413,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t231;
+		_t = __t226;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5481,8 +5422,8 @@
 		
 		AST assignstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t243 = _t;
-		AST tmp347_AST_in = (AST)_t;
+		AST __t238 = _t;
+		AST tmp337_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		assignment_list(_t);
@@ -5492,7 +5433,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp348_AST_in = (AST)_t;
+			AST tmp338_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -5510,7 +5451,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t243;
+		_t = __t238;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5519,13 +5460,13 @@
 		
 		AST bellstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t284 = _t;
-		AST tmp349_AST_in = (AST)_t;
+		AST __t279 = _t;
+		AST tmp339_AST_in = (AST)_t;
 		match(_t,BELL);
 		_t = _t.getFirstChild();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t284;
+		_t = __t279;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5534,8 +5475,8 @@
 		
 		AST buffercomparestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t286 = _t;
-		AST tmp350_AST_in = (AST)_t;
+		AST __t281 = _t;
+		AST tmp340_AST_in = (AST)_t;
 		match(_t,BUFFERCOMPARE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -5545,12 +5486,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t288 = _t;
-			AST tmp351_AST_in = (AST)_t;
+			AST __t283 = _t;
+			AST tmp341_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop290:
+			_loop285:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -5558,24 +5499,24 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop290;
+					break _loop285;
 				}
 				
 			} while (true);
 			}
-			_t = __t288;
+			_t = __t283;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USING:
 		{
-			AST __t291 = _t;
-			AST tmp352_AST_in = (AST)_t;
+			AST __t286 = _t;
+			AST tmp342_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
-			int _cnt293=0;
-			_loop293:
+			int _cnt288=0;
+			_loop288:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -5583,13 +5524,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt293>=1 ) { break _loop293; } else {throw new NoViableAltException(_t);}
+					if ( _cnt288>=1 ) { break _loop288; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt293++;
+				_cnt288++;
 			} while (true);
 			}
-			_t = __t291;
+			_t = __t286;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5603,7 +5544,7 @@
 		}
 		}
 		}
-		AST tmp353_AST_in = (AST)_t;
+		AST tmp343_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
@@ -5613,14 +5554,14 @@
 		switch ( _t.getType()) {
 		case CASESENSITIVE:
 		{
-			AST tmp354_AST_in = (AST)_t;
+			AST tmp344_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINARY:
 		{
-			AST tmp355_AST_in = (AST)_t;
+			AST tmp345_AST_in = (AST)_t;
 			match(_t,BINARY);
 			_t = _t.getNextSibling();
 			break;
@@ -5646,8 +5587,8 @@
 		switch ( _t.getType()) {
 		case SAVE:
 		{
-			AST __t296 = _t;
-			AST tmp356_AST_in = (AST)_t;
+			AST __t291 = _t;
+			AST tmp346_AST_in = (AST)_t;
 			match(_t,SAVE);
 			_t = _t.getFirstChild();
 			{
@@ -5655,14 +5596,14 @@
 			switch ( _t.getType()) {
 			case RESULT:
 			{
-				AST __t298 = _t;
-				AST tmp357_AST_in = (AST)_t;
+				AST __t293 = _t;
+				AST tmp347_AST_in = (AST)_t;
 				match(_t,RESULT);
 				_t = _t.getFirstChild();
-				AST tmp358_AST_in = (AST)_t;
+				AST tmp348_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
-				_t = __t298;
+				_t = __t293;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -5678,7 +5619,7 @@
 			}
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
-			_t = __t296;
+			_t = __t291;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5702,7 +5643,7 @@
 		switch ( _t.getType()) {
 		case EXPLICIT:
 		{
-			AST tmp359_AST_in = (AST)_t;
+			AST tmp349_AST_in = (AST)_t;
 			match(_t,EXPLICIT);
 			_t = _t.getNextSibling();
 			break;
@@ -5726,7 +5667,7 @@
 		switch ( _t.getType()) {
 		case COMPARES:
 		{
-			AST tmp360_AST_in = (AST)_t;
+			AST tmp350_AST_in = (AST)_t;
 			match(_t,COMPARES);
 			_t = _t.getNextSibling();
 			{
@@ -5734,7 +5675,7 @@
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp361_AST_in = (AST)_t;
+				AST tmp351_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -5752,39 +5693,39 @@
 			}
 			block_colon(_t);
 			_t = _retTree;
-			AST __t302 = _t;
-			AST tmp362_AST_in = (AST)_t;
+			AST __t297 = _t;
+			AST tmp352_AST_in = (AST)_t;
 			match(_t,Code_block);
 			_t = _t.getFirstChild();
 			{
-			_loop305:
+			_loop300:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==WHEN)) {
-					AST __t304 = _t;
-					AST tmp363_AST_in = (AST)_t;
+					AST __t299 = _t;
+					AST tmp353_AST_in = (AST)_t;
 					match(_t,WHEN);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					AST tmp364_AST_in = (AST)_t;
+					AST tmp354_AST_in = (AST)_t;
 					match(_t,THEN);
 					_t = _t.getNextSibling();
 					blockorstate(_t);
 					_t = _retTree;
-					_t = __t304;
+					_t = __t299;
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop305;
+					break _loop300;
 				}
 				
 			} while (true);
 			}
-			_t = __t302;
+			_t = __t297;
 			_t = _t.getNextSibling();
-			AST __t306 = _t;
-			AST tmp365_AST_in = (AST)_t;
+			AST __t301 = _t;
+			AST tmp355_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -5792,7 +5733,7 @@
 			switch ( _t.getType()) {
 			case COMPARES:
 			{
-				AST tmp366_AST_in = (AST)_t;
+				AST tmp356_AST_in = (AST)_t;
 				match(_t,COMPARES);
 				_t = _t.getNextSibling();
 				break;
@@ -5807,7 +5748,7 @@
 			}
 			}
 			}
-			_t = __t306;
+			_t = __t301;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5829,7 +5770,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp367_AST_in = (AST)_t;
+			AST tmp357_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -5851,7 +5792,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp368_AST_in = (AST)_t;
+			AST tmp358_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -5869,7 +5810,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t286;
+		_t = __t281;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -5878,8 +5819,8 @@
 		
 		AST buffercopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t311 = _t;
-		AST tmp369_AST_in = (AST)_t;
+		AST __t306 = _t;
+		AST tmp359_AST_in = (AST)_t;
 		match(_t,BUFFERCOPY);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -5889,12 +5830,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t313 = _t;
-			AST tmp370_AST_in = (AST)_t;
+			AST __t308 = _t;
+			AST tmp360_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop315:
+			_loop310:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -5902,24 +5843,24 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop315;
+					break _loop310;
 				}
 				
 			} while (true);
 			}
-			_t = __t313;
+			_t = __t308;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USING:
 		{
-			AST __t316 = _t;
-			AST tmp371_AST_in = (AST)_t;
+			AST __t311 = _t;
+			AST tmp361_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
-			int _cnt318=0;
-			_loop318:
+			int _cnt313=0;
+			_loop313:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -5927,13 +5868,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt318>=1 ) { break _loop318; } else {throw new NoViableAltException(_t);}
+					if ( _cnt313>=1 ) { break _loop313; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt318++;
+				_cnt313++;
 			} while (true);
 			}
-			_t = __t316;
+			_t = __t311;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5947,7 +5888,7 @@
 		}
 		}
 		}
-		AST tmp372_AST_in = (AST)_t;
+		AST tmp362_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.UPDATING);
@@ -5957,13 +5898,13 @@
 		switch ( _t.getType()) {
 		case ASSIGN:
 		{
-			AST __t320 = _t;
-			AST tmp373_AST_in = (AST)_t;
+			AST __t315 = _t;
+			AST tmp363_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getFirstChild();
 			assignment_list(_t);
 			_t = _retTree;
-			_t = __t320;
+			_t = __t315;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -5985,7 +5926,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp374_AST_in = (AST)_t;
+			AST tmp364_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -6007,7 +5948,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp375_AST_in = (AST)_t;
+			AST tmp365_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -6025,7 +5966,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t311;
+		_t = __t306;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6034,14 +5975,14 @@
 		
 		AST callstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t324 = _t;
-		AST tmp376_AST_in = (AST)_t;
+		AST __t319 = _t;
+		AST tmp366_AST_in = (AST)_t;
 		match(_t,CALL);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
 		_t = _retTree;
 		{
-		_loop326:
+		_loop321:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_5.member(_t.getType()))) {
@@ -6049,14 +5990,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop326;
+				break _loop321;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t324;
+		_t = __t319;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6065,57 +6006,57 @@
 		
 		AST casestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t342 = _t;
-		AST tmp377_AST_in = (AST)_t;
+		AST __t337 = _t;
+		AST tmp367_AST_in = (AST)_t;
 		match(_t,CASE);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
 		block_colon(_t);
 		_t = _retTree;
-		AST __t343 = _t;
-		AST tmp378_AST_in = (AST)_t;
+		AST __t338 = _t;
+		AST tmp368_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
-		_loop346:
+		_loop341:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WHEN)) {
-				AST __t345 = _t;
-				AST tmp379_AST_in = (AST)_t;
+				AST __t340 = _t;
+				AST tmp369_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				case_expression(_t);
 				_t = _retTree;
-				AST tmp380_AST_in = (AST)_t;
+				AST tmp370_AST_in = (AST)_t;
 				match(_t,THEN);
 				_t = _t.getNextSibling();
 				blockorstate(_t);
 				_t = _retTree;
-				_t = __t345;
+				_t = __t340;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop346;
+				break _loop341;
 			}
 			
 		} while (true);
 		}
-		_t = __t343;
+		_t = __t338;
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
 		case OTHERWISE:
 		{
-			AST __t348 = _t;
-			AST tmp381_AST_in = (AST)_t;
+			AST __t343 = _t;
+			AST tmp371_AST_in = (AST)_t;
 			match(_t,OTHERWISE);
 			_t = _t.getFirstChild();
 			blockorstate(_t);
 			_t = _retTree;
-			_t = __t348;
+			_t = __t343;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -6135,15 +6076,15 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp382_AST_in = (AST)_t;
+			AST tmp372_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST __t350 = _t;
-			AST tmp383_AST_in = (AST)_t;
+			AST __t345 = _t;
+			AST tmp373_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -6151,7 +6092,7 @@
 			switch ( _t.getType()) {
 			case CASE:
 			{
-				AST tmp384_AST_in = (AST)_t;
+				AST tmp374_AST_in = (AST)_t;
 				match(_t,CASE);
 				_t = _t.getNextSibling();
 				break;
@@ -6166,7 +6107,7 @@
 			}
 			}
 			}
-			_t = __t350;
+			_t = __t345;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -6178,7 +6119,7 @@
 		}
 		}
 		}
-		_t = __t342;
+		_t = __t337;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6187,8 +6128,8 @@
 		
 		AST choosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t359 = _t;
-		AST tmp385_AST_in = (AST)_t;
+		AST __t354 = _t;
+		AST tmp375_AST_in = (AST)_t;
 		match(_t,CHOOSE);
 		_t = _t.getFirstChild();
 		{
@@ -6196,14 +6137,14 @@
 		switch ( _t.getType()) {
 		case ROW:
 		{
-			AST tmp386_AST_in = (AST)_t;
+			AST tmp376_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp387_AST_in = (AST)_t;
+			AST tmp377_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -6215,13 +6156,13 @@
 		}
 		}
 		{
-		int _cnt365=0;
-		_loop365:
+		int _cnt360=0;
+		_loop360:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t362 = _t;
-				AST tmp388_AST_in = (AST)_t;
+				AST __t357 = _t;
+				AST tmp378_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -6231,13 +6172,13 @@
 				switch ( _t.getType()) {
 				case HELP:
 				{
-					AST __t364 = _t;
-					AST tmp389_AST_in = (AST)_t;
+					AST __t359 = _t;
+					AST tmp379_AST_in = (AST)_t;
 					match(_t,HELP);
 					_t = _t.getFirstChild();
 					constant(_t);
 					_t = _retTree;
-					_t = __t364;
+					_t = __t359;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -6251,37 +6192,37 @@
 				}
 				}
 				}
-				_t = __t362;
+				_t = __t357;
 				_t = _t.getNextSibling();
 			}
 			else {
-				if ( _cnt365>=1 ) { break _loop365; } else {throw new NoViableAltException(_t);}
+				if ( _cnt360>=1 ) { break _loop360; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt365++;
+			_cnt360++;
 		} while (true);
 		}
 		{
-		_loop370:
+		_loop365:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case AUTORETURN:
 			{
-				AST tmp390_AST_in = (AST)_t;
+				AST tmp380_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLOR:
 			{
-				AST __t367 = _t;
-				AST tmp391_AST_in = (AST)_t;
+				AST __t362 = _t;
+				AST tmp381_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t367;
+				_t = __t362;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -6293,38 +6234,38 @@
 			}
 			case KEYS:
 			{
-				AST __t368 = _t;
-				AST tmp392_AST_in = (AST)_t;
+				AST __t363 = _t;
+				AST tmp382_AST_in = (AST)_t;
 				match(_t,KEYS);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t368;
+				_t = __t363;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp393_AST_in = (AST)_t;
+				AST tmp383_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PAUSE:
 			{
-				AST __t369 = _t;
-				AST tmp394_AST_in = (AST)_t;
+				AST __t364 = _t;
+				AST tmp384_AST_in = (AST)_t;
 				match(_t,PAUSE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t369;
+				_t = __t364;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop370;
+				break _loop365;
 			}
 			}
 		} while (true);
@@ -6351,7 +6292,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t359;
+		_t = __t354;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6360,8 +6301,8 @@
 		
 		AST clearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t375 = _t;
-		AST tmp395_AST_in = (AST)_t;
+		AST __t370 = _t;
+		AST tmp385_AST_in = (AST)_t;
 		match(_t,CLEAR);
 		_t = _t.getFirstChild();
 		{
@@ -6369,15 +6310,8 @@
 		switch ( _t.getType()) {
 		case FRAME:
 		{
-			AST __t377 = _t;
-			AST tmp396_AST_in = (AST)_t;
-			match(_t,FRAME);
-			_t = _t.getFirstChild();
-			AST tmp397_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
-			_t = __t377;
-			_t = _t.getNextSibling();
+			frame_ref(_t);
+			_t = _retTree;
 			break;
 		}
 		case EOF:
@@ -6398,7 +6332,7 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp398_AST_in = (AST)_t;
+			AST tmp386_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
@@ -6420,7 +6354,7 @@
 		switch ( _t.getType()) {
 		case NOPAUSE:
 		{
-			AST tmp399_AST_in = (AST)_t;
+			AST tmp387_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
@@ -6438,7 +6372,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t375;
+		_t = __t370;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6447,16 +6381,16 @@
 		
 		AST closestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2429 = _t;
-		AST tmp400_AST_in = (AST)_t;
+		AST __t2424 = _t;
+		AST tmp388_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp401_AST_in = (AST)_t;
+		AST tmp389_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2429;
+		_t = __t2424;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6465,19 +6399,19 @@
 		
 		AST closequerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t381 = _t;
-		AST tmp402_AST_in = (AST)_t;
+		AST __t375 = _t;
+		AST tmp390_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp403_AST_in = (AST)_t;
+		AST tmp391_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
-		AST tmp404_AST_in = (AST)_t;
+		AST tmp392_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t381;
+		_t = __t375;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6486,14 +6420,14 @@
 		
 		AST closestoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t383 = _t;
-		AST tmp405_AST_in = (AST)_t;
+		AST __t377 = _t;
+		AST tmp393_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp406_AST_in = (AST)_t;
+		AST tmp394_AST_in = (AST)_t;
 		match(_t,STOREDPROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp407_AST_in = (AST)_t;
+		AST tmp395_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -6501,16 +6435,16 @@
 		switch ( _t.getType()) {
 		case EQUAL:
 		{
-			AST __t385 = _t;
-			AST tmp408_AST_in = (AST)_t;
+			AST __t379 = _t;
+			AST tmp396_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp409_AST_in = (AST)_t;
+			AST tmp397_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
-			_t = __t385;
+			_t = __t379;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -6531,19 +6465,19 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t387 = _t;
-			AST tmp410_AST_in = (AST)_t;
+			AST __t381 = _t;
+			AST tmp398_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
-			AST tmp411_AST_in = (AST)_t;
+			AST tmp399_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp412_AST_in = (AST)_t;
+			AST tmp400_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.REF);
 			_t = _retTree;
-			_t = __t387;
+			_t = __t381;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -6560,7 +6494,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t383;
+		_t = __t377;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6569,8 +6503,8 @@
 		
 		AST colorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t408 = _t;
-		AST tmp413_AST_in = (AST)_t;
+		AST __t402 = _t;
+		AST tmp401_AST_in = (AST)_t;
 		match(_t,COLOR);
 		_t = _t.getFirstChild();
 		{
@@ -6584,25 +6518,25 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST __t411 = _t;
-				AST tmp414_AST_in = (AST)_t;
+				AST __t405 = _t;
+				AST tmp402_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t411;
+				_t = __t405;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROMPT:
 			{
-				AST __t412 = _t;
-				AST tmp415_AST_in = (AST)_t;
+				AST __t406 = _t;
+				AST tmp403_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t412;
+				_t = __t406;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -6617,25 +6551,25 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST __t414 = _t;
-				AST tmp416_AST_in = (AST)_t;
+				AST __t408 = _t;
+				AST tmp404_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t414;
+				_t = __t408;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROMPT:
 			{
-				AST __t415 = _t;
-				AST tmp417_AST_in = (AST)_t;
+				AST __t409 = _t;
+				AST tmp405_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t415;
+				_t = __t409;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -6668,12 +6602,12 @@
 		}
 		}
 		{
-		_loop419:
+		_loop413:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t417 = _t;
-				AST tmp418_AST_in = (AST)_t;
+				AST __t411 = _t;
+				AST tmp406_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -6697,11 +6631,11 @@
 				}
 				}
 				}
-				_t = __t417;
+				_t = __t411;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop419;
+				break _loop413;
 			}
 			
 		} while (true);
@@ -6728,7 +6662,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t408;
+		_t = __t402;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -6737,21 +6671,21 @@
 		
 		AST compilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t457 = _t;
-		AST tmp419_AST_in = (AST)_t;
+		AST __t451 = _t;
+		AST tmp407_AST_in = (AST)_t;
 		match(_t,COMPILE);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
 		_t = _retTree;
 		{
-		_loop506:
+		_loop500:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ATTRSPACE:
 			{
-				AST __t459 = _t;
-				AST tmp420_AST_in = (AST)_t;
+				AST __t453 = _t;
+				AST tmp408_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getFirstChild();
 				{
@@ -6759,13 +6693,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t461 = _t;
-					AST tmp421_AST_in = (AST)_t;
+					AST __t455 = _t;
+					AST tmp409_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t461;
+					_t = __t455;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -6779,21 +6713,21 @@
 				}
 				}
 				}
-				_t = __t459;
+				_t = __t453;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp422_AST_in = (AST)_t;
+				AST tmp410_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SAVE:
 			{
-				AST __t462 = _t;
-				AST tmp423_AST_in = (AST)_t;
+				AST __t456 = _t;
+				AST tmp411_AST_in = (AST)_t;
 				match(_t,SAVE);
 				_t = _t.getFirstChild();
 				{
@@ -6801,13 +6735,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t464 = _t;
-					AST tmp424_AST_in = (AST)_t;
+					AST __t458 = _t;
+					AST tmp412_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t464;
+					_t = __t458;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -6827,13 +6761,13 @@
 				switch ( _t.getType()) {
 				case INTO:
 				{
-					AST __t466 = _t;
-					AST tmp425_AST_in = (AST)_t;
+					AST __t460 = _t;
+					AST tmp413_AST_in = (AST)_t;
 					match(_t,INTO);
 					_t = _t.getFirstChild();
 					filenameorvalue(_t);
 					_t = _retTree;
-					_t = __t466;
+					_t = __t460;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -6847,20 +6781,20 @@
 				}
 				}
 				}
-				_t = __t462;
+				_t = __t456;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LISTING:
 			{
-				AST __t467 = _t;
-				AST tmp426_AST_in = (AST)_t;
+				AST __t461 = _t;
+				AST tmp414_AST_in = (AST)_t;
 				match(_t,LISTING);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
 				_t = _retTree;
 				{
-				_loop471:
+				_loop465:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
@@ -6872,55 +6806,55 @@
 					}
 					case PAGESIZE_KW:
 					{
-						AST __t469 = _t;
-						AST tmp427_AST_in = (AST)_t;
+						AST __t463 = _t;
+						AST tmp415_AST_in = (AST)_t;
 						match(_t,PAGESIZE_KW);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t469;
+						_t = __t463;
 						_t = _t.getNextSibling();
 						break;
 					}
 					case PAGEWIDTH:
 					{
-						AST __t470 = _t;
-						AST tmp428_AST_in = (AST)_t;
+						AST __t464 = _t;
+						AST tmp416_AST_in = (AST)_t;
 						match(_t,PAGEWIDTH);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t470;
+						_t = __t464;
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop471;
+						break _loop465;
 					}
 					}
 				} while (true);
 				}
-				_t = __t467;
+				_t = __t461;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case XCODE:
 			{
-				AST __t472 = _t;
-				AST tmp429_AST_in = (AST)_t;
+				AST __t466 = _t;
+				AST tmp417_AST_in = (AST)_t;
 				match(_t,XCODE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t472;
+				_t = __t466;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case XREF:
 			{
-				AST __t473 = _t;
-				AST tmp430_AST_in = (AST)_t;
+				AST __t467 = _t;
+				AST tmp418_AST_in = (AST)_t;
 				match(_t,XREF);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -6944,14 +6878,14 @@
 				}
 				}
 				}
-				_t = __t473;
+				_t = __t467;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case STRINGXREF:
 			{
-				AST __t475 = _t;
-				AST tmp431_AST_in = (AST)_t;
+				AST __t469 = _t;
+				AST tmp419_AST_in = (AST)_t;
 				match(_t,STRINGXREF);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -6975,14 +6909,14 @@
 				}
 				}
 				}
-				_t = __t475;
+				_t = __t469;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case STREAMIO:
 			{
-				AST __t477 = _t;
-				AST tmp432_AST_in = (AST)_t;
+				AST __t471 = _t;
+				AST tmp420_AST_in = (AST)_t;
 				match(_t,STREAMIO);
 				_t = _t.getFirstChild();
 				{
@@ -6990,13 +6924,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t479 = _t;
-					AST tmp433_AST_in = (AST)_t;
+					AST __t473 = _t;
+					AST tmp421_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t479;
+					_t = __t473;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7010,14 +6944,14 @@
 				}
 				}
 				}
-				_t = __t477;
+				_t = __t471;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINSIZE:
 			{
-				AST __t480 = _t;
-				AST tmp434_AST_in = (AST)_t;
+				AST __t474 = _t;
+				AST tmp422_AST_in = (AST)_t;
 				match(_t,MINSIZE);
 				_t = _t.getFirstChild();
 				{
@@ -7025,13 +6959,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t482 = _t;
-					AST tmp435_AST_in = (AST)_t;
+					AST __t476 = _t;
+					AST tmp423_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t482;
+					_t = __t476;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7045,17 +6979,17 @@
 				}
 				}
 				}
-				_t = __t480;
+				_t = __t474;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANGUAGES:
 			{
-				AST __t483 = _t;
-				AST tmp436_AST_in = (AST)_t;
+				AST __t477 = _t;
+				AST tmp424_AST_in = (AST)_t;
 				match(_t,LANGUAGES);
 				_t = _t.getFirstChild();
-				AST tmp437_AST_in = (AST)_t;
+				AST tmp425_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -7067,18 +7001,18 @@
 					compile_lang(_t);
 					_t = _retTree;
 					{
-					_loop486:
+					_loop480:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==COMMA)) {
-							AST tmp438_AST_in = (AST)_t;
+							AST tmp426_AST_in = (AST)_t;
 							match(_t,COMMA);
 							_t = _t.getNextSibling();
 							compile_lang(_t);
 							_t = _retTree;
 						}
 						else {
-							break _loop486;
+							break _loop480;
 						}
 						
 					} while (true);
@@ -7095,47 +7029,47 @@
 				}
 				}
 				}
-				AST tmp439_AST_in = (AST)_t;
+				AST tmp427_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
-				_t = __t483;
+				_t = __t477;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TEXTSEGGROW:
 			{
-				AST __t487 = _t;
-				AST tmp440_AST_in = (AST)_t;
+				AST __t481 = _t;
+				AST tmp428_AST_in = (AST)_t;
 				match(_t,TEXTSEGGROW);
 				_t = _t.getFirstChild();
-				AST __t488 = _t;
-				AST tmp441_AST_in = (AST)_t;
+				AST __t482 = _t;
+				AST tmp429_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t488;
+				_t = __t482;
 				_t = _t.getNextSibling();
-				_t = __t487;
+				_t = __t481;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEBUGLIST:
 			{
-				AST __t489 = _t;
-				AST tmp442_AST_in = (AST)_t;
+				AST __t483 = _t;
+				AST tmp430_AST_in = (AST)_t;
 				match(_t,DEBUGLIST);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
 				_t = _retTree;
-				_t = __t489;
+				_t = __t483;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULTNOXLATE:
 			{
-				AST __t490 = _t;
-				AST tmp443_AST_in = (AST)_t;
+				AST __t484 = _t;
+				AST tmp431_AST_in = (AST)_t;
 				match(_t,DEFAULTNOXLATE);
 				_t = _t.getFirstChild();
 				{
@@ -7143,13 +7077,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t492 = _t;
-					AST tmp444_AST_in = (AST)_t;
+					AST __t486 = _t;
+					AST tmp432_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t492;
+					_t = __t486;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7163,14 +7097,14 @@
 				}
 				}
 				}
-				_t = __t490;
+				_t = __t484;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case GENERATEMD5:
 			{
-				AST __t493 = _t;
-				AST tmp445_AST_in = (AST)_t;
+				AST __t487 = _t;
+				AST tmp433_AST_in = (AST)_t;
 				match(_t,GENERATEMD5);
 				_t = _t.getFirstChild();
 				{
@@ -7178,13 +7112,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t495 = _t;
-					AST tmp446_AST_in = (AST)_t;
+					AST __t489 = _t;
+					AST tmp434_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t495;
+					_t = __t489;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7198,26 +7132,26 @@
 				}
 				}
 				}
-				_t = __t493;
+				_t = __t487;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PREPROCESS:
 			{
-				AST __t496 = _t;
-				AST tmp447_AST_in = (AST)_t;
+				AST __t490 = _t;
+				AST tmp435_AST_in = (AST)_t;
 				match(_t,PREPROCESS);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
 				_t = _retTree;
-				_t = __t496;
+				_t = __t490;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEREVVIDEO:
 			{
-				AST __t497 = _t;
-				AST tmp448_AST_in = (AST)_t;
+				AST __t491 = _t;
+				AST tmp436_AST_in = (AST)_t;
 				match(_t,USEREVVIDEO);
 				_t = _t.getFirstChild();
 				{
@@ -7225,13 +7159,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t499 = _t;
-					AST tmp449_AST_in = (AST)_t;
+					AST __t493 = _t;
+					AST tmp437_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t499;
+					_t = __t493;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7245,14 +7179,14 @@
 				}
 				}
 				}
-				_t = __t497;
+				_t = __t491;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEUNDERLINE:
 			{
-				AST __t500 = _t;
-				AST tmp450_AST_in = (AST)_t;
+				AST __t494 = _t;
+				AST tmp438_AST_in = (AST)_t;
 				match(_t,USEUNDERLINE);
 				_t = _t.getFirstChild();
 				{
@@ -7260,13 +7194,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t502 = _t;
-					AST tmp451_AST_in = (AST)_t;
+					AST __t496 = _t;
+					AST tmp439_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t502;
+					_t = __t496;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7280,14 +7214,14 @@
 				}
 				}
 				}
-				_t = __t500;
+				_t = __t494;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case V6FRAME:
 			{
-				AST __t503 = _t;
-				AST tmp452_AST_in = (AST)_t;
+				AST __t497 = _t;
+				AST tmp440_AST_in = (AST)_t;
 				match(_t,V6FRAME);
 				_t = _t.getFirstChild();
 				{
@@ -7295,13 +7229,13 @@
 				switch ( _t.getType()) {
 				case EQUAL:
 				{
-					AST __t505 = _t;
-					AST tmp453_AST_in = (AST)_t;
+					AST __t499 = _t;
+					AST tmp441_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t505;
+					_t = __t499;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -7315,27 +7249,27 @@
 				}
 				}
 				}
-				_t = __t503;
+				_t = __t497;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp454_AST_in = (AST)_t;
+				AST tmp442_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop506;
+				break _loop500;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t457;
+		_t = __t451;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7344,25 +7278,25 @@
 		
 		AST connectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t515 = _t;
-		AST tmp455_AST_in = (AST)_t;
+		AST __t509 = _t;
+		AST tmp443_AST_in = (AST)_t;
 		match(_t,CONNECT);
 		_t = _t.getFirstChild();
 		{
-		_loop517:
+		_loop511:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp456_AST_in = (AST)_t;
+				AST tmp444_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DDE:
 			{
-				AST tmp457_AST_in = (AST)_t;
+				AST tmp445_AST_in = (AST)_t;
 				match(_t,DDE);
 				_t = _t.getNextSibling();
 				break;
@@ -7376,14 +7310,14 @@
 			}
 			default:
 			{
-				break _loop517;
+				break _loop511;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t515;
+		_t = __t509;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7392,14 +7326,14 @@
 		
 		AST copylobstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t531 = _t;
-		AST tmp458_AST_in = (AST)_t;
+		AST __t525 = _t;
+		AST tmp446_AST_in = (AST)_t;
 		match(_t,COPYLOB);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FROM)) {
-			AST tmp459_AST_in = (AST)_t;
+			AST tmp447_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getNextSibling();
 		}
@@ -7413,7 +7347,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FILE)) {
-			AST tmp460_AST_in = (AST)_t;
+			AST tmp448_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -7423,7 +7357,7 @@
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJECT)) {
-				AST tmp461_AST_in = (AST)_t;
+				AST tmp449_AST_in = (AST)_t;
 				match(_t,OBJECT);
 				_t = _t.getNextSibling();
 			}
@@ -7447,16 +7381,16 @@
 		switch ( _t.getType()) {
 		case STARTING:
 		{
-			AST __t536 = _t;
-			AST tmp462_AST_in = (AST)_t;
+			AST __t530 = _t;
+			AST tmp450_AST_in = (AST)_t;
 			match(_t,STARTING);
 			_t = _t.getFirstChild();
-			AST tmp463_AST_in = (AST)_t;
+			AST tmp451_AST_in = (AST)_t;
 			match(_t,AT);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t536;
+			_t = __t530;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7476,13 +7410,13 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST __t538 = _t;
-			AST tmp464_AST_in = (AST)_t;
+			AST __t532 = _t;
+			AST tmp452_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t538;
+			_t = __t532;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7496,13 +7430,13 @@
 		}
 		}
 		}
-		AST tmp465_AST_in = (AST)_t;
+		AST tmp453_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FILE)) {
-			AST tmp466_AST_in = (AST)_t;
+			AST tmp454_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -7512,7 +7446,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp467_AST_in = (AST)_t;
+				AST tmp455_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -7535,7 +7469,7 @@
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJECT)) {
-				AST tmp468_AST_in = (AST)_t;
+				AST tmp456_AST_in = (AST)_t;
 				match(_t,OBJECT);
 				_t = _t.getNextSibling();
 			}
@@ -7553,10 +7487,10 @@
 			switch ( _t.getType()) {
 			case OVERLAY:
 			{
-				AST tmp469_AST_in = (AST)_t;
+				AST tmp457_AST_in = (AST)_t;
 				match(_t,OVERLAY);
 				_t = _t.getNextSibling();
-				AST tmp470_AST_in = (AST)_t;
+				AST tmp458_AST_in = (AST)_t;
 				match(_t,AT);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -7566,7 +7500,7 @@
 				switch ( _t.getType()) {
 				case TRIM:
 				{
-					AST tmp471_AST_in = (AST)_t;
+					AST tmp459_AST_in = (AST)_t;
 					match(_t,TRIM);
 					_t = _t.getNextSibling();
 					break;
@@ -7610,7 +7544,7 @@
 		switch ( _t.getType()) {
 		case NOCONVERT:
 		{
-			AST tmp472_AST_in = (AST)_t;
+			AST tmp460_AST_in = (AST)_t;
 			match(_t,NOCONVERT);
 			_t = _t.getNextSibling();
 			break;
@@ -7637,7 +7571,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp473_AST_in = (AST)_t;
+			AST tmp461_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -7652,7 +7586,7 @@
 		}
 		}
 		}
-		_t = __t531;
+		_t = __t525;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7661,8 +7595,8 @@
 		
 		AST createstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t549 = _t;
-		AST tmp474_AST_in = (AST)_t;
+		AST __t543 = _t;
+		AST tmp462_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -7672,8 +7606,8 @@
 		switch ( _t.getType()) {
 		case USING:
 		{
-			AST __t551 = _t;
-			AST tmp475_AST_in = (AST)_t;
+			AST __t545 = _t;
+			AST tmp463_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -7681,14 +7615,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp476_AST_in = (AST)_t;
+				AST tmp464_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp477_AST_in = (AST)_t;
+				AST tmp465_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -7701,7 +7635,7 @@
 			}
 			expression(_t);
 			_t = _retTree;
-			_t = __t551;
+			_t = __t545;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7722,7 +7656,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp478_AST_in = (AST)_t;
+			AST tmp466_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -7740,7 +7674,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t549;
+		_t = __t543;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7749,19 +7683,19 @@
 		
 		AST createaliasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t555 = _t;
-		AST tmp479_AST_in = (AST)_t;
+		AST __t549 = _t;
+		AST tmp467_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp480_AST_in = (AST)_t;
+		AST tmp468_AST_in = (AST)_t;
 		match(_t,ALIAS);
 		_t = _t.getNextSibling();
 		anyorvalue(_t);
 		_t = _retTree;
-		AST tmp481_AST_in = (AST)_t;
+		AST tmp469_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp482_AST_in = (AST)_t;
+		AST tmp470_AST_in = (AST)_t;
 		match(_t,DATABASE);
 		_t = _t.getNextSibling();
 		anyorvalue(_t);
@@ -7771,7 +7705,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp483_AST_in = (AST)_t;
+			AST tmp471_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -7789,7 +7723,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t555;
+		_t = __t549;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7798,11 +7732,11 @@
 		
 		AST createautomationobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t558 = _t;
-		AST tmp484_AST_in = (AST)_t;
+		AST __t552 = _t;
+		AST tmp472_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp485_AST_in = (AST)_t;
+		AST tmp473_AST_in = (AST)_t;
 		match(_t,QSTRING);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -7812,8 +7746,8 @@
 		switch ( _t.getType()) {
 		case CONNECT:
 		{
-			AST __t560 = _t;
-			AST tmp486_AST_in = (AST)_t;
+			AST __t554 = _t;
+			AST tmp474_AST_in = (AST)_t;
 			match(_t,CONNECT);
 			_t = _t.getFirstChild();
 			{
@@ -7821,13 +7755,13 @@
 			switch ( _t.getType()) {
 			case TO:
 			{
-				AST __t562 = _t;
-				AST tmp487_AST_in = (AST)_t;
+				AST __t556 = _t;
+				AST tmp475_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t562;
+				_t = __t556;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -7841,7 +7775,7 @@
 			}
 			}
 			}
-			_t = __t560;
+			_t = __t554;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7862,7 +7796,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp488_AST_in = (AST)_t;
+			AST tmp476_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -7880,7 +7814,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t558;
+		_t = __t552;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7889,11 +7823,11 @@
 		
 		AST createbrowsestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t565 = _t;
-		AST tmp489_AST_in = (AST)_t;
+		AST __t559 = _t;
+		AST tmp477_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp490_AST_in = (AST)_t;
+		AST tmp478_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -7903,16 +7837,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t567 = _t;
-			AST tmp491_AST_in = (AST)_t;
+			AST __t561 = _t;
+			AST tmp479_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp492_AST_in = (AST)_t;
+			AST tmp480_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t567;
+			_t = __t561;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7935,7 +7869,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp493_AST_in = (AST)_t;
+			AST tmp481_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -7996,7 +7930,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t565;
+		_t = __t559;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8005,19 +7939,19 @@
 		
 		AST createbufferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t572 = _t;
-		AST tmp494_AST_in = (AST)_t;
+		AST __t566 = _t;
+		AST tmp482_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp495_AST_in = (AST)_t;
+		AST tmp483_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp496_AST_in = (AST)_t;
+		AST tmp484_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp497_AST_in = (AST)_t;
+		AST tmp485_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -8027,13 +7961,13 @@
 		switch ( _t.getType()) {
 		case BUFFERNAME:
 		{
-			AST __t574 = _t;
-			AST tmp498_AST_in = (AST)_t;
+			AST __t568 = _t;
+			AST tmp486_AST_in = (AST)_t;
 			match(_t,BUFFERNAME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t574;
+			_t = __t568;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8055,16 +7989,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t576 = _t;
-			AST tmp499_AST_in = (AST)_t;
+			AST __t570 = _t;
+			AST tmp487_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp500_AST_in = (AST)_t;
+			AST tmp488_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t576;
+			_t = __t570;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8085,7 +8019,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp501_AST_in = (AST)_t;
+			AST tmp489_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8103,7 +8037,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t572;
+		_t = __t566;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8112,11 +8046,11 @@
 		
 		AST createcallstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t579 = _t;
-		AST tmp502_AST_in = (AST)_t;
+		AST __t573 = _t;
+		AST tmp490_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp503_AST_in = (AST)_t;
+		AST tmp491_AST_in = (AST)_t;
 		match(_t,CALL);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8126,16 +8060,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t581 = _t;
-			AST tmp504_AST_in = (AST)_t;
+			AST __t575 = _t;
+			AST tmp492_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp505_AST_in = (AST)_t;
+			AST tmp493_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t581;
+			_t = __t575;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8156,7 +8090,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp506_AST_in = (AST)_t;
+			AST tmp494_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8174,7 +8108,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t579;
+		_t = __t573;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8183,11 +8117,11 @@
 		
 		AST createdatabasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t584 = _t;
-		AST tmp507_AST_in = (AST)_t;
+		AST __t578 = _t;
+		AST tmp495_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp508_AST_in = (AST)_t;
+		AST tmp496_AST_in = (AST)_t;
 		match(_t,DATABASE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -8197,13 +8131,13 @@
 		switch ( _t.getType()) {
 		case FROM:
 		{
-			AST __t586 = _t;
-			AST tmp509_AST_in = (AST)_t;
+			AST __t580 = _t;
+			AST tmp497_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t586;
+			_t = __t580;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8225,7 +8159,7 @@
 		switch ( _t.getType()) {
 		case REPLACE:
 		{
-			AST tmp510_AST_in = (AST)_t;
+			AST tmp498_AST_in = (AST)_t;
 			match(_t,REPLACE);
 			_t = _t.getNextSibling();
 			break;
@@ -8247,7 +8181,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp511_AST_in = (AST)_t;
+			AST tmp499_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8265,7 +8199,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t584;
+		_t = __t578;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8274,11 +8208,11 @@
 		
 		AST createdatasetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t590 = _t;
-		AST tmp512_AST_in = (AST)_t;
+		AST __t584 = _t;
+		AST tmp500_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp513_AST_in = (AST)_t;
+		AST tmp501_AST_in = (AST)_t;
 		match(_t,DATASET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8288,16 +8222,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t592 = _t;
-			AST tmp514_AST_in = (AST)_t;
+			AST __t586 = _t;
+			AST tmp502_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp515_AST_in = (AST)_t;
+			AST tmp503_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t592;
+			_t = __t586;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8318,7 +8252,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp516_AST_in = (AST)_t;
+			AST tmp504_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8336,7 +8270,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t590;
+		_t = __t584;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8345,11 +8279,11 @@
 		
 		AST createdatasourcestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t595 = _t;
-		AST tmp517_AST_in = (AST)_t;
+		AST __t589 = _t;
+		AST tmp505_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp518_AST_in = (AST)_t;
+		AST tmp506_AST_in = (AST)_t;
 		match(_t,DATASOURCE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8359,16 +8293,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t597 = _t;
-			AST tmp519_AST_in = (AST)_t;
+			AST __t591 = _t;
+			AST tmp507_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp520_AST_in = (AST)_t;
+			AST tmp508_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t597;
+			_t = __t591;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8389,7 +8323,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp521_AST_in = (AST)_t;
+			AST tmp509_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8407,7 +8341,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t595;
+		_t = __t589;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8416,8 +8350,8 @@
 		
 		AST createindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2431 = _t;
-		AST tmp522_AST_in = (AST)_t;
+		AST __t2426 = _t;
+		AST tmp510_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -8425,7 +8359,7 @@
 		switch ( _t.getType()) {
 		case UNIQUE:
 		{
-			AST tmp523_AST_in = (AST)_t;
+			AST tmp511_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getNextSibling();
 			break;
@@ -8440,51 +8374,51 @@
 		}
 		}
 		}
-		AST tmp524_AST_in = (AST)_t;
+		AST tmp512_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getNextSibling();
-		AST tmp525_AST_in = (AST)_t;
+		AST tmp513_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp526_AST_in = (AST)_t;
+		AST tmp514_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
-		AST __t2433 = _t;
-		AST tmp527_AST_in = (AST)_t;
+		AST __t2428 = _t;
+		AST tmp515_AST_in = (AST)_t;
 		match(_t,Field_list);
 		_t = _t.getFirstChild();
-		AST tmp528_AST_in = (AST)_t;
+		AST tmp516_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
 		{
-		_loop2435:
+		_loop2430:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp529_AST_in = (AST)_t;
+				AST tmp517_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
 			}
 			else {
-				break _loop2435;
+				break _loop2430;
 			}
 			
 		} while (true);
 		}
-		AST tmp530_AST_in = (AST)_t;
+		AST tmp518_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2433;
+		_t = __t2428;
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2431;
+		_t = __t2426;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8493,11 +8427,11 @@
 		
 		AST createquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t600 = _t;
-		AST tmp531_AST_in = (AST)_t;
+		AST __t594 = _t;
+		AST tmp519_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp532_AST_in = (AST)_t;
+		AST tmp520_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8507,16 +8441,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t602 = _t;
-			AST tmp533_AST_in = (AST)_t;
+			AST __t596 = _t;
+			AST tmp521_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp534_AST_in = (AST)_t;
+			AST tmp522_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t602;
+			_t = __t596;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8537,7 +8471,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp535_AST_in = (AST)_t;
+			AST tmp523_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8555,7 +8489,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t600;
+		_t = __t594;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8564,11 +8498,11 @@
 		
 		AST createsaxreaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t605 = _t;
-		AST tmp536_AST_in = (AST)_t;
+		AST __t599 = _t;
+		AST tmp524_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp537_AST_in = (AST)_t;
+		AST tmp525_AST_in = (AST)_t;
 		match(_t,SAXREADER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8578,16 +8512,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t607 = _t;
-			AST tmp538_AST_in = (AST)_t;
+			AST __t601 = _t;
+			AST tmp526_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp539_AST_in = (AST)_t;
+			AST tmp527_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t607;
+			_t = __t601;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8608,7 +8542,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp540_AST_in = (AST)_t;
+			AST tmp528_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8626,7 +8560,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t605;
+		_t = __t599;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8635,11 +8569,11 @@
 		
 		AST createserverstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t610 = _t;
-		AST tmp541_AST_in = (AST)_t;
+		AST __t604 = _t;
+		AST tmp529_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp542_AST_in = (AST)_t;
+		AST tmp530_AST_in = (AST)_t;
 		match(_t,SERVER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8666,7 +8600,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t610;
+		_t = __t604;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8675,11 +8609,11 @@
 		
 		AST createserversocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t613 = _t;
-		AST tmp543_AST_in = (AST)_t;
+		AST __t607 = _t;
+		AST tmp531_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp544_AST_in = (AST)_t;
+		AST tmp532_AST_in = (AST)_t;
 		match(_t,SERVERSOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8689,7 +8623,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp545_AST_in = (AST)_t;
+			AST tmp533_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8707,7 +8641,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t613;
+		_t = __t607;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8716,11 +8650,11 @@
 		
 		AST createsoapheaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t616 = _t;
-		AST tmp546_AST_in = (AST)_t;
+		AST __t610 = _t;
+		AST tmp534_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp547_AST_in = (AST)_t;
+		AST tmp535_AST_in = (AST)_t;
 		match(_t,SOAPHEADER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8730,16 +8664,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t618 = _t;
-			AST tmp548_AST_in = (AST)_t;
+			AST __t612 = _t;
+			AST tmp536_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp549_AST_in = (AST)_t;
+			AST tmp537_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t618;
+			_t = __t612;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8760,7 +8694,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp550_AST_in = (AST)_t;
+			AST tmp538_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8778,7 +8712,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t616;
+		_t = __t610;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8787,11 +8721,11 @@
 		
 		AST createsoapheaderentryrefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t621 = _t;
-		AST tmp551_AST_in = (AST)_t;
+		AST __t615 = _t;
+		AST tmp539_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp552_AST_in = (AST)_t;
+		AST tmp540_AST_in = (AST)_t;
 		match(_t,SOAPHEADERENTRYREF);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8801,16 +8735,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t623 = _t;
-			AST tmp553_AST_in = (AST)_t;
+			AST __t617 = _t;
+			AST tmp541_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp554_AST_in = (AST)_t;
+			AST tmp542_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t623;
+			_t = __t617;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8831,7 +8765,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp555_AST_in = (AST)_t;
+			AST tmp543_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8849,7 +8783,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t621;
+		_t = __t615;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8858,11 +8792,11 @@
 		
 		AST createsocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t626 = _t;
-		AST tmp556_AST_in = (AST)_t;
+		AST __t620 = _t;
+		AST tmp544_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp557_AST_in = (AST)_t;
+		AST tmp545_AST_in = (AST)_t;
 		match(_t,SOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -8872,7 +8806,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp558_AST_in = (AST)_t;
+			AST tmp546_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -8890,7 +8824,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t626;
+		_t = __t620;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -8899,17 +8833,17 @@
 		
 		AST createtablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2437 = _t;
-		AST tmp559_AST_in = (AST)_t;
+		AST __t2432 = _t;
+		AST tmp547_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp560_AST_in = (AST)_t;
+		AST tmp548_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
-		AST tmp561_AST_in = (AST)_t;
+		AST tmp549_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp562_AST_in = (AST)_t;
+		AST tmp550_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -8923,38 +8857,38 @@
 		}
 		case UNIQUE:
 		{
-			AST __t2439 = _t;
-			AST tmp563_AST_in = (AST)_t;
+			AST __t2434 = _t;
+			AST tmp551_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getFirstChild();
-			AST tmp564_AST_in = (AST)_t;
+			AST tmp552_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp565_AST_in = (AST)_t;
+			AST tmp553_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
-			_loop2441:
+			_loop2436:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp566_AST_in = (AST)_t;
+					AST tmp554_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
-					AST tmp567_AST_in = (AST)_t;
+					AST tmp555_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop2441;
+					break _loop2436;
 				}
 				
 			} while (true);
 			}
-			AST tmp568_AST_in = (AST)_t;
+			AST tmp556_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2439;
+			_t = __t2434;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -8965,11 +8899,11 @@
 		}
 		}
 		{
-		_loop2447:
+		_loop2442:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp569_AST_in = (AST)_t;
+				AST tmp557_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -8983,38 +8917,38 @@
 				}
 				case UNIQUE:
 				{
-					AST __t2444 = _t;
-					AST tmp570_AST_in = (AST)_t;
+					AST __t2439 = _t;
+					AST tmp558_AST_in = (AST)_t;
 					match(_t,UNIQUE);
 					_t = _t.getFirstChild();
-					AST tmp571_AST_in = (AST)_t;
+					AST tmp559_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
-					AST tmp572_AST_in = (AST)_t;
+					AST tmp560_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					{
-					_loop2446:
+					_loop2441:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==COMMA)) {
-							AST tmp573_AST_in = (AST)_t;
+							AST tmp561_AST_in = (AST)_t;
 							match(_t,COMMA);
 							_t = _t.getNextSibling();
-							AST tmp574_AST_in = (AST)_t;
+							AST tmp562_AST_in = (AST)_t;
 							match(_t,ID);
 							_t = _t.getNextSibling();
 						}
 						else {
-							break _loop2446;
+							break _loop2441;
 						}
 						
 					} while (true);
 					}
-					AST tmp575_AST_in = (AST)_t;
+					AST tmp563_AST_in = (AST)_t;
 					match(_t,RIGHTPAREN);
 					_t = _t.getNextSibling();
-					_t = __t2444;
+					_t = __t2439;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -9026,17 +8960,17 @@
 				}
 			}
 			else {
-				break _loop2447;
+				break _loop2442;
 			}
 			
 		} while (true);
 		}
-		AST tmp576_AST_in = (AST)_t;
+		AST tmp564_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2437;
+		_t = __t2432;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9045,11 +8979,11 @@
 		
 		AST createtemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t629 = _t;
-		AST tmp577_AST_in = (AST)_t;
+		AST __t623 = _t;
+		AST tmp565_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp578_AST_in = (AST)_t;
+		AST tmp566_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -9059,16 +8993,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t631 = _t;
-			AST tmp579_AST_in = (AST)_t;
+			AST __t625 = _t;
+			AST tmp567_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp580_AST_in = (AST)_t;
+			AST tmp568_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t631;
+			_t = __t625;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9089,7 +9023,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp581_AST_in = (AST)_t;
+			AST tmp569_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9107,7 +9041,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t629;
+		_t = __t623;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9116,14 +9050,14 @@
 		
 		AST createviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2449 = _t;
-		AST tmp582_AST_in = (AST)_t;
+		AST __t2444 = _t;
+		AST tmp570_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp583_AST_in = (AST)_t;
+		AST tmp571_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getNextSibling();
-		AST tmp584_AST_in = (AST)_t;
+		AST tmp572_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -9131,36 +9065,36 @@
 		switch ( _t.getType()) {
 		case Field_list:
 		{
-			AST __t2451 = _t;
-			AST tmp585_AST_in = (AST)_t;
+			AST __t2446 = _t;
+			AST tmp573_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp586_AST_in = (AST)_t;
+			AST tmp574_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
 			_t = _retTree;
 			{
-			_loop2453:
+			_loop2448:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp587_AST_in = (AST)_t;
+					AST tmp575_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.SYMBOL);
 					_t = _retTree;
 				}
 				else {
-					break _loop2453;
+					break _loop2448;
 				}
 				
 			} while (true);
 			}
-			AST tmp588_AST_in = (AST)_t;
+			AST tmp576_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2451;
+			_t = __t2446;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9174,14 +9108,14 @@
 		}
 		}
 		}
-		AST tmp589_AST_in = (AST)_t;
+		AST tmp577_AST_in = (AST)_t;
 		match(_t,AS);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2449;
+		_t = __t2444;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9190,8 +9124,8 @@
 		
 		AST createwidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t634 = _t;
-		AST tmp590_AST_in = (AST)_t;
+		AST __t628 = _t;
+		AST tmp578_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -9205,126 +9139,126 @@
 		}
 		case BUTTON:
 		{
-			AST tmp591_AST_in = (AST)_t;
+			AST tmp579_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp592_AST_in = (AST)_t;
+			AST tmp580_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp593_AST_in = (AST)_t;
+			AST tmp581_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp594_AST_in = (AST)_t;
+			AST tmp582_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp595_AST_in = (AST)_t;
+			AST tmp583_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp596_AST_in = (AST)_t;
+			AST tmp584_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp597_AST_in = (AST)_t;
+			AST tmp585_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp598_AST_in = (AST)_t;
+			AST tmp586_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp599_AST_in = (AST)_t;
+			AST tmp587_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp600_AST_in = (AST)_t;
+			AST tmp588_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp601_AST_in = (AST)_t;
+			AST tmp589_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECTANGLE:
 		{
-			AST tmp602_AST_in = (AST)_t;
+			AST tmp590_AST_in = (AST)_t;
 			match(_t,RECTANGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp603_AST_in = (AST)_t;
+			AST tmp591_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp604_AST_in = (AST)_t;
+			AST tmp592_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp605_AST_in = (AST)_t;
+			AST tmp593_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXT:
 		{
-			AST tmp606_AST_in = (AST)_t;
+			AST tmp594_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp607_AST_in = (AST)_t;
+			AST tmp595_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOW:
 		{
-			AST tmp608_AST_in = (AST)_t;
+			AST tmp596_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			break;
@@ -9342,16 +9276,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t637 = _t;
-			AST tmp609_AST_in = (AST)_t;
+			AST __t631 = _t;
+			AST tmp597_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp610_AST_in = (AST)_t;
+			AST tmp598_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t637;
+			_t = __t631;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9374,7 +9308,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp611_AST_in = (AST)_t;
+			AST tmp599_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9435,7 +9369,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t634;
+		_t = __t628;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9444,11 +9378,11 @@
 		
 		AST createwidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t642 = _t;
-		AST tmp612_AST_in = (AST)_t;
+		AST __t636 = _t;
+		AST tmp600_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp613_AST_in = (AST)_t;
+		AST tmp601_AST_in = (AST)_t;
 		match(_t,WIDGETPOOL);
 		_t = _t.getNextSibling();
 		{
@@ -9469,7 +9403,7 @@
 		switch ( _t.getType()) {
 		case PERSISTENT:
 		{
-			AST tmp614_AST_in = (AST)_t;
+			AST tmp602_AST_in = (AST)_t;
 			match(_t,PERSISTENT);
 			_t = _t.getNextSibling();
 			break;
@@ -9491,7 +9425,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp615_AST_in = (AST)_t;
+			AST tmp603_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9509,7 +9443,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t642;
+		_t = __t636;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9518,11 +9452,11 @@
 		
 		AST createxdocumentstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t647 = _t;
-		AST tmp616_AST_in = (AST)_t;
+		AST __t641 = _t;
+		AST tmp604_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp617_AST_in = (AST)_t;
+		AST tmp605_AST_in = (AST)_t;
 		match(_t,XDOCUMENT);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -9532,16 +9466,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t649 = _t;
-			AST tmp618_AST_in = (AST)_t;
+			AST __t643 = _t;
+			AST tmp606_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp619_AST_in = (AST)_t;
+			AST tmp607_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t649;
+			_t = __t643;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9562,7 +9496,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp620_AST_in = (AST)_t;
+			AST tmp608_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9580,7 +9514,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t647;
+		_t = __t641;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9589,11 +9523,11 @@
 		
 		AST createxnoderefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t652 = _t;
-		AST tmp621_AST_in = (AST)_t;
+		AST __t646 = _t;
+		AST tmp609_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp622_AST_in = (AST)_t;
+		AST tmp610_AST_in = (AST)_t;
 		match(_t,XNODEREF);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -9603,16 +9537,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t654 = _t;
-			AST tmp623_AST_in = (AST)_t;
+			AST __t648 = _t;
+			AST tmp611_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp624_AST_in = (AST)_t;
+			AST tmp612_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t654;
+			_t = __t648;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9633,7 +9567,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp625_AST_in = (AST)_t;
+			AST tmp613_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9651,7 +9585,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t652;
+		_t = __t646;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9660,11 +9594,11 @@
 		
 		AST ddeadvisestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t699 = _t;
-		AST tmp626_AST_in = (AST)_t;
+		AST __t693 = _t;
+		AST tmp614_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp627_AST_in = (AST)_t;
+		AST tmp615_AST_in = (AST)_t;
 		match(_t,ADVISE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9674,14 +9608,14 @@
 		switch ( _t.getType()) {
 		case START:
 		{
-			AST tmp628_AST_in = (AST)_t;
+			AST tmp616_AST_in = (AST)_t;
 			match(_t,START);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOP:
 		{
-			AST tmp629_AST_in = (AST)_t;
+			AST tmp617_AST_in = (AST)_t;
 			match(_t,STOP);
 			_t = _t.getNextSibling();
 			break;
@@ -9692,7 +9626,7 @@
 		}
 		}
 		}
-		AST tmp630_AST_in = (AST)_t;
+		AST tmp618_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9702,13 +9636,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t702 = _t;
-			AST tmp631_AST_in = (AST)_t;
+			AST __t696 = _t;
+			AST tmp619_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t702;
+			_t = __t696;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9729,7 +9663,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp632_AST_in = (AST)_t;
+			AST tmp620_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9747,7 +9681,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t699;
+		_t = __t693;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9756,16 +9690,16 @@
 		
 		AST ddeexecutestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t705 = _t;
-		AST tmp633_AST_in = (AST)_t;
+		AST __t699 = _t;
+		AST tmp621_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp634_AST_in = (AST)_t;
+		AST tmp622_AST_in = (AST)_t;
 		match(_t,EXECUTE);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp635_AST_in = (AST)_t;
+		AST tmp623_AST_in = (AST)_t;
 		match(_t,COMMAND);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9775,13 +9709,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t707 = _t;
-			AST tmp636_AST_in = (AST)_t;
+			AST __t701 = _t;
+			AST tmp624_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t707;
+			_t = __t701;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9802,7 +9736,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp637_AST_in = (AST)_t;
+			AST tmp625_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9820,7 +9754,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t705;
+		_t = __t699;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9829,21 +9763,21 @@
 		
 		AST ddegetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t710 = _t;
-		AST tmp638_AST_in = (AST)_t;
+		AST __t704 = _t;
+		AST tmp626_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp639_AST_in = (AST)_t;
+		AST tmp627_AST_in = (AST)_t;
 		match(_t,GET);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp640_AST_in = (AST)_t;
+		AST tmp628_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp641_AST_in = (AST)_t;
+		AST tmp629_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9853,13 +9787,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t712 = _t;
-			AST tmp642_AST_in = (AST)_t;
+			AST __t706 = _t;
+			AST tmp630_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t712;
+			_t = __t706;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -9880,7 +9814,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp643_AST_in = (AST)_t;
+			AST tmp631_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9898,7 +9832,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t710;
+		_t = __t704;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9907,26 +9841,26 @@
 		
 		AST ddeinitiatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t715 = _t;
-		AST tmp644_AST_in = (AST)_t;
+		AST __t709 = _t;
+		AST tmp632_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp645_AST_in = (AST)_t;
+		AST tmp633_AST_in = (AST)_t;
 		match(_t,INITIATE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp646_AST_in = (AST)_t;
+		AST tmp634_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp647_AST_in = (AST)_t;
+		AST tmp635_AST_in = (AST)_t;
 		match(_t,APPLICATION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp648_AST_in = (AST)_t;
+		AST tmp636_AST_in = (AST)_t;
 		match(_t,TOPIC);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9936,7 +9870,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp649_AST_in = (AST)_t;
+			AST tmp637_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9954,7 +9888,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t715;
+		_t = __t709;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -9963,21 +9897,21 @@
 		
 		AST dderequeststate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t718 = _t;
-		AST tmp650_AST_in = (AST)_t;
+		AST __t712 = _t;
+		AST tmp638_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp651_AST_in = (AST)_t;
+		AST tmp639_AST_in = (AST)_t;
 		match(_t,REQUEST);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp652_AST_in = (AST)_t;
+		AST tmp640_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp653_AST_in = (AST)_t;
+		AST tmp641_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -9987,13 +9921,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t720 = _t;
-			AST tmp654_AST_in = (AST)_t;
+			AST __t714 = _t;
+			AST tmp642_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t720;
+			_t = __t714;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10014,7 +9948,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp655_AST_in = (AST)_t;
+			AST tmp643_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -10032,7 +9966,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t718;
+		_t = __t712;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10041,21 +9975,21 @@
 		
 		AST ddesendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t723 = _t;
-		AST tmp656_AST_in = (AST)_t;
+		AST __t717 = _t;
+		AST tmp644_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp657_AST_in = (AST)_t;
+		AST tmp645_AST_in = (AST)_t;
 		match(_t,SEND);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp658_AST_in = (AST)_t;
+		AST tmp646_AST_in = (AST)_t;
 		match(_t,SOURCE);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp659_AST_in = (AST)_t;
+		AST tmp647_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -10065,13 +9999,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t725 = _t;
-			AST tmp660_AST_in = (AST)_t;
+			AST __t719 = _t;
+			AST tmp648_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t725;
+			_t = __t719;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10092,7 +10026,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp661_AST_in = (AST)_t;
+			AST tmp649_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -10110,7 +10044,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t723;
+		_t = __t717;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10119,11 +10053,11 @@
 		
 		AST ddeterminatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t728 = _t;
-		AST tmp662_AST_in = (AST)_t;
+		AST __t722 = _t;
+		AST tmp650_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp663_AST_in = (AST)_t;
+		AST tmp651_AST_in = (AST)_t;
 		match(_t,TERMINATE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -10133,7 +10067,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp664_AST_in = (AST)_t;
+			AST tmp652_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -10151,7 +10085,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t728;
+		_t = __t722;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10160,17 +10094,17 @@
 		
 		AST declarecursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2455 = _t;
-		AST tmp665_AST_in = (AST)_t;
+		AST __t2450 = _t;
+		AST tmp653_AST_in = (AST)_t;
 		match(_t,DECLARE);
 		_t = _t.getFirstChild();
-		AST tmp666_AST_in = (AST)_t;
+		AST tmp654_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp667_AST_in = (AST)_t;
+		AST tmp655_AST_in = (AST)_t;
 		match(_t,CURSOR);
 		_t = _t.getNextSibling();
-		AST tmp668_AST_in = (AST)_t;
+		AST tmp656_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
@@ -10180,8 +10114,8 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST __t2457 = _t;
-			AST tmp669_AST_in = (AST)_t;
+			AST __t2452 = _t;
+			AST tmp657_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getFirstChild();
 			{
@@ -10189,8 +10123,8 @@
 			switch ( _t.getType()) {
 			case READ:
 			{
-				AST __t2459 = _t;
-				AST tmp670_AST_in = (AST)_t;
+				AST __t2454 = _t;
+				AST tmp658_AST_in = (AST)_t;
 				match(_t,READ);
 				_t = _t.getFirstChild();
 				{
@@ -10198,7 +10132,7 @@
 				switch ( _t.getType()) {
 				case ONLY:
 				{
-					AST tmp671_AST_in = (AST)_t;
+					AST tmp659_AST_in = (AST)_t;
 					match(_t,ONLY);
 					_t = _t.getNextSibling();
 					break;
@@ -10213,13 +10147,13 @@
 				}
 				}
 				}
-				_t = __t2459;
+				_t = __t2454;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST tmp672_AST_in = (AST)_t;
+				AST tmp660_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -10230,7 +10164,7 @@
 			}
 			}
 			}
-			_t = __t2457;
+			_t = __t2452;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10247,7 +10181,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2455;
+		_t = __t2450;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10258,7 +10192,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t735 = _t;
+		AST __t729 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -10267,8 +10201,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t737 = _t;
-			AST tmp673_AST_in = (AST)_t;
+			AST __t731 = _t;
+			AST tmp661_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -10276,7 +10210,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp674_AST_in = (AST)_t;
+				AST tmp662_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -10291,16 +10225,16 @@
 			}
 			}
 			}
-			AST tmp675_AST_in = (AST)_t;
+			AST tmp663_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t737;
+			_t = __t731;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp676_AST_in = (AST)_t;
+			AST tmp664_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -10315,7 +10249,7 @@
 		}
 		}
 		}
-		AST tmp677_AST_in = (AST)_t;
+		AST tmp665_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -10329,14 +10263,14 @@
 		switch ( _t.getType()) {
 		case QUERY:
 		{
-			AST __t740 = _t;
-			AST tmp678_AST_in = (AST)_t;
+			AST __t734 = _t;
+			AST tmp666_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp679_AST_in = (AST)_t;
+			AST tmp667_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t740;
+			_t = __t734;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10360,7 +10294,7 @@
 		}
 		}
 		{
-		_loop742:
+		_loop736:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -10374,14 +10308,14 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp680_AST_in = (AST)_t;
+				AST tmp668_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop742;
+				break _loop736;
 			}
 			}
 		} while (true);
@@ -10391,24 +10325,24 @@
 		switch ( _t.getType()) {
 		case DISPLAY:
 		{
-			AST __t744 = _t;
-			AST tmp681_AST_in = (AST)_t;
+			AST __t738 = _t;
+			AST tmp669_AST_in = (AST)_t;
 			match(_t,DISPLAY);
 			_t = _t.getFirstChild();
 			{
-			_loop751:
+			_loop745:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
-					AST __t746 = _t;
-					AST tmp682_AST_in = (AST)_t;
+					AST __t740 = _t;
+					AST tmp670_AST_in = (AST)_t;
 					match(_t,Form_item);
 					_t = _t.getFirstChild();
 					{
-					boolean synPredMatched749 = false;
+					boolean synPredMatched743 = false;
 					if (((_t.getType()==RECORD_NAME))) {
-						AST __t749 = _t;
-						synPredMatched749 = true;
+						AST __t743 = _t;
+						synPredMatched743 = true;
 						inputState.guessing++;
 						try {
 							{
@@ -10417,12 +10351,12 @@
 							}
 						}
 						catch (RecognitionException pe) {
-							synPredMatched749 = false;
+							synPredMatched743 = false;
 						}
-						_t = __t749;
+						_t = __t743;
 						inputState.guessing--;
 					}
-					if ( synPredMatched749 ) {
+					if ( synPredMatched743 ) {
 						tbl(_t,CQ.INIT);
 						_t = _retTree;
 					}
@@ -10458,11 +10392,11 @@
 					}
 					
 					}
-					_t = __t746;
+					_t = __t740;
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop751;
+					break _loop745;
 				}
 				
 			} while (true);
@@ -10472,12 +10406,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t753 = _t;
-				AST tmp683_AST_in = (AST)_t;
+				AST __t747 = _t;
+				AST tmp671_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop755:
+				_loop749:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -10485,12 +10419,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop755;
+						break _loop749;
 					}
 					
 				} while (true);
 				}
-				_t = __t753;
+				_t = __t747;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10504,15 +10438,15 @@
 			}
 			}
 			}
-			_t = __t744;
+			_t = __t738;
 			_t = _t.getNextSibling();
 			{
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ENABLE:
 			{
-				AST __t757 = _t;
-				AST tmp684_AST_in = (AST)_t;
+				AST __t751 = _t;
+				AST tmp672_AST_in = (AST)_t;
 				match(_t,ENABLE);
 				_t = _t.getFirstChild();
 				{
@@ -10520,8 +10454,8 @@
 				switch ( _t.getType()) {
 				case ALL:
 				{
-					AST __t759 = _t;
-					AST tmp685_AST_in = (AST)_t;
+					AST __t753 = _t;
+					AST tmp673_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getFirstChild();
 					{
@@ -10529,12 +10463,12 @@
 					switch ( _t.getType()) {
 					case EXCEPT:
 					{
-						AST __t761 = _t;
-						AST tmp686_AST_in = (AST)_t;
+						AST __t755 = _t;
+						AST tmp674_AST_in = (AST)_t;
 						match(_t,EXCEPT);
 						_t = _t.getFirstChild();
 						{
-						_loop763:
+						_loop757:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==Field_ref)) {
@@ -10542,12 +10476,12 @@
 								_t = _retTree;
 							}
 							else {
-								break _loop763;
+								break _loop757;
 							}
 							
 						} while (true);
 						}
-						_t = __t761;
+						_t = __t755;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -10561,7 +10495,7 @@
 					}
 					}
 					}
-					_t = __t759;
+					_t = __t753;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -10569,71 +10503,71 @@
 				case Form_item:
 				{
 					{
-					_loop770:
+					_loop764:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==Form_item)) {
-							AST __t765 = _t;
-							AST tmp687_AST_in = (AST)_t;
+							AST __t759 = _t;
+							AST tmp675_AST_in = (AST)_t;
 							match(_t,Form_item);
 							_t = _t.getFirstChild();
 							fld(_t,CQ.SYMBOL);
 							_t = _retTree;
 							{
-							_loop769:
+							_loop763:
 							do {
 								if (_t==null) _t=ASTNULL;
 								switch ( _t.getType()) {
 								case HELP:
 								{
-									AST __t767 = _t;
-									AST tmp688_AST_in = (AST)_t;
+									AST __t761 = _t;
+									AST tmp676_AST_in = (AST)_t;
 									match(_t,HELP);
 									_t = _t.getFirstChild();
 									constant(_t);
 									_t = _retTree;
-									_t = __t767;
+									_t = __t761;
 									_t = _t.getNextSibling();
 									break;
 								}
 								case VALIDATE:
 								{
-									AST __t768 = _t;
-									AST tmp689_AST_in = (AST)_t;
+									AST __t762 = _t;
+									AST tmp677_AST_in = (AST)_t;
 									match(_t,VALIDATE);
 									_t = _t.getFirstChild();
 									funargs(_t);
 									_t = _retTree;
-									_t = __t768;
+									_t = __t762;
 									_t = _t.getNextSibling();
 									break;
 								}
 								case AUTORETURN:
 								{
-									AST tmp690_AST_in = (AST)_t;
+									AST tmp678_AST_in = (AST)_t;
 									match(_t,AUTORETURN);
 									_t = _t.getNextSibling();
 									break;
 								}
 								case DISABLEAUTOZAP:
 								{
-									AST tmp691_AST_in = (AST)_t;
+									AST tmp679_AST_in = (AST)_t;
 									match(_t,DISABLEAUTOZAP);
 									_t = _t.getNextSibling();
 									break;
 								}
 								default:
 								{
-									break _loop769;
+									break _loop763;
 								}
 								}
 							} while (true);
 							}
-							_t = __t765;
+							_t = __t759;
 							_t = _t.getNextSibling();
 						}
 						else {
-							break _loop770;
+							break _loop764;
 						}
 						
 					} while (true);
@@ -10646,7 +10580,7 @@
 				}
 				}
 				}
-				_t = __t757;
+				_t = __t751;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10681,7 +10615,7 @@
 		}
 		}
 		{
-		_loop772:
+		_loop766:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WITH)) {
@@ -10689,7 +10623,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop772;
+				break _loop766;
 			}
 			
 		} while (true);
@@ -10720,13 +10654,13 @@
 		switch ( _t.getType()) {
 		case CONTEXTHELPID:
 		{
-			AST __t775 = _t;
-			AST tmp692_AST_in = (AST)_t;
+			AST __t769 = _t;
+			AST tmp680_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t775;
+			_t = __t769;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10746,7 +10680,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t735;
+		_t = __t729;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10758,7 +10692,7 @@
 		AST id = null;
 		AST rec = null;
 		
-		AST __t777 = _t;
+		AST __t771 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -10767,8 +10701,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t779 = _t;
-			AST tmp693_AST_in = (AST)_t;
+			AST __t773 = _t;
+			AST tmp681_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -10776,7 +10710,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp694_AST_in = (AST)_t;
+				AST tmp682_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -10791,16 +10725,16 @@
 			}
 			}
 			}
-			AST tmp695_AST_in = (AST)_t;
+			AST tmp683_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t779;
+			_t = __t773;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp696_AST_in = (AST)_t;
+			AST tmp684_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -10815,13 +10749,13 @@
 		}
 		}
 		}
-		AST tmp697_AST_in = (AST)_t;
+		AST tmp685_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp698_AST_in = (AST)_t;
+		AST tmp686_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		rec = _t==ASTNULL ? null : (AST)_t;
@@ -10835,7 +10769,7 @@
 		switch ( _t.getType()) {
 		case PRESELECT:
 		{
-			AST tmp699_AST_in = (AST)_t;
+			AST tmp687_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -10881,12 +10815,12 @@
 		switch ( _t.getType()) {
 		case FIELDS:
 		{
-			AST __t784 = _t;
-			AST tmp700_AST_in = (AST)_t;
+			AST __t778 = _t;
+			AST tmp688_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
-			_loop786:
+			_loop780:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -10894,12 +10828,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop786;
+					break _loop780;
 				}
 				
 			} while (true);
 			}
-			_t = __t784;
+			_t = __t778;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10916,7 +10850,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t777;
+		_t = __t771;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10927,7 +10861,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t788 = _t;
+		AST __t782 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -10936,8 +10870,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t790 = _t;
-			AST tmp701_AST_in = (AST)_t;
+			AST __t784 = _t;
+			AST tmp689_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -10945,7 +10879,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp702_AST_in = (AST)_t;
+				AST tmp690_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -10960,16 +10894,16 @@
 			}
 			}
 			}
-			AST tmp703_AST_in = (AST)_t;
+			AST tmp691_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t790;
+			_t = __t784;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp704_AST_in = (AST)_t;
+			AST tmp692_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -10984,7 +10918,7 @@
 		}
 		}
 		}
-		AST tmp705_AST_in = (AST)_t;
+		AST tmp693_AST_in = (AST)_t;
 		match(_t,BUTTON);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -10994,27 +10928,27 @@
 			push(action.defineSymbol(BUTTON, def, id));
 		}
 		{
-		_loop813:
+		_loop807:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case AUTOGO:
 			{
-				AST tmp706_AST_in = (AST)_t;
+				AST tmp694_AST_in = (AST)_t;
 				match(_t,AUTOGO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTOENDKEY:
 			{
-				AST tmp707_AST_in = (AST)_t;
+				AST tmp695_AST_in = (AST)_t;
 				match(_t,AUTOENDKEY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULT:
 			{
-				AST tmp708_AST_in = (AST)_t;
+				AST tmp696_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getNextSibling();
 				break;
@@ -11030,44 +10964,44 @@
 			}
 			case CONTEXTHELPID:
 			{
-				AST __t793 = _t;
-				AST tmp709_AST_in = (AST)_t;
+				AST __t787 = _t;
+				AST tmp697_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t793;
+				_t = __t787;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPTARGET:
 			{
-				AST tmp710_AST_in = (AST)_t;
+				AST tmp698_AST_in = (AST)_t;
 				match(_t,DROPTARGET);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t794 = _t;
-				AST tmp711_AST_in = (AST)_t;
+				AST __t788 = _t;
+				AST tmp699_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t794;
+				_t = __t788;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEDOWN:
 			{
-				AST __t795 = _t;
-				AST tmp712_AST_in = (AST)_t;
+				AST __t789 = _t;
+				AST tmp700_AST_in = (AST)_t;
 				match(_t,IMAGEDOWN);
 				_t = _t.getFirstChild();
 				{
-				int _cnt797=0;
-				_loop797:
+				int _cnt791=0;
+				_loop791:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_9.member(_t.getType()))) {
@@ -11075,25 +11009,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt797>=1 ) { break _loop797; } else {throw new NoViableAltException(_t);}
+						if ( _cnt791>=1 ) { break _loop791; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt797++;
+					_cnt791++;
 				} while (true);
 				}
-				_t = __t795;
+				_t = __t789;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGE:
 			{
-				AST __t798 = _t;
-				AST tmp713_AST_in = (AST)_t;
+				AST __t792 = _t;
+				AST tmp701_AST_in = (AST)_t;
 				match(_t,IMAGE);
 				_t = _t.getFirstChild();
 				{
-				int _cnt800=0;
-				_loop800:
+				int _cnt794=0;
+				_loop794:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_9.member(_t.getType()))) {
@@ -11101,25 +11035,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt800>=1 ) { break _loop800; } else {throw new NoViableAltException(_t);}
+						if ( _cnt794>=1 ) { break _loop794; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt800++;
+					_cnt794++;
 				} while (true);
 				}
-				_t = __t798;
+				_t = __t792;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEUP:
 			{
-				AST __t801 = _t;
-				AST tmp714_AST_in = (AST)_t;
+				AST __t795 = _t;
+				AST tmp702_AST_in = (AST)_t;
 				match(_t,IMAGEUP);
 				_t = _t.getFirstChild();
 				{
-				int _cnt803=0;
-				_loop803:
+				int _cnt797=0;
+				_loop797:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_9.member(_t.getType()))) {
@@ -11127,25 +11061,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt803>=1 ) { break _loop803; } else {throw new NoViableAltException(_t);}
+						if ( _cnt797>=1 ) { break _loop797; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt803++;
+					_cnt797++;
 				} while (true);
 				}
-				_t = __t801;
+				_t = __t795;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEINSENSITIVE:
 			{
-				AST __t804 = _t;
-				AST tmp715_AST_in = (AST)_t;
+				AST __t798 = _t;
+				AST tmp703_AST_in = (AST)_t;
 				match(_t,IMAGEINSENSITIVE);
 				_t = _t.getFirstChild();
 				{
-				int _cnt806=0;
-				_loop806:
+				int _cnt800=0;
+				_loop800:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_9.member(_t.getType()))) {
@@ -11153,25 +11087,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt806>=1 ) { break _loop806; } else {throw new NoViableAltException(_t);}
+						if ( _cnt800>=1 ) { break _loop800; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt806++;
+					_cnt800++;
 				} while (true);
 				}
-				_t = __t804;
+				_t = __t798;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MOUSEPOINTER:
 			{
-				AST __t807 = _t;
-				AST tmp716_AST_in = (AST)_t;
+				AST __t801 = _t;
+				AST tmp704_AST_in = (AST)_t;
 				match(_t,MOUSEPOINTER);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t807;
+				_t = __t801;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -11184,8 +11118,8 @@
 			}
 			case LIKE:
 			{
-				AST __t808 = _t;
-				AST tmp717_AST_in = (AST)_t;
+				AST __t802 = _t;
+				AST tmp705_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11195,7 +11129,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp718_AST_in = (AST)_t;
+					AST tmp706_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -11210,21 +11144,21 @@
 				}
 				}
 				}
-				_t = __t808;
+				_t = __t802;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FLATBUTTON:
 			{
-				AST tmp719_AST_in = (AST)_t;
+				AST tmp707_AST_in = (AST)_t;
 				match(_t,FLATBUTTON);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOFOCUS:
 			{
-				AST __t810 = _t;
-				AST tmp720_AST_in = (AST)_t;
+				AST __t804 = _t;
+				AST tmp708_AST_in = (AST)_t;
 				match(_t,NOFOCUS);
 				_t = _t.getFirstChild();
 				{
@@ -11232,7 +11166,7 @@
 				switch ( _t.getType()) {
 				case FLATBUTTON:
 				{
-					AST tmp721_AST_in = (AST)_t;
+					AST tmp709_AST_in = (AST)_t;
 					match(_t,FLATBUTTON);
 					_t = _t.getNextSibling();
 					break;
@@ -11247,13 +11181,13 @@
 				}
 				}
 				}
-				_t = __t810;
+				_t = __t804;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONVERT3DCOLORS:
 			{
-				AST tmp722_AST_in = (AST)_t;
+				AST tmp710_AST_in = (AST)_t;
 				match(_t,NOCONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -11275,7 +11209,7 @@
 				switch ( _t.getType()) {
 				case MARGINEXTRA:
 				{
-					AST tmp723_AST_in = (AST)_t;
+					AST tmp711_AST_in = (AST)_t;
 					match(_t,MARGINEXTRA);
 					_t = _t.getNextSibling();
 					break;
@@ -11321,7 +11255,7 @@
 			}
 			default:
 			{
-				break _loop813;
+				break _loop807;
 			}
 			}
 		} while (true);
@@ -11351,7 +11285,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t788;
+		_t = __t782;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11362,7 +11296,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t816 = _t;
+		AST __t810 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -11371,8 +11305,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t818 = _t;
-			AST tmp724_AST_in = (AST)_t;
+			AST __t812 = _t;
+			AST tmp712_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -11380,7 +11314,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp725_AST_in = (AST)_t;
+				AST tmp713_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -11395,16 +11329,16 @@
 			}
 			}
 			}
-			AST tmp726_AST_in = (AST)_t;
+			AST tmp714_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t818;
+			_t = __t812;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp727_AST_in = (AST)_t;
+			AST tmp715_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -11419,7 +11353,7 @@
 		}
 		}
 		}
-		AST tmp728_AST_in = (AST)_t;
+		AST tmp716_AST_in = (AST)_t;
 		match(_t,DATASET);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -11428,24 +11362,24 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(DATASET, def, id));
 		}
-		AST tmp729_AST_in = (AST)_t;
+		AST tmp717_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
 		_t = _retTree;
 		{
-		_loop821:
+		_loop815:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp730_AST_in = (AST)_t;
+				AST tmp718_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
 				_t = _retTree;
 			}
 			else {
-				break _loop821;
+				break _loop815;
 			}
 			
 		} while (true);
@@ -11458,7 +11392,7 @@
 			data_relation(_t);
 			_t = _retTree;
 			{
-			_loop825:
+			_loop819:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA||_t.getType()==DATARELATION)) {
@@ -11467,7 +11401,7 @@
 					switch ( _t.getType()) {
 					case COMMA:
 					{
-						AST tmp731_AST_in = (AST)_t;
+						AST tmp719_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						break;
@@ -11486,7 +11420,7 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop825;
+					break _loop819;
 				}
 				
 			} while (true);
@@ -11509,7 +11443,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t816;
+		_t = __t810;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11520,7 +11454,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t836 = _t;
+		AST __t830 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -11529,8 +11463,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t838 = _t;
-			AST tmp732_AST_in = (AST)_t;
+			AST __t832 = _t;
+			AST tmp720_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -11538,7 +11472,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp733_AST_in = (AST)_t;
+				AST tmp721_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -11553,16 +11487,16 @@
 			}
 			}
 			}
-			AST tmp734_AST_in = (AST)_t;
+			AST tmp722_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t838;
+			_t = __t832;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp735_AST_in = (AST)_t;
+			AST tmp723_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -11577,7 +11511,7 @@
 		}
 		}
 		}
-		AST tmp736_AST_in = (AST)_t;
+		AST tmp724_AST_in = (AST)_t;
 		match(_t,DATASOURCE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -11586,7 +11520,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(DATASOURCE, def, id));
 		}
-		AST tmp737_AST_in = (AST)_t;
+		AST tmp725_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -11594,14 +11528,14 @@
 		switch ( _t.getType()) {
 		case QUERY:
 		{
-			AST __t841 = _t;
-			AST tmp738_AST_in = (AST)_t;
+			AST __t835 = _t;
+			AST tmp726_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp739_AST_in = (AST)_t;
+			AST tmp727_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t841;
+			_t = __t835;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11638,18 +11572,18 @@
 		}
 		}
 		{
-		_loop844:
+		_loop838:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp740_AST_in = (AST)_t;
+				AST tmp728_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				source_buffer_phrase(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop844;
+				break _loop838;
 			}
 			
 		} while (true);
@@ -11657,7 +11591,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t836;
+		_t = __t830;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11668,7 +11602,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t852 = _t;
+		AST __t846 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -11677,8 +11611,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t854 = _t;
-			AST tmp741_AST_in = (AST)_t;
+			AST __t848 = _t;
+			AST tmp729_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -11686,7 +11620,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp742_AST_in = (AST)_t;
+				AST tmp730_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -11701,16 +11635,16 @@
 			}
 			}
 			}
-			AST tmp743_AST_in = (AST)_t;
+			AST tmp731_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t854;
+			_t = __t848;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp744_AST_in = (AST)_t;
+			AST tmp732_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -11725,17 +11659,17 @@
 		}
 		}
 		}
-		AST tmp745_AST_in = (AST)_t;
+		AST tmp733_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
-			push(action.defineSymbol(FRAME, def, id));
+			action.frameDef(def, id);
 		}
 		{
-		_loop857:
+		_loop851:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -11743,7 +11677,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop857;
+				break _loop851;
 			}
 			
 		} while (true);
@@ -11753,13 +11687,13 @@
 		switch ( _t.getType()) {
 		case HEADER:
 		{
-			AST __t859 = _t;
-			AST tmp746_AST_in = (AST)_t;
+			AST __t853 = _t;
+			AST tmp734_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
-			int _cnt861=0;
-			_loop861:
+			int _cnt855=0;
+			_loop855:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -11767,25 +11701,25 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt861>=1 ) { break _loop861; } else {throw new NoViableAltException(_t);}
+					if ( _cnt855>=1 ) { break _loop855; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt861++;
+				_cnt855++;
 			} while (true);
 			}
-			_t = __t859;
+			_t = __t853;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKGROUND:
 		{
-			AST __t862 = _t;
-			AST tmp747_AST_in = (AST)_t;
+			AST __t856 = _t;
+			AST tmp735_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
-			int _cnt864=0;
-			_loop864:
+			int _cnt858=0;
+			_loop858:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -11793,13 +11727,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt864>=1 ) { break _loop864; } else {throw new NoViableAltException(_t);}
+					if ( _cnt858>=1 ) { break _loop858; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt864++;
+				_cnt858++;
 			} while (true);
 			}
-			_t = __t862;
+			_t = __t856;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11821,12 +11755,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t866 = _t;
-			AST tmp748_AST_in = (AST)_t;
+			AST __t860 = _t;
+			AST tmp736_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop868:
+			_loop862:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -11834,12 +11768,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop868;
+					break _loop862;
 				}
 				
 			} while (true);
 			}
-			_t = __t866;
+			_t = __t860;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11877,10 +11811,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		if ( inputState.guessing==0 ) {
-			action.addToScope(pop());
-		}
-		_t = __t852;
+		_t = __t846;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11891,7 +11822,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t871 = _t;
+		AST __t865 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -11900,8 +11831,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t873 = _t;
-			AST tmp749_AST_in = (AST)_t;
+			AST __t867 = _t;
+			AST tmp737_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -11909,7 +11840,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp750_AST_in = (AST)_t;
+				AST tmp738_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -11924,16 +11855,16 @@
 			}
 			}
 			}
-			AST tmp751_AST_in = (AST)_t;
+			AST tmp739_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t873;
+			_t = __t867;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp752_AST_in = (AST)_t;
+			AST tmp740_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -11948,7 +11879,7 @@
 		}
 		}
 		}
-		AST tmp753_AST_in = (AST)_t;
+		AST tmp741_AST_in = (AST)_t;
 		match(_t,IMAGE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -11958,14 +11889,14 @@
 			push(action.defineSymbol(IMAGE, def, id));
 		}
 		{
-		_loop880:
+		_loop874:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LIKE:
 			{
-				AST __t876 = _t;
-				AST tmp754_AST_in = (AST)_t;
+				AST __t870 = _t;
+				AST tmp742_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11975,7 +11906,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp755_AST_in = (AST)_t;
+					AST tmp743_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -11990,7 +11921,7 @@
 				}
 				}
 				}
-				_t = __t876;
+				_t = __t870;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -12023,7 +11954,7 @@
 			}
 			case CONVERT3DCOLORS:
 			{
-				AST tmp756_AST_in = (AST)_t;
+				AST tmp744_AST_in = (AST)_t;
 				match(_t,CONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -12036,8 +11967,8 @@
 			}
 			case STRETCHTOFIT:
 			{
-				AST __t878 = _t;
-				AST tmp757_AST_in = (AST)_t;
+				AST __t872 = _t;
+				AST tmp745_AST_in = (AST)_t;
 				match(_t,STRETCHTOFIT);
 				_t = _t.getFirstChild();
 				{
@@ -12045,7 +11976,7 @@
 				switch ( _t.getType()) {
 				case RETAINSHAPE:
 				{
-					AST tmp758_AST_in = (AST)_t;
+					AST tmp746_AST_in = (AST)_t;
 					match(_t,RETAINSHAPE);
 					_t = _t.getNextSibling();
 					break;
@@ -12060,20 +11991,20 @@
 				}
 				}
 				}
-				_t = __t878;
+				_t = __t872;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TRANSPARENT:
 			{
-				AST tmp759_AST_in = (AST)_t;
+				AST tmp747_AST_in = (AST)_t;
 				match(_t,TRANSPARENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop880;
+				break _loop874;
 			}
 			}
 		} while (true);
@@ -12103,7 +12034,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t871;
+		_t = __t865;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12114,7 +12045,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t883 = _t;
+		AST __t877 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -12123,8 +12054,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t885 = _t;
-			AST tmp760_AST_in = (AST)_t;
+			AST __t879 = _t;
+			AST tmp748_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -12132,7 +12063,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp761_AST_in = (AST)_t;
+				AST tmp749_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -12147,16 +12078,16 @@
 			}
 			}
 			}
-			AST tmp762_AST_in = (AST)_t;
+			AST tmp750_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t885;
+			_t = __t879;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp763_AST_in = (AST)_t;
+			AST tmp751_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -12171,7 +12102,7 @@
 		}
 		}
 		}
-		AST tmp764_AST_in = (AST)_t;
+		AST tmp752_AST_in = (AST)_t;
 		match(_t,MENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -12181,7 +12112,7 @@
 			push(action.defineSymbol(MENU, def, id));
 		}
 		{
-		_loop888:
+		_loop882:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_10.member(_t.getType()))) {
@@ -12189,13 +12120,13 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop888;
+				break _loop882;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop890:
+		_loop884:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_11.member(_t.getType()))) {
@@ -12203,7 +12134,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop890;
+				break _loop884;
 			}
 			
 		} while (true);
@@ -12213,7 +12144,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
 		}
-		_t = __t883;
+		_t = __t877;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12228,7 +12159,7 @@
 		AST id3 = null;
 		AST id2 = null;
 		
-		AST __t917 = _t;
+		AST __t911 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -12237,8 +12168,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t919 = _t;
-			AST tmp765_AST_in = (AST)_t;
+			AST __t913 = _t;
+			AST tmp753_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -12246,7 +12177,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp766_AST_in = (AST)_t;
+				AST tmp754_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -12261,16 +12192,16 @@
 			}
 			}
 			}
-			AST tmp767_AST_in = (AST)_t;
+			AST tmp755_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t919;
+			_t = __t913;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp768_AST_in = (AST)_t;
+			AST tmp756_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -12294,16 +12225,16 @@
 		switch ( _t.getType()) {
 		case PARAMETER:
 		{
-			AST tmp769_AST_in = (AST)_t;
+			AST tmp757_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
-			AST tmp770_AST_in = (AST)_t;
+			AST tmp758_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			bid = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp771_AST_in = (AST)_t;
+			AST tmp759_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			brec = _t==ASTNULL ? null : (AST)_t;
@@ -12317,7 +12248,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp772_AST_in = (AST)_t;
+				AST tmp760_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -12363,12 +12294,12 @@
 			switch ( _t.getType()) {
 			case FIELDS:
 			{
-				AST __t925 = _t;
-				AST tmp773_AST_in = (AST)_t;
+				AST __t919 = _t;
+				AST tmp761_AST_in = (AST)_t;
 				match(_t,FIELDS);
 				_t = _t.getFirstChild();
 				{
-				_loop927:
+				_loop921:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -12376,12 +12307,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop927;
+						break _loop921;
 					}
 					
 				} while (true);
 				}
-				_t = __t925;
+				_t = __t919;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -12408,28 +12339,28 @@
 			switch ( _t.getType()) {
 			case INPUT:
 			{
-				AST tmp774_AST_in = (AST)_t;
+				AST tmp762_AST_in = (AST)_t;
 				match(_t,INPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OUTPUT:
 			{
-				AST tmp775_AST_in = (AST)_t;
+				AST tmp763_AST_in = (AST)_t;
 				match(_t,OUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INPUTOUTPUT:
 			{
-				AST tmp776_AST_in = (AST)_t;
+				AST tmp764_AST_in = (AST)_t;
 				match(_t,INPUTOUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURN:
 			{
-				AST tmp777_AST_in = (AST)_t;
+				AST tmp765_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -12440,7 +12371,7 @@
 			}
 			}
 			}
-			AST tmp778_AST_in = (AST)_t;
+			AST tmp766_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
 			{
@@ -12448,10 +12379,10 @@
 			switch ( _t.getType()) {
 			case TABLE:
 			{
-				AST tmp779_AST_in = (AST)_t;
+				AST tmp767_AST_in = (AST)_t;
 				match(_t,TABLE);
 				_t = _t.getNextSibling();
-				AST tmp780_AST_in = (AST)_t;
+				AST tmp768_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.TEMPTABLESYMBOL);
@@ -12461,7 +12392,7 @@
 				switch ( _t.getType()) {
 				case APPEND:
 				{
-					AST tmp781_AST_in = (AST)_t;
+					AST tmp769_AST_in = (AST)_t;
 					match(_t,APPEND);
 					_t = _t.getNextSibling();
 					break;
@@ -12481,7 +12412,7 @@
 			}
 			case TABLEHANDLE:
 			{
-				AST tmp782_AST_in = (AST)_t;
+				AST tmp770_AST_in = (AST)_t;
 				match(_t,TABLEHANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -12489,7 +12420,7 @@
 				switch ( _t.getType()) {
 				case FOR:
 				{
-					AST tmp783_AST_in = (AST)_t;
+					AST tmp771_AST_in = (AST)_t;
 					match(_t,FOR);
 					_t = _t.getNextSibling();
 					break;
@@ -12512,7 +12443,7 @@
 				switch ( _t.getType()) {
 				case APPEND:
 				{
-					AST tmp784_AST_in = (AST)_t;
+					AST tmp772_AST_in = (AST)_t;
 					match(_t,APPEND);
 					_t = _t.getNextSibling();
 					break;
@@ -12535,37 +12466,37 @@
 			}
 			case DATASET:
 			{
-				AST tmp785_AST_in = (AST)_t;
+				AST tmp773_AST_in = (AST)_t;
 				match(_t,DATASET);
 				_t = _t.getNextSibling();
-				AST tmp786_AST_in = (AST)_t;
+				AST tmp774_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
-				AST tmp787_AST_in = (AST)_t;
+				AST tmp775_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop934:
+				_loop928:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp788_AST_in = (AST)_t;
+						AST tmp776_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BYVALUE:
 					{
-						AST tmp789_AST_in = (AST)_t;
+						AST tmp777_AST_in = (AST)_t;
 						match(_t,BYVALUE);
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop934;
+						break _loop928;
 					}
 					}
 				} while (true);
@@ -12574,7 +12505,7 @@
 			}
 			case DATASETHANDLE:
 			{
-				AST tmp790_AST_in = (AST)_t;
+				AST tmp778_AST_in = (AST)_t;
 				match(_t,DATASETHANDLE);
 				_t = _t.getNextSibling();
 				id3 = (AST)_t;
@@ -12585,7 +12516,7 @@
 				switch ( _t.getType()) {
 				case BYVALUE:
 				{
-					AST tmp791_AST_in = (AST)_t;
+					AST tmp779_AST_in = (AST)_t;
 					match(_t,BYVALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -12657,7 +12588,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t917;
+		_t = __t911;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12668,7 +12599,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t952 = _t;
+		AST __t946 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -12677,8 +12608,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t954 = _t;
-			AST tmp792_AST_in = (AST)_t;
+			AST __t948 = _t;
+			AST tmp780_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -12686,7 +12617,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp793_AST_in = (AST)_t;
+				AST tmp781_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -12701,16 +12632,16 @@
 			}
 			}
 			}
-			AST tmp794_AST_in = (AST)_t;
+			AST tmp782_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t954;
+			_t = __t948;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp795_AST_in = (AST)_t;
+			AST tmp783_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -12725,7 +12656,7 @@
 		}
 		}
 		}
-		AST tmp796_AST_in = (AST)_t;
+		AST tmp784_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -12734,7 +12665,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(QUERY, def, id));
 		}
-		AST tmp797_AST_in = (AST)_t;
+		AST tmp785_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -12765,11 +12696,11 @@
 		}
 		}
 		{
-		_loop959:
+		_loop953:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp798_AST_in = (AST)_t;
+				AST tmp786_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
@@ -12801,52 +12732,52 @@
 				}
 			}
 			else {
-				break _loop959;
+				break _loop953;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop962:
+		_loop956:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case CACHE:
 			{
-				AST __t961 = _t;
-				AST tmp799_AST_in = (AST)_t;
+				AST __t955 = _t;
+				AST tmp787_AST_in = (AST)_t;
 				match(_t,CACHE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t961;
+				_t = __t955;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLING:
 			{
-				AST tmp800_AST_in = (AST)_t;
+				AST tmp788_AST_in = (AST)_t;
 				match(_t,SCROLLING);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RCODEINFORMATION:
 			{
-				AST tmp801_AST_in = (AST)_t;
+				AST tmp789_AST_in = (AST)_t;
 				match(_t,RCODEINFORMATION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop962;
+				break _loop956;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t952;
+		_t = __t946;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
@@ -12860,7 +12791,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t964 = _t;
+		AST __t958 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -12869,8 +12800,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t966 = _t;
-			AST tmp802_AST_in = (AST)_t;
+			AST __t960 = _t;
+			AST tmp790_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -12878,7 +12809,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp803_AST_in = (AST)_t;
+				AST tmp791_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -12893,16 +12824,16 @@
 			}
 			}
 			}
-			AST tmp804_AST_in = (AST)_t;
+			AST tmp792_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t966;
+			_t = __t960;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp805_AST_in = (AST)_t;
+			AST tmp793_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -12917,7 +12848,7 @@
 		}
 		}
 		}
-		AST tmp806_AST_in = (AST)_t;
+		AST tmp794_AST_in = (AST)_t;
 		match(_t,RECTANGLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -12927,38 +12858,38 @@
 			push(action.defineSymbol(RECTANGLE, def, id));
 		}
 		{
-		_loop973:
+		_loop967:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOFILL:
 			{
-				AST tmp807_AST_in = (AST)_t;
+				AST tmp795_AST_in = (AST)_t;
 				match(_t,NOFILL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EDGECHARS:
 			{
-				AST __t969 = _t;
-				AST tmp808_AST_in = (AST)_t;
+				AST __t963 = _t;
+				AST tmp796_AST_in = (AST)_t;
 				match(_t,EDGECHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t969;
+				_t = __t963;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EDGEPIXELS:
 			{
-				AST __t970 = _t;
-				AST tmp809_AST_in = (AST)_t;
+				AST __t964 = _t;
+				AST tmp797_AST_in = (AST)_t;
 				match(_t,EDGEPIXELS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t970;
+				_t = __t964;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -12973,15 +12904,15 @@
 			}
 			case GRAPHICEDGE:
 			{
-				AST tmp810_AST_in = (AST)_t;
+				AST tmp798_AST_in = (AST)_t;
 				match(_t,GRAPHICEDGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t971 = _t;
-				AST tmp811_AST_in = (AST)_t;
+				AST __t965 = _t;
+				AST tmp799_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -12991,7 +12922,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp812_AST_in = (AST)_t;
+					AST tmp800_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -13006,7 +12937,7 @@
 				}
 				}
 				}
-				_t = __t971;
+				_t = __t965;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -13026,7 +12957,7 @@
 			}
 			default:
 			{
-				break _loop973;
+				break _loop967;
 			}
 			}
 		} while (true);
@@ -13053,7 +12984,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t964;
+		_t = __t958;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
@@ -13067,7 +12998,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t976 = _t;
+		AST __t970 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13076,8 +13007,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t978 = _t;
-			AST tmp813_AST_in = (AST)_t;
+			AST __t972 = _t;
+			AST tmp801_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13085,7 +13016,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp814_AST_in = (AST)_t;
+				AST tmp802_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13100,16 +13031,16 @@
 			}
 			}
 			}
-			AST tmp815_AST_in = (AST)_t;
+			AST tmp803_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t978;
+			_t = __t972;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp816_AST_in = (AST)_t;
+			AST tmp804_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13124,7 +13055,7 @@
 		}
 		}
 		}
-		AST tmp817_AST_in = (AST)_t;
+		AST tmp805_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13132,7 +13063,7 @@
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t976;
+		_t = __t970;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToScope(action.defineSymbol(STREAM, def, id));
@@ -13146,7 +13077,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t981 = _t;
+		AST __t975 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13155,8 +13086,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t983 = _t;
-			AST tmp818_AST_in = (AST)_t;
+			AST __t977 = _t;
+			AST tmp806_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13164,7 +13095,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp819_AST_in = (AST)_t;
+				AST tmp807_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13179,16 +13110,16 @@
 			}
 			}
 			}
-			AST tmp820_AST_in = (AST)_t;
+			AST tmp808_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t983;
+			_t = __t977;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp821_AST_in = (AST)_t;
+			AST tmp809_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13203,7 +13134,7 @@
 		}
 		}
 		}
-		AST tmp822_AST_in = (AST)_t;
+		AST tmp810_AST_in = (AST)_t;
 		match(_t,SUBMENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13213,7 +13144,7 @@
 			push(action.defineSymbol(SUBMENU, def, id));
 		}
 		{
-		_loop986:
+		_loop980:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_10.member(_t.getType()))) {
@@ -13221,13 +13152,13 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop986;
+				break _loop980;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop988:
+		_loop982:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_11.member(_t.getType()))) {
@@ -13235,14 +13166,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop988;
+				break _loop982;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t981;
+		_t = __t975;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
@@ -13257,7 +13188,7 @@
 		AST id = null;
 		AST bt = null;
 		
-		AST __t990 = _t;
+		AST __t984 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13266,8 +13197,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t992 = _t;
-			AST tmp823_AST_in = (AST)_t;
+			AST __t986 = _t;
+			AST tmp811_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13275,7 +13206,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp824_AST_in = (AST)_t;
+				AST tmp812_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13290,16 +13221,16 @@
 			}
 			}
 			}
-			AST tmp825_AST_in = (AST)_t;
+			AST tmp813_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t992;
+			_t = __t986;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp826_AST_in = (AST)_t;
+			AST tmp814_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13314,7 +13245,7 @@
 		}
 		}
 		}
-		AST tmp827_AST_in = (AST)_t;
+		AST tmp815_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13328,14 +13259,14 @@
 		switch ( _t.getType()) {
 		case UNDO:
 		{
-			AST tmp828_AST_in = (AST)_t;
+			AST tmp816_AST_in = (AST)_t;
 			match(_t,UNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp829_AST_in = (AST)_t;
+			AST tmp817_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -13414,8 +13345,8 @@
 		switch ( _t.getType()) {
 		case BEFORETABLE:
 		{
-			AST __t998 = _t;
-			AST tmp830_AST_in = (AST)_t;
+			AST __t992 = _t;
+			AST tmp818_AST_in = (AST)_t;
 			match(_t,BEFORETABLE);
 			_t = _t.getFirstChild();
 			bt = (AST)_t;
@@ -13424,7 +13355,7 @@
 			if ( inputState.guessing==0 ) {
 					action.defineBuffer(bt, bt, id, false);
 			}
-			_t = __t998;
+			_t = __t992;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -13447,7 +13378,7 @@
 		switch ( _t.getType()) {
 		case RCODEINFORMATION:
 		{
-			AST tmp831_AST_in = (AST)_t;
+			AST tmp819_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
@@ -13466,7 +13397,7 @@
 		}
 		}
 		{
-		_loop1001:
+		_loop995:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==FIELD)) {
@@ -13474,25 +13405,25 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1001;
+				break _loop995;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop1012:
+		_loop1006:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==INDEX)) {
-				AST __t1003 = _t;
-				AST tmp832_AST_in = (AST)_t;
+				AST __t997 = _t;
+				AST tmp820_AST_in = (AST)_t;
 				match(_t,INDEX);
 				_t = _t.getFirstChild();
-				AST tmp833_AST_in = (AST)_t;
+				AST tmp821_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop1007:
+				_loop1001:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_12.member(_t.getType()))) {
@@ -13501,14 +13432,14 @@
 						switch ( _t.getType()) {
 						case AS:
 						{
-							AST tmp834_AST_in = (AST)_t;
+							AST tmp822_AST_in = (AST)_t;
 							match(_t,AS);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case IS:
 						{
-							AST tmp835_AST_in = (AST)_t;
+							AST tmp823_AST_in = (AST)_t;
 							match(_t,IS);
 							_t = _t.getNextSibling();
 							break;
@@ -13530,21 +13461,21 @@
 						switch ( _t.getType()) {
 						case UNIQUE:
 						{
-							AST tmp836_AST_in = (AST)_t;
+							AST tmp824_AST_in = (AST)_t;
 							match(_t,UNIQUE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case PRIMARY:
 						{
-							AST tmp837_AST_in = (AST)_t;
+							AST tmp825_AST_in = (AST)_t;
 							match(_t,PRIMARY);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case WORDINDEX:
 						{
-							AST tmp838_AST_in = (AST)_t;
+							AST tmp826_AST_in = (AST)_t;
 							match(_t,WORDINDEX);
 							_t = _t.getNextSibling();
 							break;
@@ -13557,73 +13488,73 @@
 						}
 					}
 					else {
-						break _loop1007;
+						break _loop1001;
 					}
 					
 				} while (true);
 				}
 				{
-				int _cnt1011=0;
-				_loop1011:
+				int _cnt1005=0;
+				_loop1005:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==ID)) {
-						AST tmp839_AST_in = (AST)_t;
+						AST tmp827_AST_in = (AST)_t;
 						match(_t,ID);
 						_t = _t.getNextSibling();
 						{
-						_loop1010:
+						_loop1004:
 						do {
 							if (_t==null) _t=ASTNULL;
 							switch ( _t.getType()) {
 							case ASCENDING:
 							{
-								AST tmp840_AST_in = (AST)_t;
+								AST tmp828_AST_in = (AST)_t;
 								match(_t,ASCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case DESCENDING:
 							{
-								AST tmp841_AST_in = (AST)_t;
+								AST tmp829_AST_in = (AST)_t;
 								match(_t,DESCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case CASESENSITIVE:
 							{
-								AST tmp842_AST_in = (AST)_t;
+								AST tmp830_AST_in = (AST)_t;
 								match(_t,CASESENSITIVE);
 								_t = _t.getNextSibling();
 								break;
 							}
 							default:
 							{
-								break _loop1010;
+								break _loop1004;
 							}
 							}
 						} while (true);
 						}
 					}
 					else {
-						if ( _cnt1011>=1 ) { break _loop1011; } else {throw new NoViableAltException(_t);}
+						if ( _cnt1005>=1 ) { break _loop1005; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt1011++;
+					_cnt1005++;
 				} while (true);
 				}
-				_t = __t1003;
+				_t = __t997;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1012;
+				break _loop1006;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t990;
+		_t = __t984;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13634,7 +13565,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t1026 = _t;
+		AST __t1020 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13643,8 +13574,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t1028 = _t;
-			AST tmp843_AST_in = (AST)_t;
+			AST __t1022 = _t;
+			AST tmp831_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13652,7 +13583,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp844_AST_in = (AST)_t;
+				AST tmp832_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13667,16 +13598,16 @@
 			}
 			}
 			}
-			AST tmp845_AST_in = (AST)_t;
+			AST tmp833_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t1028;
+			_t = __t1022;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp846_AST_in = (AST)_t;
+			AST tmp834_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13691,7 +13622,7 @@
 		}
 		}
 		}
-		AST tmp847_AST_in = (AST)_t;
+		AST tmp835_AST_in = (AST)_t;
 		match(_t,WORKTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13705,7 +13636,7 @@
 		switch ( _t.getType()) {
 		case NOUNDO:
 		{
-			AST tmp848_AST_in = (AST)_t;
+			AST tmp836_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -13771,7 +13702,7 @@
 		}
 		}
 		{
-		_loop1034:
+		_loop1028:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==FIELD)) {
@@ -13779,14 +13710,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1034;
+				break _loop1028;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1026;
+		_t = __t1020;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13797,7 +13728,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t1036 = _t;
+		AST __t1030 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13806,8 +13737,8 @@
 		switch ( _t.getType()) {
 		case NEW:
 		{
-			AST __t1038 = _t;
-			AST tmp849_AST_in = (AST)_t;
+			AST __t1032 = _t;
+			AST tmp837_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13815,7 +13746,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp850_AST_in = (AST)_t;
+				AST tmp838_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13830,16 +13761,16 @@
 			}
 			}
 			}
-			AST tmp851_AST_in = (AST)_t;
+			AST tmp839_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
-			_t = __t1038;
+			_t = __t1032;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp852_AST_in = (AST)_t;
+			AST tmp840_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13854,7 +13785,7 @@
 		}
 		}
 		}
-		AST tmp853_AST_in = (AST)_t;
+		AST tmp841_AST_in = (AST)_t;
 		match(_t,VARIABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13864,7 +13795,7 @@
 			push(action.defineVariable(def, id));
 		}
 		{
-		_loop1041:
+		_loop1035:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_13.member(_t.getType()))) {
@@ -13872,7 +13803,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1041;
+				break _loop1035;
 			}
 			
 		} while (true);
@@ -13899,7 +13830,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1036;
+		_t = __t1030;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToScope(pop());
@@ -13911,13 +13842,13 @@
 		
 		AST dictionarystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1066 = _t;
-		AST tmp854_AST_in = (AST)_t;
+		AST __t1060 = _t;
+		AST tmp842_AST_in = (AST)_t;
 		match(_t,DICTIONARY);
 		_t = _t.getFirstChild();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1066;
+		_t = __t1060;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13926,8 +13857,8 @@
 		
 		AST deletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1044 = _t;
-		AST tmp855_AST_in = (AST)_t;
+		AST __t1038 = _t;
+		AST tmp843_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -13937,13 +13868,13 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST __t1046 = _t;
-			AST tmp856_AST_in = (AST)_t;
+			AST __t1040 = _t;
+			AST tmp844_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1046;
+			_t = __t1040;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -13964,7 +13895,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp857_AST_in = (AST)_t;
+			AST tmp845_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13982,7 +13913,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1044;
+		_t = __t1038;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13991,11 +13922,11 @@
 		
 		AST deletealiasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1049 = _t;
-		AST tmp858_AST_in = (AST)_t;
+		AST __t1043 = _t;
+		AST tmp846_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp859_AST_in = (AST)_t;
+		AST tmp847_AST_in = (AST)_t;
 		match(_t,ALIAS);
 		_t = _t.getNextSibling();
 		{
@@ -14003,14 +13934,14 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp860_AST_in = (AST)_t;
+			AST tmp848_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QSTRING:
 		{
-			AST tmp861_AST_in = (AST)_t;
+			AST tmp849_AST_in = (AST)_t;
 			match(_t,QSTRING);
 			_t = _t.getNextSibling();
 			break;
@@ -14029,7 +13960,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1049;
+		_t = __t1043;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14038,11 +13969,11 @@
 		
 		AST deletefromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2462 = _t;
-		AST tmp862_AST_in = (AST)_t;
+		AST __t2457 = _t;
+		AST tmp850_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp863_AST_in = (AST)_t;
+		AST tmp851_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -14052,8 +13983,8 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t2464 = _t;
-			AST tmp864_AST_in = (AST)_t;
+			AST __t2459 = _t;
+			AST tmp852_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -14061,17 +13992,17 @@
 			switch ( _t.getType()) {
 			case CURRENT:
 			{
-				AST __t2466 = _t;
-				AST tmp865_AST_in = (AST)_t;
+				AST __t2461 = _t;
+				AST tmp853_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getFirstChild();
-				AST tmp866_AST_in = (AST)_t;
+				AST tmp854_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp867_AST_in = (AST)_t;
+				AST tmp855_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				_t = __t2466;
+				_t = __t2461;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -14090,7 +14021,7 @@
 			}
 			}
 			}
-			_t = __t2464;
+			_t = __t2459;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -14107,7 +14038,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2462;
+		_t = __t2457;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14116,11 +14047,11 @@
 		
 		AST deleteobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1052 = _t;
-		AST tmp868_AST_in = (AST)_t;
+		AST __t1046 = _t;
+		AST tmp856_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp869_AST_in = (AST)_t;
+		AST tmp857_AST_in = (AST)_t;
 		match(_t,OBJECT);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -14130,7 +14061,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp870_AST_in = (AST)_t;
+			AST tmp858_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14148,7 +14079,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1052;
+		_t = __t1046;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14157,11 +14088,11 @@
 		
 		AST deleteprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1055 = _t;
-		AST tmp871_AST_in = (AST)_t;
+		AST __t1049 = _t;
+		AST tmp859_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp872_AST_in = (AST)_t;
+		AST tmp860_AST_in = (AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -14171,7 +14102,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp873_AST_in = (AST)_t;
+			AST tmp861_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14189,7 +14120,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1055;
+		_t = __t1049;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14198,15 +14129,15 @@
 		
 		AST deletewidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1058 = _t;
-		AST tmp874_AST_in = (AST)_t;
+		AST __t1052 = _t;
+		AST tmp862_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp875_AST_in = (AST)_t;
+		AST tmp863_AST_in = (AST)_t;
 		match(_t,WIDGET);
 		_t = _t.getNextSibling();
 		{
-		_loop1060:
+		_loop1054:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Widget_ref)) {
@@ -14214,14 +14145,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1060;
+				break _loop1054;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1058;
+		_t = __t1052;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14230,11 +14161,11 @@
 		
 		AST deletewidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1062 = _t;
-		AST tmp876_AST_in = (AST)_t;
+		AST __t1056 = _t;
+		AST tmp864_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp877_AST_in = (AST)_t;
+		AST tmp865_AST_in = (AST)_t;
 		match(_t,WIDGETPOOL);
 		_t = _t.getNextSibling();
 		{
@@ -14255,7 +14186,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp878_AST_in = (AST)_t;
+			AST tmp866_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14273,7 +14204,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1062;
+		_t = __t1056;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14282,8 +14213,8 @@
 		
 		AST disablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1068 = _t;
-		AST tmp879_AST_in = (AST)_t;
+		AST __t1062 = _t;
+		AST tmp867_AST_in = (AST)_t;
 		match(_t,DISABLE);
 		_t = _t.getFirstChild();
 		{
@@ -14291,7 +14222,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp880_AST_in = (AST)_t;
+			AST tmp868_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -14315,8 +14246,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t1071 = _t;
-			AST tmp881_AST_in = (AST)_t;
+			AST __t1065 = _t;
+			AST tmp869_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -14324,12 +14255,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t1073 = _t;
-				AST tmp882_AST_in = (AST)_t;
+				AST __t1067 = _t;
+				AST tmp870_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop1075:
+				_loop1069:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -14337,12 +14268,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1075;
+						break _loop1069;
 					}
 					
 				} while (true);
 				}
-				_t = __t1073;
+				_t = __t1067;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -14356,15 +14287,15 @@
 			}
 			}
 			}
-			_t = __t1071;
+			_t = __t1065;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Form_item:
 		{
 			{
-			int _cnt1077=0;
-			_loop1077:
+			int _cnt1071=0;
+			_loop1071:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -14372,10 +14303,10 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt1077>=1 ) { break _loop1077; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1071>=1 ) { break _loop1071; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt1077++;
+				_cnt1071++;
 			} while (true);
 			}
 			break;
@@ -14414,7 +14345,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1068;
+		_t = __t1062;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14423,14 +14354,14 @@
 		
 		AST disabletriggersstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1080 = _t;
-		AST tmp883_AST_in = (AST)_t;
+		AST __t1074 = _t;
+		AST tmp871_AST_in = (AST)_t;
 		match(_t,DISABLE);
 		_t = _t.getFirstChild();
-		AST tmp884_AST_in = (AST)_t;
+		AST tmp872_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getNextSibling();
-		AST tmp885_AST_in = (AST)_t;
+		AST tmp873_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -14438,14 +14369,14 @@
 		switch ( _t.getType()) {
 		case DUMP:
 		{
-			AST tmp886_AST_in = (AST)_t;
+			AST tmp874_AST_in = (AST)_t;
 			match(_t,DUMP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOAD:
 		{
-			AST tmp887_AST_in = (AST)_t;
+			AST tmp875_AST_in = (AST)_t;
 			match(_t,LOAD);
 			_t = _t.getNextSibling();
 			break;
@@ -14456,7 +14387,7 @@
 		}
 		}
 		}
-		AST tmp888_AST_in = (AST)_t;
+		AST tmp876_AST_in = (AST)_t;
 		match(_t,OF);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SYMBOL);
@@ -14466,7 +14397,7 @@
 		switch ( _t.getType()) {
 		case ALLOWREPLICATION:
 		{
-			AST tmp889_AST_in = (AST)_t;
+			AST tmp877_AST_in = (AST)_t;
 			match(_t,ALLOWREPLICATION);
 			_t = _t.getNextSibling();
 			break;
@@ -14484,7 +14415,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1080;
+		_t = __t1074;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14493,8 +14424,8 @@
 		
 		AST disconnectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1084 = _t;
-		AST tmp890_AST_in = (AST)_t;
+		AST __t1078 = _t;
+		AST tmp878_AST_in = (AST)_t;
 		match(_t,DISCONNECT);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -14504,7 +14435,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp891_AST_in = (AST)_t;
+			AST tmp879_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14522,7 +14453,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1084;
+		_t = __t1078;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14531,8 +14462,8 @@
 		
 		AST displaystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1087 = _t;
-		AST tmp892_AST_in = (AST)_t;
+		AST __t1081 = _t;
+		AST tmp880_AST_in = (AST)_t;
 		match(_t,DISPLAY);
 		_t = _t.getFirstChild();
 		{
@@ -14566,7 +14497,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp893_AST_in = (AST)_t;
+			AST tmp881_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -14588,7 +14519,7 @@
 		}
 		}
 		{
-		_loop1091:
+		_loop1085:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -14596,7 +14527,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1091;
+				break _loop1085;
 			}
 			
 		} while (true);
@@ -14606,12 +14537,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1093 = _t;
-			AST tmp894_AST_in = (AST)_t;
+			AST __t1087 = _t;
+			AST tmp882_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1095:
+			_loop1089:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -14619,12 +14550,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1095;
+					break _loop1089;
 				}
 				
 			} while (true);
 			}
-			_t = __t1093;
+			_t = __t1087;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -14647,16 +14578,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1097 = _t;
-			AST tmp895_AST_in = (AST)_t;
+			AST __t1091 = _t;
+			AST tmp883_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp896_AST_in = (AST)_t;
+			AST tmp884_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1097;
+			_t = __t1091;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -14674,7 +14605,7 @@
 		}
 		}
 		{
-		_loop1099:
+		_loop1093:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WITH)) {
@@ -14682,7 +14613,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1099;
+				break _loop1093;
 			}
 			
 		} while (true);
@@ -14692,7 +14623,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp897_AST_in = (AST)_t;
+			AST tmp885_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14710,7 +14641,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1087;
+		_t = __t1081;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14719,8 +14650,8 @@
 		
 		AST downstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1119 = _t;
-		AST tmp898_AST_in = (AST)_t;
+		AST __t1113 = _t;
+		AST tmp886_AST_in = (AST)_t;
 		match(_t,DOWN);
 		_t = _t.getFirstChild();
 		{
@@ -14809,7 +14740,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1119;
+		_t = __t1113;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14818,19 +14749,19 @@
 		
 		AST dropindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2468 = _t;
-		AST tmp899_AST_in = (AST)_t;
+		AST __t2463 = _t;
+		AST tmp887_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp900_AST_in = (AST)_t;
+		AST tmp888_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getNextSibling();
-		AST tmp901_AST_in = (AST)_t;
+		AST tmp889_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2468;
+		_t = __t2463;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14839,18 +14770,18 @@
 		
 		AST droptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2470 = _t;
-		AST tmp902_AST_in = (AST)_t;
+		AST __t2465 = _t;
+		AST tmp890_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp903_AST_in = (AST)_t;
+		AST tmp891_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2470;
+		_t = __t2465;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14859,19 +14790,19 @@
 		
 		AST dropviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2472 = _t;
-		AST tmp904_AST_in = (AST)_t;
+		AST __t2467 = _t;
+		AST tmp892_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp905_AST_in = (AST)_t;
+		AST tmp893_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getNextSibling();
-		AST tmp906_AST_in = (AST)_t;
+		AST tmp894_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2472;
+		_t = __t2467;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14880,11 +14811,11 @@
 		
 		AST emptytemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1147 = _t;
-		AST tmp907_AST_in = (AST)_t;
+		AST __t1141 = _t;
+		AST tmp895_AST_in = (AST)_t;
 		match(_t,EMPTY);
 		_t = _t.getFirstChild();
-		AST tmp908_AST_in = (AST)_t;
+		AST tmp896_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.TEMPTABLESYMBOL);
@@ -14894,7 +14825,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp909_AST_in = (AST)_t;
+			AST tmp897_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -14912,7 +14843,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1147;
+		_t = __t1141;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14921,8 +14852,8 @@
 		
 		AST enablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1150 = _t;
-		AST tmp910_AST_in = (AST)_t;
+		AST __t1144 = _t;
+		AST tmp898_AST_in = (AST)_t;
 		match(_t,ENABLE);
 		_t = _t.getFirstChild();
 		{
@@ -14930,7 +14861,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp911_AST_in = (AST)_t;
+			AST tmp899_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -14955,8 +14886,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t1153 = _t;
-			AST tmp912_AST_in = (AST)_t;
+			AST __t1147 = _t;
+			AST tmp900_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -14964,12 +14895,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t1155 = _t;
-				AST tmp913_AST_in = (AST)_t;
+				AST __t1149 = _t;
+				AST tmp901_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop1157:
+				_loop1151:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -14977,12 +14908,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1157;
+						break _loop1151;
 					}
 					
 				} while (true);
 				}
-				_t = __t1155;
+				_t = __t1149;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -14996,15 +14927,15 @@
 			}
 			}
 			}
-			_t = __t1153;
+			_t = __t1147;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Form_item:
 		{
 			{
-			int _cnt1159=0;
-			_loop1159:
+			int _cnt1153=0;
+			_loop1153:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15012,10 +14943,10 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt1159>=1 ) { break _loop1159; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1153>=1 ) { break _loop1153; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt1159++;
+				_cnt1153++;
 			} while (true);
 			}
 			break;
@@ -15038,16 +14969,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1161 = _t;
-			AST tmp914_AST_in = (AST)_t;
+			AST __t1155 = _t;
+			AST tmp902_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp915_AST_in = (AST)_t;
+			AST tmp903_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1161;
+			_t = __t1155;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15085,7 +15016,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1150;
+		_t = __t1144;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15094,8 +15025,8 @@
 		
 		AST exportstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1182 = _t;
-		AST tmp916_AST_in = (AST)_t;
+		AST __t1176 = _t;
+		AST tmp904_AST_in = (AST)_t;
 		match(_t,EXPORT);
 		_t = _t.getFirstChild();
 		{
@@ -15127,13 +15058,13 @@
 		switch ( _t.getType()) {
 		case DELIMITER:
 		{
-			AST __t1185 = _t;
-			AST tmp917_AST_in = (AST)_t;
+			AST __t1179 = _t;
+			AST tmp905_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t1185;
+			_t = __t1179;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15152,7 +15083,7 @@
 		}
 		}
 		{
-		_loop1187:
+		_loop1181:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -15160,7 +15091,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1187;
+				break _loop1181;
 			}
 			
 		} while (true);
@@ -15170,12 +15101,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1189 = _t;
-			AST tmp918_AST_in = (AST)_t;
+			AST __t1183 = _t;
+			AST tmp906_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1191:
+			_loop1185:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -15183,12 +15114,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1191;
+					break _loop1185;
 				}
 				
 			} while (true);
 			}
-			_t = __t1189;
+			_t = __t1183;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15209,7 +15140,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp919_AST_in = (AST)_t;
+			AST tmp907_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -15227,7 +15158,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1182;
+		_t = __t1176;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15236,14 +15167,14 @@
 		
 		AST fetchstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2474 = _t;
-		AST tmp920_AST_in = (AST)_t;
+		AST __t2469 = _t;
+		AST tmp908_AST_in = (AST)_t;
 		match(_t,FETCH);
 		_t = _t.getFirstChild();
-		AST tmp921_AST_in = (AST)_t;
+		AST tmp909_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp922_AST_in = (AST)_t;
+		AST tmp910_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -15271,11 +15202,11 @@
 		}
 		}
 		{
-		_loop2478:
+		_loop2473:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp923_AST_in = (AST)_t;
+				AST tmp911_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.UPDATING);
@@ -15304,14 +15235,14 @@
 				}
 			}
 			else {
-				break _loop2478;
+				break _loop2473;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2474;
+		_t = __t2469;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15321,8 +15252,8 @@
 		AST findstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t1216 = _t;
-		AST tmp924_AST_in = (AST)_t;
+		AST __t1210 = _t;
+		AST tmp912_AST_in = (AST)_t;
 		match(_t,FIND);
 		_t = _t.getFirstChild();
 		{
@@ -15349,7 +15280,7 @@
 		}
 		}
 		}
-		AST __t1218 = _t;
+		AST __t1212 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -15358,44 +15289,44 @@
 		}
 		recordphrase(_t);
 		_t = _retTree;
-		_t = __t1218;
+		_t = __t1212;
 		_t = _t.getNextSibling();
 		{
-		_loop1220:
+		_loop1214:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOWAIT:
 			{
-				AST tmp925_AST_in = (AST)_t;
+				AST tmp913_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOPREFETCH:
 			{
-				AST tmp926_AST_in = (AST)_t;
+				AST tmp914_AST_in = (AST)_t;
 				match(_t,NOPREFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp927_AST_in = (AST)_t;
+				AST tmp915_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1220;
+				break _loop1214;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1216;
+		_t = __t1210;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15404,12 +15335,12 @@
 		
 		AST formstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1248 = _t;
-		AST tmp928_AST_in = (AST)_t;
+		AST __t1242 = _t;
+		AST tmp916_AST_in = (AST)_t;
 		match(_t,FORMAT);
 		_t = _t.getFirstChild();
 		{
-		_loop1250:
+		_loop1244:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -15417,7 +15348,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1250;
+				break _loop1244;
 			}
 			
 		} while (true);
@@ -15427,13 +15358,13 @@
 		switch ( _t.getType()) {
 		case HEADER:
 		{
-			AST __t1252 = _t;
-			AST tmp929_AST_in = (AST)_t;
+			AST __t1246 = _t;
+			AST tmp917_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
-			int _cnt1254=0;
-			_loop1254:
+			int _cnt1248=0;
+			_loop1248:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15441,25 +15372,25 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt1254>=1 ) { break _loop1254; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1248>=1 ) { break _loop1248; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt1254++;
+				_cnt1248++;
 			} while (true);
 			}
-			_t = __t1252;
+			_t = __t1246;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKGROUND:
 		{
-			AST __t1255 = _t;
-			AST tmp930_AST_in = (AST)_t;
+			AST __t1249 = _t;
+			AST tmp918_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
-			int _cnt1257=0;
-			_loop1257:
+			int _cnt1251=0;
+			_loop1251:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15467,13 +15398,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt1257>=1 ) { break _loop1257; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1251>=1 ) { break _loop1251; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt1257++;
+				_cnt1251++;
 			} while (true);
 			}
-			_t = __t1255;
+			_t = __t1249;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15495,12 +15426,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1259 = _t;
-			AST tmp931_AST_in = (AST)_t;
+			AST __t1253 = _t;
+			AST tmp919_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1261:
+			_loop1255:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -15508,12 +15439,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1261;
+					break _loop1255;
 				}
 				
 			} while (true);
 			}
-			_t = __t1259;
+			_t = __t1253;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15551,7 +15482,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1248;
+		_t = __t1242;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15562,7 +15493,7 @@
 		AST f = null;
 		AST id = null;
 		
-		AST __t1330 = _t;
+		AST __t1325 = _t;
 		f = _t==ASTNULL ? null :(AST)_t;
 		match(_t,FUNCTION);
 		_t = _t.getFirstChild();
@@ -15577,14 +15508,14 @@
 		switch ( _t.getType()) {
 		case RETURNS:
 		{
-			AST tmp932_AST_in = (AST)_t;
+			AST tmp920_AST_in = (AST)_t;
 			match(_t,RETURNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURN:
 		{
-			AST tmp933_AST_in = (AST)_t;
+			AST tmp921_AST_in = (AST)_t;
 			match(_t,RETURN);
 			_t = _t.getNextSibling();
 			break;
@@ -15620,7 +15551,7 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp934_AST_in = (AST)_t;
+			AST tmp922_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
@@ -15645,11 +15576,11 @@
 		switch ( _t.getType()) {
 		case Parameter_list:
 		{
-			AST __t1334 = _t;
-			AST tmp935_AST_in = (AST)_t;
+			AST __t1329 = _t;
+			AST tmp923_AST_in = (AST)_t;
 			match(_t,Parameter_list);
 			_t = _t.getFirstChild();
-			AST tmp936_AST_in = (AST)_t;
+			AST tmp924_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -15676,26 +15607,26 @@
 			}
 			}
 			{
-			_loop1337:
+			_loop1332:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp937_AST_in = (AST)_t;
+					AST tmp925_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					function_param(_t);
 					_t = _retTree;
 				}
 				else {
-					break _loop1337;
+					break _loop1332;
 				}
 				
 			} while (true);
 			}
-			AST tmp938_AST_in = (AST)_t;
+			AST tmp926_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1334;
+			_t = __t1329;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15718,7 +15649,7 @@
 		switch ( _t.getType()) {
 		case FORWARDS:
 		{
-			AST tmp939_AST_in = (AST)_t;
+			AST tmp927_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getNextSibling();
 			{
@@ -15726,21 +15657,21 @@
 			switch ( _t.getType()) {
 			case LEXCOLON:
 			{
-				AST tmp940_AST_in = (AST)_t;
+				AST tmp928_AST_in = (AST)_t;
 				match(_t,LEXCOLON);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PERIOD:
 			{
-				AST tmp941_AST_in = (AST)_t;
+				AST tmp929_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EOF:
 			{
-				AST tmp942_AST_in = (AST)_t;
+				AST tmp930_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
@@ -15771,15 +15702,15 @@
 			switch ( _t.getType()) {
 			case EOF:
 			{
-				AST tmp943_AST_in = (AST)_t;
+				AST tmp931_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case END:
 			{
-				AST __t1347 = _t;
-				AST tmp944_AST_in = (AST)_t;
+				AST __t1342 = _t;
+				AST tmp932_AST_in = (AST)_t;
 				match(_t,END);
 				_t = _t.getFirstChild();
 				{
@@ -15787,7 +15718,7 @@
 				switch ( _t.getType()) {
 				case FUNCTION:
 				{
-					AST tmp945_AST_in = (AST)_t;
+					AST tmp933_AST_in = (AST)_t;
 					match(_t,FUNCTION);
 					_t = _t.getNextSibling();
 					break;
@@ -15802,7 +15733,7 @@
 				}
 				}
 				}
-				_t = __t1347;
+				_t = __t1342;
 				_t = _t.getNextSibling();
 				state_end(_t);
 				_t = _retTree;
@@ -15817,32 +15748,32 @@
 			break;
 		}
 		default:
-			boolean synPredMatched1341 = false;
+			boolean synPredMatched1336 = false;
 			if (((_t.getType()==IN_KW))) {
-				AST __t1341 = _t;
-				synPredMatched1341 = true;
+				AST __t1336 = _t;
+				synPredMatched1336 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp946_AST_in = (AST)_t;
+					AST tmp934_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getNextSibling();
-					AST tmp947_AST_in = (AST)_t;
+					AST tmp935_AST_in = (AST)_t;
 					match(_t,SUPER);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched1341 = false;
+					synPredMatched1336 = false;
 				}
-				_t = __t1341;
+				_t = __t1336;
 				inputState.guessing--;
 			}
-			if ( synPredMatched1341 ) {
-				AST tmp948_AST_in = (AST)_t;
+			if ( synPredMatched1336 ) {
+				AST tmp936_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
-				AST tmp949_AST_in = (AST)_t;
+				AST tmp937_AST_in = (AST)_t;
 				match(_t,SUPER);
 				_t = _t.getNextSibling();
 				{
@@ -15850,21 +15781,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp950_AST_in = (AST)_t;
+					AST tmp938_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp951_AST_in = (AST)_t;
+					AST tmp939_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp952_AST_in = (AST)_t;
+					AST tmp940_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -15885,7 +15816,7 @@
 				switch ( _t.getType()) {
 				case MAP:
 				{
-					AST tmp953_AST_in = (AST)_t;
+					AST tmp941_AST_in = (AST)_t;
 					match(_t,MAP);
 					_t = _t.getNextSibling();
 					{
@@ -15893,7 +15824,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp954_AST_in = (AST)_t;
+						AST tmp942_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -15908,7 +15839,7 @@
 					}
 					}
 					}
-					AST tmp955_AST_in = (AST)_t;
+					AST tmp943_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					break;
@@ -15923,7 +15854,7 @@
 				}
 				}
 				}
-				AST tmp956_AST_in = (AST)_t;
+				AST tmp944_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -15933,21 +15864,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp957_AST_in = (AST)_t;
+					AST tmp945_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp958_AST_in = (AST)_t;
+					AST tmp946_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp959_AST_in = (AST)_t;
+					AST tmp947_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -15967,7 +15898,7 @@
 		}
 		}
 		}
-		_t = __t1330;
+		_t = __t1325;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 				action.scopeClose(f);
@@ -15979,17 +15910,17 @@
 		
 		AST getstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1373 = _t;
-		AST tmp960_AST_in = (AST)_t;
+		AST __t1368 = _t;
+		AST tmp948_AST_in = (AST)_t;
 		match(_t,GET);
 		_t = _t.getFirstChild();
 		findwhich(_t);
 		_t = _retTree;
-		AST tmp961_AST_in = (AST)_t;
+		AST tmp949_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
-		_loop1375:
+		_loop1370:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -16003,21 +15934,21 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp962_AST_in = (AST)_t;
+				AST tmp950_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1375;
+				break _loop1370;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1373;
+		_t = __t1368;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16026,22 +15957,22 @@
 		
 		AST getkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1394 = _t;
-		AST tmp963_AST_in = (AST)_t;
+		AST __t1389 = _t;
+		AST tmp951_AST_in = (AST)_t;
 		match(_t,GETKEYVALUE);
 		_t = _t.getFirstChild();
-		AST tmp964_AST_in = (AST)_t;
+		AST tmp952_AST_in = (AST)_t;
 		match(_t,SECTION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp965_AST_in = (AST)_t;
+		AST tmp953_AST_in = (AST)_t;
 		match(_t,KEY);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==DEFAULT)) {
-			AST tmp966_AST_in = (AST)_t;
+			AST tmp954_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getNextSibling();
 		}
@@ -16054,14 +15985,14 @@
 		}
 		
 		}
-		AST tmp967_AST_in = (AST)_t;
+		AST tmp955_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1394;
+		_t = __t1389;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16070,15 +16001,15 @@
 		
 		AST grantstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2482 = _t;
-		AST tmp968_AST_in = (AST)_t;
+		AST __t2477 = _t;
+		AST tmp956_AST_in = (AST)_t;
 		match(_t,GRANT);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp969_AST_in = (AST)_t;
+		AST tmp957_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -16092,7 +16023,7 @@
 		}
 		case ID:
 		{
-			AST tmp970_AST_in = (AST)_t;
+			AST tmp958_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -16110,13 +16041,13 @@
 		switch ( _t.getType()) {
 		case WITH:
 		{
-			AST tmp971_AST_in = (AST)_t;
+			AST tmp959_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getNextSibling();
-			AST tmp972_AST_in = (AST)_t;
+			AST tmp960_AST_in = (AST)_t;
 			match(_t,GRANT);
 			_t = _t.getNextSibling();
-			AST tmp973_AST_in = (AST)_t;
+			AST tmp961_AST_in = (AST)_t;
 			match(_t,OPTION);
 			_t = _t.getNextSibling();
 			break;
@@ -16134,7 +16065,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2482;
+		_t = __t2477;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16143,8 +16074,8 @@
 		
 		AST hidestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1422 = _t;
-		AST tmp974_AST_in = (AST)_t;
+		AST __t1417 = _t;
+		AST tmp962_AST_in = (AST)_t;
 		match(_t,HIDE);
 		_t = _t.getFirstChild();
 		{
@@ -16177,14 +16108,14 @@
 		switch ( _t.getType()) {
 		case MESSAGE:
 		{
-			AST tmp975_AST_in = (AST)_t;
+			AST tmp963_AST_in = (AST)_t;
 			match(_t,MESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp976_AST_in = (AST)_t;
+			AST tmp964_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
@@ -16196,7 +16127,7 @@
 		case Widget_ref:
 		{
 			{
-			_loop1426:
+			_loop1421:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Widget_ref)) {
@@ -16204,7 +16135,7 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1426;
+					break _loop1421;
 				}
 				
 			} while (true);
@@ -16222,7 +16153,7 @@
 		switch ( _t.getType()) {
 		case NOPAUSE:
 		{
-			AST tmp977_AST_in = (AST)_t;
+			AST tmp965_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
@@ -16244,16 +16175,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1429 = _t;
-			AST tmp978_AST_in = (AST)_t;
+			AST __t1424 = _t;
+			AST tmp966_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp979_AST_in = (AST)_t;
+			AST tmp967_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1429;
+			_t = __t1424;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -16270,7 +16201,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1422;
+		_t = __t1417;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16279,13 +16210,13 @@
 		
 		AST ifstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1433 = _t;
-		AST tmp980_AST_in = (AST)_t;
+		AST __t1428 = _t;
+		AST tmp968_AST_in = (AST)_t;
 		match(_t,IF);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
-		AST tmp981_AST_in = (AST)_t;
+		AST tmp969_AST_in = (AST)_t;
 		match(_t,THEN);
 		_t = _t.getNextSibling();
 		{
@@ -16424,8 +16355,8 @@
 		switch ( _t.getType()) {
 		case ELSE:
 		{
-			AST __t1436 = _t;
-			AST tmp982_AST_in = (AST)_t;
+			AST __t1431 = _t;
+			AST tmp970_AST_in = (AST)_t;
 			match(_t,ELSE);
 			_t = _t.getFirstChild();
 			{
@@ -16558,7 +16489,7 @@
 			}
 			}
 			}
-			_t = __t1436;
+			_t = __t1431;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -16572,7 +16503,7 @@
 		}
 		}
 		}
-		_t = __t1433;
+		_t = __t1428;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16581,8 +16512,8 @@
 		
 		AST importstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1447 = _t;
-		AST tmp983_AST_in = (AST)_t;
+		AST __t1442 = _t;
+		AST tmp971_AST_in = (AST)_t;
 		match(_t,IMPORT);
 		_t = _t.getFirstChild();
 		{
@@ -16617,19 +16548,19 @@
 		switch ( _t.getType()) {
 		case DELIMITER:
 		{
-			AST __t1450 = _t;
-			AST tmp984_AST_in = (AST)_t;
+			AST __t1445 = _t;
+			AST tmp972_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t1450;
+			_t = __t1445;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNFORMATTED:
 		{
-			AST tmp985_AST_in = (AST)_t;
+			AST tmp973_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
@@ -16662,12 +16593,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t1453 = _t;
-				AST tmp986_AST_in = (AST)_t;
+				AST __t1448 = _t;
+				AST tmp974_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop1455:
+				_loop1450:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -16675,12 +16606,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1455;
+						break _loop1450;
 					}
 					
 				} while (true);
 				}
-				_t = __t1453;
+				_t = __t1448;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -16703,8 +16634,8 @@
 		case Field_ref:
 		{
 			{
-			int _cnt1457=0;
-			_loop1457:
+			int _cnt1452=0;
+			_loop1452:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -16716,17 +16647,17 @@
 				}
 				case CARET:
 				{
-					AST tmp987_AST_in = (AST)_t;
+					AST tmp975_AST_in = (AST)_t;
 					match(_t,CARET);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					if ( _cnt1457>=1 ) { break _loop1457; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1452>=1 ) { break _loop1452; } else {throw new NoViableAltException(_t);}
 				}
 				}
-				_cnt1457++;
+				_cnt1452++;
 			} while (true);
 			}
 			break;
@@ -16749,7 +16680,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp988_AST_in = (AST)_t;
+			AST tmp976_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -16771,7 +16702,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp989_AST_in = (AST)_t;
+			AST tmp977_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -16789,7 +16720,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1447;
+		_t = __t1442;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16798,16 +16729,16 @@
 		
 		AST inputclearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1471 = _t;
-		AST tmp990_AST_in = (AST)_t;
+		AST __t1466 = _t;
+		AST tmp978_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
-		AST tmp991_AST_in = (AST)_t;
+		AST tmp979_AST_in = (AST)_t;
 		match(_t,CLEAR);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1471;
+		_t = __t1466;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16816,8 +16747,8 @@
 		
 		AST inputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1473 = _t;
-		AST tmp992_AST_in = (AST)_t;
+		AST __t1468 = _t;
+		AST tmp980_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -16839,12 +16770,12 @@
 		}
 		}
 		}
-		AST tmp993_AST_in = (AST)_t;
+		AST tmp981_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1473;
+		_t = __t1468;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16853,8 +16784,8 @@
 		
 		AST inputfromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1476 = _t;
-		AST tmp994_AST_in = (AST)_t;
+		AST __t1471 = _t;
+		AST tmp982_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -16876,14 +16807,14 @@
 		}
 		}
 		}
-		AST tmp995_AST_in = (AST)_t;
+		AST tmp983_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1476;
+		_t = __t1471;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16892,8 +16823,8 @@
 		
 		AST inputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1479 = _t;
-		AST tmp996_AST_in = (AST)_t;
+		AST __t1474 = _t;
+		AST tmp984_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -16915,14 +16846,14 @@
 		}
 		}
 		}
-		AST tmp997_AST_in = (AST)_t;
+		AST tmp985_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1479;
+		_t = __t1474;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16931,8 +16862,8 @@
 		
 		AST inputoutputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1482 = _t;
-		AST tmp998_AST_in = (AST)_t;
+		AST __t1477 = _t;
+		AST tmp986_AST_in = (AST)_t;
 		match(_t,INPUTOUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -16954,12 +16885,12 @@
 		}
 		}
 		}
-		AST tmp999_AST_in = (AST)_t;
+		AST tmp987_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1482;
+		_t = __t1477;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16968,8 +16899,8 @@
 		
 		AST inputoutputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1485 = _t;
-		AST tmp1000_AST_in = (AST)_t;
+		AST __t1480 = _t;
+		AST tmp988_AST_in = (AST)_t;
 		match(_t,INPUTOUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -16991,14 +16922,14 @@
 		}
 		}
 		}
-		AST tmp1001_AST_in = (AST)_t;
+		AST tmp989_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1485;
+		_t = __t1480;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17007,11 +16938,11 @@
 		
 		AST insertintostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2506 = _t;
-		AST tmp1002_AST_in = (AST)_t;
+		AST __t2501 = _t;
+		AST tmp990_AST_in = (AST)_t;
 		match(_t,INSERT);
 		_t = _t.getFirstChild();
-		AST tmp1003_AST_in = (AST)_t;
+		AST tmp991_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -17021,36 +16952,36 @@
 		switch ( _t.getType()) {
 		case Field_list:
 		{
-			AST __t2508 = _t;
-			AST tmp1004_AST_in = (AST)_t;
+			AST __t2503 = _t;
+			AST tmp992_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp1005_AST_in = (AST)_t;
+			AST tmp993_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
 			{
-			_loop2510:
+			_loop2505:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1006_AST_in = (AST)_t;
+					AST tmp994_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
 					_t = _retTree;
 				}
 				else {
-					break _loop2510;
+					break _loop2505;
 				}
 				
 			} while (true);
 			}
-			AST tmp1007_AST_in = (AST)_t;
+			AST tmp995_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2508;
+			_t = __t2503;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17070,11 +17001,11 @@
 		switch ( _t.getType()) {
 		case VALUES:
 		{
-			AST __t2512 = _t;
-			AST tmp1008_AST_in = (AST)_t;
+			AST __t2507 = _t;
+			AST tmp996_AST_in = (AST)_t;
 			match(_t,VALUES);
 			_t = _t.getFirstChild();
-			AST tmp1009_AST_in = (AST)_t;
+			AST tmp997_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			sqlexpression(_t);
@@ -17101,11 +17032,11 @@
 			}
 			}
 			{
-			_loop2516:
+			_loop2511:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1010_AST_in = (AST)_t;
+					AST tmp998_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -17133,15 +17064,15 @@
 					}
 				}
 				else {
-					break _loop2516;
+					break _loop2511;
 				}
 				
 			} while (true);
 			}
-			AST tmp1011_AST_in = (AST)_t;
+			AST tmp999_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2512;
+			_t = __t2507;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17159,7 +17090,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2506;
+		_t = __t2501;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17168,8 +17099,8 @@
 		
 		AST insertstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1488 = _t;
-		AST tmp1012_AST_in = (AST)_t;
+		AST __t1483 = _t;
+		AST tmp1000_AST_in = (AST)_t;
 		match(_t,INSERT);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -17179,12 +17110,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1490 = _t;
-			AST tmp1013_AST_in = (AST)_t;
+			AST __t1485 = _t;
+			AST tmp1001_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1492:
+			_loop1487:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -17192,12 +17123,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1492;
+					break _loop1487;
 				}
 				
 			} while (true);
 			}
-			_t = __t1490;
+			_t = __t1485;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17220,8 +17151,8 @@
 		switch ( _t.getType()) {
 		case USING:
 		{
-			AST __t1494 = _t;
-			AST tmp1014_AST_in = (AST)_t;
+			AST __t1489 = _t;
+			AST tmp1002_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -17229,14 +17160,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1015_AST_in = (AST)_t;
+				AST tmp1003_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp1016_AST_in = (AST)_t;
+				AST tmp1004_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -17249,7 +17180,7 @@
 			}
 			expression(_t);
 			_t = _retTree;
-			_t = __t1494;
+			_t = __t1489;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17292,7 +17223,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1017_AST_in = (AST)_t;
+			AST tmp1005_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -17310,7 +17241,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1488;
+		_t = __t1483;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17319,8 +17250,8 @@
 		
 		AST leavestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1560 = _t;
-		AST tmp1018_AST_in = (AST)_t;
+		AST __t1555 = _t;
+		AST tmp1006_AST_in = (AST)_t;
 		match(_t,LEAVE);
 		_t = _t.getFirstChild();
 		{
@@ -17328,7 +17259,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp1019_AST_in = (AST)_t;
+			AST tmp1007_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -17346,7 +17277,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1560;
+		_t = __t1555;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17355,79 +17286,79 @@
 		
 		AST loadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1580 = _t;
-		AST tmp1020_AST_in = (AST)_t;
+		AST __t1575 = _t;
+		AST tmp1008_AST_in = (AST)_t;
 		match(_t,LOAD);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
 		{
-		_loop1584:
+		_loop1579:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case DIR:
 			{
-				AST __t1582 = _t;
-				AST tmp1021_AST_in = (AST)_t;
+				AST __t1577 = _t;
+				AST tmp1009_AST_in = (AST)_t;
 				match(_t,DIR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1582;
+				_t = __t1577;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case APPLICATION:
 			{
-				AST tmp1022_AST_in = (AST)_t;
+				AST tmp1010_AST_in = (AST)_t;
 				match(_t,APPLICATION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DYNAMIC:
 			{
-				AST tmp1023_AST_in = (AST)_t;
+				AST tmp1011_AST_in = (AST)_t;
 				match(_t,DYNAMIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEW:
 			{
-				AST tmp1024_AST_in = (AST)_t;
+				AST tmp1012_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BASEKEY:
 			{
-				AST __t1583 = _t;
-				AST tmp1025_AST_in = (AST)_t;
+				AST __t1578 = _t;
+				AST tmp1013_AST_in = (AST)_t;
 				match(_t,BASEKEY);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1583;
+				_t = __t1578;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1026_AST_in = (AST)_t;
+				AST tmp1014_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1584;
+				break _loop1579;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1580;
+		_t = __t1575;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17436,8 +17367,8 @@
 		
 		AST messagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1609 = _t;
-		AST tmp1027_AST_in = (AST)_t;
+		AST __t1604 = _t;
+		AST tmp1015_AST_in = (AST)_t;
 		match(_t,MESSAGE);
 		_t = _t.getFirstChild();
 		{
@@ -17445,13 +17376,13 @@
 		switch ( _t.getType()) {
 		case COLOR:
 		{
-			AST __t1611 = _t;
-			AST tmp1028_AST_in = (AST)_t;
+			AST __t1606 = _t;
+			AST tmp1016_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			anyorvalue(_t);
 			_t = _retTree;
-			_t = __t1611;
+			_t = __t1606;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17472,12 +17403,12 @@
 		}
 		}
 		{
-		_loop1615:
+		_loop1610:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t1613 = _t;
-				AST tmp1029_AST_in = (AST)_t;
+				AST __t1608 = _t;
+				AST tmp1017_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				{
@@ -17495,27 +17426,27 @@
 				}
 				
 				}
-				_t = __t1613;
+				_t = __t1608;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1615;
+				break _loop1610;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop1627:
+		_loop1622:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case VIEWAS:
 			{
-				AST __t1617 = _t;
-				AST tmp1030_AST_in = (AST)_t;
+				AST __t1612 = _t;
+				AST tmp1018_AST_in = (AST)_t;
 				match(_t,VIEWAS);
 				_t = _t.getFirstChild();
-				AST tmp1031_AST_in = (AST)_t;
+				AST tmp1019_AST_in = (AST)_t;
 				match(_t,ALERTBOX);
 				_t = _t.getNextSibling();
 				{
@@ -17523,35 +17454,35 @@
 				switch ( _t.getType()) {
 				case MESSAGE:
 				{
-					AST tmp1032_AST_in = (AST)_t;
+					AST tmp1020_AST_in = (AST)_t;
 					match(_t,MESSAGE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case QUESTION:
 				{
-					AST tmp1033_AST_in = (AST)_t;
+					AST tmp1021_AST_in = (AST)_t;
 					match(_t,QUESTION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INFORMATION:
 				{
-					AST tmp1034_AST_in = (AST)_t;
+					AST tmp1022_AST_in = (AST)_t;
 					match(_t,INFORMATION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ERROR:
 				{
-					AST tmp1035_AST_in = (AST)_t;
+					AST tmp1023_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WARNING:
 				{
-					AST tmp1036_AST_in = (AST)_t;
+					AST tmp1024_AST_in = (AST)_t;
 					match(_t,WARNING);
 					_t = _t.getNextSibling();
 					break;
@@ -17573,7 +17504,7 @@
 				switch ( _t.getType()) {
 				case BUTTONS:
 				{
-					AST tmp1037_AST_in = (AST)_t;
+					AST tmp1025_AST_in = (AST)_t;
 					match(_t,BUTTONS);
 					_t = _t.getNextSibling();
 					{
@@ -17581,35 +17512,35 @@
 					switch ( _t.getType()) {
 					case YESNO:
 					{
-						AST tmp1038_AST_in = (AST)_t;
+						AST tmp1026_AST_in = (AST)_t;
 						match(_t,YESNO);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case YESNOCANCEL:
 					{
-						AST tmp1039_AST_in = (AST)_t;
+						AST tmp1027_AST_in = (AST)_t;
 						match(_t,YESNOCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OK:
 					{
-						AST tmp1040_AST_in = (AST)_t;
+						AST tmp1028_AST_in = (AST)_t;
 						match(_t,OK);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OKCANCEL:
 					{
-						AST tmp1041_AST_in = (AST)_t;
+						AST tmp1029_AST_in = (AST)_t;
 						match(_t,OKCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case RETRYCANCEL:
 					{
-						AST tmp1042_AST_in = (AST)_t;
+						AST tmp1030_AST_in = (AST)_t;
 						match(_t,RETRYCANCEL);
 						_t = _t.getNextSibling();
 						break;
@@ -17638,13 +17569,13 @@
 				switch ( _t.getType()) {
 				case TITLE:
 				{
-					AST __t1622 = _t;
-					AST tmp1043_AST_in = (AST)_t;
+					AST __t1617 = _t;
+					AST tmp1031_AST_in = (AST)_t;
 					match(_t,TITLE);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1622;
+					_t = __t1617;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -17658,14 +17589,14 @@
 				}
 				}
 				}
-				_t = __t1617;
+				_t = __t1612;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SET:
 			{
-				AST __t1623 = _t;
-				AST tmp1044_AST_in = (AST)_t;
+				AST __t1618 = _t;
+				AST tmp1032_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -17689,14 +17620,14 @@
 				}
 				}
 				}
-				_t = __t1623;
+				_t = __t1618;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t1625 = _t;
-				AST tmp1045_AST_in = (AST)_t;
+				AST __t1620 = _t;
+				AST tmp1033_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.REFUP);
@@ -17720,13 +17651,13 @@
 				}
 				}
 				}
-				_t = __t1625;
+				_t = __t1620;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1627;
+				break _loop1622;
 			}
 			}
 		} while (true);
@@ -17736,16 +17667,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1629 = _t;
-			AST tmp1046_AST_in = (AST)_t;
+			AST __t1624 = _t;
+			AST tmp1034_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1047_AST_in = (AST)_t;
+			AST tmp1035_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1629;
+			_t = __t1624;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -17762,7 +17693,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1609;
+		_t = __t1604;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17771,8 +17702,8 @@
 		
 		AST nextstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1646 = _t;
-		AST tmp1048_AST_in = (AST)_t;
+		AST __t1641 = _t;
+		AST tmp1036_AST_in = (AST)_t;
 		match(_t,NEXT);
 		_t = _t.getFirstChild();
 		{
@@ -17780,7 +17711,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp1049_AST_in = (AST)_t;
+			AST tmp1037_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -17798,7 +17729,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1646;
+		_t = __t1641;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17807,8 +17738,8 @@
 		
 		AST nextpromptstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1649 = _t;
-		AST tmp1050_AST_in = (AST)_t;
+		AST __t1644 = _t;
+		AST tmp1038_AST_in = (AST)_t;
 		match(_t,NEXTPROMPT);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.SYMBOL);
@@ -17835,7 +17766,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1649;
+		_t = __t1644;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17851,7 +17782,7 @@
 		AST fld = null;
 		AST id = null;
 		
-		AST __t1665 = _t;
+		AST __t1660 = _t;
 		onNode = _t==ASTNULL ? null :(AST)_t;
 		match(_t,ON);
 		_t = _t.getFirstChild();
@@ -17859,10 +17790,10 @@
 			action.scopeAdd(onNode);
 		}
 		{
-		boolean synPredMatched1668 = false;
+		boolean synPredMatched1663 = false;
 		if (((_tokenSet_15.member(_t.getType())))) {
-			AST __t1668 = _t;
-			synPredMatched1668 = true;
+			AST __t1663 = _t;
+			synPredMatched1663 = true;
 			inputState.guessing++;
 			try {
 				{
@@ -17870,35 +17801,35 @@
 				switch ( _t.getType()) {
 				case ASSIGN:
 				{
-					AST tmp1051_AST_in = (AST)_t;
+					AST tmp1039_AST_in = (AST)_t;
 					match(_t,ASSIGN);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case CREATE:
 				{
-					AST tmp1052_AST_in = (AST)_t;
+					AST tmp1040_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1053_AST_in = (AST)_t;
+					AST tmp1041_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1054_AST_in = (AST)_t;
+					AST tmp1042_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WRITE:
 				{
-					AST tmp1055_AST_in = (AST)_t;
+					AST tmp1043_AST_in = (AST)_t;
 					match(_t,WRITE);
 					_t = _t.getNextSibling();
 					break;
@@ -17911,12 +17842,12 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1668 = false;
+				synPredMatched1663 = false;
 			}
-			_t = __t1668;
+			_t = __t1663;
 			inputState.guessing--;
 		}
-		if ( synPredMatched1668 ) {
+		if ( synPredMatched1663 ) {
 			{
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -17929,21 +17860,21 @@
 				switch ( _t.getType()) {
 				case CREATE:
 				{
-					AST tmp1056_AST_in = (AST)_t;
+					AST tmp1044_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1057_AST_in = (AST)_t;
+					AST tmp1045_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1058_AST_in = (AST)_t;
+					AST tmp1046_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
@@ -17954,7 +17885,7 @@
 				}
 				}
 				}
-				AST tmp1059_AST_in = (AST)_t;
+				AST tmp1047_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				t1 = _t==ASTNULL ? null : (AST)_t;
@@ -18101,10 +18032,10 @@
 			}
 			case WRITE:
 			{
-				AST tmp1060_AST_in = (AST)_t;
+				AST tmp1048_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
-				AST tmp1061_AST_in = (AST)_t;
+				AST tmp1049_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				rec = _t==ASTNULL ? null : (AST)_t;
@@ -18252,7 +18183,7 @@
 				case NEW:
 				{
 					{
-					AST tmp1062_AST_in = (AST)_t;
+					AST tmp1050_AST_in = (AST)_t;
 					match(_t,NEW);
 					_t = _t.getNextSibling();
 					{
@@ -18260,7 +18191,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1063_AST_in = (AST)_t;
+						AST tmp1051_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -18553,7 +18484,7 @@
 				case OLD:
 				{
 					{
-					AST tmp1064_AST_in = (AST)_t;
+					AST tmp1052_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -18561,7 +18492,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1065_AST_in = (AST)_t;
+						AST tmp1053_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -18847,10 +18778,10 @@
 			}
 			case ASSIGN:
 			{
-				AST tmp1066_AST_in = (AST)_t;
+				AST tmp1054_AST_in = (AST)_t;
 				match(_t,ASSIGN);
 				_t = _t.getNextSibling();
-				AST tmp1067_AST_in = (AST)_t;
+				AST tmp1055_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				fld = _t==ASTNULL ? null : (AST)_t;
@@ -18861,16 +18792,16 @@
 				switch ( _t.getType()) {
 				case TABLE:
 				{
-					AST __t1682 = _t;
-					AST tmp1068_AST_in = (AST)_t;
+					AST __t1677 = _t;
+					AST tmp1056_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1069_AST_in = (AST)_t;
+					AST tmp1057_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
-					_t = __t1682;
+					_t = __t1677;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -19004,7 +18935,7 @@
 				switch ( _t.getType()) {
 				case OLD:
 				{
-					AST tmp1070_AST_in = (AST)_t;
+					AST tmp1058_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -19012,7 +18943,7 @@
 					switch ( _t.getType()) {
 					case VALUE:
 					{
-						AST tmp1071_AST_in = (AST)_t;
+						AST tmp1059_AST_in = (AST)_t;
 						match(_t,VALUE);
 						_t = _t.getNextSibling();
 						break;
@@ -19188,7 +19119,7 @@
 			switch ( _t.getType()) {
 			case OVERRIDE:
 			{
-				AST tmp1072_AST_in = (AST)_t;
+				AST tmp1060_AST_in = (AST)_t;
 				match(_t,OVERRIDE);
 				_t = _t.getNextSibling();
 				break;
@@ -19321,7 +19252,7 @@
 			switch ( _t.getType()) {
 			case REVERT:
 			{
-				AST tmp1073_AST_in = (AST)_t;
+				AST tmp1061_AST_in = (AST)_t;
 				match(_t,REVERT);
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -19330,7 +19261,7 @@
 			}
 			case PERSISTENT:
 			{
-				AST tmp1074_AST_in = (AST)_t;
+				AST tmp1062_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getNextSibling();
 				runstate(_t);
@@ -19462,17 +19393,17 @@
 			}
 		}
 		else {
-			boolean synPredMatched1691 = false;
+			boolean synPredMatched1686 = false;
 			if (((_tokenSet_18.member(_t.getType())))) {
-				AST __t1691 = _t;
-				synPredMatched1691 = true;
+				AST __t1686 = _t;
+				synPredMatched1686 = true;
 				inputState.guessing++;
 				try {
 					{
 					{
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==ID)) {
-						AST tmp1075_AST_in = (AST)_t;
+						AST tmp1063_AST_in = (AST)_t;
 						match(_t,ID);
 						_t = _t.getNextSibling();
 					}
@@ -19490,14 +19421,14 @@
 					switch ( _t.getType()) {
 					case ID:
 					{
-						AST tmp1076_AST_in = (AST)_t;
+						AST tmp1064_AST_in = (AST)_t;
 						match(_t,ID);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case QSTRING:
 					{
-						AST tmp1077_AST_in = (AST)_t;
+						AST tmp1065_AST_in = (AST)_t;
 						match(_t,QSTRING);
 						_t = _t.getNextSibling();
 						break;
@@ -19518,16 +19449,16 @@
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched1691 = false;
+					synPredMatched1686 = false;
 				}
-				_t = __t1691;
+				_t = __t1686;
 				inputState.guessing--;
 			}
-			if ( synPredMatched1691 ) {
+			if ( synPredMatched1686 ) {
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ID)) {
-					AST tmp1078_AST_in = (AST)_t;
+					AST tmp1066_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -19545,14 +19476,14 @@
 				switch ( _t.getType()) {
 				case ID:
 				{
-					AST tmp1079_AST_in = (AST)_t;
+					AST tmp1067_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case QSTRING:
 				{
-					AST tmp1080_AST_in = (AST)_t;
+					AST tmp1068_AST_in = (AST)_t;
 					match(_t,QSTRING);
 					_t = _t.getNextSibling();
 					break;
@@ -19579,36 +19510,36 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp1081_AST_in = (AST)_t;
+					AST tmp1069_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case OF:
 				{
-					AST tmp1082_AST_in = (AST)_t;
+					AST tmp1070_AST_in = (AST)_t;
 					match(_t,OF);
 					_t = _t.getNextSibling();
 					widgetlist(_t);
 					_t = _retTree;
 					{
-					_loop1696:
+					_loop1691:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==OR)) {
-							AST tmp1083_AST_in = (AST)_t;
+							AST tmp1071_AST_in = (AST)_t;
 							match(_t,OR);
 							_t = _t.getNextSibling();
 							eventlist(_t);
 							_t = _retTree;
-							AST tmp1084_AST_in = (AST)_t;
+							AST tmp1072_AST_in = (AST)_t;
 							match(_t,OF);
 							_t = _t.getNextSibling();
 							widgetlist(_t);
 							_t = _retTree;
 						}
 						else {
-							break _loop1696;
+							break _loop1691;
 						}
 						
 					} while (true);
@@ -19618,7 +19549,7 @@
 					switch ( _t.getType()) {
 					case ANYWHERE:
 					{
-						AST tmp1085_AST_in = (AST)_t;
+						AST tmp1073_AST_in = (AST)_t;
 						match(_t,ANYWHERE);
 						_t = _t.getNextSibling();
 						break;
@@ -19759,7 +19690,7 @@
 				switch ( _t.getType()) {
 				case REVERT:
 				{
-					AST tmp1086_AST_in = (AST)_t;
+					AST tmp1074_AST_in = (AST)_t;
 					match(_t,REVERT);
 					_t = _t.getNextSibling();
 					state_end(_t);
@@ -19768,10 +19699,10 @@
 				}
 				case PERSISTENT:
 				{
-					AST tmp1087_AST_in = (AST)_t;
+					AST tmp1075_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
-					AST tmp1088_AST_in = (AST)_t;
+					AST tmp1076_AST_in = (AST)_t;
 					match(_t,RUN);
 					_t = _t.getNextSibling();
 					filenameorvalue(_t);
@@ -19781,13 +19712,13 @@
 					switch ( _t.getType()) {
 					case IN_KW:
 					{
-						AST __t1700 = _t;
-						AST tmp1089_AST_in = (AST)_t;
+						AST __t1695 = _t;
+						AST tmp1077_AST_in = (AST)_t;
 						match(_t,IN_KW);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t1700;
+						_t = __t1695;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -19808,17 +19739,17 @@
 					switch ( _t.getType()) {
 					case Parameter_list:
 					{
-						AST __t1702 = _t;
-						AST tmp1090_AST_in = (AST)_t;
+						AST __t1697 = _t;
+						AST tmp1078_AST_in = (AST)_t;
 						match(_t,Parameter_list);
 						_t = _t.getFirstChild();
-						AST tmp1091_AST_in = (AST)_t;
+						AST tmp1079_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						{
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==INPUT)) {
-							AST tmp1092_AST_in = (AST)_t;
+							AST tmp1080_AST_in = (AST)_t;
 							match(_t,INPUT);
 							_t = _t.getNextSibling();
 						}
@@ -19832,17 +19763,17 @@
 						expression(_t);
 						_t = _retTree;
 						{
-						_loop1706:
+						_loop1701:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp1093_AST_in = (AST)_t;
+								AST tmp1081_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								{
 								if (_t==null) _t=ASTNULL;
 								if ((_t.getType()==INPUT)) {
-									AST tmp1094_AST_in = (AST)_t;
+									AST tmp1082_AST_in = (AST)_t;
 									match(_t,INPUT);
 									_t = _t.getNextSibling();
 								}
@@ -19857,15 +19788,15 @@
 								_t = _retTree;
 							}
 							else {
-								break _loop1706;
+								break _loop1701;
 							}
 							
 						} while (true);
 						}
-						AST tmp1095_AST_in = (AST)_t;
+						AST tmp1083_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
-						_t = __t1702;
+						_t = __t1697;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -20016,7 +19947,7 @@
 			if ( inputState.guessing==0 ) {
 				action.scopeClose(onNode);
 			}
-			_t = __t1665;
+			_t = __t1660;
 			_t = _t.getNextSibling();
 			_retTree = _t;
 		}
@@ -20025,16 +19956,16 @@
 		
 		AST openstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2518 = _t;
-		AST tmp1096_AST_in = (AST)_t;
+		AST __t2513 = _t;
+		AST tmp1084_AST_in = (AST)_t;
 		match(_t,OPEN);
 		_t = _t.getFirstChild();
-		AST tmp1097_AST_in = (AST)_t;
+		AST tmp1085_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2518;
+		_t = __t2513;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20043,14 +19974,14 @@
 		
 		AST openquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1724 = _t;
-		AST tmp1098_AST_in = (AST)_t;
+		AST __t1719 = _t;
+		AST tmp1086_AST_in = (AST)_t;
 		match(_t,OPEN);
 		_t = _t.getFirstChild();
-		AST tmp1099_AST_in = (AST)_t;
+		AST tmp1087_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
-		AST tmp1100_AST_in = (AST)_t;
+		AST tmp1088_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -20058,14 +19989,14 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp1101_AST_in = (AST)_t;
+			AST tmp1089_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRESELECT:
 		{
-			AST tmp1102_AST_in = (AST)_t;
+			AST tmp1090_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -20079,7 +20010,7 @@
 		for_record_spec(_t,CQ.INIT);
 		_t = _retTree;
 		{
-		_loop1730:
+		_loop1725:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -20091,8 +20022,8 @@
 			}
 			case BY:
 			{
-				AST __t1727 = _t;
-				AST tmp1103_AST_in = (AST)_t;
+				AST __t1722 = _t;
+				AST tmp1091_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -20102,7 +20033,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1104_AST_in = (AST)_t;
+					AST tmp1092_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -20117,7 +20048,7 @@
 				}
 				}
 				}
-				_t = __t1727;
+				_t = __t1722;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -20129,33 +20060,33 @@
 			}
 			case INDEXEDREPOSITION:
 			{
-				AST tmp1105_AST_in = (AST)_t;
+				AST tmp1093_AST_in = (AST)_t;
 				match(_t,INDEXEDREPOSITION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXROWS:
 			{
-				AST __t1729 = _t;
-				AST tmp1106_AST_in = (AST)_t;
+				AST __t1724 = _t;
+				AST tmp1094_AST_in = (AST)_t;
 				match(_t,MAXROWS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1729;
+				_t = __t1724;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1730;
+				break _loop1725;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1724;
+		_t = __t1719;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20164,8 +20095,8 @@
 		
 		AST osappendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1733 = _t;
-		AST tmp1107_AST_in = (AST)_t;
+		AST __t1728 = _t;
+		AST tmp1095_AST_in = (AST)_t;
 		match(_t,OSAPPEND);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -20174,7 +20105,7 @@
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1733;
+		_t = __t1728;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20187,8 +20118,8 @@
 		switch ( _t.getType()) {
 		case OS400:
 		{
-			AST __t1735 = _t;
-			AST tmp1108_AST_in = (AST)_t;
+			AST __t1730 = _t;
+			AST tmp1096_AST_in = (AST)_t;
 			match(_t,OS400);
 			_t = _t.getFirstChild();
 			{
@@ -20196,21 +20127,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1109_AST_in = (AST)_t;
+				AST tmp1097_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1110_AST_in = (AST)_t;
+				AST tmp1098_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1111_AST_in = (AST)_t;
+				AST tmp1099_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20229,7 +20160,7 @@
 			}
 			}
 			{
-			_loop1738:
+			_loop1733:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20237,21 +20168,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1738;
+					break _loop1733;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1735;
+			_t = __t1730;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BTOS:
 		{
-			AST __t1739 = _t;
-			AST tmp1112_AST_in = (AST)_t;
+			AST __t1734 = _t;
+			AST tmp1100_AST_in = (AST)_t;
 			match(_t,BTOS);
 			_t = _t.getFirstChild();
 			{
@@ -20259,21 +20190,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1113_AST_in = (AST)_t;
+				AST tmp1101_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1114_AST_in = (AST)_t;
+				AST tmp1102_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1115_AST_in = (AST)_t;
+				AST tmp1103_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20292,7 +20223,7 @@
 			}
 			}
 			{
-			_loop1742:
+			_loop1737:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20300,21 +20231,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1742;
+					break _loop1737;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1739;
+			_t = __t1734;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOS:
 		{
-			AST __t1743 = _t;
-			AST tmp1116_AST_in = (AST)_t;
+			AST __t1738 = _t;
+			AST tmp1104_AST_in = (AST)_t;
 			match(_t,DOS);
 			_t = _t.getFirstChild();
 			{
@@ -20322,21 +20253,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1117_AST_in = (AST)_t;
+				AST tmp1105_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1118_AST_in = (AST)_t;
+				AST tmp1106_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1119_AST_in = (AST)_t;
+				AST tmp1107_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20355,7 +20286,7 @@
 			}
 			}
 			{
-			_loop1746:
+			_loop1741:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20363,21 +20294,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1746;
+					break _loop1741;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1743;
+			_t = __t1738;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MPE:
 		{
-			AST __t1747 = _t;
-			AST tmp1120_AST_in = (AST)_t;
+			AST __t1742 = _t;
+			AST tmp1108_AST_in = (AST)_t;
 			match(_t,MPE);
 			_t = _t.getFirstChild();
 			{
@@ -20385,21 +20316,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1121_AST_in = (AST)_t;
+				AST tmp1109_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1122_AST_in = (AST)_t;
+				AST tmp1110_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1123_AST_in = (AST)_t;
+				AST tmp1111_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20418,7 +20349,7 @@
 			}
 			}
 			{
-			_loop1750:
+			_loop1745:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20426,21 +20357,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1750;
+					break _loop1745;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1747;
+			_t = __t1742;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OS2:
 		{
-			AST __t1751 = _t;
-			AST tmp1124_AST_in = (AST)_t;
+			AST __t1746 = _t;
+			AST tmp1112_AST_in = (AST)_t;
 			match(_t,OS2);
 			_t = _t.getFirstChild();
 			{
@@ -20448,21 +20379,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1125_AST_in = (AST)_t;
+				AST tmp1113_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1126_AST_in = (AST)_t;
+				AST tmp1114_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1127_AST_in = (AST)_t;
+				AST tmp1115_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20481,7 +20412,7 @@
 			}
 			}
 			{
-			_loop1754:
+			_loop1749:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20489,21 +20420,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1754;
+					break _loop1749;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1751;
+			_t = __t1746;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSCOMMAND:
 		{
-			AST __t1755 = _t;
-			AST tmp1128_AST_in = (AST)_t;
+			AST __t1750 = _t;
+			AST tmp1116_AST_in = (AST)_t;
 			match(_t,OSCOMMAND);
 			_t = _t.getFirstChild();
 			{
@@ -20511,21 +20442,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1129_AST_in = (AST)_t;
+				AST tmp1117_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1130_AST_in = (AST)_t;
+				AST tmp1118_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1131_AST_in = (AST)_t;
+				AST tmp1119_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20544,7 +20475,7 @@
 			}
 			}
 			{
-			_loop1758:
+			_loop1753:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20552,21 +20483,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1758;
+					break _loop1753;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1755;
+			_t = __t1750;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNIX:
 		{
-			AST __t1759 = _t;
-			AST tmp1132_AST_in = (AST)_t;
+			AST __t1754 = _t;
+			AST tmp1120_AST_in = (AST)_t;
 			match(_t,UNIX);
 			_t = _t.getFirstChild();
 			{
@@ -20574,21 +20505,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1133_AST_in = (AST)_t;
+				AST tmp1121_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1134_AST_in = (AST)_t;
+				AST tmp1122_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1135_AST_in = (AST)_t;
+				AST tmp1123_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20607,7 +20538,7 @@
 			}
 			}
 			{
-			_loop1762:
+			_loop1757:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20615,21 +20546,21 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1762;
+					break _loop1757;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1759;
+			_t = __t1754;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VMS:
 		{
-			AST __t1763 = _t;
-			AST tmp1136_AST_in = (AST)_t;
+			AST __t1758 = _t;
+			AST tmp1124_AST_in = (AST)_t;
 			match(_t,VMS);
 			_t = _t.getFirstChild();
 			{
@@ -20637,21 +20568,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp1137_AST_in = (AST)_t;
+				AST tmp1125_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp1138_AST_in = (AST)_t;
+				AST tmp1126_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp1139_AST_in = (AST)_t;
+				AST tmp1127_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -20670,7 +20601,7 @@
 			}
 			}
 			{
-			_loop1766:
+			_loop1761:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20678,14 +20609,14 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1766;
+					break _loop1761;
 				}
 				
 			} while (true);
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1763;
+			_t = __t1758;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -20701,8 +20632,8 @@
 		
 		AST oscopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1768 = _t;
-		AST tmp1140_AST_in = (AST)_t;
+		AST __t1763 = _t;
+		AST tmp1128_AST_in = (AST)_t;
 		match(_t,OSCOPY);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -20711,7 +20642,7 @@
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1768;
+		_t = __t1763;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20720,13 +20651,13 @@
 		
 		AST oscreatedirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1770 = _t;
-		AST tmp1141_AST_in = (AST)_t;
+		AST __t1765 = _t;
+		AST tmp1129_AST_in = (AST)_t;
 		match(_t,OSCREATEDIR);
 		_t = _t.getFirstChild();
 		{
-		int _cnt1772=0;
-		_loop1772:
+		int _cnt1767=0;
+		_loop1767:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==VALUE||_t.getType()==TYPELESS_TOKEN)) {
@@ -20734,15 +20665,15 @@
 				_t = _retTree;
 			}
 			else {
-				if ( _cnt1772>=1 ) { break _loop1772; } else {throw new NoViableAltException(_t);}
+				if ( _cnt1767>=1 ) { break _loop1767; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt1772++;
+			_cnt1767++;
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1770;
+		_t = __t1765;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20751,13 +20682,13 @@
 		
 		AST osdeletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1774 = _t;
-		AST tmp1142_AST_in = (AST)_t;
+		AST __t1769 = _t;
+		AST tmp1130_AST_in = (AST)_t;
 		match(_t,OSDELETE);
 		_t = _t.getFirstChild();
 		{
-		int _cnt1777=0;
-		_loop1777:
+		int _cnt1772=0;
+		_loop1772:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==VALUE)) {
@@ -20766,16 +20697,16 @@
 			}
 			else if ((_tokenSet_20.member(_t.getType()))) {
 				{
-				AST tmp1143_AST_in = (AST)_t;
+				AST tmp1131_AST_in = (AST)_t;
 				match(_t,_tokenSet_20);
 				_t = _t.getNextSibling();
 				}
 			}
 			else {
-				if ( _cnt1777>=1 ) { break _loop1777; } else {throw new NoViableAltException(_t);}
+				if ( _cnt1772>=1 ) { break _loop1772; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt1777++;
+			_cnt1772++;
 		} while (true);
 		}
 		{
@@ -20783,7 +20714,7 @@
 		switch ( _t.getType()) {
 		case RECURSIVE:
 		{
-			AST tmp1144_AST_in = (AST)_t;
+			AST tmp1132_AST_in = (AST)_t;
 			match(_t,RECURSIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -20801,7 +20732,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1774;
+		_t = __t1769;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20810,8 +20741,8 @@
 		
 		AST osrenamestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1784 = _t;
-		AST tmp1145_AST_in = (AST)_t;
+		AST __t1779 = _t;
+		AST tmp1133_AST_in = (AST)_t;
 		match(_t,OSRENAME);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -20820,7 +20751,7 @@
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1784;
+		_t = __t1779;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20829,8 +20760,8 @@
 		
 		AST outputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1786 = _t;
-		AST tmp1146_AST_in = (AST)_t;
+		AST __t1781 = _t;
+		AST tmp1134_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -20852,12 +20783,12 @@
 		}
 		}
 		}
-		AST tmp1147_AST_in = (AST)_t;
+		AST tmp1135_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1786;
+		_t = __t1781;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20866,8 +20797,8 @@
 		
 		AST outputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1789 = _t;
-		AST tmp1148_AST_in = (AST)_t;
+		AST __t1784 = _t;
+		AST tmp1136_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -20889,14 +20820,14 @@
 		}
 		}
 		}
-		AST tmp1149_AST_in = (AST)_t;
+		AST tmp1137_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1789;
+		_t = __t1784;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20905,8 +20836,8 @@
 		
 		AST outputtostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1792 = _t;
-		AST tmp1150_AST_in = (AST)_t;
+		AST __t1787 = _t;
+		AST tmp1138_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -20928,14 +20859,14 @@
 		}
 		}
 		}
-		AST tmp1151_AST_in = (AST)_t;
+		AST tmp1139_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1792;
+		_t = __t1787;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20944,8 +20875,8 @@
 		
 		AST pagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1797 = _t;
-		AST tmp1152_AST_in = (AST)_t;
+		AST __t1792 = _t;
+		AST tmp1140_AST_in = (AST)_t;
 		match(_t,PAGE);
 		_t = _t.getFirstChild();
 		{
@@ -20970,7 +20901,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1797;
+		_t = __t1792;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20979,8 +20910,8 @@
 		
 		AST pausestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1806 = _t;
-		AST tmp1153_AST_in = (AST)_t;
+		AST __t1801 = _t;
+		AST tmp1141_AST_in = (AST)_t;
 		match(_t,PAUSE);
 		_t = _t.getFirstChild();
 		{
@@ -20997,61 +20928,61 @@
 		
 		}
 		{
-		_loop1811:
+		_loop1806:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case BEFOREHIDE:
 			{
-				AST tmp1154_AST_in = (AST)_t;
+				AST tmp1142_AST_in = (AST)_t;
 				match(_t,BEFOREHIDE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MESSAGE:
 			{
-				AST __t1809 = _t;
-				AST tmp1155_AST_in = (AST)_t;
+				AST __t1804 = _t;
+				AST tmp1143_AST_in = (AST)_t;
 				match(_t,MESSAGE);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
-				_t = __t1809;
+				_t = __t1804;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOMESSAGE:
 			{
-				AST tmp1156_AST_in = (AST)_t;
+				AST tmp1144_AST_in = (AST)_t;
 				match(_t,NOMESSAGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1810 = _t;
-				AST tmp1157_AST_in = (AST)_t;
+				AST __t1805 = _t;
+				AST tmp1145_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1158_AST_in = (AST)_t;
+				AST tmp1146_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1810;
+				_t = __t1805;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1811;
+				break _loop1806;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1806;
+		_t = __t1801;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21062,7 +20993,7 @@
 		AST p = null;
 		AST id = null;
 		
-		AST __t1815 = _t;
+		AST __t1810 = _t;
 		p = _t==ASTNULL ? null :(AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getFirstChild();
@@ -21077,81 +21008,81 @@
 		switch ( _t.getType()) {
 		case EXTERNAL:
 		{
-			AST __t1817 = _t;
-			AST tmp1159_AST_in = (AST)_t;
+			AST __t1812 = _t;
+			AST tmp1147_AST_in = (AST)_t;
 			match(_t,EXTERNAL);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
 			{
-			_loop1820:
+			_loop1815:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case CDECL_KW:
 				{
-					AST tmp1160_AST_in = (AST)_t;
+					AST tmp1148_AST_in = (AST)_t;
 					match(_t,CDECL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PASCAL_KW:
 				{
-					AST tmp1161_AST_in = (AST)_t;
+					AST tmp1149_AST_in = (AST)_t;
 					match(_t,PASCAL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STDCALL_KW:
 				{
-					AST tmp1162_AST_in = (AST)_t;
+					AST tmp1150_AST_in = (AST)_t;
 					match(_t,STDCALL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ORDINAL:
 				{
-					AST __t1819 = _t;
-					AST tmp1163_AST_in = (AST)_t;
+					AST __t1814 = _t;
+					AST tmp1151_AST_in = (AST)_t;
 					match(_t,ORDINAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1819;
+					_t = __t1814;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERSISTENT:
 				{
-					AST tmp1164_AST_in = (AST)_t;
+					AST tmp1152_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop1820;
+					break _loop1815;
 				}
 				}
 			} while (true);
 			}
-			_t = __t1817;
+			_t = __t1812;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIVATE:
 		{
-			AST tmp1165_AST_in = (AST)_t;
+			AST tmp1153_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IN_KW:
 		{
-			AST tmp1166_AST_in = (AST)_t;
+			AST tmp1154_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp1167_AST_in = (AST)_t;
+			AST tmp1155_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
@@ -21176,15 +21107,15 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1168_AST_in = (AST)_t;
+			AST tmp1156_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST __t1822 = _t;
-			AST tmp1169_AST_in = (AST)_t;
+			AST __t1817 = _t;
+			AST tmp1157_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -21192,7 +21123,7 @@
 			switch ( _t.getType()) {
 			case PROCEDURE:
 			{
-				AST tmp1170_AST_in = (AST)_t;
+				AST tmp1158_AST_in = (AST)_t;
 				match(_t,PROCEDURE);
 				_t = _t.getNextSibling();
 				break;
@@ -21207,7 +21138,7 @@
 			}
 			}
 			}
-			_t = __t1822;
+			_t = __t1817;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -21222,7 +21153,7 @@
 		if ( inputState.guessing==0 ) {
 				action.procedureEnd(p);
 		}
-		_t = __t1815;
+		_t = __t1810;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21231,16 +21162,16 @@
 		
 		AST processeventsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1827 = _t;
-		AST tmp1171_AST_in = (AST)_t;
+		AST __t1822 = _t;
+		AST tmp1159_AST_in = (AST)_t;
 		match(_t,PROCESS);
 		_t = _t.getFirstChild();
-		AST tmp1172_AST_in = (AST)_t;
+		AST tmp1160_AST_in = (AST)_t;
 		match(_t,EVENTS);
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1827;
+		_t = __t1822;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21249,8 +21180,8 @@
 		
 		AST promptforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1832 = _t;
-		AST tmp1173_AST_in = (AST)_t;
+		AST __t1827 = _t;
+		AST tmp1161_AST_in = (AST)_t;
 		match(_t,PROMPTFOR);
 		_t = _t.getFirstChild();
 		{
@@ -21285,7 +21216,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1174_AST_in = (AST)_t;
+			AST tmp1162_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -21308,7 +21239,7 @@
 		}
 		}
 		{
-		_loop1836:
+		_loop1831:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -21316,7 +21247,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1836;
+				break _loop1831;
 			}
 			
 		} while (true);
@@ -21350,12 +21281,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1839 = _t;
-			AST tmp1175_AST_in = (AST)_t;
+			AST __t1834 = _t;
+			AST tmp1163_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1841:
+			_loop1836:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -21363,12 +21294,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1841;
+					break _loop1836;
 				}
 				
 			} while (true);
 			}
-			_t = __t1839;
+			_t = __t1834;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21391,16 +21322,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1843 = _t;
-			AST tmp1176_AST_in = (AST)_t;
+			AST __t1838 = _t;
+			AST tmp1164_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1177_AST_in = (AST)_t;
+			AST tmp1165_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1843;
+			_t = __t1838;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21460,7 +21391,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1832;
+		_t = __t1827;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21469,8 +21400,8 @@
 		
 		AST publishstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1850 = _t;
-		AST tmp1178_AST_in = (AST)_t;
+		AST __t1845 = _t;
+		AST tmp1166_AST_in = (AST)_t;
 		match(_t,PUBLISH);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -21480,13 +21411,13 @@
 		switch ( _t.getType()) {
 		case FROM:
 		{
-			AST __t1852 = _t;
-			AST tmp1179_AST_in = (AST)_t;
+			AST __t1847 = _t;
+			AST tmp1167_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1852;
+			_t = __t1847;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21524,7 +21455,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1850;
+		_t = __t1845;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21533,8 +21464,8 @@
 		
 		AST putstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1855 = _t;
-		AST tmp1180_AST_in = (AST)_t;
+		AST __t1850 = _t;
+		AST tmp1168_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
 		{
@@ -21555,14 +21486,14 @@
 		switch ( _t.getType()) {
 		case CONTROL:
 		{
-			AST tmp1181_AST_in = (AST)_t;
+			AST tmp1169_AST_in = (AST)_t;
 			match(_t,CONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNFORMATTED:
 		{
-			AST tmp1182_AST_in = (AST)_t;
+			AST tmp1170_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
@@ -21577,7 +21508,7 @@
 		}
 		}
 		{
-		_loop1870:
+		_loop1865:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -21594,15 +21525,15 @@
 				break;
 			}
 			default:
-				boolean synPredMatched1862 = false;
+				boolean synPredMatched1857 = false;
 				if (((_t.getType()==NULL_KW))) {
-					AST __t1862 = _t;
-					synPredMatched1862 = true;
+					AST __t1857 = _t;
+					synPredMatched1857 = true;
 					inputState.guessing++;
 					try {
 						{
-						AST __t1860 = _t;
-						AST tmp1183_AST_in = (AST)_t;
+						AST __t1855 = _t;
+						AST tmp1171_AST_in = (AST)_t;
 						match(_t,NULL_KW);
 						_t = _t.getFirstChild();
 						{
@@ -21610,7 +21541,7 @@
 						switch ( _t.getType()) {
 						case LEFTPAREN:
 						{
-							AST tmp1184_AST_in = (AST)_t;
+							AST tmp1172_AST_in = (AST)_t;
 							match(_t,LEFTPAREN);
 							_t = _t.getNextSibling();
 							break;
@@ -21625,19 +21556,19 @@
 						}
 						}
 						}
-						_t = __t1860;
+						_t = __t1855;
 						_t = _t.getNextSibling();
 						}
 					}
 					catch (RecognitionException pe) {
-						synPredMatched1862 = false;
+						synPredMatched1857 = false;
 					}
-					_t = __t1862;
+					_t = __t1857;
 					inputState.guessing--;
 				}
-				if ( synPredMatched1862 ) {
-					AST __t1863 = _t;
-					AST tmp1185_AST_in = (AST)_t;
+				if ( synPredMatched1857 ) {
+					AST __t1858 = _t;
+					AST tmp1173_AST_in = (AST)_t;
 					match(_t,NULL_KW);
 					_t = _t.getFirstChild();
 					{
@@ -21659,70 +21590,70 @@
 					}
 					}
 					}
-					_t = __t1863;
+					_t = __t1858;
 					_t = _t.getNextSibling();
 				}
 				else if ((_tokenSet_4.member(_t.getType()))) {
 					expression(_t);
 					_t = _retTree;
 					{
-					_loop1869:
+					_loop1864:
 					do {
 						if (_t==null) _t=ASTNULL;
 						switch ( _t.getType()) {
 						case FORMAT:
 						{
-							AST __t1866 = _t;
-							AST tmp1186_AST_in = (AST)_t;
+							AST __t1861 = _t;
+							AST tmp1174_AST_in = (AST)_t;
 							match(_t,FORMAT);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1866;
+							_t = __t1861;
 							_t = _t.getNextSibling();
 							break;
 						}
 						case AT:
 						{
-							AST __t1867 = _t;
-							AST tmp1187_AST_in = (AST)_t;
+							AST __t1862 = _t;
+							AST tmp1175_AST_in = (AST)_t;
 							match(_t,AT);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1867;
+							_t = __t1862;
 							_t = _t.getNextSibling();
 							break;
 						}
 						case TO:
 						{
-							AST __t1868 = _t;
-							AST tmp1188_AST_in = (AST)_t;
+							AST __t1863 = _t;
+							AST tmp1176_AST_in = (AST)_t;
 							match(_t,TO);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1868;
+							_t = __t1863;
 							_t = _t.getNextSibling();
 							break;
 						}
 						default:
 						{
-							break _loop1869;
+							break _loop1864;
 						}
 						}
 					} while (true);
 					}
 				}
 			else {
-				break _loop1870;
+				break _loop1865;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1855;
+		_t = __t1850;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21731,11 +21662,11 @@
 		
 		AST putcursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1872 = _t;
-		AST tmp1189_AST_in = (AST)_t;
+		AST __t1867 = _t;
+		AST tmp1177_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
-		AST tmp1190_AST_in = (AST)_t;
+		AST tmp1178_AST_in = (AST)_t;
 		match(_t,CURSOR);
 		_t = _t.getNextSibling();
 		{
@@ -21743,7 +21674,7 @@
 		switch ( _t.getType()) {
 		case OFF:
 		{
-			AST tmp1191_AST_in = (AST)_t;
+			AST tmp1179_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			break;
@@ -21754,37 +21685,37 @@
 		case ROW:
 		{
 			{
-			_loop1877:
+			_loop1872:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case ROW:
 				{
-					AST __t1875 = _t;
-					AST tmp1192_AST_in = (AST)_t;
+					AST __t1870 = _t;
+					AST tmp1180_AST_in = (AST)_t;
 					match(_t,ROW);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1875;
+					_t = __t1870;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case COLUMN:
 				{
-					AST __t1876 = _t;
-					AST tmp1193_AST_in = (AST)_t;
+					AST __t1871 = _t;
+					AST tmp1181_AST_in = (AST)_t;
 					match(_t,COLUMN);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1876;
+					_t = __t1871;
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop1877;
+					break _loop1872;
 				}
 				}
 			} while (true);
@@ -21799,7 +21730,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1872;
+		_t = __t1867;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21808,65 +21739,65 @@
 		
 		AST putscreenstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1879 = _t;
-		AST tmp1194_AST_in = (AST)_t;
+		AST __t1874 = _t;
+		AST tmp1182_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
-		AST tmp1195_AST_in = (AST)_t;
+		AST tmp1183_AST_in = (AST)_t;
 		match(_t,SCREEN);
 		_t = _t.getNextSibling();
 		{
-		_loop1884:
+		_loop1879:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ATTRSPACE:
 			{
-				AST tmp1196_AST_in = (AST)_t;
+				AST tmp1184_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp1197_AST_in = (AST)_t;
+				AST tmp1185_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLOR:
 			{
-				AST __t1881 = _t;
-				AST tmp1198_AST_in = (AST)_t;
+				AST __t1876 = _t;
+				AST tmp1186_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t1881;
+				_t = __t1876;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMN:
 			{
-				AST __t1882 = _t;
-				AST tmp1199_AST_in = (AST)_t;
+				AST __t1877 = _t;
+				AST tmp1187_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1882;
+				_t = __t1877;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROW:
 			{
-				AST __t1883 = _t;
-				AST tmp1200_AST_in = (AST)_t;
+				AST __t1878 = _t;
+				AST tmp1188_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1883;
+				_t = __t1878;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -21877,14 +21808,14 @@
 					_t = _retTree;
 				}
 			else {
-				break _loop1884;
+				break _loop1879;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1879;
+		_t = __t1874;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21893,8 +21824,8 @@
 		
 		AST putkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1896 = _t;
-		AST tmp1201_AST_in = (AST)_t;
+		AST __t1891 = _t;
+		AST tmp1189_AST_in = (AST)_t;
 		match(_t,PUTKEYVALUE);
 		_t = _t.getFirstChild();
 		{
@@ -21902,18 +21833,18 @@
 		switch ( _t.getType()) {
 		case SECTION:
 		{
-			AST tmp1202_AST_in = (AST)_t;
+			AST tmp1190_AST_in = (AST)_t;
 			match(_t,SECTION);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1203_AST_in = (AST)_t;
+			AST tmp1191_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getNextSibling();
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==DEFAULT)) {
-				AST tmp1204_AST_in = (AST)_t;
+				AST tmp1192_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getNextSibling();
 			}
@@ -21926,7 +21857,7 @@
 			}
 			
 			}
-			AST tmp1205_AST_in = (AST)_t;
+			AST tmp1193_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -21941,14 +21872,14 @@
 			switch ( _t.getType()) {
 			case COLOR:
 			{
-				AST tmp1206_AST_in = (AST)_t;
+				AST tmp1194_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST tmp1207_AST_in = (AST)_t;
+				AST tmp1195_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getNextSibling();
 				break;
@@ -21966,7 +21897,7 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==ALL)) {
-				AST tmp1208_AST_in = (AST)_t;
+				AST tmp1196_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 			}
@@ -21988,7 +21919,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1209_AST_in = (AST)_t;
+			AST tmp1197_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22006,7 +21937,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1896;
+		_t = __t1891;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22015,13 +21946,13 @@
 		
 		AST quitstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1922 = _t;
-		AST tmp1210_AST_in = (AST)_t;
+		AST __t1917 = _t;
+		AST tmp1198_AST_in = (AST)_t;
 		match(_t,QUIT);
 		_t = _t.getFirstChild();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1922;
+		_t = __t1917;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22030,8 +21961,8 @@
 		
 		AST rawtransferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1946 = _t;
-		AST tmp1211_AST_in = (AST)_t;
+		AST __t1941 = _t;
+		AST tmp1199_AST_in = (AST)_t;
 		match(_t,RAWTRANSFER);
 		_t = _t.getFirstChild();
 		{
@@ -22039,14 +21970,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1212_AST_in = (AST)_t;
+			AST tmp1200_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1213_AST_in = (AST)_t;
+			AST tmp1201_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -22083,7 +22014,7 @@
 		}
 		}
 		}
-		AST tmp1214_AST_in = (AST)_t;
+		AST tmp1202_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
@@ -22091,14 +22022,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1215_AST_in = (AST)_t;
+			AST tmp1203_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1216_AST_in = (AST)_t;
+			AST tmp1204_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -22140,7 +22071,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1217_AST_in = (AST)_t;
+			AST tmp1205_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22158,7 +22089,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1946;
+		_t = __t1941;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22167,8 +22098,8 @@
 		
 		AST readkeystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1953 = _t;
-		AST tmp1218_AST_in = (AST)_t;
+		AST __t1948 = _t;
+		AST tmp1206_AST_in = (AST)_t;
 		match(_t,READKEY);
 		_t = _t.getFirstChild();
 		{
@@ -22197,13 +22128,13 @@
 		switch ( _t.getType()) {
 		case PAUSE:
 		{
-			AST __t1956 = _t;
-			AST tmp1219_AST_in = (AST)_t;
+			AST __t1951 = _t;
+			AST tmp1207_AST_in = (AST)_t;
 			match(_t,PAUSE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1956;
+			_t = __t1951;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -22220,7 +22151,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1953;
+		_t = __t1948;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22229,8 +22160,8 @@
 		
 		AST releasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1990 = _t;
-		AST tmp1220_AST_in = (AST)_t;
+		AST __t1985 = _t;
+		AST tmp1208_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -22240,7 +22171,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1221_AST_in = (AST)_t;
+			AST tmp1209_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22258,7 +22189,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1990;
+		_t = __t1985;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22267,17 +22198,17 @@
 		
 		AST releaseexternalstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1993 = _t;
-		AST tmp1222_AST_in = (AST)_t;
+		AST __t1988 = _t;
+		AST tmp1210_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
-		AST tmp1223_AST_in = (AST)_t;
+		AST tmp1211_AST_in = (AST)_t;
 		match(_t,EXTERNAL);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
-			AST tmp1224_AST_in = (AST)_t;
+			AST tmp1212_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getNextSibling();
 		}
@@ -22295,7 +22226,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1225_AST_in = (AST)_t;
+			AST tmp1213_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22313,7 +22244,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1993;
+		_t = __t1988;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22322,11 +22253,11 @@
 		
 		AST releaseobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1997 = _t;
-		AST tmp1226_AST_in = (AST)_t;
+		AST __t1992 = _t;
+		AST tmp1214_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
-		AST tmp1227_AST_in = (AST)_t;
+		AST tmp1215_AST_in = (AST)_t;
 		match(_t,OBJECT);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -22336,7 +22267,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1228_AST_in = (AST)_t;
+			AST tmp1216_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22354,7 +22285,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1997;
+		_t = __t1992;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22363,11 +22294,11 @@
 		
 		AST repositionstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2008 = _t;
-		AST tmp1229_AST_in = (AST)_t;
+		AST __t2003 = _t;
+		AST tmp1217_AST_in = (AST)_t;
 		match(_t,REPOSITION);
 		_t = _t.getFirstChild();
-		AST tmp1230_AST_in = (AST)_t;
+		AST tmp1218_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -22375,8 +22306,8 @@
 		switch ( _t.getType()) {
 		case TO:
 		{
-			AST __t2010 = _t;
-			AST tmp1231_AST_in = (AST)_t;
+			AST __t2005 = _t;
+			AST tmp1219_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -22384,24 +22315,24 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1232_AST_in = (AST)_t;
+				AST tmp1220_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
 				{
-				_loop2013:
+				_loop2008:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1233_AST_in = (AST)_t;
+						AST tmp1221_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						expression(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop2013;
+						break _loop2008;
 					}
 					
 				} while (true);
@@ -22410,7 +22341,7 @@
 			}
 			case RECID:
 			{
-				AST tmp1234_AST_in = (AST)_t;
+				AST tmp1222_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -22419,7 +22350,7 @@
 			}
 			case ROW:
 			{
-				AST tmp1235_AST_in = (AST)_t;
+				AST tmp1223_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -22432,43 +22363,43 @@
 			}
 			}
 			}
-			_t = __t2010;
+			_t = __t2005;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROW:
 		{
-			AST __t2014 = _t;
-			AST tmp1236_AST_in = (AST)_t;
+			AST __t2009 = _t;
+			AST tmp1224_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2014;
+			_t = __t2009;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORWARDS:
 		{
-			AST __t2015 = _t;
-			AST tmp1237_AST_in = (AST)_t;
+			AST __t2010 = _t;
+			AST tmp1225_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2015;
+			_t = __t2010;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKWARDS:
 		{
-			AST __t2016 = _t;
-			AST tmp1238_AST_in = (AST)_t;
+			AST __t2011 = _t;
+			AST tmp1226_AST_in = (AST)_t;
 			match(_t,BACKWARDS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2016;
+			_t = __t2011;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -22483,7 +22414,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1239_AST_in = (AST)_t;
+			AST tmp1227_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22501,7 +22432,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2008;
+		_t = __t2003;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22510,8 +22441,8 @@
 		
 		AST returnstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2020 = _t;
-		AST tmp1240_AST_in = (AST)_t;
+		AST __t2015 = _t;
+		AST tmp1228_AST_in = (AST)_t;
 		match(_t,RETURN);
 		_t = _t.getFirstChild();
 		{
@@ -22529,7 +22460,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2020;
+		_t = __t2015;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22538,15 +22469,15 @@
 		
 		AST revokestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2520 = _t;
-		AST tmp1241_AST_in = (AST)_t;
+		AST __t2515 = _t;
+		AST tmp1229_AST_in = (AST)_t;
 		match(_t,REVOKE);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp1242_AST_in = (AST)_t;
+		AST tmp1230_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -22560,7 +22491,7 @@
 		}
 		case ID:
 		{
-			AST tmp1243_AST_in = (AST)_t;
+			AST tmp1231_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -22575,7 +22506,7 @@
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2520;
+		_t = __t2515;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22587,7 +22518,7 @@
 		AST hnd = null;
 		AST hexp = null;
 		
-		AST __t2042 = _t;
+		AST __t2037 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
@@ -22601,18 +22532,18 @@
 		switch ( _t.getType()) {
 		case LEFTANGLE:
 		{
-			AST tmp1244_AST_in = (AST)_t;
+			AST tmp1232_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1245_AST_in = (AST)_t;
+			AST tmp1233_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
 			filenameorvalue(_t);
 			_t = _retTree;
-			AST tmp1246_AST_in = (AST)_t;
+			AST tmp1234_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1247_AST_in = (AST)_t;
+			AST tmp1235_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
 			break;
@@ -22638,14 +22569,14 @@
 		}
 		}
 		{
-		_loop2064:
+		_loop2059:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case PERSISTENT:
 			{
-				AST __t2045 = _t;
-				AST tmp1248_AST_in = (AST)_t;
+				AST __t2040 = _t;
+				AST tmp1236_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getFirstChild();
 				{
@@ -22653,8 +22584,8 @@
 				switch ( _t.getType()) {
 				case SET:
 				{
-					AST __t2047 = _t;
-					AST tmp1249_AST_in = (AST)_t;
+					AST __t2042 = _t;
+					AST tmp1237_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -22680,7 +22611,7 @@
 					}
 					}
 					}
-					_t = __t2047;
+					_t = __t2042;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -22694,14 +22625,14 @@
 				}
 				}
 				}
-				_t = __t2045;
+				_t = __t2040;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SET:
 			{
-				AST __t2049 = _t;
-				AST tmp1250_AST_in = (AST)_t;
+				AST __t2044 = _t;
+				AST tmp1238_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				{
@@ -22723,20 +22654,20 @@
 				}
 				}
 				}
-				_t = __t2049;
+				_t = __t2044;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ON:
 			{
-				AST __t2051 = _t;
-				AST tmp1251_AST_in = (AST)_t;
+				AST __t2046 = _t;
+				AST tmp1239_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==SERVER)) {
-					AST tmp1252_AST_in = (AST)_t;
+					AST tmp1240_AST_in = (AST)_t;
 					match(_t,SERVER);
 					_t = _t.getNextSibling();
 				}
@@ -22754,7 +22685,7 @@
 				switch ( _t.getType()) {
 				case TRANSACTION:
 				{
-					AST tmp1253_AST_in = (AST)_t;
+					AST tmp1241_AST_in = (AST)_t;
 					match(_t,TRANSACTION);
 					_t = _t.getNextSibling();
 					{
@@ -22762,7 +22693,7 @@
 					switch ( _t.getType()) {
 					case DISTINCT:
 					{
-						AST tmp1254_AST_in = (AST)_t;
+						AST tmp1242_AST_in = (AST)_t;
 						match(_t,DISTINCT);
 						_t = _t.getNextSibling();
 						break;
@@ -22789,20 +22720,20 @@
 				}
 				}
 				}
-				_t = __t2051;
+				_t = __t2046;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t2055 = _t;
-				AST tmp1255_AST_in = (AST)_t;
+				AST __t2050 = _t;
+				AST tmp1243_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
 				hexp = _t==ASTNULL ? null : (AST)_t;
 				expression(_t);
 				_t = _retTree;
-				_t = __t2055;
+				_t = __t2050;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.runInHandle(hexp);
@@ -22811,8 +22742,8 @@
 			}
 			case ASYNCHRONOUS:
 			{
-				AST __t2056 = _t;
-				AST tmp1256_AST_in = (AST)_t;
+				AST __t2051 = _t;
+				AST tmp1244_AST_in = (AST)_t;
 				match(_t,ASYNCHRONOUS);
 				_t = _t.getFirstChild();
 				{
@@ -22820,8 +22751,8 @@
 				switch ( _t.getType()) {
 				case SET:
 				{
-					AST __t2058 = _t;
-					AST tmp1257_AST_in = (AST)_t;
+					AST __t2053 = _t;
+					AST tmp1245_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -22843,7 +22774,7 @@
 					}
 					}
 					}
-					_t = __t2058;
+					_t = __t2053;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -22864,13 +22795,13 @@
 				switch ( _t.getType()) {
 				case EVENTPROCEDURE:
 				{
-					AST __t2061 = _t;
-					AST tmp1258_AST_in = (AST)_t;
+					AST __t2056 = _t;
+					AST tmp1246_AST_in = (AST)_t;
 					match(_t,EVENTPROCEDURE);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2061;
+					_t = __t2056;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -22890,13 +22821,13 @@
 				switch ( _t.getType()) {
 				case IN_KW:
 				{
-					AST __t2063 = _t;
-					AST tmp1259_AST_in = (AST)_t;
+					AST __t2058 = _t;
+					AST tmp1247_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2063;
+					_t = __t2058;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -22910,13 +22841,13 @@
 				}
 				}
 				}
-				_t = __t2056;
+				_t = __t2051;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2064;
+				break _loop2059;
 			}
 			}
 		} while (true);
@@ -22948,13 +22879,13 @@
 		}
 		}
 		{
-		_loop2067:
+		_loop2062:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp1260_AST_in = (AST)_t;
+				AST tmp1248_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -22968,14 +22899,14 @@
 			}
 			default:
 			{
-				break _loop2067;
+				break _loop2062;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2042;
+		_t = __t2037;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22984,14 +22915,14 @@
 		
 		AST runstoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2069 = _t;
-		AST tmp1261_AST_in = (AST)_t;
+		AST __t2064 = _t;
+		AST tmp1249_AST_in = (AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
-		AST tmp1262_AST_in = (AST)_t;
+		AST tmp1250_AST_in = (AST)_t;
 		match(_t,STOREDPROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp1263_AST_in = (AST)_t;
+		AST tmp1251_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -23021,7 +22952,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1264_AST_in = (AST)_t;
+			AST tmp1252_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23060,7 +22991,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2069;
+		_t = __t2064;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23069,11 +23000,11 @@
 		
 		AST runsuperstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2074 = _t;
-		AST tmp1265_AST_in = (AST)_t;
+		AST __t2069 = _t;
+		AST tmp1253_AST_in = (AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
-		AST tmp1266_AST_in = (AST)_t;
+		AST tmp1254_AST_in = (AST)_t;
 		match(_t,SUPER);
 		_t = _t.getNextSibling();
 		{
@@ -23102,7 +23033,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1267_AST_in = (AST)_t;
+			AST tmp1255_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23120,7 +23051,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2074;
+		_t = __t2069;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23129,11 +23060,11 @@
 		
 		AST savecachestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2078 = _t;
-		AST tmp1268_AST_in = (AST)_t;
+		AST __t2073 = _t;
+		AST tmp1256_AST_in = (AST)_t;
 		match(_t,SAVE);
 		_t = _t.getFirstChild();
-		AST tmp1269_AST_in = (AST)_t;
+		AST tmp1257_AST_in = (AST)_t;
 		match(_t,CACHE);
 		_t = _t.getNextSibling();
 		{
@@ -23141,14 +23072,14 @@
 		switch ( _t.getType()) {
 		case CURRENT:
 		{
-			AST tmp1270_AST_in = (AST)_t;
+			AST tmp1258_AST_in = (AST)_t;
 			match(_t,CURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPLETE:
 		{
-			AST tmp1271_AST_in = (AST)_t;
+			AST tmp1259_AST_in = (AST)_t;
 			match(_t,COMPLETE);
 			_t = _t.getNextSibling();
 			break;
@@ -23161,7 +23092,7 @@
 		}
 		anyorvalue(_t);
 		_t = _retTree;
-		AST tmp1272_AST_in = (AST)_t;
+		AST tmp1260_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		filenameorvalue(_t);
@@ -23171,7 +23102,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1273_AST_in = (AST)_t;
+			AST tmp1261_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23189,7 +23120,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2078;
+		_t = __t2073;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23198,8 +23129,8 @@
 		
 		AST scrollstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2083 = _t;
-		AST tmp1274_AST_in = (AST)_t;
+		AST __t2078 = _t;
+		AST tmp1262_AST_in = (AST)_t;
 		match(_t,SCROLL);
 		_t = _t.getFirstChild();
 		{
@@ -23207,7 +23138,7 @@
 		switch ( _t.getType()) {
 		case FROMCURRENT:
 		{
-			AST tmp1275_AST_in = (AST)_t;
+			AST tmp1263_AST_in = (AST)_t;
 			match(_t,FROMCURRENT);
 			_t = _t.getNextSibling();
 			break;
@@ -23231,7 +23162,7 @@
 		switch ( _t.getType()) {
 		case UP:
 		{
-			AST tmp1276_AST_in = (AST)_t;
+			AST tmp1264_AST_in = (AST)_t;
 			match(_t,UP);
 			_t = _t.getNextSibling();
 			break;
@@ -23254,7 +23185,7 @@
 		switch ( _t.getType()) {
 		case DOWN:
 		{
-			AST tmp1277_AST_in = (AST)_t;
+			AST tmp1265_AST_in = (AST)_t;
 			match(_t,DOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -23293,7 +23224,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2083;
+		_t = __t2078;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23302,8 +23233,8 @@
 		
 		AST seekstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2096 = _t;
-		AST tmp1278_AST_in = (AST)_t;
+		AST __t2091 = _t;
+		AST tmp1266_AST_in = (AST)_t;
 		match(_t,SEEK);
 		_t = _t.getFirstChild();
 		{
@@ -23311,14 +23242,14 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp1279_AST_in = (AST)_t;
+			AST tmp1267_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST tmp1280_AST_in = (AST)_t;
+			AST tmp1268_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -23335,7 +23266,7 @@
 		}
 		}
 		}
-		AST tmp1281_AST_in = (AST)_t;
+		AST tmp1269_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
@@ -23345,7 +23276,7 @@
 			_t = _retTree;
 		}
 		else if ((_t.getType()==END)) {
-			AST tmp1282_AST_in = (AST)_t;
+			AST tmp1270_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getNextSibling();
 		}
@@ -23356,7 +23287,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2096;
+		_t = __t2091;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23376,8 +23307,8 @@
 		
 		AST setstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2114 = _t;
-		AST tmp1283_AST_in = (AST)_t;
+		AST __t2109 = _t;
+		AST tmp1271_AST_in = (AST)_t;
 		match(_t,SET);
 		_t = _t.getFirstChild();
 		{
@@ -23413,7 +23344,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1284_AST_in = (AST)_t;
+			AST tmp1272_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -23437,7 +23368,7 @@
 		}
 		}
 		{
-		_loop2118:
+		_loop2113:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -23445,7 +23376,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop2118;
+				break _loop2113;
 			}
 			
 		} while (true);
@@ -23480,12 +23411,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t2121 = _t;
-			AST tmp1285_AST_in = (AST)_t;
+			AST __t2116 = _t;
+			AST tmp1273_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop2123:
+			_loop2118:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -23493,12 +23424,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop2123;
+					break _loop2118;
 				}
 				
 			} while (true);
 			}
-			_t = __t2121;
+			_t = __t2116;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23522,16 +23453,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2125 = _t;
-			AST tmp1286_AST_in = (AST)_t;
+			AST __t2120 = _t;
+			AST tmp1274_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1287_AST_in = (AST)_t;
+			AST tmp1275_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2125;
+			_t = __t2120;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23597,7 +23528,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1288_AST_in = (AST)_t;
+			AST tmp1276_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23615,7 +23546,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2114;
+		_t = __t2109;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23624,8 +23555,8 @@
 		
 		AST showstatsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2136 = _t;
-		AST tmp1289_AST_in = (AST)_t;
+		AST __t2131 = _t;
+		AST tmp1277_AST_in = (AST)_t;
 		match(_t,SHOWSTATS);
 		_t = _t.getFirstChild();
 		{
@@ -23633,7 +23564,7 @@
 		switch ( _t.getType()) {
 		case CLEAR:
 		{
-			AST tmp1290_AST_in = (AST)_t;
+			AST tmp1278_AST_in = (AST)_t;
 			match(_t,CLEAR);
 			_t = _t.getNextSibling();
 			break;
@@ -23651,7 +23582,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2136;
+		_t = __t2131;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23660,8 +23591,8 @@
 		
 		AST statusstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2166 = _t;
-		AST tmp1291_AST_in = (AST)_t;
+		AST __t2161 = _t;
+		AST tmp1279_AST_in = (AST)_t;
 		match(_t,STATUS);
 		_t = _t.getFirstChild();
 		{
@@ -23669,8 +23600,8 @@
 		switch ( _t.getType()) {
 		case DEFAULT:
 		{
-			AST __t2168 = _t;
-			AST tmp1292_AST_in = (AST)_t;
+			AST __t2163 = _t;
+			AST tmp1280_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getFirstChild();
 			{
@@ -23686,14 +23617,14 @@
 			}
 			
 			}
-			_t = __t2168;
+			_t = __t2163;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUT:
 		{
-			AST __t2170 = _t;
-			AST tmp1293_AST_in = (AST)_t;
+			AST __t2165 = _t;
+			AST tmp1281_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			{
@@ -23701,7 +23632,7 @@
 			switch ( _t.getType()) {
 			case OFF:
 			{
-				AST tmp1294_AST_in = (AST)_t;
+				AST tmp1282_AST_in = (AST)_t;
 				match(_t,OFF);
 				_t = _t.getNextSibling();
 				break;
@@ -23721,7 +23652,7 @@
 			}
 			}
 			}
-			_t = __t2170;
+			_t = __t2165;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23736,16 +23667,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2173 = _t;
-			AST tmp1295_AST_in = (AST)_t;
+			AST __t2168 = _t;
+			AST tmp1283_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1296_AST_in = (AST)_t;
+			AST tmp1284_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2173;
+			_t = __t2168;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23762,7 +23693,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2166;
+		_t = __t2161;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23771,13 +23702,13 @@
 		
 		AST stopstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2175 = _t;
-		AST tmp1297_AST_in = (AST)_t;
+		AST __t2170 = _t;
+		AST tmp1285_AST_in = (AST)_t;
 		match(_t,STOP);
 		_t = _t.getFirstChild();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2175;
+		_t = __t2170;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23786,20 +23717,20 @@
 		
 		AST subscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2181 = _t;
-		AST tmp1298_AST_in = (AST)_t;
+		AST __t2176 = _t;
+		AST tmp1286_AST_in = (AST)_t;
 		match(_t,SUBSCRIBE);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
-			AST __t2183 = _t;
-			AST tmp1299_AST_in = (AST)_t;
+			AST __t2178 = _t;
+			AST tmp1287_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2183;
+			_t = __t2178;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_24.member(_t.getType()))) {
@@ -23812,7 +23743,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TO)) {
-			AST tmp1300_AST_in = (AST)_t;
+			AST tmp1288_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getNextSibling();
 		}
@@ -23830,20 +23761,20 @@
 		switch ( _t.getType()) {
 		case ANYWHERE:
 		{
-			AST tmp1301_AST_in = (AST)_t;
+			AST tmp1289_AST_in = (AST)_t;
 			match(_t,ANYWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IN_KW:
 		{
-			AST __t2186 = _t;
-			AST tmp1302_AST_in = (AST)_t;
+			AST __t2181 = _t;
+			AST tmp1290_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2186;
+			_t = __t2181;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23858,13 +23789,13 @@
 		switch ( _t.getType()) {
 		case RUNPROCEDURE:
 		{
-			AST __t2188 = _t;
-			AST tmp1303_AST_in = (AST)_t;
+			AST __t2183 = _t;
+			AST tmp1291_AST_in = (AST)_t;
 			match(_t,RUNPROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2188;
+			_t = __t2183;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23885,7 +23816,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1304_AST_in = (AST)_t;
+			AST tmp1292_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23903,7 +23834,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2181;
+		_t = __t2176;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23912,11 +23843,11 @@
 		
 		AST systemdialogcolorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2198 = _t;
-		AST tmp1305_AST_in = (AST)_t;
+		AST __t2193 = _t;
+		AST tmp1293_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1306_AST_in = (AST)_t;
+		AST tmp1294_AST_in = (AST)_t;
 		match(_t,COLOR);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -23926,13 +23857,13 @@
 		switch ( _t.getType()) {
 		case UPDATE:
 		{
-			AST __t2200 = _t;
-			AST tmp1307_AST_in = (AST)_t;
+			AST __t2195 = _t;
+			AST tmp1295_AST_in = (AST)_t;
 			match(_t,UPDATE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
-			_t = __t2200;
+			_t = __t2195;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23953,16 +23884,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2202 = _t;
-			AST tmp1308_AST_in = (AST)_t;
+			AST __t2197 = _t;
+			AST tmp1296_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1309_AST_in = (AST)_t;
+			AST tmp1297_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2202;
+			_t = __t2197;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23979,7 +23910,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2198;
+		_t = __t2193;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23988,95 +23919,95 @@
 		
 		AST systemdialogfontstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2204 = _t;
-		AST tmp1310_AST_in = (AST)_t;
+		AST __t2199 = _t;
+		AST tmp1298_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1311_AST_in = (AST)_t;
+		AST tmp1299_AST_in = (AST)_t;
 		match(_t,FONT);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
 		{
-		_loop2210:
+		_loop2205:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ANSIONLY:
 			{
-				AST tmp1312_AST_in = (AST)_t;
+				AST tmp1300_AST_in = (AST)_t;
 				match(_t,ANSIONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIXEDONLY:
 			{
-				AST tmp1313_AST_in = (AST)_t;
+				AST tmp1301_AST_in = (AST)_t;
 				match(_t,FIXEDONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXSIZE:
 			{
-				AST __t2206 = _t;
-				AST tmp1314_AST_in = (AST)_t;
+				AST __t2201 = _t;
+				AST tmp1302_AST_in = (AST)_t;
 				match(_t,MAXSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2206;
+				_t = __t2201;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINSIZE:
 			{
-				AST __t2207 = _t;
-				AST tmp1315_AST_in = (AST)_t;
+				AST __t2202 = _t;
+				AST tmp1303_AST_in = (AST)_t;
 				match(_t,MINSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2207;
+				_t = __t2202;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t2208 = _t;
-				AST tmp1316_AST_in = (AST)_t;
+				AST __t2203 = _t;
+				AST tmp1304_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t2208;
+				_t = __t2203;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t2209 = _t;
-				AST tmp1317_AST_in = (AST)_t;
+				AST __t2204 = _t;
+				AST tmp1305_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1318_AST_in = (AST)_t;
+				AST tmp1306_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2209;
+				_t = __t2204;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2210;
+				break _loop2205;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2204;
+		_t = __t2199;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24085,61 +24016,61 @@
 		
 		AST systemdialoggetdirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2212 = _t;
-		AST tmp1319_AST_in = (AST)_t;
+		AST __t2207 = _t;
+		AST tmp1307_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1320_AST_in = (AST)_t;
+		AST tmp1308_AST_in = (AST)_t;
 		match(_t,GETDIR);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
 		_t = _retTree;
 		{
-		_loop2216:
+		_loop2211:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case INITIALDIR:
 			{
-				AST __t2214 = _t;
-				AST tmp1321_AST_in = (AST)_t;
+				AST __t2209 = _t;
+				AST tmp1309_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2214;
+				_t = __t2209;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1322_AST_in = (AST)_t;
+				AST tmp1310_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TITLE:
 			{
-				AST __t2215 = _t;
-				AST tmp1323_AST_in = (AST)_t;
+				AST __t2210 = _t;
+				AST tmp1311_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2215;
+				_t = __t2210;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2216;
+				break _loop2211;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2212;
+		_t = __t2207;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24148,24 +24079,24 @@
 		
 		AST systemdialoggetfilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2218 = _t;
-		AST tmp1324_AST_in = (AST)_t;
+		AST __t2213 = _t;
+		AST tmp1312_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1325_AST_in = (AST)_t;
+		AST tmp1313_AST_in = (AST)_t;
 		match(_t,GETFILE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
 		_t = _retTree;
 		{
-		_loop2230:
+		_loop2225:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case FILTERS:
 			{
-				AST __t2220 = _t;
-				AST tmp1326_AST_in = (AST)_t;
+				AST __t2215 = _t;
+				AST tmp1314_AST_in = (AST)_t;
 				match(_t,FILTERS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -24173,11 +24104,11 @@
 				expression(_t);
 				_t = _retTree;
 				{
-				_loop2222:
+				_loop2217:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1327_AST_in = (AST)_t;
+						AST tmp1315_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						expression(_t);
@@ -24186,7 +24117,7 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop2222;
+						break _loop2217;
 					}
 					
 				} while (true);
@@ -24196,13 +24127,13 @@
 				switch ( _t.getType()) {
 				case INITIALFILTER:
 				{
-					AST __t2224 = _t;
-					AST tmp1328_AST_in = (AST)_t;
+					AST __t2219 = _t;
+					AST tmp1316_AST_in = (AST)_t;
 					match(_t,INITIALFILTER);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2224;
+					_t = __t2219;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -24216,125 +24147,125 @@
 				}
 				}
 				}
-				_t = __t2220;
+				_t = __t2215;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ASKOVERWRITE:
 			{
-				AST tmp1329_AST_in = (AST)_t;
+				AST tmp1317_AST_in = (AST)_t;
 				match(_t,ASKOVERWRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CREATETESTFILE:
 			{
-				AST tmp1330_AST_in = (AST)_t;
+				AST tmp1318_AST_in = (AST)_t;
 				match(_t,CREATETESTFILE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULTEXTENSION:
 			{
-				AST __t2225 = _t;
-				AST tmp1331_AST_in = (AST)_t;
+				AST __t2220 = _t;
+				AST tmp1319_AST_in = (AST)_t;
 				match(_t,DEFAULTEXTENSION);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2225;
+				_t = __t2220;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INITIALDIR:
 			{
-				AST __t2226 = _t;
-				AST tmp1332_AST_in = (AST)_t;
+				AST __t2221 = _t;
+				AST tmp1320_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2226;
+				_t = __t2221;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MUSTEXIST:
 			{
-				AST tmp1333_AST_in = (AST)_t;
+				AST tmp1321_AST_in = (AST)_t;
 				match(_t,MUSTEXIST);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1334_AST_in = (AST)_t;
+				AST tmp1322_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SAVEAS:
 			{
-				AST tmp1335_AST_in = (AST)_t;
+				AST tmp1323_AST_in = (AST)_t;
 				match(_t,SAVEAS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TITLE:
 			{
-				AST __t2227 = _t;
-				AST tmp1336_AST_in = (AST)_t;
+				AST __t2222 = _t;
+				AST tmp1324_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2227;
+				_t = __t2222;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEFILENAME:
 			{
-				AST tmp1337_AST_in = (AST)_t;
+				AST tmp1325_AST_in = (AST)_t;
 				match(_t,USEFILENAME);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t2228 = _t;
-				AST tmp1338_AST_in = (AST)_t;
+				AST __t2223 = _t;
+				AST tmp1326_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t2228;
+				_t = __t2223;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t2229 = _t;
-				AST tmp1339_AST_in = (AST)_t;
+				AST __t2224 = _t;
+				AST tmp1327_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1340_AST_in = (AST)_t;
+				AST tmp1328_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2229;
+				_t = __t2224;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2230;
+				break _loop2225;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2218;
+		_t = __t2213;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24343,81 +24274,81 @@
 		
 		AST systemdialogprintersetupstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2232 = _t;
-		AST tmp1341_AST_in = (AST)_t;
+		AST __t2227 = _t;
+		AST tmp1329_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1342_AST_in = (AST)_t;
+		AST tmp1330_AST_in = (AST)_t;
 		match(_t,PRINTERSETUP);
 		_t = _t.getNextSibling();
 		{
-		_loop2237:
+		_loop2232:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NUMCOPIES:
 			{
-				AST __t2234 = _t;
-				AST tmp1343_AST_in = (AST)_t;
+				AST __t2229 = _t;
+				AST tmp1331_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2234;
+				_t = __t2229;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t2235 = _t;
-				AST tmp1344_AST_in = (AST)_t;
+				AST __t2230 = _t;
+				AST tmp1332_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t2235;
+				_t = __t2230;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANDSCAPE:
 			{
-				AST tmp1345_AST_in = (AST)_t;
+				AST tmp1333_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PORTRAIT:
 			{
-				AST tmp1346_AST_in = (AST)_t;
+				AST tmp1334_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t2236 = _t;
-				AST tmp1347_AST_in = (AST)_t;
+				AST __t2231 = _t;
+				AST tmp1335_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1348_AST_in = (AST)_t;
+				AST tmp1336_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2236;
+				_t = __t2231;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2237;
+				break _loop2232;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2232;
+		_t = __t2227;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24426,8 +24357,8 @@
 		
 		AST systemhelpstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2239 = _t;
-		AST tmp1349_AST_in = (AST)_t;
+		AST __t2234 = _t;
+		AST tmp1337_AST_in = (AST)_t;
 		match(_t,SYSTEMHELP);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -24437,13 +24368,13 @@
 		switch ( _t.getType()) {
 		case WINDOWNAME:
 		{
-			AST __t2241 = _t;
-			AST tmp1350_AST_in = (AST)_t;
+			AST __t2236 = _t;
+			AST tmp1338_AST_in = (AST)_t;
 			match(_t,WINDOWNAME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2241;
+			_t = __t2236;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -24476,94 +24407,94 @@
 		switch ( _t.getType()) {
 		case ALTERNATEKEY:
 		{
-			AST __t2243 = _t;
-			AST tmp1351_AST_in = (AST)_t;
+			AST __t2238 = _t;
+			AST tmp1339_AST_in = (AST)_t;
 			match(_t,ALTERNATEKEY);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2243;
+			_t = __t2238;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXT:
 		{
-			AST __t2244 = _t;
-			AST tmp1352_AST_in = (AST)_t;
+			AST __t2239 = _t;
+			AST tmp1340_AST_in = (AST)_t;
 			match(_t,CONTEXT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2244;
+			_t = __t2239;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTENTS:
 		{
-			AST tmp1353_AST_in = (AST)_t;
+			AST tmp1341_AST_in = (AST)_t;
 			match(_t,CONTENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETCONTENTS:
 		{
-			AST __t2245 = _t;
-			AST tmp1354_AST_in = (AST)_t;
+			AST __t2240 = _t;
+			AST tmp1342_AST_in = (AST)_t;
 			match(_t,SETCONTENTS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2245;
+			_t = __t2240;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDER:
 		{
-			AST tmp1355_AST_in = (AST)_t;
+			AST tmp1343_AST_in = (AST)_t;
 			match(_t,FINDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTPOPUP:
 		{
-			AST __t2246 = _t;
-			AST tmp1356_AST_in = (AST)_t;
+			AST __t2241 = _t;
+			AST tmp1344_AST_in = (AST)_t;
 			match(_t,CONTEXTPOPUP);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2246;
+			_t = __t2241;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELPTOPIC:
 		{
-			AST __t2247 = _t;
-			AST tmp1357_AST_in = (AST)_t;
+			AST __t2242 = _t;
+			AST tmp1345_AST_in = (AST)_t;
 			match(_t,HELPTOPIC);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2247;
+			_t = __t2242;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEY:
 		{
-			AST __t2248 = _t;
-			AST tmp1358_AST_in = (AST)_t;
+			AST __t2243 = _t;
+			AST tmp1346_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2248;
+			_t = __t2243;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARTIALKEY:
 		{
-			AST __t2249 = _t;
-			AST tmp1359_AST_in = (AST)_t;
+			AST __t2244 = _t;
+			AST tmp1347_AST_in = (AST)_t;
 			match(_t,PARTIALKEY);
 			_t = _t.getFirstChild();
 			{
@@ -24579,43 +24510,43 @@
 			}
 			
 			}
-			_t = __t2249;
+			_t = __t2244;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLEKEY:
 		{
-			AST __t2251 = _t;
-			AST tmp1360_AST_in = (AST)_t;
+			AST __t2246 = _t;
+			AST tmp1348_AST_in = (AST)_t;
 			match(_t,MULTIPLEKEY);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1361_AST_in = (AST)_t;
+			AST tmp1349_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2251;
+			_t = __t2246;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMMAND:
 		{
-			AST __t2252 = _t;
-			AST tmp1362_AST_in = (AST)_t;
+			AST __t2247 = _t;
+			AST tmp1350_AST_in = (AST)_t;
 			match(_t,COMMAND);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2252;
+			_t = __t2247;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case POSITION:
 		{
-			AST __t2253 = _t;
-			AST tmp1363_AST_in = (AST)_t;
+			AST __t2248 = _t;
+			AST tmp1351_AST_in = (AST)_t;
 			match(_t,POSITION);
 			_t = _t.getFirstChild();
 			{
@@ -24623,29 +24554,29 @@
 			switch ( _t.getType()) {
 			case MAXIMIZE:
 			{
-				AST tmp1364_AST_in = (AST)_t;
+				AST tmp1352_AST_in = (AST)_t;
 				match(_t,MAXIMIZE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case X:
 			{
-				AST tmp1365_AST_in = (AST)_t;
+				AST tmp1353_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp1366_AST_in = (AST)_t;
+				AST tmp1354_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp1367_AST_in = (AST)_t;
+				AST tmp1355_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp1368_AST_in = (AST)_t;
+				AST tmp1356_AST_in = (AST)_t;
 				match(_t,HEIGHT);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -24658,27 +24589,27 @@
 			}
 			}
 			}
-			_t = __t2253;
+			_t = __t2248;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORCEFILE:
 		{
-			AST tmp1369_AST_in = (AST)_t;
+			AST tmp1357_AST_in = (AST)_t;
 			match(_t,FORCEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELP:
 		{
-			AST tmp1370_AST_in = (AST)_t;
+			AST tmp1358_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUIT:
 		{
-			AST tmp1371_AST_in = (AST)_t;
+			AST tmp1359_AST_in = (AST)_t;
 			match(_t,QUIT);
 			_t = _t.getNextSibling();
 			break;
@@ -24691,7 +24622,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2239;
+		_t = __t2234;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24700,11 +24631,11 @@
 		
 		AST transactionmodeautomaticstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2282 = _t;
-		AST tmp1372_AST_in = (AST)_t;
+		AST __t2277 = _t;
+		AST tmp1360_AST_in = (AST)_t;
 		match(_t,TRANSACTIONMODE);
 		_t = _t.getFirstChild();
-		AST tmp1373_AST_in = (AST)_t;
+		AST tmp1361_AST_in = (AST)_t;
 		match(_t,AUTOMATIC);
 		_t = _t.getNextSibling();
 		{
@@ -24712,7 +24643,7 @@
 		switch ( _t.getType()) {
 		case CHAINED:
 		{
-			AST tmp1374_AST_in = (AST)_t;
+			AST tmp1362_AST_in = (AST)_t;
 			match(_t,CHAINED);
 			_t = _t.getNextSibling();
 			break;
@@ -24730,7 +24661,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2282;
+		_t = __t2277;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -24745,14 +24676,14 @@
 		AST id = null;
 		AST id2 = null;
 		
-		AST __t2295 = _t;
-		AST tmp1375_AST_in = (AST)_t;
+		AST __t2290 = _t;
+		AST tmp1363_AST_in = (AST)_t;
 		match(_t,TRIGGER);
 		_t = _t.getFirstChild();
-		AST tmp1376_AST_in = (AST)_t;
+		AST tmp1364_AST_in = (AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp1377_AST_in = (AST)_t;
+		AST tmp1365_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -24769,35 +24700,35 @@
 			switch ( _t.getType()) {
 			case CREATE:
 			{
-				AST tmp1378_AST_in = (AST)_t;
+				AST tmp1366_AST_in = (AST)_t;
 				match(_t,CREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DELETE_KW:
 			{
-				AST tmp1379_AST_in = (AST)_t;
+				AST tmp1367_AST_in = (AST)_t;
 				match(_t,DELETE_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIND:
 			{
-				AST tmp1380_AST_in = (AST)_t;
+				AST tmp1368_AST_in = (AST)_t;
 				match(_t,FIND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONCREATE:
 			{
-				AST tmp1381_AST_in = (AST)_t;
+				AST tmp1369_AST_in = (AST)_t;
 				match(_t,REPLICATIONCREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONDELETE:
 			{
-				AST tmp1382_AST_in = (AST)_t;
+				AST tmp1370_AST_in = (AST)_t;
 				match(_t,REPLICATIONDELETE);
 				_t = _t.getNextSibling();
 				break;
@@ -24808,7 +24739,7 @@
 			}
 			}
 			}
-			AST tmp1383_AST_in = (AST)_t;
+			AST tmp1371_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			t1 = _t==ASTNULL ? null : (AST)_t;
@@ -24848,14 +24779,14 @@
 			switch ( _t.getType()) {
 			case WRITE:
 			{
-				AST tmp1384_AST_in = (AST)_t;
+				AST tmp1372_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONWRITE:
 			{
-				AST tmp1385_AST_in = (AST)_t;
+				AST tmp1373_AST_in = (AST)_t;
 				match(_t,REPLICATIONWRITE);
 				_t = _t.getNextSibling();
 				break;
@@ -24866,7 +24797,7 @@
 			}
 			}
 			}
-			AST tmp1386_AST_in = (AST)_t;
+			AST tmp1374_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -24900,7 +24831,7 @@
 			switch ( _t.getType()) {
 			case NEW:
 			{
-				AST tmp1387_AST_in = (AST)_t;
+				AST tmp1375_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getNextSibling();
 				{
@@ -24908,7 +24839,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1388_AST_in = (AST)_t;
+					AST tmp1376_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -24973,7 +24904,7 @@
 			switch ( _t.getType()) {
 			case OLD:
 			{
-				AST tmp1389_AST_in = (AST)_t;
+				AST tmp1377_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getNextSibling();
 				{
@@ -24981,7 +24912,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1390_AST_in = (AST)_t;
+					AST tmp1378_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -25040,7 +24971,7 @@
 		}
 		case ASSIGN:
 		{
-			AST tmp1391_AST_in = (AST)_t;
+			AST tmp1379_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getNextSibling();
 			{
@@ -25048,8 +24979,8 @@
 			switch ( _t.getType()) {
 			case OF:
 			{
-				AST __t2308 = _t;
-				AST tmp1392_AST_in = (AST)_t;
+				AST __t2303 = _t;
+				AST tmp1380_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -25059,16 +24990,16 @@
 				switch ( _t.getType()) {
 				case TABLE:
 				{
-					AST __t2310 = _t;
-					AST tmp1393_AST_in = (AST)_t;
+					AST __t2305 = _t;
+					AST tmp1381_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1394_AST_in = (AST)_t;
+					AST tmp1382_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
-					_t = __t2310;
+					_t = __t2305;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -25082,14 +25013,14 @@
 				}
 				}
 				}
-				_t = __t2308;
+				_t = __t2303;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEW:
 			{
-				AST __t2311 = _t;
-				AST tmp1395_AST_in = (AST)_t;
+				AST __t2306 = _t;
+				AST tmp1383_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getFirstChild();
 				{
@@ -25097,7 +25028,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1396_AST_in = (AST)_t;
+					AST tmp1384_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -25123,7 +25054,7 @@
 				if ( inputState.guessing==0 ) {
 					action.addToScope(pop());
 				}
-				_t = __t2311;
+				_t = __t2306;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -25144,8 +25075,8 @@
 			switch ( _t.getType()) {
 			case OLD:
 			{
-				AST __t2314 = _t;
-				AST tmp1397_AST_in = (AST)_t;
+				AST __t2309 = _t;
+				AST tmp1385_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getFirstChild();
 				{
@@ -25153,7 +25084,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1398_AST_in = (AST)_t;
+					AST tmp1386_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -25176,7 +25107,7 @@
 				}
 				defineparam_var(_t);
 				_t = _retTree;
-				_t = __t2314;
+				_t = __t2309;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.addToScope(pop());
@@ -25204,7 +25135,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2295;
+		_t = __t2290;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25213,8 +25144,8 @@
 		
 		AST underlinestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2321 = _t;
-		AST tmp1399_AST_in = (AST)_t;
+		AST __t2316 = _t;
+		AST tmp1387_AST_in = (AST)_t;
 		match(_t,UNDERLINE);
 		_t = _t.getFirstChild();
 		{
@@ -25240,12 +25171,12 @@
 		}
 		}
 		{
-		_loop2326:
+		_loop2321:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t2324 = _t;
-				AST tmp1400_AST_in = (AST)_t;
+				AST __t2319 = _t;
+				AST tmp1388_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -25269,11 +25200,11 @@
 				}
 				}
 				}
-				_t = __t2324;
+				_t = __t2319;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop2326;
+				break _loop2321;
 			}
 			
 		} while (true);
@@ -25300,7 +25231,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2321;
+		_t = __t2316;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25309,8 +25240,8 @@
 		
 		AST undostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2329 = _t;
-		AST tmp1401_AST_in = (AST)_t;
+		AST __t2324 = _t;
+		AST tmp1389_AST_in = (AST)_t;
 		match(_t,UNDO);
 		_t = _t.getFirstChild();
 		{
@@ -25318,7 +25249,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp1402_AST_in = (AST)_t;
+			AST tmp1390_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -25340,7 +25271,7 @@
 		switch ( _t.getType()) {
 		case COMMA:
 		{
-			AST tmp1403_AST_in = (AST)_t;
+			AST tmp1391_AST_in = (AST)_t;
 			match(_t,COMMA);
 			_t = _t.getNextSibling();
 			{
@@ -25348,8 +25279,8 @@
 			switch ( _t.getType()) {
 			case LEAVE:
 			{
-				AST __t2333 = _t;
-				AST tmp1404_AST_in = (AST)_t;
+				AST __t2328 = _t;
+				AST tmp1392_AST_in = (AST)_t;
 				match(_t,LEAVE);
 				_t = _t.getFirstChild();
 				{
@@ -25357,7 +25288,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp1405_AST_in = (AST)_t;
+					AST tmp1393_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -25372,14 +25303,14 @@
 				}
 				}
 				}
-				_t = __t2333;
+				_t = __t2328;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEXT:
 			{
-				AST __t2335 = _t;
-				AST tmp1406_AST_in = (AST)_t;
+				AST __t2330 = _t;
+				AST tmp1394_AST_in = (AST)_t;
 				match(_t,NEXT);
 				_t = _t.getFirstChild();
 				{
@@ -25387,7 +25318,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp1407_AST_in = (AST)_t;
+					AST tmp1395_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -25402,14 +25333,14 @@
 				}
 				}
 				}
-				_t = __t2335;
+				_t = __t2330;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETRY:
 			{
-				AST __t2337 = _t;
-				AST tmp1408_AST_in = (AST)_t;
+				AST __t2332 = _t;
+				AST tmp1396_AST_in = (AST)_t;
 				match(_t,RETRY);
 				_t = _t.getFirstChild();
 				{
@@ -25417,7 +25348,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp1409_AST_in = (AST)_t;
+					AST tmp1397_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -25432,14 +25363,14 @@
 				}
 				}
 				}
-				_t = __t2337;
+				_t = __t2332;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURN:
 			{
-				AST __t2339 = _t;
-				AST tmp1410_AST_in = (AST)_t;
+				AST __t2334 = _t;
+				AST tmp1398_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getFirstChild();
 				{
@@ -25455,7 +25386,7 @@
 				}
 				
 				}
-				_t = __t2339;
+				_t = __t2334;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -25480,7 +25411,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2329;
+		_t = __t2324;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25489,8 +25420,8 @@
 		
 		AST unloadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2342 = _t;
-		AST tmp1411_AST_in = (AST)_t;
+		AST __t2337 = _t;
+		AST tmp1399_AST_in = (AST)_t;
 		match(_t,UNLOAD);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -25500,7 +25431,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1412_AST_in = (AST)_t;
+			AST tmp1400_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -25518,7 +25449,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2342;
+		_t = __t2337;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25527,20 +25458,20 @@
 		
 		AST unsubscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2345 = _t;
-		AST tmp1413_AST_in = (AST)_t;
+		AST __t2340 = _t;
+		AST tmp1401_AST_in = (AST)_t;
 		match(_t,UNSUBSCRIBE);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
-			AST __t2347 = _t;
-			AST tmp1414_AST_in = (AST)_t;
+			AST __t2342 = _t;
+			AST tmp1402_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2347;
+			_t = __t2342;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_25.member(_t.getType()))) {
@@ -25553,7 +25484,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TO)) {
-			AST tmp1415_AST_in = (AST)_t;
+			AST tmp1403_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getNextSibling();
 		}
@@ -25571,7 +25502,7 @@
 			_t = _retTree;
 		}
 		else if ((_t.getType()==ALL)) {
-			AST tmp1416_AST_in = (AST)_t;
+			AST tmp1404_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 		}
@@ -25585,13 +25516,13 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2351 = _t;
-			AST tmp1417_AST_in = (AST)_t;
+			AST __t2346 = _t;
+			AST tmp1405_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2351;
+			_t = __t2346;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -25608,7 +25539,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2345;
+		_t = __t2340;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25617,8 +25548,8 @@
 		
 		AST upstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2353 = _t;
-		AST tmp1418_AST_in = (AST)_t;
+		AST __t2348 = _t;
+		AST tmp1406_AST_in = (AST)_t;
 		match(_t,UP);
 		_t = _t.getFirstChild();
 		{
@@ -25690,7 +25621,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2353;
+		_t = __t2348;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25699,33 +25630,33 @@
 		
 		AST updatestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		boolean synPredMatched2361 = false;
+		boolean synPredMatched2356 = false;
 		if (((_t.getType()==UPDATE))) {
-			AST __t2361 = _t;
-			synPredMatched2361 = true;
+			AST __t2356 = _t;
+			synPredMatched2356 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST __t2360 = _t;
-				AST tmp1419_AST_in = (AST)_t;
+				AST __t2355 = _t;
+				AST tmp1407_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp1420_AST_in = (AST)_t;
+				AST tmp1408_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getNextSibling();
-				_t = __t2360;
+				_t = __t2355;
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched2361 = false;
+				synPredMatched2356 = false;
 			}
-			_t = __t2361;
+			_t = __t2356;
 			inputState.guessing--;
 		}
-		if ( synPredMatched2361 ) {
+		if ( synPredMatched2356 ) {
 			sqlupdatestate(_t);
 			_t = _retTree;
 		}
@@ -25744,8 +25675,8 @@
 		
 		AST usestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2378 = _t;
-		AST tmp1421_AST_in = (AST)_t;
+		AST __t2373 = _t;
+		AST tmp1409_AST_in = (AST)_t;
 		match(_t,USE);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -25755,7 +25686,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1422_AST_in = (AST)_t;
+			AST tmp1410_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -25773,7 +25704,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2378;
+		_t = __t2373;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25782,8 +25713,8 @@
 		
 		AST validatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2390 = _t;
-		AST tmp1423_AST_in = (AST)_t;
+		AST __t2385 = _t;
+		AST tmp1411_AST_in = (AST)_t;
 		match(_t,VALIDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -25793,7 +25724,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1424_AST_in = (AST)_t;
+			AST tmp1412_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -25811,7 +25742,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2390;
+		_t = __t2385;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25820,8 +25751,8 @@
 		
 		AST viewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2393 = _t;
-		AST tmp1425_AST_in = (AST)_t;
+		AST __t2388 = _t;
+		AST tmp1413_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getFirstChild();
 		{
@@ -25847,7 +25778,7 @@
 		}
 		}
 		{
-		_loop2396:
+		_loop2391:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Widget_ref)) {
@@ -25855,7 +25786,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop2396;
+				break _loop2391;
 			}
 			
 		} while (true);
@@ -25865,16 +25796,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2398 = _t;
-			AST tmp1426_AST_in = (AST)_t;
+			AST __t2393 = _t;
+			AST tmp1414_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1427_AST_in = (AST)_t;
+			AST tmp1415_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2398;
+			_t = __t2393;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -25891,7 +25822,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2393;
+		_t = __t2388;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -25900,38 +25831,38 @@
 		
 		AST waitforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2403 = _t;
-		AST tmp1428_AST_in = (AST)_t;
+		AST __t2398 = _t;
+		AST tmp1416_AST_in = (AST)_t;
 		match(_t,WAITFOR);
 		_t = _t.getFirstChild();
 		eventlist(_t);
 		_t = _retTree;
-		AST tmp1429_AST_in = (AST)_t;
+		AST tmp1417_AST_in = (AST)_t;
 		match(_t,OF);
 		_t = _t.getNextSibling();
 		widgetlist(_t);
 		_t = _retTree;
 		{
-		_loop2406:
+		_loop2401:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OR)) {
-				AST __t2405 = _t;
-				AST tmp1430_AST_in = (AST)_t;
+				AST __t2400 = _t;
+				AST tmp1418_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
 				eventlist(_t);
 				_t = _retTree;
-				AST tmp1431_AST_in = (AST)_t;
+				AST tmp1419_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				widgetlist(_t);
 				_t = _retTree;
-				_t = __t2405;
+				_t = __t2400;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop2406;
+				break _loop2401;
 			}
 			
 		} while (true);
@@ -25941,13 +25872,13 @@
 		switch ( _t.getType()) {
 		case FOCUS:
 		{
-			AST __t2408 = _t;
-			AST tmp1432_AST_in = (AST)_t;
+			AST __t2403 = _t;
+			AST tmp1420_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getFirstChild();
 			gwidget(_t);
 			_t = _retTree;
-			_t = __t2408;
+			_t = __t2403;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -25969,13 +25900,13 @@
 		switch ( _t.getType()) {
 		case PAUSE:
 		{
-			AST __t2410 = _t;
-			AST tmp1433_AST_in = (AST)_t;
+			AST __t2405 = _t;
+			AST tmp1421_AST_in = (AST)_t;
 			match(_t,PAUSE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2410;
+			_t = __t2405;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -25996,7 +25927,7 @@
 		switch ( _t.getType()) {
 		case EXCLUSIVEWEBUSER:
 		{
-			AST tmp1434_AST_in = (AST)_t;
+			AST tmp1422_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEWEBUSER);
 			_t = _t.getNextSibling();
 			{
@@ -26027,7 +25958,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2403;
+		_t = __t2398;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27223,13 +27154,13 @@
 		
 		AST aacbitfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t162 = _t;
-		AST tmp1435_AST_in = (AST)_t;
+		AST __t157 = _t;
+		AST tmp1423_AST_in = (AST)_t;
 		match(_t,AACBIT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t162;
+		_t = __t157;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27238,7 +27169,7 @@
 		
 		AST aacontrolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1436_AST_in = (AST)_t;
+		AST tmp1424_AST_in = (AST)_t;
 		match(_t,AACONTROL);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27248,13 +27179,13 @@
 		
 		AST aamsgfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t165 = _t;
-		AST tmp1437_AST_in = (AST)_t;
+		AST __t160 = _t;
+		AST tmp1425_AST_in = (AST)_t;
 		match(_t,AAMSG);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t165;
+		_t = __t160;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27263,7 +27194,7 @@
 		
 		AST aapcontrolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1438_AST_in = (AST)_t;
+		AST tmp1426_AST_in = (AST)_t;
 		match(_t,AAPCONTROL);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27273,7 +27204,7 @@
 		
 		AST aaserialfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1439_AST_in = (AST)_t;
+		AST tmp1427_AST_in = (AST)_t;
 		match(_t,AASERIAL);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27283,13 +27214,13 @@
 		
 		AST absolutefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t177 = _t;
-		AST tmp1440_AST_in = (AST)_t;
+		AST __t172 = _t;
+		AST tmp1428_AST_in = (AST)_t;
 		match(_t,ABSOLUTE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t177;
+		_t = __t172;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27298,8 +27229,8 @@
 		
 		AST accumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t180 = _t;
-		AST tmp1441_AST_in = (AST)_t;
+		AST __t175 = _t;
+		AST tmp1429_AST_in = (AST)_t;
 		match(_t,ACCUMULATE);
 		_t = _t.getFirstChild();
 		accum_what(_t);
@@ -27307,8 +27238,8 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==BY)) {
-			AST __t182 = _t;
-			AST tmp1442_AST_in = (AST)_t;
+			AST __t177 = _t;
+			AST tmp1430_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -27318,7 +27249,7 @@
 			switch ( _t.getType()) {
 			case DESCENDING:
 			{
-				AST tmp1443_AST_in = (AST)_t;
+				AST tmp1431_AST_in = (AST)_t;
 				match(_t,DESCENDING);
 				_t = _t.getNextSibling();
 				break;
@@ -27333,7 +27264,7 @@
 			}
 			}
 			}
-			_t = __t182;
+			_t = __t177;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_4.member(_t.getType()))) {
@@ -27345,7 +27276,7 @@
 		}
 		expression(_t);
 		_t = _retTree;
-		_t = __t180;
+		_t = __t175;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27354,29 +27285,29 @@
 		
 		AST addintervalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t189 = _t;
-		AST tmp1444_AST_in = (AST)_t;
+		AST __t184 = _t;
+		AST tmp1432_AST_in = (AST)_t;
 		match(_t,ADDINTERVAL);
 		_t = _t.getFirstChild();
-		AST tmp1445_AST_in = (AST)_t;
+		AST tmp1433_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1446_AST_in = (AST)_t;
+		AST tmp1434_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1447_AST_in = (AST)_t;
+		AST tmp1435_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1448_AST_in = (AST)_t;
+		AST tmp1436_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t189;
+		_t = __t184;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27385,13 +27316,13 @@
 		
 		AST aliasfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t220 = _t;
-		AST tmp1449_AST_in = (AST)_t;
+		AST __t215 = _t;
+		AST tmp1437_AST_in = (AST)_t;
 		match(_t,ALIAS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t220;
+		_t = __t215;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27400,8 +27331,8 @@
 		
 		AST ambiguousfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t222 = _t;
-		AST tmp1450_AST_in = (AST)_t;
+		AST __t217 = _t;
+		AST tmp1438_AST_in = (AST)_t;
 		match(_t,AMBIGUOUS);
 		_t = _t.getFirstChild();
 		{
@@ -27415,12 +27346,12 @@
 		}
 		case LEFTPAREN:
 		{
-			AST tmp1451_AST_in = (AST)_t;
+			AST tmp1439_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			tbl(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp1452_AST_in = (AST)_t;
+			AST tmp1440_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -27431,7 +27362,7 @@
 		}
 		}
 		}
-		_t = __t222;
+		_t = __t217;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27440,13 +27371,13 @@
 		
 		AST ascfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t235 = _t;
-		AST tmp1453_AST_in = (AST)_t;
+		AST __t230 = _t;
+		AST tmp1441_AST_in = (AST)_t;
 		match(_t,ASC);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t235;
+		_t = __t230;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27455,8 +27386,8 @@
 		
 		AST availablefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t277 = _t;
-		AST tmp1454_AST_in = (AST)_t;
+		AST __t272 = _t;
+		AST tmp1442_AST_in = (AST)_t;
 		match(_t,AVAILABLE);
 		_t = _t.getFirstChild();
 		{
@@ -27470,12 +27401,12 @@
 		}
 		case LEFTPAREN:
 		{
-			AST tmp1455_AST_in = (AST)_t;
+			AST tmp1443_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			tbl(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp1456_AST_in = (AST)_t;
+			AST tmp1444_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -27486,7 +27417,7 @@
 		}
 		}
 		}
-		_t = __t277;
+		_t = __t272;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27495,13 +27426,13 @@
 		
 		AST base64decodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t280 = _t;
-		AST tmp1457_AST_in = (AST)_t;
+		AST __t275 = _t;
+		AST tmp1445_AST_in = (AST)_t;
 		match(_t,BASE64DECODE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t280;
+		_t = __t275;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27510,13 +27441,13 @@
 		
 		AST base64encodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t282 = _t;
-		AST tmp1458_AST_in = (AST)_t;
+		AST __t277 = _t;
+		AST tmp1446_AST_in = (AST)_t;
 		match(_t,BASE64ENCODE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t282;
+		_t = __t277;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27525,13 +27456,13 @@
 		
 		AST candofunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t328 = _t;
-		AST tmp1459_AST_in = (AST)_t;
+		AST __t323 = _t;
+		AST tmp1447_AST_in = (AST)_t;
 		match(_t,CANDO);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t328;
+		_t = __t323;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27542,11 +27473,11 @@
 		AST cf = null;
 		AST r = null;
 		
-		AST __t330 = _t;
+		AST __t325 = _t;
 		cf = _t==ASTNULL ? null :(AST)_t;
 		match(_t,CANFIND);
 		_t = _t.getFirstChild();
-		AST tmp1460_AST_in = (AST)_t;
+		AST tmp1448_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -27573,7 +27504,7 @@
 		}
 		}
 		}
-		AST __t332 = _t;
+		AST __t327 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -27587,12 +27518,12 @@
 		if ( inputState.guessing==0 ) {
 			action.canFindEnd(cf);
 		}
-		_t = __t332;
+		_t = __t327;
 		_t = _t.getNextSibling();
-		AST tmp1461_AST_in = (AST)_t;
+		AST tmp1449_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t330;
+		_t = __t325;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27601,13 +27532,13 @@
 		
 		AST canqueryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t334 = _t;
-		AST tmp1462_AST_in = (AST)_t;
+		AST __t329 = _t;
+		AST tmp1450_AST_in = (AST)_t;
 		match(_t,CANQUERY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t334;
+		_t = __t329;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27616,13 +27547,13 @@
 		
 		AST cansetfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t336 = _t;
-		AST tmp1463_AST_in = (AST)_t;
+		AST __t331 = _t;
+		AST tmp1451_AST_in = (AST)_t;
 		match(_t,CANSET);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t336;
+		_t = __t331;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27631,13 +27562,13 @@
 		
 		AST capsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t338 = _t;
-		AST tmp1464_AST_in = (AST)_t;
+		AST __t333 = _t;
+		AST tmp1452_AST_in = (AST)_t;
 		match(_t,CAPS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t338;
+		_t = __t333;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27646,13 +27577,13 @@
 		
 		AST chrfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t373 = _t;
-		AST tmp1465_AST_in = (AST)_t;
+		AST __t368 = _t;
+		AST tmp1453_AST_in = (AST)_t;
 		match(_t,CHR);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t373;
+		_t = __t368;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27661,13 +27592,13 @@
 		
 		AST codepageconvertfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t389 = _t;
-		AST tmp1466_AST_in = (AST)_t;
+		AST __t383 = _t;
+		AST tmp1454_AST_in = (AST)_t;
 		match(_t,CODEPAGECONVERT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t389;
+		_t = __t383;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27676,13 +27607,13 @@
 		
 		AST collatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t391 = _t;
-		AST tmp1467_AST_in = (AST)_t;
+		AST __t385 = _t;
+		AST tmp1455_AST_in = (AST)_t;
 		match(_t,COLLATE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t391;
+		_t = __t385;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27691,13 +27622,13 @@
 		
 		AST comparefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t455 = _t;
-		AST tmp1468_AST_in = (AST)_t;
+		AST __t449 = _t;
+		AST tmp1456_AST_in = (AST)_t;
 		match(_t,COMPARE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t455;
+		_t = __t449;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27706,13 +27637,13 @@
 		
 		AST connectedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t519 = _t;
-		AST tmp1469_AST_in = (AST)_t;
+		AST __t513 = _t;
+		AST tmp1457_AST_in = (AST)_t;
 		match(_t,CONNECTED);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t519;
+		_t = __t513;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27721,13 +27652,13 @@
 		
 		AST countoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t547 = _t;
-		AST tmp1470_AST_in = (AST)_t;
+		AST __t541 = _t;
+		AST tmp1458_AST_in = (AST)_t;
 		match(_t,COUNTOF);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t547;
+		_t = __t541;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27736,8 +27667,8 @@
 		
 		AST currentchangedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t657 = _t;
-		AST tmp1471_AST_in = (AST)_t;
+		AST __t651 = _t;
+		AST tmp1459_AST_in = (AST)_t;
 		match(_t,CURRENTCHANGED);
 		_t = _t.getFirstChild();
 		{
@@ -27751,12 +27682,12 @@
 		}
 		case LEFTPAREN:
 		{
-			AST tmp1472_AST_in = (AST)_t;
+			AST tmp1460_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			tbl(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp1473_AST_in = (AST)_t;
+			AST tmp1461_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -27767,7 +27698,7 @@
 		}
 		}
 		}
-		_t = __t657;
+		_t = __t651;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27776,7 +27707,7 @@
 		
 		AST currentlanguagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1474_AST_in = (AST)_t;
+		AST tmp1462_AST_in = (AST)_t;
 		match(_t,CURRENTLANGUAGE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27786,13 +27717,13 @@
 		
 		AST currentresultrowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t661 = _t;
-		AST tmp1475_AST_in = (AST)_t;
+		AST __t655 = _t;
+		AST tmp1463_AST_in = (AST)_t;
 		match(_t,CURRENTRESULTROW);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t661;
+		_t = __t655;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27801,7 +27732,7 @@
 		
 		AST cursorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1476_AST_in = (AST)_t;
+		AST tmp1464_AST_in = (AST)_t;
 		match(_t,CURSOR);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27811,7 +27742,7 @@
 		
 		AST dataserversfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1477_AST_in = (AST)_t;
+		AST tmp1465_AST_in = (AST)_t;
 		match(_t,DATASERVERS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27821,19 +27752,19 @@
 		
 		AST datasourcemodifiedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t668 = _t;
-		AST tmp1478_AST_in = (AST)_t;
+		AST __t662 = _t;
+		AST tmp1466_AST_in = (AST)_t;
 		match(_t,DATASOURCEMODIFIED);
 		_t = _t.getFirstChild();
-		AST tmp1479_AST_in = (AST)_t;
+		AST tmp1467_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1480_AST_in = (AST)_t;
+		AST tmp1468_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t668;
+		_t = __t662;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27842,13 +27773,13 @@
 		
 		AST datefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t676 = _t;
-		AST tmp1481_AST_in = (AST)_t;
+		AST __t670 = _t;
+		AST tmp1469_AST_in = (AST)_t;
 		match(_t,DATE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t676;
+		_t = __t670;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27857,13 +27788,13 @@
 		
 		AST datetimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t678 = _t;
-		AST tmp1482_AST_in = (AST)_t;
+		AST __t672 = _t;
+		AST tmp1470_AST_in = (AST)_t;
 		match(_t,DATETIME);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t678;
+		_t = __t672;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27872,13 +27803,13 @@
 		
 		AST datetimetzfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t680 = _t;
-		AST tmp1483_AST_in = (AST)_t;
+		AST __t674 = _t;
+		AST tmp1471_AST_in = (AST)_t;
 		match(_t,DATETIMETZ);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t680;
+		_t = __t674;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27887,13 +27818,13 @@
 		
 		AST dayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t682 = _t;
-		AST tmp1484_AST_in = (AST)_t;
+		AST __t676 = _t;
+		AST tmp1472_AST_in = (AST)_t;
 		match(_t,DAY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t682;
+		_t = __t676;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27902,13 +27833,13 @@
 		
 		AST dbcodepagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t684 = _t;
-		AST tmp1485_AST_in = (AST)_t;
+		AST __t678 = _t;
+		AST tmp1473_AST_in = (AST)_t;
 		match(_t,DBCODEPAGE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t684;
+		_t = __t678;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27917,13 +27848,13 @@
 		
 		AST dbcollationfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t686 = _t;
-		AST tmp1486_AST_in = (AST)_t;
+		AST __t680 = _t;
+		AST tmp1474_AST_in = (AST)_t;
 		match(_t,DBCOLLATION);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t686;
+		_t = __t680;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27932,7 +27863,7 @@
 		
 		AST dbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1487_AST_in = (AST)_t;
+		AST tmp1475_AST_in = (AST)_t;
 		match(_t,DBNAME);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -27942,13 +27873,13 @@
 		
 		AST dbparamfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t689 = _t;
-		AST tmp1488_AST_in = (AST)_t;
+		AST __t683 = _t;
+		AST tmp1476_AST_in = (AST)_t;
 		match(_t,DBPARAM);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t689;
+		_t = __t683;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27957,13 +27888,13 @@
 		
 		AST dbrestrictionsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t691 = _t;
-		AST tmp1489_AST_in = (AST)_t;
+		AST __t685 = _t;
+		AST tmp1477_AST_in = (AST)_t;
 		match(_t,DBRESTRICTIONS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t691;
+		_t = __t685;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27972,13 +27903,13 @@
 		
 		AST dbtaskidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t693 = _t;
-		AST tmp1490_AST_in = (AST)_t;
+		AST __t687 = _t;
+		AST tmp1478_AST_in = (AST)_t;
 		match(_t,DBTASKID);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t693;
+		_t = __t687;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27987,13 +27918,13 @@
 		
 		AST dbtypefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t695 = _t;
-		AST tmp1491_AST_in = (AST)_t;
+		AST __t689 = _t;
+		AST tmp1479_AST_in = (AST)_t;
 		match(_t,DBTYPE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t695;
+		_t = __t689;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28002,13 +27933,13 @@
 		
 		AST dbversionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t697 = _t;
-		AST tmp1492_AST_in = (AST)_t;
+		AST __t691 = _t;
+		AST tmp1480_AST_in = (AST)_t;
 		match(_t,DBVERSION);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t697;
+		_t = __t691;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28017,13 +27948,13 @@
 		
 		AST decimalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t731 = _t;
-		AST tmp1493_AST_in = (AST)_t;
+		AST __t725 = _t;
+		AST tmp1481_AST_in = (AST)_t;
 		match(_t,DECIMAL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t731;
+		_t = __t725;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28032,13 +27963,13 @@
 		
 		AST decryptfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t733 = _t;
-		AST tmp1494_AST_in = (AST)_t;
+		AST __t727 = _t;
+		AST tmp1482_AST_in = (AST)_t;
 		match(_t,DECRYPT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t733;
+		_t = __t727;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28047,13 +27978,13 @@
 		
 		AST dynamicnextvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1129 = _t;
-		AST tmp1495_AST_in = (AST)_t;
+		AST __t1123 = _t;
+		AST tmp1483_AST_in = (AST)_t;
 		match(_t,DYNAMICNEXTVALUE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1129;
+		_t = __t1123;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28062,11 +27993,11 @@
 		
 		AST dynamicfuncfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1131 = _t;
-		AST tmp1496_AST_in = (AST)_t;
+		AST __t1125 = _t;
+		AST tmp1484_AST_in = (AST)_t;
 		match(_t,DYNAMICFUNCTION);
 		_t = _t.getFirstChild();
-		AST tmp1497_AST_in = (AST)_t;
+		AST tmp1485_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -28076,13 +28007,13 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1133 = _t;
-			AST tmp1498_AST_in = (AST)_t;
+			AST __t1127 = _t;
+			AST tmp1486_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1133;
+			_t = __t1127;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -28098,23 +28029,23 @@
 		}
 		}
 		{
-		_loop1135:
+		_loop1129:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1499_AST_in = (AST)_t;
+				AST tmp1487_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				parameter(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop1135;
+				break _loop1129;
 			}
 			
 		} while (true);
 		}
-		AST tmp1500_AST_in = (AST)_t;
+		AST tmp1488_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -28122,7 +28053,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1501_AST_in = (AST)_t;
+			AST tmp1489_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -28137,7 +28068,7 @@
 		}
 		}
 		}
-		_t = __t1131;
+		_t = __t1125;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28146,13 +28077,13 @@
 		
 		AST encodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1169 = _t;
-		AST tmp1502_AST_in = (AST)_t;
+		AST __t1163 = _t;
+		AST tmp1490_AST_in = (AST)_t;
 		match(_t,ENCODE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1169;
+		_t = __t1163;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28161,13 +28092,13 @@
 		
 		AST encryptfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1171 = _t;
-		AST tmp1503_AST_in = (AST)_t;
+		AST __t1165 = _t;
+		AST tmp1491_AST_in = (AST)_t;
 		match(_t,ENCRYPT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1171;
+		_t = __t1165;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28176,19 +28107,19 @@
 		
 		AST errorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1178 = _t;
-		AST tmp1504_AST_in = (AST)_t;
+		AST __t1172 = _t;
+		AST tmp1492_AST_in = (AST)_t;
 		match(_t,ERROR);
 		_t = _t.getFirstChild();
-		AST tmp1505_AST_in = (AST)_t;
+		AST tmp1493_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1506_AST_in = (AST)_t;
+		AST tmp1494_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1178;
+		_t = __t1172;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28197,8 +28128,8 @@
 		
 		AST etimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1175 = _t;
-		AST tmp1507_AST_in = (AST)_t;
+		AST __t1169 = _t;
+		AST tmp1495_AST_in = (AST)_t;
 		match(_t,ETIME_KW);
 		_t = _t.getFirstChild();
 		{
@@ -28220,7 +28151,7 @@
 		}
 		}
 		}
-		_t = __t1175;
+		_t = __t1169;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28229,13 +28160,13 @@
 		
 		AST expfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1180 = _t;
-		AST tmp1508_AST_in = (AST)_t;
+		AST __t1174 = _t;
+		AST tmp1496_AST_in = (AST)_t;
 		match(_t,EXP);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1180;
+		_t = __t1174;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28244,19 +28175,19 @@
 		
 		AST extentfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1194 = _t;
-		AST tmp1509_AST_in = (AST)_t;
+		AST __t1188 = _t;
+		AST tmp1497_AST_in = (AST)_t;
 		match(_t,EXTENT);
 		_t = _t.getFirstChild();
-		AST tmp1510_AST_in = (AST)_t;
+		AST tmp1498_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp1511_AST_in = (AST)_t;
+		AST tmp1499_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1194;
+		_t = __t1188;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28265,13 +28196,13 @@
 		
 		AST fillfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1214 = _t;
-		AST tmp1512_AST_in = (AST)_t;
+		AST __t1208 = _t;
+		AST tmp1500_AST_in = (AST)_t;
 		match(_t,FILL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1214;
+		_t = __t1208;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28280,13 +28211,13 @@
 		
 		AST firstfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1222 = _t;
-		AST tmp1513_AST_in = (AST)_t;
+		AST __t1216 = _t;
+		AST tmp1501_AST_in = (AST)_t;
 		match(_t,FIRST);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1222;
+		_t = __t1216;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28295,13 +28226,13 @@
 		
 		AST firstoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1224 = _t;
-		AST tmp1514_AST_in = (AST)_t;
+		AST __t1218 = _t;
+		AST tmp1502_AST_in = (AST)_t;
 		match(_t,FIRSTOF);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1224;
+		_t = __t1218;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28310,8 +28241,8 @@
 		
 		AST framecolfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1312 = _t;
-		AST tmp1515_AST_in = (AST)_t;
+		AST __t1307 = _t;
+		AST tmp1503_AST_in = (AST)_t;
 		match(_t,FRAMECOL);
 		_t = _t.getFirstChild();
 		{
@@ -28319,13 +28250,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1516_AST_in = (AST)_t;
+			AST tmp1504_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1517_AST_in = (AST)_t;
+			AST tmp1505_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1518_AST_in = (AST)_t;
+			AST tmp1506_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -28340,7 +28271,7 @@
 		}
 		}
 		}
-		_t = __t1312;
+		_t = __t1307;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28349,7 +28280,7 @@
 		
 		AST framedbfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1519_AST_in = (AST)_t;
+		AST tmp1507_AST_in = (AST)_t;
 		match(_t,FRAMEDB);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28359,8 +28290,8 @@
 		
 		AST framedownfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1316 = _t;
-		AST tmp1520_AST_in = (AST)_t;
+		AST __t1311 = _t;
+		AST tmp1508_AST_in = (AST)_t;
 		match(_t,FRAMEDOWN);
 		_t = _t.getFirstChild();
 		{
@@ -28368,13 +28299,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1521_AST_in = (AST)_t;
+			AST tmp1509_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1522_AST_in = (AST)_t;
+			AST tmp1510_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1523_AST_in = (AST)_t;
+			AST tmp1511_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -28389,7 +28320,7 @@
 		}
 		}
 		}
-		_t = __t1316;
+		_t = __t1311;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28398,7 +28329,7 @@
 		
 		AST framefieldfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1524_AST_in = (AST)_t;
+		AST tmp1512_AST_in = (AST)_t;
 		match(_t,FRAMEFIELD);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28408,7 +28339,7 @@
 		
 		AST framefilefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1525_AST_in = (AST)_t;
+		AST tmp1513_AST_in = (AST)_t;
 		match(_t,FRAMEFILE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28418,7 +28349,7 @@
 		
 		AST frameindexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1526_AST_in = (AST)_t;
+		AST tmp1514_AST_in = (AST)_t;
 		match(_t,FRAMEINDEX);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28428,8 +28359,8 @@
 		
 		AST framelinefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1322 = _t;
-		AST tmp1527_AST_in = (AST)_t;
+		AST __t1317 = _t;
+		AST tmp1515_AST_in = (AST)_t;
 		match(_t,FRAMELINE);
 		_t = _t.getFirstChild();
 		{
@@ -28437,13 +28368,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1528_AST_in = (AST)_t;
+			AST tmp1516_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1529_AST_in = (AST)_t;
+			AST tmp1517_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1530_AST_in = (AST)_t;
+			AST tmp1518_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -28458,7 +28389,7 @@
 		}
 		}
 		}
-		_t = __t1322;
+		_t = __t1317;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28467,7 +28398,7 @@
 		
 		AST framenamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1531_AST_in = (AST)_t;
+		AST tmp1519_AST_in = (AST)_t;
 		match(_t,FRAMENAME);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28477,8 +28408,8 @@
 		
 		AST framerowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1326 = _t;
-		AST tmp1532_AST_in = (AST)_t;
+		AST __t1321 = _t;
+		AST tmp1520_AST_in = (AST)_t;
 		match(_t,FRAMEROW);
 		_t = _t.getFirstChild();
 		{
@@ -28486,13 +28417,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1533_AST_in = (AST)_t;
+			AST tmp1521_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1534_AST_in = (AST)_t;
+			AST tmp1522_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1535_AST_in = (AST)_t;
+			AST tmp1523_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -28507,7 +28438,7 @@
 		}
 		}
 		}
-		_t = __t1326;
+		_t = __t1321;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28516,7 +28447,7 @@
 		
 		AST framevaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1536_AST_in = (AST)_t;
+		AST tmp1524_AST_in = (AST)_t;
 		match(_t,FRAMEVALUE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28526,13 +28457,13 @@
 		
 		AST generatepbekeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1368 = _t;
-		AST tmp1537_AST_in = (AST)_t;
+		AST __t1363 = _t;
+		AST tmp1525_AST_in = (AST)_t;
 		match(_t,GENERATEPBEKEY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1368;
+		_t = __t1363;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28541,7 +28472,7 @@
 		
 		AST generatepbesaltfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1538_AST_in = (AST)_t;
+		AST tmp1526_AST_in = (AST)_t;
 		match(_t,GENERATEPBESALT);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28551,7 +28482,7 @@
 		
 		AST generaterandomkeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1539_AST_in = (AST)_t;
+		AST tmp1527_AST_in = (AST)_t;
 		match(_t,GENERATERANDOMKEY);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28561,7 +28492,7 @@
 		
 		AST gatewaysfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1540_AST_in = (AST)_t;
+		AST tmp1528_AST_in = (AST)_t;
 		match(_t,GATEWAYS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28571,13 +28502,13 @@
 		
 		AST getbitsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1377 = _t;
-		AST tmp1541_AST_in = (AST)_t;
+		AST __t1372 = _t;
+		AST tmp1529_AST_in = (AST)_t;
 		match(_t,GETBITS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1377;
+		_t = __t1372;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28586,13 +28517,13 @@
 		
 		AST getbytefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1379 = _t;
-		AST tmp1542_AST_in = (AST)_t;
+		AST __t1374 = _t;
+		AST tmp1530_AST_in = (AST)_t;
 		match(_t,GETBYTE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1379;
+		_t = __t1374;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28601,13 +28532,13 @@
 		
 		AST getbyteorderfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1381 = _t;
-		AST tmp1543_AST_in = (AST)_t;
+		AST __t1376 = _t;
+		AST tmp1531_AST_in = (AST)_t;
 		match(_t,GETBYTEORDER);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1381;
+		_t = __t1376;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28616,13 +28547,13 @@
 		
 		AST getbytesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1383 = _t;
-		AST tmp1544_AST_in = (AST)_t;
+		AST __t1378 = _t;
+		AST tmp1532_AST_in = (AST)_t;
 		match(_t,GETBYTES);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1383;
+		_t = __t1378;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28631,8 +28562,8 @@
 		
 		AST getcodepagesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1385 = _t;
-		AST tmp1545_AST_in = (AST)_t;
+		AST __t1380 = _t;
+		AST tmp1533_AST_in = (AST)_t;
 		match(_t,GETCODEPAGES);
 		_t = _t.getFirstChild();
 		{
@@ -28654,7 +28585,7 @@
 		}
 		}
 		}
-		_t = __t1385;
+		_t = __t1380;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28663,13 +28594,13 @@
 		
 		AST getcollationsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1388 = _t;
-		AST tmp1546_AST_in = (AST)_t;
+		AST __t1383 = _t;
+		AST tmp1534_AST_in = (AST)_t;
 		match(_t,GETCOLLATIONS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1388;
+		_t = __t1383;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28678,13 +28609,13 @@
 		
 		AST getdoublefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1390 = _t;
-		AST tmp1547_AST_in = (AST)_t;
+		AST __t1385 = _t;
+		AST tmp1535_AST_in = (AST)_t;
 		match(_t,GETDOUBLE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1390;
+		_t = __t1385;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28693,13 +28624,13 @@
 		
 		AST getfloatfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1392 = _t;
-		AST tmp1548_AST_in = (AST)_t;
+		AST __t1387 = _t;
+		AST tmp1536_AST_in = (AST)_t;
 		match(_t,GETFLOAT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1392;
+		_t = __t1387;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28708,13 +28639,13 @@
 		
 		AST getlicensefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1397 = _t;
-		AST tmp1549_AST_in = (AST)_t;
+		AST __t1392 = _t;
+		AST tmp1537_AST_in = (AST)_t;
 		match(_t,GETLICENSE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1397;
+		_t = __t1392;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28723,13 +28654,13 @@
 		
 		AST getlongfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1399 = _t;
-		AST tmp1550_AST_in = (AST)_t;
+		AST __t1394 = _t;
+		AST tmp1538_AST_in = (AST)_t;
 		match(_t,GETLONG);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1399;
+		_t = __t1394;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28738,13 +28669,13 @@
 		
 		AST getpointervaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1401 = _t;
-		AST tmp1551_AST_in = (AST)_t;
+		AST __t1396 = _t;
+		AST tmp1539_AST_in = (AST)_t;
 		match(_t,GETPOINTERVALUE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1401;
+		_t = __t1396;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28753,13 +28684,13 @@
 		
 		AST getshortfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1403 = _t;
-		AST tmp1552_AST_in = (AST)_t;
+		AST __t1398 = _t;
+		AST tmp1540_AST_in = (AST)_t;
 		match(_t,GETSHORT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1403;
+		_t = __t1398;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28768,13 +28699,13 @@
 		
 		AST getsizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1405 = _t;
-		AST tmp1553_AST_in = (AST)_t;
+		AST __t1400 = _t;
+		AST tmp1541_AST_in = (AST)_t;
 		match(_t,GETSIZE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1405;
+		_t = __t1400;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28783,13 +28714,13 @@
 		
 		AST getstringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1407 = _t;
-		AST tmp1554_AST_in = (AST)_t;
+		AST __t1402 = _t;
+		AST tmp1542_AST_in = (AST)_t;
 		match(_t,GETSTRING);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1407;
+		_t = __t1402;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28798,13 +28729,13 @@
 		
 		AST getunsignedshortfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1409 = _t;
-		AST tmp1555_AST_in = (AST)_t;
+		AST __t1404 = _t;
+		AST tmp1543_AST_in = (AST)_t;
 		match(_t,GETUNSIGNEDSHORT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1409;
+		_t = __t1404;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28813,7 +28744,7 @@
 		
 		AST gopendingfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1556_AST_in = (AST)_t;
+		AST tmp1544_AST_in = (AST)_t;
 		match(_t,GOPENDING);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28823,23 +28754,23 @@
 		
 		AST iffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1431 = _t;
-		AST tmp1557_AST_in = (AST)_t;
+		AST __t1426 = _t;
+		AST tmp1545_AST_in = (AST)_t;
 		match(_t,IF);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1558_AST_in = (AST)_t;
+		AST tmp1546_AST_in = (AST)_t;
 		match(_t,THEN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1559_AST_in = (AST)_t;
+		AST tmp1547_AST_in = (AST)_t;
 		match(_t,ELSE);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		_t = __t1431;
+		_t = __t1426;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28848,13 +28779,13 @@
 		
 		AST indexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1461 = _t;
-		AST tmp1560_AST_in = (AST)_t;
+		AST __t1456 = _t;
+		AST tmp1548_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1461;
+		_t = __t1456;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28863,13 +28794,13 @@
 		
 		AST integerfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1499 = _t;
-		AST tmp1561_AST_in = (AST)_t;
+		AST __t1494 = _t;
+		AST tmp1549_AST_in = (AST)_t;
 		match(_t,INTEGER);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1499;
+		_t = __t1494;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28878,13 +28809,13 @@
 		
 		AST intervalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1501 = _t;
-		AST tmp1562_AST_in = (AST)_t;
+		AST __t1496 = _t;
+		AST tmp1550_AST_in = (AST)_t;
 		match(_t,INTERVAL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1501;
+		_t = __t1496;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28893,7 +28824,7 @@
 		
 		AST isattrspacefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1563_AST_in = (AST)_t;
+		AST tmp1551_AST_in = (AST)_t;
 		match(_t,ISATTRSPACE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -28903,13 +28834,13 @@
 		
 		AST iscodepagefixedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1522 = _t;
-		AST tmp1564_AST_in = (AST)_t;
+		AST __t1517 = _t;
+		AST tmp1552_AST_in = (AST)_t;
 		match(_t,ISCODEPAGEFIXED);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1522;
+		_t = __t1517;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28918,13 +28849,13 @@
 		
 		AST iscolumncodepagefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1524 = _t;
-		AST tmp1565_AST_in = (AST)_t;
+		AST __t1519 = _t;
+		AST tmp1553_AST_in = (AST)_t;
 		match(_t,ISCOLUMNCODEPAGE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1524;
+		_t = __t1519;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28933,13 +28864,13 @@
 		
 		AST isleadbytefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1526 = _t;
-		AST tmp1566_AST_in = (AST)_t;
+		AST __t1521 = _t;
+		AST tmp1554_AST_in = (AST)_t;
 		match(_t,ISLEADBYTE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1526;
+		_t = __t1521;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28948,13 +28879,13 @@
 		
 		AST isodatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1528 = _t;
-		AST tmp1567_AST_in = (AST)_t;
+		AST __t1523 = _t;
+		AST tmp1555_AST_in = (AST)_t;
 		match(_t,ISODATE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1528;
+		_t = __t1523;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28963,13 +28894,13 @@
 		
 		AST kblabelfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1530 = _t;
-		AST tmp1568_AST_in = (AST)_t;
+		AST __t1525 = _t;
+		AST tmp1556_AST_in = (AST)_t;
 		match(_t,KBLABEL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1530;
+		_t = __t1525;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28978,13 +28909,13 @@
 		
 		AST keycodefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1532 = _t;
-		AST tmp1569_AST_in = (AST)_t;
+		AST __t1527 = _t;
+		AST tmp1557_AST_in = (AST)_t;
 		match(_t,KEYCODE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1532;
+		_t = __t1527;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28993,13 +28924,13 @@
 		
 		AST keyfuncfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1534 = _t;
-		AST tmp1570_AST_in = (AST)_t;
+		AST __t1529 = _t;
+		AST tmp1558_AST_in = (AST)_t;
 		match(_t,KEYFUNCTION);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1534;
+		_t = __t1529;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29008,13 +28939,13 @@
 		
 		AST keylabelfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1536 = _t;
-		AST tmp1571_AST_in = (AST)_t;
+		AST __t1531 = _t;
+		AST tmp1559_AST_in = (AST)_t;
 		match(_t,KEYLABEL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1536;
+		_t = __t1531;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29023,13 +28954,13 @@
 		
 		AST keywordfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1538 = _t;
-		AST tmp1572_AST_in = (AST)_t;
+		AST __t1533 = _t;
+		AST tmp1560_AST_in = (AST)_t;
 		match(_t,KEYWORD);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1538;
+		_t = __t1533;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29038,13 +28969,13 @@
 		
 		AST keywordallfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1540 = _t;
-		AST tmp1573_AST_in = (AST)_t;
+		AST __t1535 = _t;
+		AST tmp1561_AST_in = (AST)_t;
 		match(_t,KEYWORDALL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1540;
+		_t = __t1535;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29053,13 +28984,13 @@
 		
 		AST lastfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1549 = _t;
-		AST tmp1574_AST_in = (AST)_t;
+		AST __t1544 = _t;
+		AST tmp1562_AST_in = (AST)_t;
 		match(_t,LAST);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1549;
+		_t = __t1544;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29068,13 +28999,13 @@
 		
 		AST lastoffunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1551 = _t;
-		AST tmp1575_AST_in = (AST)_t;
+		AST __t1546 = _t;
+		AST tmp1563_AST_in = (AST)_t;
 		match(_t,LASTOF);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1551;
+		_t = __t1546;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29083,7 +29014,7 @@
 		
 		AST lastkeyfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1576_AST_in = (AST)_t;
+		AST tmp1564_AST_in = (AST)_t;
 		match(_t,LASTKEY);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29093,13 +29024,13 @@
 		
 		AST lcfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1554 = _t;
-		AST tmp1577_AST_in = (AST)_t;
+		AST __t1549 = _t;
+		AST tmp1565_AST_in = (AST)_t;
 		match(_t,LC);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1554;
+		_t = __t1549;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29108,23 +29039,23 @@
 		
 		AST ldbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1556 = _t;
-		AST tmp1578_AST_in = (AST)_t;
+		AST __t1551 = _t;
+		AST tmp1566_AST_in = (AST)_t;
 		match(_t,LDBNAME);
 		_t = _t.getFirstChild();
-		AST tmp1579_AST_in = (AST)_t;
+		AST tmp1567_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==BUFFER)) {
-			AST __t1558 = _t;
-			AST tmp1580_AST_in = (AST)_t;
+			AST __t1553 = _t;
+			AST tmp1568_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			tbl(_t,CQ.BUFFERSYMBOL);
 			_t = _retTree;
-			_t = __t1558;
+			_t = __t1553;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_4.member(_t.getType()))) {
@@ -29136,10 +29067,10 @@
 		}
 		
 		}
-		AST tmp1581_AST_in = (AST)_t;
+		AST tmp1569_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1556;
+		_t = __t1551;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29148,13 +29079,13 @@
 		
 		AST lefttrimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1563 = _t;
-		AST tmp1582_AST_in = (AST)_t;
+		AST __t1558 = _t;
+		AST tmp1570_AST_in = (AST)_t;
 		match(_t,LEFTTRIM);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1563;
+		_t = __t1558;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29163,13 +29094,13 @@
 		
 		AST libraryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1567 = _t;
-		AST tmp1583_AST_in = (AST)_t;
+		AST __t1562 = _t;
+		AST tmp1571_AST_in = (AST)_t;
 		match(_t,LIBRARY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1567;
+		_t = __t1562;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29178,8 +29109,8 @@
 		
 		AST linecounterfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1569 = _t;
-		AST tmp1584_AST_in = (AST)_t;
+		AST __t1564 = _t;
+		AST tmp1572_AST_in = (AST)_t;
 		match(_t,LINECOUNTER);
 		_t = _t.getFirstChild();
 		{
@@ -29187,13 +29118,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1585_AST_in = (AST)_t;
+			AST tmp1573_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1586_AST_in = (AST)_t;
+			AST tmp1574_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1587_AST_in = (AST)_t;
+			AST tmp1575_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29208,7 +29139,7 @@
 		}
 		}
 		}
-		_t = __t1569;
+		_t = __t1564;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29217,13 +29148,13 @@
 		
 		AST listeventsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1572 = _t;
-		AST tmp1588_AST_in = (AST)_t;
+		AST __t1567 = _t;
+		AST tmp1576_AST_in = (AST)_t;
 		match(_t,LISTEVENTS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1572;
+		_t = __t1567;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29232,13 +29163,13 @@
 		
 		AST listqueryattrsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1574 = _t;
-		AST tmp1589_AST_in = (AST)_t;
+		AST __t1569 = _t;
+		AST tmp1577_AST_in = (AST)_t;
 		match(_t,LISTQUERYATTRS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1574;
+		_t = __t1569;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29247,13 +29178,13 @@
 		
 		AST listsetattrsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1576 = _t;
-		AST tmp1590_AST_in = (AST)_t;
+		AST __t1571 = _t;
+		AST tmp1578_AST_in = (AST)_t;
 		match(_t,LISTSETATTRS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1576;
+		_t = __t1571;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29262,13 +29193,13 @@
 		
 		AST listwidgetsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1578 = _t;
-		AST tmp1591_AST_in = (AST)_t;
+		AST __t1573 = _t;
+		AST tmp1579_AST_in = (AST)_t;
 		match(_t,LISTWIDGETS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1578;
+		_t = __t1573;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29277,8 +29208,8 @@
 		
 		AST loadpicturefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1586 = _t;
-		AST tmp1592_AST_in = (AST)_t;
+		AST __t1581 = _t;
+		AST tmp1580_AST_in = (AST)_t;
 		match(_t,LOADPICTURE);
 		_t = _t.getFirstChild();
 		{
@@ -29300,7 +29231,7 @@
 		}
 		}
 		}
-		_t = __t1586;
+		_t = __t1581;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29309,8 +29240,8 @@
 		
 		AST lockedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1589 = _t;
-		AST tmp1593_AST_in = (AST)_t;
+		AST __t1584 = _t;
+		AST tmp1581_AST_in = (AST)_t;
 		match(_t,LOCKED);
 		_t = _t.getFirstChild();
 		{
@@ -29324,12 +29255,12 @@
 		}
 		case LEFTPAREN:
 		{
-			AST tmp1594_AST_in = (AST)_t;
+			AST tmp1582_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			tbl(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp1595_AST_in = (AST)_t;
+			AST tmp1583_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29340,7 +29271,7 @@
 		}
 		}
 		}
-		_t = __t1589;
+		_t = __t1584;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29349,13 +29280,13 @@
 		
 		AST logfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1592 = _t;
-		AST tmp1596_AST_in = (AST)_t;
+		AST __t1587 = _t;
+		AST tmp1584_AST_in = (AST)_t;
 		match(_t,LOG);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1592;
+		_t = __t1587;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29364,13 +29295,13 @@
 		
 		AST logicalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1594 = _t;
-		AST tmp1597_AST_in = (AST)_t;
+		AST __t1589 = _t;
+		AST tmp1585_AST_in = (AST)_t;
 		match(_t,LOGICAL);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1594;
+		_t = __t1589;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29379,13 +29310,13 @@
 		
 		AST lookupfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1596 = _t;
-		AST tmp1598_AST_in = (AST)_t;
+		AST __t1591 = _t;
+		AST tmp1586_AST_in = (AST)_t;
 		match(_t,LOOKUP);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1596;
+		_t = __t1591;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29394,7 +29325,7 @@
 		
 		AST machineclassfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1599_AST_in = (AST)_t;
+		AST tmp1587_AST_in = (AST)_t;
 		match(_t,MACHINECLASS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29404,19 +29335,19 @@
 		
 		AST maximumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1599 = _t;
-		AST tmp1600_AST_in = (AST)_t;
+		AST __t1594 = _t;
+		AST tmp1588_AST_in = (AST)_t;
 		match(_t,MAXIMUM);
 		_t = _t.getFirstChild();
 		{
-		boolean synPredMatched1603 = false;
+		boolean synPredMatched1598 = false;
 		if (((_t.getType()==LEFTPAREN))) {
-			AST __t1603 = _t;
-			synPredMatched1603 = true;
+			AST __t1598 = _t;
+			synPredMatched1598 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST tmp1601_AST_in = (AST)_t;
+				AST tmp1589_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -29424,21 +29355,21 @@
 				switch ( _t.getType()) {
 				case DISTINCT:
 				{
-					AST tmp1602_AST_in = (AST)_t;
+					AST tmp1590_AST_in = (AST)_t;
 					match(_t,DISTINCT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STAR:
 				{
-					AST tmp1603_AST_in = (AST)_t;
+					AST tmp1591_AST_in = (AST)_t;
 					match(_t,STAR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ALL:
 				{
-					AST tmp1604_AST_in = (AST)_t;
+					AST tmp1592_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 					break;
@@ -29452,12 +29383,12 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1603 = false;
+				synPredMatched1598 = false;
 			}
-			_t = __t1603;
+			_t = __t1598;
 			inputState.guessing--;
 		}
-		if ( synPredMatched1603 ) {
+		if ( synPredMatched1598 ) {
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
 		}
@@ -29470,7 +29401,7 @@
 		}
 		
 		}
-		_t = __t1599;
+		_t = __t1594;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29479,13 +29410,13 @@
 		
 		AST md5digestfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1605 = _t;
-		AST tmp1605_AST_in = (AST)_t;
+		AST __t1600 = _t;
+		AST tmp1593_AST_in = (AST)_t;
 		match(_t,MD5DIGEST);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1605;
+		_t = __t1600;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29494,13 +29425,13 @@
 		
 		AST memberfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1607 = _t;
-		AST tmp1606_AST_in = (AST)_t;
+		AST __t1602 = _t;
+		AST tmp1594_AST_in = (AST)_t;
 		match(_t,MEMBER);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1607;
+		_t = __t1602;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29509,7 +29440,7 @@
 		
 		AST messagelinesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1607_AST_in = (AST)_t;
+		AST tmp1595_AST_in = (AST)_t;
 		match(_t,MESSAGELINES);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29519,19 +29450,19 @@
 		
 		AST minimumfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1632 = _t;
-		AST tmp1608_AST_in = (AST)_t;
+		AST __t1627 = _t;
+		AST tmp1596_AST_in = (AST)_t;
 		match(_t,MINIMUM);
 		_t = _t.getFirstChild();
 		{
-		boolean synPredMatched1636 = false;
+		boolean synPredMatched1631 = false;
 		if (((_t.getType()==LEFTPAREN))) {
-			AST __t1636 = _t;
-			synPredMatched1636 = true;
+			AST __t1631 = _t;
+			synPredMatched1631 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST tmp1609_AST_in = (AST)_t;
+				AST tmp1597_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -29539,21 +29470,21 @@
 				switch ( _t.getType()) {
 				case DISTINCT:
 				{
-					AST tmp1610_AST_in = (AST)_t;
+					AST tmp1598_AST_in = (AST)_t;
 					match(_t,DISTINCT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STAR:
 				{
-					AST tmp1611_AST_in = (AST)_t;
+					AST tmp1599_AST_in = (AST)_t;
 					match(_t,STAR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ALL:
 				{
-					AST tmp1612_AST_in = (AST)_t;
+					AST tmp1600_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 					break;
@@ -29567,12 +29498,12 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1636 = false;
+				synPredMatched1631 = false;
 			}
-			_t = __t1636;
+			_t = __t1631;
 			inputState.guessing--;
 		}
-		if ( synPredMatched1636 ) {
+		if ( synPredMatched1631 ) {
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
 		}
@@ -29585,7 +29516,7 @@
 		}
 		
 		}
-		_t = __t1632;
+		_t = __t1627;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29594,13 +29525,13 @@
 		
 		AST monthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1638 = _t;
-		AST tmp1613_AST_in = (AST)_t;
+		AST __t1633 = _t;
+		AST tmp1601_AST_in = (AST)_t;
 		match(_t,MONTH);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1638;
+		_t = __t1633;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29609,11 +29540,11 @@
 		
 		AST mtimefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1640 = _t;
-		AST tmp1614_AST_in = (AST)_t;
+		AST __t1635 = _t;
+		AST tmp1602_AST_in = (AST)_t;
 		match(_t,MTIME);
 		_t = _t.getFirstChild();
-		AST tmp1615_AST_in = (AST)_t;
+		AST tmp1603_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -29629,10 +29560,10 @@
 		}
 		
 		}
-		AST tmp1616_AST_in = (AST)_t;
+		AST tmp1604_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1640;
+		_t = __t1635;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29641,8 +29572,8 @@
 		
 		AST newfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1643 = _t;
-		AST tmp1617_AST_in = (AST)_t;
+		AST __t1638 = _t;
+		AST tmp1605_AST_in = (AST)_t;
 		match(_t,NEW);
 		_t = _t.getFirstChild();
 		{
@@ -29650,12 +29581,12 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1618_AST_in = (AST)_t;
+			AST tmp1606_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			tbl(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp1619_AST_in = (AST)_t;
+			AST tmp1607_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29672,7 +29603,7 @@
 		}
 		}
 		}
-		_t = __t1643;
+		_t = __t1638;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29681,13 +29612,13 @@
 		
 		AST normalizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1656 = _t;
-		AST tmp1620_AST_in = (AST)_t;
+		AST __t1651 = _t;
+		AST tmp1608_AST_in = (AST)_t;
 		match(_t,NORMALIZE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1656;
+		_t = __t1651;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29696,7 +29627,7 @@
 		
 		AST nowfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1621_AST_in = (AST)_t;
+		AST tmp1609_AST_in = (AST)_t;
 		match(_t,NOW);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29706,7 +29637,7 @@
 		
 		AST numaliasesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1622_AST_in = (AST)_t;
+		AST tmp1610_AST_in = (AST)_t;
 		match(_t,NUMALIASES);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29716,7 +29647,7 @@
 		
 		AST numdbsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1623_AST_in = (AST)_t;
+		AST tmp1611_AST_in = (AST)_t;
 		match(_t,NUMDBS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29726,13 +29657,13 @@
 		
 		AST numentriesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1661 = _t;
-		AST tmp1624_AST_in = (AST)_t;
+		AST __t1656 = _t;
+		AST tmp1612_AST_in = (AST)_t;
 		match(_t,NUMENTRIES);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1661;
+		_t = __t1656;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29741,13 +29672,13 @@
 		
 		AST numresultsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1663 = _t;
-		AST tmp1625_AST_in = (AST)_t;
+		AST __t1658 = _t;
+		AST tmp1613_AST_in = (AST)_t;
 		match(_t,NUMRESULTS);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1663;
+		_t = __t1658;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29756,7 +29687,7 @@
 		
 		AST opsysfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1626_AST_in = (AST)_t;
+		AST tmp1614_AST_in = (AST)_t;
 		match(_t,OPSYS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29766,7 +29697,7 @@
 		
 		AST osdrivesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1627_AST_in = (AST)_t;
+		AST tmp1615_AST_in = (AST)_t;
 		match(_t,OSDRIVES);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29776,7 +29707,7 @@
 		
 		AST oserrorfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1628_AST_in = (AST)_t;
+		AST tmp1616_AST_in = (AST)_t;
 		match(_t,OSERROR);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29786,13 +29717,13 @@
 		
 		AST osgetenvfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1782 = _t;
-		AST tmp1629_AST_in = (AST)_t;
+		AST __t1777 = _t;
+		AST tmp1617_AST_in = (AST)_t;
 		match(_t,OSGETENV);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1782;
+		_t = __t1777;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29801,8 +29732,8 @@
 		
 		AST pagenumberfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1800 = _t;
-		AST tmp1630_AST_in = (AST)_t;
+		AST __t1795 = _t;
+		AST tmp1618_AST_in = (AST)_t;
 		match(_t,PAGENUMBER);
 		_t = _t.getFirstChild();
 		{
@@ -29810,13 +29741,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1631_AST_in = (AST)_t;
+			AST tmp1619_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1632_AST_in = (AST)_t;
+			AST tmp1620_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1633_AST_in = (AST)_t;
+			AST tmp1621_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29831,7 +29762,7 @@
 		}
 		}
 		}
-		_t = __t1800;
+		_t = __t1795;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29840,8 +29771,8 @@
 		
 		AST pagesizefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1803 = _t;
-		AST tmp1634_AST_in = (AST)_t;
+		AST __t1798 = _t;
+		AST tmp1622_AST_in = (AST)_t;
 		match(_t,PAGESIZE_KW);
 		_t = _t.getFirstChild();
 		{
@@ -29849,13 +29780,13 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1635_AST_in = (AST)_t;
+			AST tmp1623_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1636_AST_in = (AST)_t;
+			AST tmp1624_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1637_AST_in = (AST)_t;
+			AST tmp1625_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29870,7 +29801,7 @@
 		}
 		}
 		}
-		_t = __t1803;
+		_t = __t1798;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29879,13 +29810,13 @@
 		
 		AST pdbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1813 = _t;
-		AST tmp1638_AST_in = (AST)_t;
+		AST __t1808 = _t;
+		AST tmp1626_AST_in = (AST)_t;
 		match(_t,PDBNAME);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1813;
+		_t = __t1808;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29894,7 +29825,7 @@
 		
 		AST prochandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1639_AST_in = (AST)_t;
+		AST tmp1627_AST_in = (AST)_t;
 		match(_t,PROCHANDLE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29904,7 +29835,7 @@
 		
 		AST procstatusfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1640_AST_in = (AST)_t;
+		AST tmp1628_AST_in = (AST)_t;
 		match(_t,PROCSTATUS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29914,13 +29845,13 @@
 		
 		AST programnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1829 = _t;
-		AST tmp1641_AST_in = (AST)_t;
+		AST __t1824 = _t;
+		AST tmp1629_AST_in = (AST)_t;
 		match(_t,PROGRAMNAME);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1829;
+		_t = __t1824;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29929,7 +29860,7 @@
 		
 		AST progressfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1642_AST_in = (AST)_t;
+		AST tmp1630_AST_in = (AST)_t;
 		match(_t,PROGRESS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29939,7 +29870,7 @@
 		
 		AST promsgsfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1643_AST_in = (AST)_t;
+		AST tmp1631_AST_in = (AST)_t;
 		match(_t,PROMSGS);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29949,7 +29880,7 @@
 		
 		AST propathfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1644_AST_in = (AST)_t;
+		AST tmp1632_AST_in = (AST)_t;
 		match(_t,PROPATH);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29959,7 +29890,7 @@
 		
 		AST proversionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1645_AST_in = (AST)_t;
+		AST tmp1633_AST_in = (AST)_t;
 		match(_t,PROVERSION);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -29969,13 +29900,13 @@
 		
 		AST queryoffendfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1920 = _t;
-		AST tmp1646_AST_in = (AST)_t;
+		AST __t1915 = _t;
+		AST tmp1634_AST_in = (AST)_t;
 		match(_t,QUERYOFFEND);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1920;
+		_t = __t1915;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29984,13 +29915,13 @@
 		
 		AST quoterfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1924 = _t;
-		AST tmp1647_AST_in = (AST)_t;
+		AST __t1919 = _t;
+		AST tmp1635_AST_in = (AST)_t;
 		match(_t,QUOTER);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1924;
+		_t = __t1919;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29999,13 +29930,13 @@
 		
 		AST rindexfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1926 = _t;
-		AST tmp1648_AST_in = (AST)_t;
+		AST __t1921 = _t;
+		AST tmp1636_AST_in = (AST)_t;
 		match(_t,RINDEX);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1926;
+		_t = __t1921;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30014,13 +29945,13 @@
 		
 		AST randomfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1942 = _t;
-		AST tmp1649_AST_in = (AST)_t;
+		AST __t1937 = _t;
+		AST tmp1637_AST_in = (AST)_t;
 		match(_t,RANDOM);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t1942;
+		_t = __t1937;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30029,19 +29960,19 @@
 		
 		AST recidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1958 = _t;
-		AST tmp1650_AST_in = (AST)_t;
+		AST __t1953 = _t;
+		AST tmp1638_AST_in = (AST)_t;
 		match(_t,RECID);
 		_t = _t.getFirstChild();
-		AST tmp1651_AST_in = (AST)_t;
+		AST tmp1639_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1652_AST_in = (AST)_t;
+		AST tmp1640_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1958;
+		_t = __t1953;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30050,19 +29981,19 @@
 		
 		AST recordlengthfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1986 = _t;
-		AST tmp1653_AST_in = (AST)_t;
+		AST __t1981 = _t;
+		AST tmp1641_AST_in = (AST)_t;
 		match(_t,RECORDLENGTH);
 		_t = _t.getFirstChild();
-		AST tmp1654_AST_in = (AST)_t;
+		AST tmp1642_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1655_AST_in = (AST)_t;
+		AST tmp1643_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1986;
+		_t = __t1981;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30071,19 +30002,19 @@
 		
 		AST rejectedfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1988 = _t;
-		AST tmp1656_AST_in = (AST)_t;
+		AST __t1983 = _t;
+		AST tmp1644_AST_in = (AST)_t;
 		match(_t,REJECTED);
 		_t = _t.getFirstChild();
-		AST tmp1657_AST_in = (AST)_t;
+		AST tmp1645_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1658_AST_in = (AST)_t;
+		AST tmp1646_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1988;
+		_t = __t1983;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30092,13 +30023,13 @@
 		
 		AST replacefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2006 = _t;
-		AST tmp1659_AST_in = (AST)_t;
+		AST __t2001 = _t;
+		AST tmp1647_AST_in = (AST)_t;
 		match(_t,REPLACE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2006;
+		_t = __t2001;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30107,7 +30038,7 @@
 		
 		AST retryfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1660_AST_in = (AST)_t;
+		AST tmp1648_AST_in = (AST)_t;
 		match(_t,RETRY);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30117,7 +30048,7 @@
 		
 		AST returnvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1661_AST_in = (AST)_t;
+		AST tmp1649_AST_in = (AST)_t;
 		match(_t,RETURNVALUE);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30127,13 +30058,13 @@
 		
 		AST rgbvaluefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2032 = _t;
-		AST tmp1662_AST_in = (AST)_t;
+		AST __t2027 = _t;
+		AST tmp1650_AST_in = (AST)_t;
 		match(_t,RGBVALUE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2032;
+		_t = __t2027;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30142,13 +30073,13 @@
 		
 		AST righttrimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2034 = _t;
-		AST tmp1663_AST_in = (AST)_t;
+		AST __t2029 = _t;
+		AST tmp1651_AST_in = (AST)_t;
 		match(_t,RIGHTTRIM);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2034;
+		_t = __t2029;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30157,13 +30088,13 @@
 		
 		AST roundfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2036 = _t;
-		AST tmp1664_AST_in = (AST)_t;
+		AST __t2031 = _t;
+		AST tmp1652_AST_in = (AST)_t;
 		match(_t,ROUND);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2036;
+		_t = __t2031;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30172,19 +30103,19 @@
 		
 		AST rowidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2038 = _t;
-		AST tmp1665_AST_in = (AST)_t;
+		AST __t2033 = _t;
+		AST tmp1653_AST_in = (AST)_t;
 		match(_t,ROWID);
 		_t = _t.getFirstChild();
-		AST tmp1666_AST_in = (AST)_t;
+		AST tmp1654_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1667_AST_in = (AST)_t;
+		AST tmp1655_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2038;
+		_t = __t2033;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30193,19 +30124,19 @@
 		
 		AST rowstatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2040 = _t;
-		AST tmp1668_AST_in = (AST)_t;
+		AST __t2035 = _t;
+		AST tmp1656_AST_in = (AST)_t;
 		match(_t,ROWSTATE);
 		_t = _t.getFirstChild();
-		AST tmp1669_AST_in = (AST)_t;
+		AST tmp1657_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
 		_t = _retTree;
-		AST tmp1670_AST_in = (AST)_t;
+		AST tmp1658_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2040;
+		_t = __t2035;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30214,7 +30145,7 @@
 		
 		AST screenlinesfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1671_AST_in = (AST)_t;
+		AST tmp1659_AST_in = (AST)_t;
 		match(_t,SCREENLINES);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30224,13 +30155,13 @@
 		
 		AST sdbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2089 = _t;
-		AST tmp1672_AST_in = (AST)_t;
+		AST __t2084 = _t;
+		AST tmp1660_AST_in = (AST)_t;
 		match(_t,SDBNAME);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2089;
+		_t = __t2084;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30239,13 +30170,13 @@
 		
 		AST searchfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2091 = _t;
-		AST tmp1673_AST_in = (AST)_t;
+		AST __t2086 = _t;
+		AST tmp1661_AST_in = (AST)_t;
 		match(_t,SEARCH);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2091;
+		_t = __t2086;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30254,11 +30185,11 @@
 		
 		AST seekfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2093 = _t;
-		AST tmp1674_AST_in = (AST)_t;
+		AST __t2088 = _t;
+		AST tmp1662_AST_in = (AST)_t;
 		match(_t,SEEK);
 		_t = _t.getFirstChild();
-		AST tmp1675_AST_in = (AST)_t;
+		AST tmp1663_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -30266,21 +30197,21 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp1676_AST_in = (AST)_t;
+			AST tmp1664_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST tmp1677_AST_in = (AST)_t;
+			AST tmp1665_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ID:
 		{
-			AST tmp1678_AST_in = (AST)_t;
+			AST tmp1666_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -30291,10 +30222,10 @@
 		}
 		}
 		}
-		AST tmp1679_AST_in = (AST)_t;
+		AST tmp1667_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2093;
+		_t = __t2088;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30303,13 +30234,13 @@
 		
 		AST setuseridfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2134 = _t;
-		AST tmp1680_AST_in = (AST)_t;
+		AST __t2129 = _t;
+		AST tmp1668_AST_in = (AST)_t;
 		match(_t,SETUSERID);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2134;
+		_t = __t2129;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30318,13 +30249,13 @@
 		
 		AST sha1digestfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2139 = _t;
-		AST tmp1681_AST_in = (AST)_t;
+		AST __t2134 = _t;
+		AST tmp1669_AST_in = (AST)_t;
 		match(_t,SHA1DIGEST);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2139;
+		_t = __t2134;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30337,37 +30268,37 @@
 		switch ( _t.getType()) {
 		case AVG:
 		{
-			AST __t2597 = _t;
-			AST tmp1682_AST_in = (AST)_t;
+			AST __t2592 = _t;
+			AST tmp1670_AST_in = (AST)_t;
 			match(_t,AVG);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t2597;
+			_t = __t2592;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST __t2598 = _t;
-			AST tmp1683_AST_in = (AST)_t;
+			AST __t2593 = _t;
+			AST tmp1671_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t2598;
+			_t = __t2593;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUM:
 		{
-			AST __t2599 = _t;
-			AST tmp1684_AST_in = (AST)_t;
+			AST __t2594 = _t;
+			AST tmp1672_AST_in = (AST)_t;
 			match(_t,SUM);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t2599;
+			_t = __t2594;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30383,13 +30314,13 @@
 		
 		AST sqrtfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2161 = _t;
-		AST tmp1685_AST_in = (AST)_t;
+		AST __t2156 = _t;
+		AST tmp1673_AST_in = (AST)_t;
 		match(_t,SQRT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2161;
+		_t = __t2156;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30398,13 +30329,13 @@
 		
 		AST sslservernamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2163 = _t;
-		AST tmp1686_AST_in = (AST)_t;
+		AST __t2158 = _t;
+		AST tmp1674_AST_in = (AST)_t;
 		match(_t,SSLSERVERNAME);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2163;
+		_t = __t2158;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30413,13 +30344,13 @@
 		
 		AST stringfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2179 = _t;
-		AST tmp1687_AST_in = (AST)_t;
+		AST __t2174 = _t;
+		AST tmp1675_AST_in = (AST)_t;
 		match(_t,STRING);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2179;
+		_t = __t2174;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30428,13 +30359,13 @@
 		
 		AST substitutefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2191 = _t;
-		AST tmp1688_AST_in = (AST)_t;
+		AST __t2186 = _t;
+		AST tmp1676_AST_in = (AST)_t;
 		match(_t,SUBSTITUTE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2191;
+		_t = __t2186;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30443,8 +30374,8 @@
 		
 		AST superfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2195 = _t;
-		AST tmp1689_AST_in = (AST)_t;
+		AST __t2190 = _t;
+		AST tmp1677_AST_in = (AST)_t;
 		match(_t,SUPER);
 		_t = _t.getFirstChild();
 		{
@@ -30466,7 +30397,7 @@
 		}
 		}
 		}
-		_t = __t2195;
+		_t = __t2190;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30475,13 +30406,13 @@
 		
 		AST torowidfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2279 = _t;
-		AST tmp1690_AST_in = (AST)_t;
+		AST __t2274 = _t;
+		AST tmp1678_AST_in = (AST)_t;
 		match(_t,TOROWID);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2279;
+		_t = __t2274;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30490,7 +30421,7 @@
 		
 		AST terminalfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1691_AST_in = (AST)_t;
+		AST tmp1679_AST_in = (AST)_t;
 		match(_t,TERMINAL);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30500,7 +30431,7 @@
 		
 		AST timefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1692_AST_in = (AST)_t;
+		AST tmp1680_AST_in = (AST)_t;
 		match(_t,TIME);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30510,11 +30441,11 @@
 		
 		AST timezonefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2262 = _t;
-		AST tmp1693_AST_in = (AST)_t;
+		AST __t2257 = _t;
+		AST tmp1681_AST_in = (AST)_t;
 		match(_t,TIMEZONE);
 		_t = _t.getFirstChild();
-		AST tmp1694_AST_in = (AST)_t;
+		AST tmp1682_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -30530,10 +30461,10 @@
 		}
 		
 		}
-		AST tmp1695_AST_in = (AST)_t;
+		AST tmp1683_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2262;
+		_t = __t2257;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30542,7 +30473,7 @@
 		
 		AST todayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1696_AST_in = (AST)_t;
+		AST tmp1684_AST_in = (AST)_t;
 		match(_t,TODAY);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30552,7 +30483,7 @@
 		
 		AST transactionfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1697_AST_in = (AST)_t;
+		AST tmp1685_AST_in = (AST)_t;
 		match(_t,TRANSACTION);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30562,13 +30493,13 @@
 		
 		AST trimfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2317 = _t;
-		AST tmp1698_AST_in = (AST)_t;
+		AST __t2312 = _t;
+		AST tmp1686_AST_in = (AST)_t;
 		match(_t,TRIM);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2317;
+		_t = __t2312;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30577,13 +30508,13 @@
 		
 		AST truncatefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2319 = _t;
-		AST tmp1699_AST_in = (AST)_t;
+		AST __t2314 = _t;
+		AST tmp1687_AST_in = (AST)_t;
 		match(_t,TRUNCATE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2319;
+		_t = __t2314;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30596,8 +30527,8 @@
 		switch ( _t.getType()) {
 		case USERID:
 		{
-			AST __t2381 = _t;
-			AST tmp1700_AST_in = (AST)_t;
+			AST __t2376 = _t;
+			AST tmp1688_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getFirstChild();
 			{
@@ -30619,14 +30550,14 @@
 			}
 			}
 			}
-			_t = __t2381;
+			_t = __t2376;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USER:
 		{
-			AST __t2383 = _t;
-			AST tmp1701_AST_in = (AST)_t;
+			AST __t2378 = _t;
+			AST tmp1689_AST_in = (AST)_t;
 			match(_t,USER);
 			_t = _t.getFirstChild();
 			{
@@ -30648,7 +30579,7 @@
 			}
 			}
 			}
-			_t = __t2383;
+			_t = __t2378;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30664,13 +30595,13 @@
 		
 		AST valideventfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2386 = _t;
-		AST tmp1702_AST_in = (AST)_t;
+		AST __t2381 = _t;
+		AST tmp1690_AST_in = (AST)_t;
 		match(_t,VALIDEVENT);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2386;
+		_t = __t2381;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30679,13 +30610,13 @@
 		
 		AST validhandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2388 = _t;
-		AST tmp1703_AST_in = (AST)_t;
+		AST __t2383 = _t;
+		AST tmp1691_AST_in = (AST)_t;
 		match(_t,VALIDHANDLE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2388;
+		_t = __t2383;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30694,13 +30625,13 @@
 		
 		AST weekdayfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2414 = _t;
-		AST tmp1704_AST_in = (AST)_t;
+		AST __t2409 = _t;
+		AST tmp1692_AST_in = (AST)_t;
 		match(_t,WEEKDAY);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2414;
+		_t = __t2409;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30709,13 +30640,13 @@
 		
 		AST widgethandlefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2416 = _t;
-		AST tmp1705_AST_in = (AST)_t;
+		AST __t2411 = _t;
+		AST tmp1693_AST_in = (AST)_t;
 		match(_t,WIDGETHANDLE);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2416;
+		_t = __t2411;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30724,13 +30655,13 @@
 		
 		AST yearfunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2418 = _t;
-		AST tmp1706_AST_in = (AST)_t;
+		AST __t2413 = _t;
+		AST tmp1694_AST_in = (AST)_t;
 		match(_t,YEAR);
 		_t = _t.getFirstChild();
 		funargs(_t);
 		_t = _retTree;
-		_t = __t2418;
+		_t = __t2413;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30740,7 +30671,7 @@
 		AST parameterlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t39 = _t;
-		AST tmp1707_AST_in = (AST)_t;
+		AST tmp1695_AST_in = (AST)_t;
 		match(_t,Parameter_list);
 		_t = _t.getFirstChild();
 		parameterlist_noroot(_t);
@@ -30754,7 +30685,7 @@
 		
 		AST parameterlist_noroot_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1708_AST_in = (AST)_t;
+		AST tmp1696_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -30786,7 +30717,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1709_AST_in = (AST)_t;
+				AST tmp1697_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				parameter(_t);
@@ -30798,7 +30729,7 @@
 			
 		} while (true);
 		}
-		AST tmp1710_AST_in = (AST)_t;
+		AST tmp1698_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30813,7 +30744,7 @@
 		case BUFFER:
 		{
 			AST __t45 = _t;
-			AST tmp1711_AST_in = (AST)_t;
+			AST tmp1699_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			tbl(_t,CQ.INIT);
@@ -30825,12 +30756,12 @@
 		case PARAM:
 		{
 			AST __t46 = _t;
-			AST tmp1712_AST_in = (AST)_t;
+			AST tmp1700_AST_in = (AST)_t;
 			match(_t,PARAM);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1713_AST_in = (AST)_t;
+			AST tmp1701_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -30842,7 +30773,7 @@
 		case OUTPUT:
 		{
 			AST __t47 = _t;
-			AST tmp1714_AST_in = (AST)_t;
+			AST tmp1702_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			parameter_arg(_t);
@@ -30854,7 +30785,7 @@
 		case INPUTOUTPUT:
 		{
 			AST __t48 = _t;
-			AST tmp1715_AST_in = (AST)_t;
+			AST tmp1703_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getFirstChild();
 			parameter_arg(_t);
@@ -30866,7 +30797,7 @@
 		case INPUT:
 		{
 			AST __t49 = _t;
-			AST tmp1716_AST_in = (AST)_t;
+			AST tmp1704_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			parameter_arg(_t);
@@ -30891,7 +30822,7 @@
 		switch ( _t.getType()) {
 		case TABLEHANDLE:
 		{
-			AST tmp1717_AST_in = (AST)_t;
+			AST tmp1705_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.INIT);
@@ -30901,7 +30832,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1718_AST_in = (AST)_t;
+				AST tmp1706_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -30920,7 +30851,7 @@
 		}
 		case TABLE:
 		{
-			AST tmp1719_AST_in = (AST)_t;
+			AST tmp1707_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			{
@@ -30928,7 +30859,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp1720_AST_in = (AST)_t;
+				AST tmp1708_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -30950,7 +30881,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1721_AST_in = (AST)_t;
+				AST tmp1709_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -30969,10 +30900,10 @@
 		}
 		case DATASET:
 		{
-			AST tmp1722_AST_in = (AST)_t;
+			AST tmp1710_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
-			AST tmp1723_AST_in = (AST)_t;
+			AST tmp1711_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -30980,7 +30911,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1724_AST_in = (AST)_t;
+				AST tmp1712_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -31002,14 +30933,14 @@
 			switch ( _t.getType()) {
 			case BYVALUE:
 			{
-				AST tmp1725_AST_in = (AST)_t;
+				AST tmp1713_AST_in = (AST)_t;
 				match(_t,BYVALUE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BYREFERENCE:
 			{
-				AST tmp1726_AST_in = (AST)_t;
+				AST tmp1714_AST_in = (AST)_t;
 				match(_t,BYREFERENCE);
 				_t = _t.getNextSibling();
 				break;
@@ -31028,10 +30959,10 @@
 		}
 		case DATASETHANDLE:
 		{
-			AST tmp1727_AST_in = (AST)_t;
+			AST tmp1715_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp1728_AST_in = (AST)_t;
+			AST tmp1716_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -31039,7 +30970,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1729_AST_in = (AST)_t;
+				AST tmp1717_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -31061,14 +30992,14 @@
 			switch ( _t.getType()) {
 			case BYVALUE:
 			{
-				AST tmp1730_AST_in = (AST)_t;
+				AST tmp1718_AST_in = (AST)_t;
 				match(_t,BYVALUE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BYREFERENCE:
 			{
-				AST tmp1731_AST_in = (AST)_t;
+				AST tmp1719_AST_in = (AST)_t;
 				match(_t,BYREFERENCE);
 				_t = _t.getNextSibling();
 				break;
@@ -31087,10 +31018,10 @@
 		}
 		case ID:
 		{
-			AST tmp1732_AST_in = (AST)_t;
+			AST tmp1720_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1733_AST_in = (AST)_t;
+			AST tmp1721_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			datatype_var(_t);
@@ -31118,105 +31049,105 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp1734_AST_in = (AST)_t;
+			AST tmp1722_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMHANDLE:
 		{
-			AST tmp1735_AST_in = (AST)_t;
+			AST tmp1723_AST_in = (AST)_t;
 			match(_t,COMHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST tmp1736_AST_in = (AST)_t;
+			AST tmp1724_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST tmp1737_AST_in = (AST)_t;
+			AST tmp1725_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST tmp1738_AST_in = (AST)_t;
+			AST tmp1726_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST tmp1739_AST_in = (AST)_t;
+			AST tmp1727_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HANDLE:
 		{
-			AST tmp1740_AST_in = (AST)_t;
+			AST tmp1728_AST_in = (AST)_t;
 			match(_t,HANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST tmp1741_AST_in = (AST)_t;
+			AST tmp1729_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST tmp1742_AST_in = (AST)_t;
+			AST tmp1730_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONGCHAR:
 		{
-			AST tmp1743_AST_in = (AST)_t;
+			AST tmp1731_AST_in = (AST)_t;
 			match(_t,LONGCHAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMPTR:
 		{
-			AST tmp1744_AST_in = (AST)_t;
+			AST tmp1732_AST_in = (AST)_t;
 			match(_t,MEMPTR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAW:
 		{
-			AST tmp1745_AST_in = (AST)_t;
+			AST tmp1733_AST_in = (AST)_t;
 			match(_t,RAW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECID:
 		{
-			AST tmp1746_AST_in = (AST)_t;
+			AST tmp1734_AST_in = (AST)_t;
 			match(_t,RECID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST tmp1747_AST_in = (AST)_t;
+			AST tmp1735_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST tmp1748_AST_in = (AST)_t;
+			AST tmp1736_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getNextSibling();
 			break;
@@ -31234,10 +31165,10 @@
 		AST eventlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t59 = _t;
-		AST tmp1749_AST_in = (AST)_t;
+		AST tmp1737_AST_in = (AST)_t;
 		match(_t,Event_list);
 		_t = _t.getFirstChild();
-		AST tmp1750_AST_in = (AST)_t;
+		AST tmp1738_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -31245,10 +31176,10 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1751_AST_in = (AST)_t;
+				AST tmp1739_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1752_AST_in = (AST)_t;
+				AST tmp1740_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -31267,7 +31198,7 @@
 		
 		AST funargs_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1753_AST_in = (AST)_t;
+		AST tmp1741_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -31277,7 +31208,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1754_AST_in = (AST)_t;
+				AST tmp1742_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -31289,7 +31220,7 @@
 			
 		} while (true);
 		}
-		AST tmp1755_AST_in = (AST)_t;
+		AST tmp1743_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -31304,15 +31235,15 @@
 		case VALUE:
 		{
 			AST __t66 = _t;
-			AST tmp1756_AST_in = (AST)_t;
+			AST tmp1744_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp1757_AST_in = (AST)_t;
+			AST tmp1745_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1758_AST_in = (AST)_t;
+			AST tmp1746_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t66;
@@ -31321,7 +31252,7 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp1759_AST_in = (AST)_t;
+			AST tmp1747_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			break;
@@ -31345,16 +31276,16 @@
 		case VALUE:
 		{
 			AST __t68 = _t;
-			AST tmp1760_AST_in = (AST)_t;
+			AST tmp1748_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp1761_AST_in = (AST)_t;
+			AST tmp1749_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			exp = _t==ASTNULL ? null : (AST)_t;
 			expression(_t);
 			_t = _retTree;
-			AST tmp1762_AST_in = (AST)_t;
+			AST tmp1750_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t68;
@@ -31387,15 +31318,15 @@
 		AST valueexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t70 = _t;
-		AST tmp1763_AST_in = (AST)_t;
+		AST tmp1751_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getFirstChild();
-		AST tmp1764_AST_in = (AST)_t;
+		AST tmp1752_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1765_AST_in = (AST)_t;
+		AST tmp1753_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t70;
@@ -31410,15 +31341,15 @@
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==VALUE)) {
 			AST __t72 = _t;
-			AST tmp1766_AST_in = (AST)_t;
+			AST tmp1754_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp1767_AST_in = (AST)_t;
+			AST tmp1755_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1768_AST_in = (AST)_t;
+			AST tmp1756_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t72;
@@ -31443,42 +31374,42 @@
 		switch ( _t.getType()) {
 		case CURRENT:
 		{
-			AST tmp1769_AST_in = (AST)_t;
+			AST tmp1757_AST_in = (AST)_t;
 			match(_t,CURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EACH:
 		{
-			AST tmp1770_AST_in = (AST)_t;
+			AST tmp1758_AST_in = (AST)_t;
 			match(_t,EACH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRST:
 		{
-			AST tmp1771_AST_in = (AST)_t;
+			AST tmp1759_AST_in = (AST)_t;
 			match(_t,FIRST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LAST:
 		{
-			AST tmp1772_AST_in = (AST)_t;
+			AST tmp1760_AST_in = (AST)_t;
 			match(_t,LAST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXT:
 		{
-			AST tmp1773_AST_in = (AST)_t;
+			AST tmp1761_AST_in = (AST)_t;
 			match(_t,NEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREV:
 		{
-			AST tmp1774_AST_in = (AST)_t;
+			AST tmp1762_AST_in = (AST)_t;
 			match(_t,PREV);
 			_t = _t.getNextSibling();
 			break;
@@ -31499,21 +31430,21 @@
 		switch ( _t.getType()) {
 		case SHARELOCK:
 		{
-			AST tmp1775_AST_in = (AST)_t;
+			AST tmp1763_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp1776_AST_in = (AST)_t;
+			AST tmp1764_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp1777_AST_in = (AST)_t;
+			AST tmp1765_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
@@ -31582,7 +31513,7 @@
 		case USER_FUNC:
 		{
 			AST __t96 = _t;
-			AST tmp1778_AST_in = (AST)_t;
+			AST tmp1766_AST_in = (AST)_t;
 			match(_t,USER_FUNC);
 			_t = _t.getFirstChild();
 			parameterlist_noroot(_t);
@@ -31638,7 +31569,7 @@
 		case Entered_func:
 		{
 			AST __t97 = _t;
-			AST tmp1779_AST_in = (AST)_t;
+			AST tmp1767_AST_in = (AST)_t;
 			match(_t,Entered_func);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.SYMBOL);
@@ -31648,7 +31579,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1780_AST_in = (AST)_t;
+				AST tmp1768_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -31663,7 +31594,7 @@
 			}
 			}
 			}
-			AST tmp1781_AST_in = (AST)_t;
+			AST tmp1769_AST_in = (AST)_t;
 			match(_t,ENTERED);
 			_t = _t.getNextSibling();
 			_t = __t97;
@@ -31673,12 +31604,12 @@
 		case LEFTPAREN:
 		{
 			AST __t99 = _t;
-			AST tmp1782_AST_in = (AST)_t;
+			AST tmp1770_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1783_AST_in = (AST)_t;
+			AST tmp1771_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t99;
@@ -31712,189 +31643,189 @@
 		switch ( _t.getType()) {
 		case AAMEMORY:
 		{
-			AST tmp1784_AST_in = (AST)_t;
+			AST tmp1772_AST_in = (AST)_t;
 			match(_t,AAMEMORY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACTIVEWINDOW:
 		{
-			AST tmp1785_AST_in = (AST)_t;
+			AST tmp1773_AST_in = (AST)_t;
 			match(_t,ACTIVEWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLIPBOARD:
 		{
-			AST tmp1786_AST_in = (AST)_t;
+			AST tmp1774_AST_in = (AST)_t;
 			match(_t,CLIPBOARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEBASELOCATOR:
 		{
-			AST tmp1787_AST_in = (AST)_t;
+			AST tmp1775_AST_in = (AST)_t;
 			match(_t,CODEBASELOCATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLORTABLE:
 		{
-			AST tmp1788_AST_in = (AST)_t;
+			AST tmp1776_AST_in = (AST)_t;
 			match(_t,COLORTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILER:
 		{
-			AST tmp1789_AST_in = (AST)_t;
+			AST tmp1777_AST_in = (AST)_t;
 			match(_t,COMPILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp1790_AST_in = (AST)_t;
+			AST tmp1778_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp1791_AST_in = (AST)_t;
+			AST tmp1779_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUGGER:
 		{
-			AST tmp1792_AST_in = (AST)_t;
+			AST tmp1780_AST_in = (AST)_t;
 			match(_t,DEBUGGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTWINDOW:
 		{
-			AST tmp1793_AST_in = (AST)_t;
+			AST tmp1781_AST_in = (AST)_t;
 			match(_t,DEFAULTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORSTATUS:
 		{
-			AST tmp1794_AST_in = (AST)_t;
+			AST tmp1782_AST_in = (AST)_t;
 			match(_t,ERRORSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILEINFORMATION:
 		{
-			AST tmp1795_AST_in = (AST)_t;
+			AST tmp1783_AST_in = (AST)_t;
 			match(_t,FILEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FOCUS:
 		{
-			AST tmp1796_AST_in = (AST)_t;
+			AST tmp1784_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONTTABLE:
 		{
-			AST tmp1797_AST_in = (AST)_t;
+			AST tmp1785_AST_in = (AST)_t;
 			match(_t,FONTTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTEVENT:
 		{
-			AST tmp1798_AST_in = (AST)_t;
+			AST tmp1786_AST_in = (AST)_t;
 			match(_t,LASTEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGMANAGER:
 		{
-			AST tmp1799_AST_in = (AST)_t;
+			AST tmp1787_AST_in = (AST)_t;
 			match(_t,LOGMANAGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSE:
 		{
-			AST tmp1800_AST_in = (AST)_t;
+			AST tmp1788_AST_in = (AST)_t;
 			match(_t,MOUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROFILER:
 		{
-			AST tmp1801_AST_in = (AST)_t;
+			AST tmp1789_AST_in = (AST)_t;
 			match(_t,PROFILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RCODEINFORMATION:
 		{
-			AST tmp1802_AST_in = (AST)_t;
+			AST tmp1790_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECURITYPOLICY:
 		{
-			AST tmp1803_AST_in = (AST)_t;
+			AST tmp1791_AST_in = (AST)_t;
 			match(_t,SECURITYPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELF:
 		{
-			AST tmp1804_AST_in = (AST)_t;
+			AST tmp1792_AST_in = (AST)_t;
 			match(_t,SELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SESSION:
 		{
-			AST tmp1805_AST_in = (AST)_t;
+			AST tmp1793_AST_in = (AST)_t;
 			match(_t,SESSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCEPROCEDURE:
 		{
-			AST tmp1806_AST_in = (AST)_t;
+			AST tmp1794_AST_in = (AST)_t;
 			match(_t,SOURCEPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGETPROCEDURE:
 		{
-			AST tmp1807_AST_in = (AST)_t;
+			AST tmp1795_AST_in = (AST)_t;
 			match(_t,TARGETPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTCURSOR:
 		{
-			AST tmp1808_AST_in = (AST)_t;
+			AST tmp1796_AST_in = (AST)_t;
 			match(_t,TEXTCURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISPROCEDURE:
 		{
-			AST tmp1809_AST_in = (AST)_t;
+			AST tmp1797_AST_in = (AST)_t;
 			match(_t,THISPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEBCONTEXT:
 		{
-			AST tmp1810_AST_in = (AST)_t;
+			AST tmp1798_AST_in = (AST)_t;
 			match(_t,WEBCONTEXT);
 			_t = _t.getNextSibling();
 			break;
@@ -31966,7 +31897,7 @@
 			switch ( _t.getType()) {
 			case FIELD:
 			{
-				AST tmp1811_AST_in = (AST)_t;
+				AST tmp1799_AST_in = (AST)_t;
 				match(_t,FIELD);
 				_t = _t.getNextSibling();
 				break;
@@ -31997,11 +31928,11 @@
 		
 		AST array_subscript_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t145 = _t;
-		AST tmp1812_AST_in = (AST)_t;
+		AST __t140 = _t;
+		AST tmp1800_AST_in = (AST)_t;
 		match(_t,Array_subscript);
 		_t = _t.getFirstChild();
-		AST tmp1813_AST_in = (AST)_t;
+		AST tmp1801_AST_in = (AST)_t;
 		match(_t,LEFTBRACE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -32011,7 +31942,7 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp1814_AST_in = (AST)_t;
+			AST tmp1802_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -32028,10 +31959,10 @@
 		}
 		}
 		}
-		AST tmp1815_AST_in = (AST)_t;
+		AST tmp1803_AST_in = (AST)_t;
 		match(_t,RIGHTBRACE);
 		_t = _t.getNextSibling();
-		_t = __t145;
+		_t = __t140;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -32040,11 +31971,11 @@
 		
 		AST method_param_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t148 = _t;
-		AST tmp1816_AST_in = (AST)_t;
+		AST __t143 = _t;
+		AST tmp1804_AST_in = (AST)_t;
 		match(_t,Method_param_list);
 		_t = _t.getFirstChild();
-		AST tmp1817_AST_in = (AST)_t;
+		AST tmp1805_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -32068,11 +31999,11 @@
 		}
 		}
 		{
-		_loop152:
+		_loop147:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1818_AST_in = (AST)_t;
+				AST tmp1806_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -32097,133 +32028,23 @@
 				}
 			}
 			else {
-				break _loop152;
+				break _loop147;
 			}
 			
 		} while (true);
 		}
-		AST tmp1819_AST_in = (AST)_t;
+		AST tmp1807_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t148;
+		_t = __t143;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
 	
-	public final void gwidget(AST _t) throws RecognitionException {
-		
-		AST gwidget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
-		
-		AST __t112 = _t;
-		AST tmp1820_AST_in = (AST)_t;
-		match(_t,Widget_ref);
-		_t = _t.getFirstChild();
-		s_widget(_t);
-		_t = _retTree;
-		{
-		if (_t==null) _t=ASTNULL;
-		switch ( _t.getType()) {
-		case IN_KW:
-		{
-			AST __t114 = _t;
-			AST tmp1821_AST_in = (AST)_t;
-			match(_t,IN_KW);
-			_t = _t.getFirstChild();
-			{
-			if (_t==null) _t=ASTNULL;
-			switch ( _t.getType()) {
-			case MENU:
-			{
-				AST tmp1822_AST_in = (AST)_t;
-				match(_t,MENU);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case FRAME:
-			{
-				AST tmp1823_AST_in = (AST)_t;
-				match(_t,FRAME);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case BROWSE:
-			{
-				AST tmp1824_AST_in = (AST)_t;
-				match(_t,BROWSE);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case SUBMENU:
-			{
-				AST tmp1825_AST_in = (AST)_t;
-				match(_t,SUBMENU);
-				_t = _t.getNextSibling();
-				break;
-			}
-			case BUFFER:
-			{
-				AST tmp1826_AST_in = (AST)_t;
-				match(_t,BUFFER);
-				_t = _t.getNextSibling();
-				break;
-			}
-			default:
-			{
-				throw new NoViableAltException(_t);
-			}
-			}
-			}
-			AST tmp1827_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
-			_t = __t114;
-			_t = _t.getNextSibling();
-			break;
-		}
-		case 3:
-		{
-			break;
-		}
-		default:
-		{
-			throw new NoViableAltException(_t);
-		}
-		}
-		}
-		_t = __t112;
-		_t = _t.getNextSibling();
-		_retTree = _t;
-	}
-	
-	public final void widgetlist(AST _t) throws RecognitionException {
-		
-		AST widgetlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
-		
-		gwidget(_t);
-		_t = _retTree;
-		{
-		_loop118:
-		do {
-			if (_t==null) _t=ASTNULL;
-			if ((_t.getType()==COMMA)) {
-				AST tmp1828_AST_in = (AST)_t;
-				match(_t,COMMA);
-				_t = _t.getNextSibling();
-				gwidget(_t);
-				_t = _retTree;
-			}
-			else {
-				break _loop118;
-			}
-			
-		} while (true);
-		}
-		_retTree = _t;
-	}
-	
 	public final void widname(AST _t) throws RecognitionException {
 		
 		AST widname_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		AST f = null;
 		
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
@@ -32261,130 +32082,133 @@
 		}
 		case DATASET:
 		{
-			AST tmp1829_AST_in = (AST)_t;
+			AST tmp1808_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
-			AST tmp1830_AST_in = (AST)_t;
+			AST tmp1809_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCE:
 		{
-			AST tmp1831_AST_in = (AST)_t;
+			AST tmp1810_AST_in = (AST)_t;
 			match(_t,DATASOURCE);
 			_t = _t.getNextSibling();
-			AST tmp1832_AST_in = (AST)_t;
+			AST tmp1811_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp1833_AST_in = (AST)_t;
+			AST tmp1812_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
-			AST tmp1834_AST_in = (AST)_t;
+			f = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
+			if ( inputState.guessing==0 ) {
+				action.frameRef(f);
+			}
 			break;
 		}
 		case MENU:
 		{
-			AST tmp1835_AST_in = (AST)_t;
+			AST tmp1813_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
-			AST tmp1836_AST_in = (AST)_t;
+			AST tmp1814_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp1837_AST_in = (AST)_t;
+			AST tmp1815_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
-			AST tmp1838_AST_in = (AST)_t;
+			AST tmp1816_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp1839_AST_in = (AST)_t;
+			AST tmp1817_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
-			AST tmp1840_AST_in = (AST)_t;
+			AST tmp1818_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST tmp1841_AST_in = (AST)_t;
+			AST tmp1819_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp1842_AST_in = (AST)_t;
+			AST tmp1820_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERY:
 		{
-			AST tmp1843_AST_in = (AST)_t;
+			AST tmp1821_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getNextSibling();
-			AST tmp1844_AST_in = (AST)_t;
+			AST tmp1822_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp1845_AST_in = (AST)_t;
+			AST tmp1823_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
-			AST tmp1846_AST_in = (AST)_t;
+			AST tmp1824_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp1847_AST_in = (AST)_t;
+			AST tmp1825_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
-			AST tmp1848_AST_in = (AST)_t;
+			AST tmp1826_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp1849_AST_in = (AST)_t;
+			AST tmp1827_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
-			AST tmp1850_AST_in = (AST)_t;
+			AST tmp1828_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp1851_AST_in = (AST)_t;
+			AST tmp1829_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
-			AST tmp1852_AST_in = (AST)_t;
+			AST tmp1830_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp1853_AST_in = (AST)_t;
+			AST tmp1831_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
-			AST tmp1854_AST_in = (AST)_t;
+			AST tmp1832_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -32397,6 +32221,92 @@
 		_retTree = _t;
 	}
 	
+	public final void gwidget(AST _t) throws RecognitionException {
+		
+		AST gwidget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		
+		AST __t111 = _t;
+		AST tmp1833_AST_in = (AST)_t;
+		match(_t,Widget_ref);
+		_t = _t.getFirstChild();
+		s_widget(_t);
+		_t = _retTree;
+		{
+		if (_t==null) _t=ASTNULL;
+		switch ( _t.getType()) {
+		case IN_KW:
+		{
+			AST __t113 = _t;
+			AST tmp1834_AST_in = (AST)_t;
+			match(_t,IN_KW);
+			_t = _t.getFirstChild();
+			widname(_t);
+			_t = _retTree;
+			_t = __t113;
+			_t = _t.getNextSibling();
+			break;
+		}
+		case 3:
+		{
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(_t);
+		}
+		}
+		}
+		_t = __t111;
+		_t = _t.getNextSibling();
+		_retTree = _t;
+	}
+	
+	public final void widgetlist(AST _t) throws RecognitionException {
+		
+		AST widgetlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		
+		gwidget(_t);
+		_t = _retTree;
+		{
+		_loop116:
+		do {
+			if (_t==null) _t=ASTNULL;
+			if ((_t.getType()==COMMA)) {
+				AST tmp1835_AST_in = (AST)_t;
+				match(_t,COMMA);
+				_t = _t.getNextSibling();
+				gwidget(_t);
+				_t = _retTree;
+			}
+			else {
+				break _loop116;
+			}
+			
+		} while (true);
+		}
+		_retTree = _t;
+	}
+	
+	public final void frame_ref(AST _t) throws RecognitionException {
+		
+		AST frame_ref_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		AST f = null;
+		
+		AST __t1274 = _t;
+		AST tmp1836_AST_in = (AST)_t;
+		match(_t,FRAME);
+		_t = _t.getFirstChild();
+		f = (AST)_t;
+		match(_t,ID);
+		_t = _t.getNextSibling();
+		_t = __t1274;
+		_t = _t.getNextSibling();
+		if ( inputState.guessing==0 ) {
+			action.frameRef(f);
+		}
+		_retTree = _t;
+	}
+	
 	public final void fld1(AST _t,
 		int contextQualifier
 	) throws RecognitionException {
@@ -32405,7 +32315,7 @@
 		AST ref = null;
 		AST id = null;
 		
-		AST __t131 = _t;
+		AST __t128 = _t;
 		ref = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Field_ref);
 		_t = _t.getFirstChild();
@@ -32414,7 +32324,7 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp1855_AST_in = (AST)_t;
+			AST tmp1837_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -32436,27 +32346,20 @@
 		switch ( _t.getType()) {
 		case FRAME:
 		{
-			AST __t134 = _t;
-			AST tmp1856_AST_in = (AST)_t;
-			match(_t,FRAME);
-			_t = _t.getFirstChild();
-			AST tmp1857_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
-			_t = __t134;
-			_t = _t.getNextSibling();
+			frame_ref(_t);
+			_t = _retTree;
 			break;
 		}
 		case BROWSE:
 		{
-			AST __t135 = _t;
-			AST tmp1858_AST_in = (AST)_t;
+			AST __t131 = _t;
+			AST tmp1838_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getFirstChild();
-			AST tmp1859_AST_in = (AST)_t;
+			AST tmp1839_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t135;
+			_t = __t131;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -32492,7 +32395,7 @@
 		}
 		}
 		}
-		_t = __t131;
+		_t = __t128;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.field(ref, id, contextQualifier, 1);
@@ -32508,7 +32411,7 @@
 		AST ref = null;
 		AST id = null;
 		
-		AST __t138 = _t;
+		AST __t134 = _t;
 		ref = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Field_ref);
 		_t = _t.getFirstChild();
@@ -32517,7 +32420,7 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp1860_AST_in = (AST)_t;
+			AST tmp1840_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -32539,27 +32442,20 @@
 		switch ( _t.getType()) {
 		case FRAME:
 		{
-			AST __t141 = _t;
-			AST tmp1861_AST_in = (AST)_t;
-			match(_t,FRAME);
-			_t = _t.getFirstChild();
-			AST tmp1862_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
-			_t = __t141;
-			_t = _t.getNextSibling();
+			frame_ref(_t);
+			_t = _retTree;
 			break;
 		}
 		case BROWSE:
 		{
-			AST __t142 = _t;
-			AST tmp1863_AST_in = (AST)_t;
+			AST __t137 = _t;
+			AST tmp1841_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getFirstChild();
-			AST tmp1864_AST_in = (AST)_t;
+			AST tmp1842_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t142;
+			_t = __t137;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -32595,7 +32491,7 @@
 		}
 		}
 		}
-		_t = __t138;
+		_t = __t134;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.field(ref, id, contextQualifier, 2);
@@ -32607,8 +32503,8 @@
 		
 		AST method_parameter_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t154 = _t;
-		AST tmp1865_AST_in = (AST)_t;
+		AST __t149 = _t;
+		AST tmp1843_AST_in = (AST)_t;
 		match(_t,Method_parameter);
 		_t = _t.getFirstChild();
 		{
@@ -32616,14 +32512,14 @@
 		switch ( _t.getType()) {
 		case OUTPUT:
 		{
-			AST tmp1866_AST_in = (AST)_t;
+			AST tmp1844_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUTOUTPUT:
 		{
-			AST tmp1867_AST_in = (AST)_t;
+			AST tmp1845_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -32644,7 +32540,7 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST tmp1868_AST_in = (AST)_t;
+			AST tmp1846_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			datatype_com(_t);
@@ -32668,14 +32564,14 @@
 		switch ( _t.getType()) {
 		case BYPOINTER:
 		{
-			AST tmp1869_AST_in = (AST)_t;
+			AST tmp1847_AST_in = (AST)_t;
 			match(_t,BYPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVARIANTPOINTER:
 		{
-			AST tmp1870_AST_in = (AST)_t;
+			AST tmp1848_AST_in = (AST)_t;
 			match(_t,BYVARIANTPOINTER);
 			_t = _t.getNextSibling();
 			break;
@@ -32690,7 +32586,7 @@
 		}
 		}
 		}
-		_t = __t154;
+		_t = __t149;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -32703,42 +32599,42 @@
 		switch ( _t.getType()) {
 		case SHORT:
 		{
-			AST tmp1871_AST_in = (AST)_t;
+			AST tmp1849_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp1872_AST_in = (AST)_t;
+			AST tmp1850_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENCY:
 		{
-			AST tmp1873_AST_in = (AST)_t;
+			AST tmp1851_AST_in = (AST)_t;
 			match(_t,CURRENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDBYTE:
 		{
-			AST tmp1874_AST_in = (AST)_t;
+			AST tmp1852_AST_in = (AST)_t;
 			match(_t,UNSIGNEDBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORCODE:
 		{
-			AST tmp1875_AST_in = (AST)_t;
+			AST tmp1853_AST_in = (AST)_t;
 			match(_t,ERRORCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IUNKNOWN:
 		{
-			AST tmp1876_AST_in = (AST)_t;
+			AST tmp1854_AST_in = (AST)_t;
 			match(_t,IUNKNOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -32759,182 +32655,182 @@
 		switch ( _t.getType()) {
 		case BROWSE:
 		{
-			AST tmp1877_AST_in = (AST)_t;
+			AST tmp1855_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp1878_AST_in = (AST)_t;
+			AST tmp1856_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUTTON:
 		{
-			AST tmp1879_AST_in = (AST)_t;
+			AST tmp1857_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp1880_AST_in = (AST)_t;
+			AST tmp1858_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp1881_AST_in = (AST)_t;
+			AST tmp1859_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp1882_AST_in = (AST)_t;
+			AST tmp1860_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp1883_AST_in = (AST)_t;
+			AST tmp1861_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1884_AST_in = (AST)_t;
+			AST tmp1862_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp1885_AST_in = (AST)_t;
+			AST tmp1863_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp1886_AST_in = (AST)_t;
+			AST tmp1864_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp1887_AST_in = (AST)_t;
+			AST tmp1865_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp1888_AST_in = (AST)_t;
+			AST tmp1866_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp1889_AST_in = (AST)_t;
+			AST tmp1867_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERY:
 		{
-			AST tmp1890_AST_in = (AST)_t;
+			AST tmp1868_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp1891_AST_in = (AST)_t;
+			AST tmp1869_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECTANGLE:
 		{
-			AST tmp1892_AST_in = (AST)_t;
+			AST tmp1870_AST_in = (AST)_t;
 			match(_t,RECTANGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp1893_AST_in = (AST)_t;
+			AST tmp1871_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp1894_AST_in = (AST)_t;
+			AST tmp1872_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp1895_AST_in = (AST)_t;
+			AST tmp1873_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp1896_AST_in = (AST)_t;
+			AST tmp1874_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp1897_AST_in = (AST)_t;
+			AST tmp1875_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXT:
 		{
-			AST tmp1898_AST_in = (AST)_t;
+			AST tmp1876_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp1899_AST_in = (AST)_t;
+			AST tmp1877_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOW:
 		{
-			AST tmp1900_AST_in = (AST)_t;
+			AST tmp1878_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp1901_AST_in = (AST)_t;
+			AST tmp1879_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp1902_AST_in = (AST)_t;
+			AST tmp1880_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
 			break;
@@ -32951,14 +32847,14 @@
 		
 		AST stream_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2177 = _t;
-		AST tmp1903_AST_in = (AST)_t;
+		AST __t2172 = _t;
+		AST tmp1881_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getFirstChild();
-		AST tmp1904_AST_in = (AST)_t;
+		AST tmp1882_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		_t = __t2177;
+		_t = __t2172;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -32972,16 +32868,16 @@
 		switch ( _t.getType()) {
 		case OSDIR:
 		{
-			AST __t1504 = _t;
-			AST tmp1905_AST_in = (AST)_t;
+			AST __t1499 = _t;
+			AST tmp1883_AST_in = (AST)_t;
 			match(_t,OSDIR);
 			_t = _t.getFirstChild();
-			AST tmp1906_AST_in = (AST)_t;
+			AST tmp1884_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1907_AST_in = (AST)_t;
+			AST tmp1885_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -32989,7 +32885,7 @@
 			switch ( _t.getType()) {
 			case NOATTRLIST:
 			{
-				AST tmp1908_AST_in = (AST)_t;
+				AST tmp1886_AST_in = (AST)_t;
 				match(_t,NOATTRLIST);
 				_t = _t.getNextSibling();
 				break;
@@ -33004,20 +32900,20 @@
 			}
 			}
 			}
-			_t = __t1504;
+			_t = __t1499;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRINTER:
 		{
-			AST __t1506 = _t;
-			AST tmp1909_AST_in = (AST)_t;
+			AST __t1501 = _t;
+			AST tmp1887_AST_in = (AST)_t;
 			match(_t,PRINTER);
 			_t = _t.getFirstChild();
 			{
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType() >= LEXDATE && _t.getType() <= PARAM))) {
-				AST tmp1910_AST_in = (AST)_t;
+				AST tmp1888_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -33028,13 +32924,13 @@
 			}
 			
 			}
-			_t = __t1506;
+			_t = __t1501;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINAL:
 		{
-			AST tmp1911_AST_in = (AST)_t;
+			AST tmp1889_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
@@ -33062,7 +32958,7 @@
 		case LOBDIR:
 		{
 			{
-			_loop1509:
+			_loop1504:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -33074,14 +32970,14 @@
 				}
 				case FILENAME:
 				{
-					AST tmp1912_AST_in = (AST)_t;
+					AST tmp1890_AST_in = (AST)_t;
 					match(_t,FILENAME);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop1509;
+					break _loop1504;
 				}
 				}
 			} while (true);
@@ -33095,39 +32991,39 @@
 		}
 		}
 		{
-		_loop1519:
+		_loop1514:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1913_AST_in = (AST)_t;
+				AST tmp1891_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BINARY:
 			{
-				AST tmp1914_AST_in = (AST)_t;
+				AST tmp1892_AST_in = (AST)_t;
 				match(_t,BINARY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLLATE:
 			{
-				AST tmp1915_AST_in = (AST)_t;
+				AST tmp1893_AST_in = (AST)_t;
 				match(_t,COLLATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CONVERT:
 			{
-				AST __t1511 = _t;
-				AST tmp1916_AST_in = (AST)_t;
+				AST __t1506 = _t;
+				AST tmp1894_AST_in = (AST)_t;
 				match(_t,CONVERT);
 				_t = _t.getFirstChild();
 				{
-				_loop1514:
+				_loop1509:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==SOURCE||_t.getType()==TARGET)) {
@@ -33136,14 +33032,14 @@
 						switch ( _t.getType()) {
 						case SOURCE:
 						{
-							AST tmp1917_AST_in = (AST)_t;
+							AST tmp1895_AST_in = (AST)_t;
 							match(_t,SOURCE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case TARGET:
 						{
-							AST tmp1918_AST_in = (AST)_t;
+							AST tmp1896_AST_in = (AST)_t;
 							match(_t,TARGET);
 							_t = _t.getNextSibling();
 							break;
@@ -33158,129 +33054,129 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1514;
+						break _loop1509;
 					}
 					
 				} while (true);
 				}
-				_t = __t1511;
+				_t = __t1506;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LOBDIR:
 			{
-				AST __t1515 = _t;
-				AST tmp1919_AST_in = (AST)_t;
+				AST __t1510 = _t;
+				AST tmp1897_AST_in = (AST)_t;
 				match(_t,LOBDIR);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
 				_t = _retTree;
-				_t = __t1515;
+				_t = __t1510;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONVERT:
 			{
-				AST tmp1920_AST_in = (AST)_t;
+				AST tmp1898_AST_in = (AST)_t;
 				match(_t,NOCONVERT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ECHO:
 			{
-				AST tmp1921_AST_in = (AST)_t;
+				AST tmp1899_AST_in = (AST)_t;
 				match(_t,ECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOECHO:
 			{
-				AST tmp1922_AST_in = (AST)_t;
+				AST tmp1900_AST_in = (AST)_t;
 				match(_t,NOECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case KEEPMESSAGES:
 			{
-				AST tmp1923_AST_in = (AST)_t;
+				AST tmp1901_AST_in = (AST)_t;
 				match(_t,KEEPMESSAGES);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANDSCAPE:
 			{
-				AST tmp1924_AST_in = (AST)_t;
+				AST tmp1902_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAP:
 			{
-				AST __t1516 = _t;
-				AST tmp1925_AST_in = (AST)_t;
+				AST __t1511 = _t;
+				AST tmp1903_AST_in = (AST)_t;
 				match(_t,MAP);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t1516;
+				_t = __t1511;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOMAP:
 			{
-				AST tmp1926_AST_in = (AST)_t;
+				AST tmp1904_AST_in = (AST)_t;
 				match(_t,NOMAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NUMCOPIES:
 			{
-				AST __t1517 = _t;
-				AST tmp1927_AST_in = (AST)_t;
+				AST __t1512 = _t;
+				AST tmp1905_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t1517;
+				_t = __t1512;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PAGED:
 			{
-				AST tmp1928_AST_in = (AST)_t;
+				AST tmp1906_AST_in = (AST)_t;
 				match(_t,PAGED);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PAGESIZE_KW:
 			{
-				AST __t1518 = _t;
-				AST tmp1929_AST_in = (AST)_t;
+				AST __t1513 = _t;
+				AST tmp1907_AST_in = (AST)_t;
 				match(_t,PAGESIZE_KW);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t1518;
+				_t = __t1513;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PORTRAIT:
 			{
-				AST tmp1930_AST_in = (AST)_t;
+				AST tmp1908_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UNBUFFERED:
 			{
-				AST tmp1931_AST_in = (AST)_t;
+				AST tmp1909_AST_in = (AST)_t;
 				match(_t,UNBUFFERED);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1519;
+				break _loop1514;
 			}
 			}
 		} while (true);
@@ -33296,70 +33192,70 @@
 		switch ( _t.getType()) {
 		case AVERAGE:
 		{
-			AST tmp1932_AST_in = (AST)_t;
+			AST tmp1910_AST_in = (AST)_t;
 			match(_t,AVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST tmp1933_AST_in = (AST)_t;
+			AST tmp1911_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMUM:
 		{
-			AST tmp1934_AST_in = (AST)_t;
+			AST tmp1912_AST_in = (AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINIMUM:
 		{
-			AST tmp1935_AST_in = (AST)_t;
+			AST tmp1913_AST_in = (AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOTAL:
 		{
-			AST tmp1936_AST_in = (AST)_t;
+			AST tmp1914_AST_in = (AST)_t;
 			match(_t,TOTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBAVERAGE:
 		{
-			AST tmp1937_AST_in = (AST)_t;
+			AST tmp1915_AST_in = (AST)_t;
 			match(_t,SUBAVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBCOUNT:
 		{
-			AST tmp1938_AST_in = (AST)_t;
+			AST tmp1916_AST_in = (AST)_t;
 			match(_t,SUBCOUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMAXIMUM:
 		{
-			AST tmp1939_AST_in = (AST)_t;
+			AST tmp1917_AST_in = (AST)_t;
 			match(_t,SUBMAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMINIMUM:
 		{
-			AST tmp1940_AST_in = (AST)_t;
+			AST tmp1918_AST_in = (AST)_t;
 			match(_t,SUBMINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBTOTAL:
 		{
-			AST tmp1941_AST_in = (AST)_t;
+			AST tmp1919_AST_in = (AST)_t;
 			match(_t,SUBTOTAL);
 			_t = _t.getNextSibling();
 			break;
@@ -33376,8 +33272,8 @@
 		
 		AST display_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1102 = _t;
-		AST tmp1942_AST_in = (AST)_t;
+		AST __t1096 = _t;
+		AST tmp1920_AST_in = (AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
 		{
@@ -33405,7 +33301,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1943_AST_in = (AST)_t;
+					AST tmp1921_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -33415,7 +33311,7 @@
 				
 				}
 				{
-				_loop1106:
+				_loop1100:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
@@ -33433,7 +33329,7 @@
 					}
 					default:
 					{
-						break _loop1106;
+						break _loop1100;
 					}
 					}
 				} while (true);
@@ -33444,7 +33340,7 @@
 		}
 		}
 		}
-		_t = __t1102;
+		_t = __t1096;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33453,16 +33349,16 @@
 		
 		AST aggregatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t191 = _t;
-		AST tmp1944_AST_in = (AST)_t;
+		AST __t186 = _t;
+		AST tmp1922_AST_in = (AST)_t;
 		match(_t,Aggregate_phrase);
 		_t = _t.getFirstChild();
-		AST tmp1945_AST_in = (AST)_t;
+		AST tmp1923_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
-		int _cnt193=0;
-		_loop193:
+		int _cnt188=0;
+		_loop188:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_31.member(_t.getType()))) {
@@ -33470,19 +33366,19 @@
 				_t = _retTree;
 			}
 			else {
-				if ( _cnt193>=1 ) { break _loop193; } else {throw new NoViableAltException(_t);}
+				if ( _cnt188>=1 ) { break _loop188; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt193++;
+			_cnt188++;
 		} while (true);
 		}
 		{
-		_loop197:
+		_loop192:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==BY)) {
-				AST __t195 = _t;
-				AST tmp1946_AST_in = (AST)_t;
+				AST __t190 = _t;
+				AST tmp1924_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33492,7 +33388,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1947_AST_in = (AST)_t;
+					AST tmp1925_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -33507,19 +33403,19 @@
 				}
 				}
 				}
-				_t = __t195;
+				_t = __t190;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop197;
+				break _loop192;
 			}
 			
 		} while (true);
 		}
-		AST tmp1948_AST_in = (AST)_t;
+		AST tmp1926_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t191;
+		_t = __t186;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33542,7 +33438,7 @@
 		switch ( _t.getType()) {
 		case AVERAGE:
 		{
-			AST __t199 = _t;
+			AST __t194 = _t;
 			id1 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,AVERAGE);
 			_t = _t.getFirstChild();
@@ -33569,13 +33465,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id1, id1, DECIMAL));
 			}
-			_t = __t199;
+			_t = __t194;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST __t201 = _t;
+			AST __t196 = _t;
 			id2 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,COUNT);
 			_t = _t.getFirstChild();
@@ -33602,13 +33498,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id2, id2, INTEGER));
 			}
-			_t = __t201;
+			_t = __t196;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMUM:
 		{
-			AST __t203 = _t;
+			AST __t198 = _t;
 			id3 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getFirstChild();
@@ -33635,13 +33531,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id3, id3, DECIMAL));
 			}
-			_t = __t203;
+			_t = __t198;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINIMUM:
 		{
-			AST __t205 = _t;
+			AST __t200 = _t;
 			id4 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getFirstChild();
@@ -33668,13 +33564,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id4, id4, DECIMAL));
 			}
-			_t = __t205;
+			_t = __t200;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOTAL:
 		{
-			AST __t207 = _t;
+			AST __t202 = _t;
 			id5 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,TOTAL);
 			_t = _t.getFirstChild();
@@ -33701,13 +33597,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id5, id5, DECIMAL));
 			}
-			_t = __t207;
+			_t = __t202;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBAVERAGE:
 		{
-			AST __t209 = _t;
+			AST __t204 = _t;
 			id6 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,SUBAVERAGE);
 			_t = _t.getFirstChild();
@@ -33734,13 +33630,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id6, id6, DECIMAL));
 			}
-			_t = __t209;
+			_t = __t204;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBCOUNT:
 		{
-			AST __t211 = _t;
+			AST __t206 = _t;
 			id7 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,SUBCOUNT);
 			_t = _t.getFirstChild();
@@ -33767,13 +33663,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id7, id7, DECIMAL));
 			}
-			_t = __t211;
+			_t = __t206;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMAXIMUM:
 		{
-			AST __t213 = _t;
+			AST __t208 = _t;
 			id8 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,SUBMAXIMUM);
 			_t = _t.getFirstChild();
@@ -33800,13 +33696,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id8, id8, DECIMAL));
 			}
-			_t = __t213;
+			_t = __t208;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMINIMUM:
 		{
-			AST __t215 = _t;
+			AST __t210 = _t;
 			id9 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,SUBMINIMUM);
 			_t = _t.getFirstChild();
@@ -33833,13 +33729,13 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id9, id9, DECIMAL));
 			}
-			_t = __t215;
+			_t = __t210;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBTOTAL:
 		{
-			AST __t217 = _t;
+			AST __t212 = _t;
 			id10 = _t==ASTNULL ? null :(AST)_t;
 			match(_t,SUBTOTAL);
 			_t = _t.getFirstChild();
@@ -33866,7 +33762,7 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(action.defineVariable(id10, id10, DECIMAL));
 			}
-			_t = __t217;
+			_t = __t212;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -33886,59 +33782,59 @@
 		switch ( _t.getType()) {
 		case COLUMNLABEL:
 		{
-			AST __t1542 = _t;
-			AST tmp1949_AST_in = (AST)_t;
+			AST __t1537 = _t;
+			AST tmp1927_AST_in = (AST)_t;
 			match(_t,COLUMNLABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
 			{
-			_loop1544:
+			_loop1539:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1950_AST_in = (AST)_t;
+					AST tmp1928_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
 				}
 				else {
-					break _loop1544;
+					break _loop1539;
 				}
 				
 			} while (true);
 			}
-			_t = __t1542;
+			_t = __t1537;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABEL:
 		{
-			AST __t1545 = _t;
-			AST tmp1951_AST_in = (AST)_t;
+			AST __t1540 = _t;
+			AST tmp1929_AST_in = (AST)_t;
 			match(_t,LABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
 			{
-			_loop1547:
+			_loop1542:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1952_AST_in = (AST)_t;
+					AST tmp1930_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
 				}
 				else {
-					break _loop1547;
+					break _loop1542;
 				}
 				
 			} while (true);
 			}
-			_t = __t1545;
+			_t = __t1540;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -33954,24 +33850,24 @@
 		
 		AST assign_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t237 = _t;
-		AST tmp1953_AST_in = (AST)_t;
+		AST __t232 = _t;
+		AST tmp1931_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		{
-		int _cnt241=0;
-		_loop241:
+		int _cnt236=0;
+		_loop236:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==EQUAL)) {
-				AST __t239 = _t;
-				AST tmp1954_AST_in = (AST)_t;
+				AST __t234 = _t;
+				AST tmp1932_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ID)) {
-					AST tmp1955_AST_in = (AST)_t;
+					AST tmp1933_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -33986,17 +33882,17 @@
 				}
 				expression(_t);
 				_t = _retTree;
-				_t = __t239;
+				_t = __t234;
 				_t = _t.getNextSibling();
 			}
 			else {
-				if ( _cnt241>=1 ) { break _loop241; } else {throw new NoViableAltException(_t);}
+				if ( _cnt236>=1 ) { break _loop236; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt241++;
+			_cnt236++;
 		} while (true);
 		}
-		_t = __t237;
+		_t = __t232;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -34009,6678 +33905,6678 @@
 		switch ( _t.getType()) {
 		case AACBIT:
 		{
-			AST tmp1956_AST_in = (AST)_t;
+			AST tmp1934_AST_in = (AST)_t;
 			match(_t,AACBIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AACONTROL:
 		{
-			AST tmp1957_AST_in = (AST)_t;
+			AST tmp1935_AST_in = (AST)_t;
 			match(_t,AACONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AALIST:
 		{
-			AST tmp1958_AST_in = (AST)_t;
+			AST tmp1936_AST_in = (AST)_t;
 			match(_t,AALIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAMEMORY:
 		{
-			AST tmp1959_AST_in = (AST)_t;
+			AST tmp1937_AST_in = (AST)_t;
 			match(_t,AAMEMORY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAMSG:
 		{
-			AST tmp1960_AST_in = (AST)_t;
+			AST tmp1938_AST_in = (AST)_t;
 			match(_t,AAMSG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAPCONTROL:
 		{
-			AST tmp1961_AST_in = (AST)_t;
+			AST tmp1939_AST_in = (AST)_t;
 			match(_t,AAPCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AASERIAL:
 		{
-			AST tmp1962_AST_in = (AST)_t;
+			AST tmp1940_AST_in = (AST)_t;
 			match(_t,AASERIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AATRACE:
 		{
-			AST tmp1963_AST_in = (AST)_t;
+			AST tmp1941_AST_in = (AST)_t;
 			match(_t,AATRACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ABSOLUTE:
 		{
-			AST tmp1964_AST_in = (AST)_t;
+			AST tmp1942_AST_in = (AST)_t;
 			match(_t,ABSOLUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACCELERATOR:
 		{
-			AST tmp1965_AST_in = (AST)_t;
+			AST tmp1943_AST_in = (AST)_t;
 			match(_t,ACCELERATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACCUMULATE:
 		{
-			AST tmp1966_AST_in = (AST)_t;
+			AST tmp1944_AST_in = (AST)_t;
 			match(_t,ACCUMULATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACTIVEWINDOW:
 		{
-			AST tmp1967_AST_in = (AST)_t;
+			AST tmp1945_AST_in = (AST)_t;
 			match(_t,ACTIVEWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ADD:
 		{
-			AST tmp1968_AST_in = (AST)_t;
+			AST tmp1946_AST_in = (AST)_t;
 			match(_t,ADD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ADDINTERVAL:
 		{
-			AST tmp1969_AST_in = (AST)_t;
+			AST tmp1947_AST_in = (AST)_t;
 			match(_t,ADDINTERVAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ADVISE:
 		{
-			AST tmp1970_AST_in = (AST)_t;
+			AST tmp1948_AST_in = (AST)_t;
 			match(_t,ADVISE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALERTBOX:
 		{
-			AST tmp1971_AST_in = (AST)_t;
+			AST tmp1949_AST_in = (AST)_t;
 			match(_t,ALERTBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALIAS:
 		{
-			AST tmp1972_AST_in = (AST)_t;
+			AST tmp1950_AST_in = (AST)_t;
 			match(_t,ALIAS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp1973_AST_in = (AST)_t;
+			AST tmp1951_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALLOWREPLICATION:
 		{
-			AST tmp1974_AST_in = (AST)_t;
+			AST tmp1952_AST_in = (AST)_t;
 			match(_t,ALLOWREPLICATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALTER:
 		{
-			AST tmp1975_AST_in = (AST)_t;
+			AST tmp1953_AST_in = (AST)_t;
 			match(_t,ALTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALTERNATEKEY:
 		{
-			AST tmp1976_AST_in = (AST)_t;
+			AST tmp1954_AST_in = (AST)_t;
 			match(_t,ALTERNATEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AMBIGUOUS:
 		{
-			AST tmp1977_AST_in = (AST)_t;
+			AST tmp1955_AST_in = (AST)_t;
 			match(_t,AMBIGUOUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANALYZE:
 		{
-			AST tmp1978_AST_in = (AST)_t;
+			AST tmp1956_AST_in = (AST)_t;
 			match(_t,ANALYZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AND:
 		{
-			AST tmp1979_AST_in = (AST)_t;
+			AST tmp1957_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANSIONLY:
 		{
-			AST tmp1980_AST_in = (AST)_t;
+			AST tmp1958_AST_in = (AST)_t;
 			match(_t,ANSIONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANY:
 		{
-			AST tmp1981_AST_in = (AST)_t;
+			AST tmp1959_AST_in = (AST)_t;
 			match(_t,ANY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANYWHERE:
 		{
-			AST tmp1982_AST_in = (AST)_t;
+			AST tmp1960_AST_in = (AST)_t;
 			match(_t,ANYWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case APPEND:
 		{
-			AST tmp1983_AST_in = (AST)_t;
+			AST tmp1961_AST_in = (AST)_t;
 			match(_t,APPEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case APPLICATION:
 		{
-			AST tmp1984_AST_in = (AST)_t;
+			AST tmp1962_AST_in = (AST)_t;
 			match(_t,APPLICATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case APPLY:
 		{
-			AST tmp1985_AST_in = (AST)_t;
+			AST tmp1963_AST_in = (AST)_t;
 			match(_t,APPLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ARRAYMESSAGE:
 		{
-			AST tmp1986_AST_in = (AST)_t;
+			AST tmp1964_AST_in = (AST)_t;
 			match(_t,ARRAYMESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AS:
 		{
-			AST tmp1987_AST_in = (AST)_t;
+			AST tmp1965_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASC:
 		{
-			AST tmp1988_AST_in = (AST)_t;
+			AST tmp1966_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASCENDING:
 		{
-			AST tmp1989_AST_in = (AST)_t;
+			AST tmp1967_AST_in = (AST)_t;
 			match(_t,ASCENDING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASKOVERWRITE:
 		{
-			AST tmp1990_AST_in = (AST)_t;
+			AST tmp1968_AST_in = (AST)_t;
 			match(_t,ASKOVERWRITE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASSIGN:
 		{
-			AST tmp1991_AST_in = (AST)_t;
+			AST tmp1969_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASYNCHRONOUS:
 		{
-			AST tmp1992_AST_in = (AST)_t;
+			AST tmp1970_AST_in = (AST)_t;
 			match(_t,ASYNCHRONOUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AT:
 		{
-			AST tmp1993_AST_in = (AST)_t;
+			AST tmp1971_AST_in = (AST)_t;
 			match(_t,AT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ATTACHMENT:
 		{
-			AST tmp1994_AST_in = (AST)_t;
+			AST tmp1972_AST_in = (AST)_t;
 			match(_t,ATTACHMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ATTRSPACE:
 		{
-			AST tmp1995_AST_in = (AST)_t;
+			AST tmp1973_AST_in = (AST)_t;
 			match(_t,ATTRSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTHORIZATION:
 		{
-			AST tmp1996_AST_in = (AST)_t;
+			AST tmp1974_AST_in = (AST)_t;
 			match(_t,AUTHORIZATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOCOMPLETION:
 		{
-			AST tmp1997_AST_in = (AST)_t;
+			AST tmp1975_AST_in = (AST)_t;
 			match(_t,AUTOCOMPLETION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOENDKEY:
 		{
-			AST tmp1998_AST_in = (AST)_t;
+			AST tmp1976_AST_in = (AST)_t;
 			match(_t,AUTOENDKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOGO:
 		{
-			AST tmp1999_AST_in = (AST)_t;
+			AST tmp1977_AST_in = (AST)_t;
 			match(_t,AUTOGO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOMATIC:
 		{
-			AST tmp2000_AST_in = (AST)_t;
+			AST tmp1978_AST_in = (AST)_t;
 			match(_t,AUTOMATIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTORETURN:
 		{
-			AST tmp2001_AST_in = (AST)_t;
+			AST tmp1979_AST_in = (AST)_t;
 			match(_t,AUTORETURN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVAILABLE:
 		{
-			AST tmp2002_AST_in = (AST)_t;
+			AST tmp1980_AST_in = (AST)_t;
 			match(_t,AVAILABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVERAGE:
 		{
-			AST tmp2003_AST_in = (AST)_t;
+			AST tmp1981_AST_in = (AST)_t;
 			match(_t,AVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVG:
 		{
-			AST tmp2004_AST_in = (AST)_t;
+			AST tmp1982_AST_in = (AST)_t;
 			match(_t,AVG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKGROUND:
 		{
-			AST tmp2005_AST_in = (AST)_t;
+			AST tmp1983_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKWARDS:
 		{
-			AST tmp2006_AST_in = (AST)_t;
+			AST tmp1984_AST_in = (AST)_t;
 			match(_t,BACKWARDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64:
 		{
-			AST tmp2007_AST_in = (AST)_t;
+			AST tmp1985_AST_in = (AST)_t;
 			match(_t,BASE64);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASEKEY:
 		{
-			AST tmp2008_AST_in = (AST)_t;
+			AST tmp1986_AST_in = (AST)_t;
 			match(_t,BASEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEFOREHIDE:
 		{
-			AST tmp2009_AST_in = (AST)_t;
+			AST tmp1987_AST_in = (AST)_t;
 			match(_t,BEFOREHIDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEGINS:
 		{
-			AST tmp2010_AST_in = (AST)_t;
+			AST tmp1988_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BELL:
 		{
-			AST tmp2011_AST_in = (AST)_t;
+			AST tmp1989_AST_in = (AST)_t;
 			match(_t,BELL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BETWEEN:
 		{
-			AST tmp2012_AST_in = (AST)_t;
+			AST tmp1990_AST_in = (AST)_t;
 			match(_t,BETWEEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BGCOLOR:
 		{
-			AST tmp2013_AST_in = (AST)_t;
+			AST tmp1991_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BIGENDIAN:
 		{
-			AST tmp2014_AST_in = (AST)_t;
+			AST tmp1992_AST_in = (AST)_t;
 			match(_t,BIGENDIAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINARY:
 		{
-			AST tmp2015_AST_in = (AST)_t;
+			AST tmp1993_AST_in = (AST)_t;
 			match(_t,BINARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINDWHERE:
 		{
-			AST tmp2016_AST_in = (AST)_t;
+			AST tmp1994_AST_in = (AST)_t;
 			match(_t,BINDWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BLANK:
 		{
-			AST tmp2017_AST_in = (AST)_t;
+			AST tmp1995_AST_in = (AST)_t;
 			match(_t,BLANK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BLOB:
 		{
-			AST tmp2018_AST_in = (AST)_t;
+			AST tmp1996_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BOTH:
 		{
-			AST tmp2019_AST_in = (AST)_t;
+			AST tmp1997_AST_in = (AST)_t;
 			match(_t,BOTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BOTTOM:
 		{
-			AST tmp2020_AST_in = (AST)_t;
+			AST tmp1998_AST_in = (AST)_t;
 			match(_t,BOTTOM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BREAK:
 		{
-			AST tmp2021_AST_in = (AST)_t;
+			AST tmp1999_AST_in = (AST)_t;
 			match(_t,BREAK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST tmp2022_AST_in = (AST)_t;
+			AST tmp2000_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BTOS:
 		{
-			AST tmp2023_AST_in = (AST)_t;
+			AST tmp2001_AST_in = (AST)_t;
 			match(_t,BTOS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp2024_AST_in = (AST)_t;
+			AST tmp2002_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERCHARS:
 		{
-			AST tmp2025_AST_in = (AST)_t;
+			AST tmp2003_AST_in = (AST)_t;
 			match(_t,BUFFERCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERCOMPARE:
 		{
-			AST tmp2026_AST_in = (AST)_t;
+			AST tmp2004_AST_in = (AST)_t;
 			match(_t,BUFFERCOMPARE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERCOPY:
 		{
-			AST tmp2027_AST_in = (AST)_t;
+			AST tmp2005_AST_in = (AST)_t;
 			match(_t,BUFFERCOPY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERLINES:
 		{
-			AST tmp2028_AST_in = (AST)_t;
+			AST tmp2006_AST_in = (AST)_t;
 			match(_t,BUFFERLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERNAME:
 		{
-			AST tmp2029_AST_in = (AST)_t;
+			AST tmp2007_AST_in = (AST)_t;
 			match(_t,BUFFERNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUTTON:
 		{
-			AST tmp2030_AST_in = (AST)_t;
+			AST tmp2008_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUTTONS:
 		{
-			AST tmp2031_AST_in = (AST)_t;
+			AST tmp2009_AST_in = (AST)_t;
 			match(_t,BUTTONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BY:
 		{
-			AST tmp2032_AST_in = (AST)_t;
+			AST tmp2010_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYPOINTER:
 		{
-			AST tmp2033_AST_in = (AST)_t;
+			AST tmp2011_AST_in = (AST)_t;
 			match(_t,BYPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYREFERENCE:
 		{
-			AST tmp2034_AST_in = (AST)_t;
+			AST tmp2012_AST_in = (AST)_t;
 			match(_t,BYREFERENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYTE:
 		{
-			AST tmp2035_AST_in = (AST)_t;
+			AST tmp2013_AST_in = (AST)_t;
 			match(_t,BYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVALUE:
 		{
-			AST tmp2036_AST_in = (AST)_t;
+			AST tmp2014_AST_in = (AST)_t;
 			match(_t,BYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVARIANTPOINTER:
 		{
-			AST tmp2037_AST_in = (AST)_t;
+			AST tmp2015_AST_in = (AST)_t;
 			match(_t,BYVARIANTPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CACHE:
 		{
-			AST tmp2038_AST_in = (AST)_t;
+			AST tmp2016_AST_in = (AST)_t;
 			match(_t,CACHE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CACHESIZE:
 		{
-			AST tmp2039_AST_in = (AST)_t;
+			AST tmp2017_AST_in = (AST)_t;
 			match(_t,CACHESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CALL:
 		{
-			AST tmp2040_AST_in = (AST)_t;
+			AST tmp2018_AST_in = (AST)_t;
 			match(_t,CALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANDO:
 		{
-			AST tmp2041_AST_in = (AST)_t;
+			AST tmp2019_AST_in = (AST)_t;
 			match(_t,CANDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANFIND:
 		{
-			AST tmp2042_AST_in = (AST)_t;
+			AST tmp2020_AST_in = (AST)_t;
 			match(_t,CANFIND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANQUERY:
 		{
-			AST tmp2043_AST_in = (AST)_t;
+			AST tmp2021_AST_in = (AST)_t;
 			match(_t,CANQUERY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANSET:
 		{
-			AST tmp2044_AST_in = (AST)_t;
+			AST tmp2022_AST_in = (AST)_t;
 			match(_t,CANSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANCELBUTTON:
 		{
-			AST tmp2045_AST_in = (AST)_t;
+			AST tmp2023_AST_in = (AST)_t;
 			match(_t,CANCELBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CAPS:
 		{
-			AST tmp2046_AST_in = (AST)_t;
+			AST tmp2024_AST_in = (AST)_t;
 			match(_t,CAPS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CASE:
 		{
-			AST tmp2047_AST_in = (AST)_t;
+			AST tmp2025_AST_in = (AST)_t;
 			match(_t,CASE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CASESENSITIVE:
 		{
-			AST tmp2048_AST_in = (AST)_t;
+			AST tmp2026_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CDECL_KW:
 		{
-			AST tmp2049_AST_in = (AST)_t;
+			AST tmp2027_AST_in = (AST)_t;
 			match(_t,CDECL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CENTERED:
 		{
-			AST tmp2050_AST_in = (AST)_t;
+			AST tmp2028_AST_in = (AST)_t;
 			match(_t,CENTERED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHAINED:
 		{
-			AST tmp2051_AST_in = (AST)_t;
+			AST tmp2029_AST_in = (AST)_t;
 			match(_t,CHAINED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHARACTER:
 		{
-			AST tmp2052_AST_in = (AST)_t;
+			AST tmp2030_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHARACTERLENGTH:
 		{
-			AST tmp2053_AST_in = (AST)_t;
+			AST tmp2031_AST_in = (AST)_t;
 			match(_t,CHARACTERLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHECK:
 		{
-			AST tmp2054_AST_in = (AST)_t;
+			AST tmp2032_AST_in = (AST)_t;
 			match(_t,CHECK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHOOSE:
 		{
-			AST tmp2055_AST_in = (AST)_t;
+			AST tmp2033_AST_in = (AST)_t;
 			match(_t,CHOOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHR:
 		{
-			AST tmp2056_AST_in = (AST)_t;
+			AST tmp2034_AST_in = (AST)_t;
 			match(_t,CHR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLEAR:
 		{
-			AST tmp2057_AST_in = (AST)_t;
+			AST tmp2035_AST_in = (AST)_t;
 			match(_t,CLEAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLIPBOARD:
 		{
-			AST tmp2058_AST_in = (AST)_t;
+			AST tmp2036_AST_in = (AST)_t;
 			match(_t,CLIPBOARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOSE:
 		{
-			AST tmp2059_AST_in = (AST)_t;
+			AST tmp2037_AST_in = (AST)_t;
 			match(_t,CLOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp2060_AST_in = (AST)_t;
+			AST tmp2038_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEBASELOCATOR:
 		{
-			AST tmp2061_AST_in = (AST)_t;
+			AST tmp2039_AST_in = (AST)_t;
 			match(_t,CODEBASELOCATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEPAGE:
 		{
-			AST tmp2062_AST_in = (AST)_t;
+			AST tmp2040_AST_in = (AST)_t;
 			match(_t,CODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEPAGECONVERT:
 		{
-			AST tmp2063_AST_in = (AST)_t;
+			AST tmp2041_AST_in = (AST)_t;
 			match(_t,CODEPAGECONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLLATE:
 		{
-			AST tmp2064_AST_in = (AST)_t;
+			AST tmp2042_AST_in = (AST)_t;
 			match(_t,COLLATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLOF:
 		{
-			AST tmp2065_AST_in = (AST)_t;
+			AST tmp2043_AST_in = (AST)_t;
 			match(_t,COLOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLON:
 		{
-			AST tmp2066_AST_in = (AST)_t;
+			AST tmp2044_AST_in = (AST)_t;
 			match(_t,COLON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLONALIGNED:
 		{
-			AST tmp2067_AST_in = (AST)_t;
+			AST tmp2045_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLOR:
 		{
-			AST tmp2068_AST_in = (AST)_t;
+			AST tmp2046_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLORTABLE:
 		{
-			AST tmp2069_AST_in = (AST)_t;
+			AST tmp2047_AST_in = (AST)_t;
 			match(_t,COLORTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMN:
 		{
-			AST tmp2070_AST_in = (AST)_t;
+			AST tmp2048_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNBGCOLOR:
 		{
-			AST tmp2071_AST_in = (AST)_t;
+			AST tmp2049_AST_in = (AST)_t;
 			match(_t,COLUMNBGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNCODEPAGE:
 		{
-			AST tmp2072_AST_in = (AST)_t;
+			AST tmp2050_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNDCOLOR:
 		{
-			AST tmp2073_AST_in = (AST)_t;
+			AST tmp2051_AST_in = (AST)_t;
 			match(_t,COLUMNDCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNFGCOLOR:
 		{
-			AST tmp2074_AST_in = (AST)_t;
+			AST tmp2052_AST_in = (AST)_t;
 			match(_t,COLUMNFGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNFONT:
 		{
-			AST tmp2075_AST_in = (AST)_t;
+			AST tmp2053_AST_in = (AST)_t;
 			match(_t,COLUMNFONT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNLABEL:
 		{
-			AST tmp2076_AST_in = (AST)_t;
+			AST tmp2054_AST_in = (AST)_t;
 			match(_t,COLUMNLABEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNOF:
 		{
-			AST tmp2077_AST_in = (AST)_t;
+			AST tmp2055_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNPFCOLOR:
 		{
-			AST tmp2078_AST_in = (AST)_t;
+			AST tmp2056_AST_in = (AST)_t;
 			match(_t,COLUMNPFCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNS:
 		{
-			AST tmp2079_AST_in = (AST)_t;
+			AST tmp2057_AST_in = (AST)_t;
 			match(_t,COLUMNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMHANDLE:
 		{
-			AST tmp2080_AST_in = (AST)_t;
+			AST tmp2058_AST_in = (AST)_t;
 			match(_t,COMHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp2081_AST_in = (AST)_t;
+			AST tmp2059_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMMAND:
 		{
-			AST tmp2082_AST_in = (AST)_t;
+			AST tmp2060_AST_in = (AST)_t;
 			match(_t,COMMAND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPARES:
 		{
-			AST tmp2083_AST_in = (AST)_t;
+			AST tmp2061_AST_in = (AST)_t;
 			match(_t,COMPARES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPLETE:
 		{
-			AST tmp2084_AST_in = (AST)_t;
+			AST tmp2062_AST_in = (AST)_t;
 			match(_t,COMPLETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILE:
 		{
-			AST tmp2085_AST_in = (AST)_t;
+			AST tmp2063_AST_in = (AST)_t;
 			match(_t,COMPILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILER:
 		{
-			AST tmp2086_AST_in = (AST)_t;
+			AST tmp2064_AST_in = (AST)_t;
 			match(_t,COMPILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp2087_AST_in = (AST)_t;
+			AST tmp2065_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONFIGNAME:
 		{
-			AST tmp2088_AST_in = (AST)_t;
+			AST tmp2066_AST_in = (AST)_t;
 			match(_t,CONFIGNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONNECT:
 		{
-			AST tmp2089_AST_in = (AST)_t;
+			AST tmp2067_AST_in = (AST)_t;
 			match(_t,CONNECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONNECTED:
 		{
-			AST tmp2090_AST_in = (AST)_t;
+			AST tmp2068_AST_in = (AST)_t;
 			match(_t,CONNECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTAINS:
 		{
-			AST tmp2091_AST_in = (AST)_t;
+			AST tmp2069_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTENTS:
 		{
-			AST tmp2092_AST_in = (AST)_t;
+			AST tmp2070_AST_in = (AST)_t;
 			match(_t,CONTENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXT:
 		{
-			AST tmp2093_AST_in = (AST)_t;
+			AST tmp2071_AST_in = (AST)_t;
 			match(_t,CONTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELP:
 		{
-			AST tmp2094_AST_in = (AST)_t;
+			AST tmp2072_AST_in = (AST)_t;
 			match(_t,CONTEXTHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPFILE:
 		{
-			AST tmp2095_AST_in = (AST)_t;
+			AST tmp2073_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPID:
 		{
-			AST tmp2096_AST_in = (AST)_t;
+			AST tmp2074_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTPOPUP:
 		{
-			AST tmp2097_AST_in = (AST)_t;
+			AST tmp2075_AST_in = (AST)_t;
 			match(_t,CONTEXTPOPUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROL:
 		{
-			AST tmp2098_AST_in = (AST)_t;
+			AST tmp2076_AST_in = (AST)_t;
 			match(_t,CONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp2099_AST_in = (AST)_t;
+			AST tmp2077_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONVERT:
 		{
-			AST tmp2100_AST_in = (AST)_t;
+			AST tmp2078_AST_in = (AST)_t;
 			match(_t,CONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONVERT3DCOLORS:
 		{
-			AST tmp2101_AST_in = (AST)_t;
+			AST tmp2079_AST_in = (AST)_t;
 			match(_t,CONVERT3DCOLORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COPYLOB:
 		{
-			AST tmp2102_AST_in = (AST)_t;
+			AST tmp2080_AST_in = (AST)_t;
 			match(_t,COPYLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST tmp2103_AST_in = (AST)_t;
+			AST tmp2081_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNTOF:
 		{
-			AST tmp2104_AST_in = (AST)_t;
+			AST tmp2082_AST_in = (AST)_t;
 			match(_t,COUNTOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CREATE:
 		{
-			AST tmp2105_AST_in = (AST)_t;
+			AST tmp2083_AST_in = (AST)_t;
 			match(_t,CREATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CREATETESTFILE:
 		{
-			AST tmp2106_AST_in = (AST)_t;
+			AST tmp2084_AST_in = (AST)_t;
 			match(_t,CREATETESTFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENCY:
 		{
-			AST tmp2107_AST_in = (AST)_t;
+			AST tmp2085_AST_in = (AST)_t;
 			match(_t,CURRENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENT:
 		{
-			AST tmp2108_AST_in = (AST)_t;
+			AST tmp2086_AST_in = (AST)_t;
 			match(_t,CURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTCHANGED:
 		{
-			AST tmp2109_AST_in = (AST)_t;
+			AST tmp2087_AST_in = (AST)_t;
 			match(_t,CURRENTCHANGED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTENVIRONMENT:
 		{
-			AST tmp2110_AST_in = (AST)_t;
+			AST tmp2088_AST_in = (AST)_t;
 			match(_t,CURRENTENVIRONMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTLANGUAGE:
 		{
-			AST tmp2111_AST_in = (AST)_t;
+			AST tmp2089_AST_in = (AST)_t;
 			match(_t,CURRENTLANGUAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTRESULTROW:
 		{
-			AST tmp2112_AST_in = (AST)_t;
+			AST tmp2090_AST_in = (AST)_t;
 			match(_t,CURRENTRESULTROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTVALUE:
 		{
-			AST tmp2113_AST_in = (AST)_t;
+			AST tmp2091_AST_in = (AST)_t;
 			match(_t,CURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp2114_AST_in = (AST)_t;
+			AST tmp2092_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURSOR:
 		{
-			AST tmp2115_AST_in = (AST)_t;
+			AST tmp2093_AST_in = (AST)_t;
 			match(_t,CURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATABASE:
 		{
-			AST tmp2116_AST_in = (AST)_t;
+			AST tmp2094_AST_in = (AST)_t;
 			match(_t,DATABASE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATABIND:
 		{
-			AST tmp2117_AST_in = (AST)_t;
+			AST tmp2095_AST_in = (AST)_t;
 			match(_t,DATABIND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATARELATION:
 		{
-			AST tmp2118_AST_in = (AST)_t;
+			AST tmp2096_AST_in = (AST)_t;
 			match(_t,DATARELATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASERVERS:
 		{
-			AST tmp2119_AST_in = (AST)_t;
+			AST tmp2097_AST_in = (AST)_t;
 			match(_t,DATASERVERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASET:
 		{
-			AST tmp2120_AST_in = (AST)_t;
+			AST tmp2098_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASETHANDLE:
 		{
-			AST tmp2121_AST_in = (AST)_t;
+			AST tmp2099_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCE:
 		{
-			AST tmp2122_AST_in = (AST)_t;
+			AST tmp2100_AST_in = (AST)_t;
 			match(_t,DATASOURCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST tmp2123_AST_in = (AST)_t;
+			AST tmp2101_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST tmp2124_AST_in = (AST)_t;
+			AST tmp2102_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST tmp2125_AST_in = (AST)_t;
+			AST tmp2103_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DAY:
 		{
-			AST tmp2126_AST_in = (AST)_t;
+			AST tmp2104_AST_in = (AST)_t;
 			match(_t,DAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBCODEPAGE:
 		{
-			AST tmp2127_AST_in = (AST)_t;
+			AST tmp2105_AST_in = (AST)_t;
 			match(_t,DBCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBCOLLATION:
 		{
-			AST tmp2128_AST_in = (AST)_t;
+			AST tmp2106_AST_in = (AST)_t;
 			match(_t,DBCOLLATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBIMS:
 		{
-			AST tmp2129_AST_in = (AST)_t;
+			AST tmp2107_AST_in = (AST)_t;
 			match(_t,DBIMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBNAME:
 		{
-			AST tmp2130_AST_in = (AST)_t;
+			AST tmp2108_AST_in = (AST)_t;
 			match(_t,DBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBPARAM:
 		{
-			AST tmp2131_AST_in = (AST)_t;
+			AST tmp2109_AST_in = (AST)_t;
 			match(_t,DBPARAM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBRESTRICTIONS:
 		{
-			AST tmp2132_AST_in = (AST)_t;
+			AST tmp2110_AST_in = (AST)_t;
 			match(_t,DBRESTRICTIONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBTASKID:
 		{
-			AST tmp2133_AST_in = (AST)_t;
+			AST tmp2111_AST_in = (AST)_t;
 			match(_t,DBTASKID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBTYPE:
 		{
-			AST tmp2134_AST_in = (AST)_t;
+			AST tmp2112_AST_in = (AST)_t;
 			match(_t,DBTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBVERSION:
 		{
-			AST tmp2135_AST_in = (AST)_t;
+			AST tmp2113_AST_in = (AST)_t;
 			match(_t,DBVERSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DCOLOR:
 		{
-			AST tmp2136_AST_in = (AST)_t;
+			AST tmp2114_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DDE:
 		{
-			AST tmp2137_AST_in = (AST)_t;
+			AST tmp2115_AST_in = (AST)_t;
 			match(_t,DDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBLANK:
 		{
-			AST tmp2138_AST_in = (AST)_t;
+			AST tmp2116_AST_in = (AST)_t;
 			match(_t,DEBLANK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUG:
 		{
-			AST tmp2139_AST_in = (AST)_t;
+			AST tmp2117_AST_in = (AST)_t;
 			match(_t,DEBUG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUGLIST:
 		{
-			AST tmp2140_AST_in = (AST)_t;
+			AST tmp2118_AST_in = (AST)_t;
 			match(_t,DEBUGLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUGGER:
 		{
-			AST tmp2141_AST_in = (AST)_t;
+			AST tmp2119_AST_in = (AST)_t;
 			match(_t,DEBUGGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST tmp2142_AST_in = (AST)_t;
+			AST tmp2120_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMALS:
 		{
-			AST tmp2143_AST_in = (AST)_t;
+			AST tmp2121_AST_in = (AST)_t;
 			match(_t,DECIMALS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECLARE:
 		{
-			AST tmp2144_AST_in = (AST)_t;
+			AST tmp2122_AST_in = (AST)_t;
 			match(_t,DECLARE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULT:
 		{
-			AST tmp2145_AST_in = (AST)_t;
+			AST tmp2123_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTBUTTON:
 		{
-			AST tmp2146_AST_in = (AST)_t;
+			AST tmp2124_AST_in = (AST)_t;
 			match(_t,DEFAULTBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTEXTENSION:
 		{
-			AST tmp2147_AST_in = (AST)_t;
+			AST tmp2125_AST_in = (AST)_t;
 			match(_t,DEFAULTEXTENSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTNOXLATE:
 		{
-			AST tmp2148_AST_in = (AST)_t;
+			AST tmp2126_AST_in = (AST)_t;
 			match(_t,DEFAULTNOXLATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTWINDOW:
 		{
-			AST tmp2149_AST_in = (AST)_t;
+			AST tmp2127_AST_in = (AST)_t;
 			match(_t,DEFAULTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFERLOBFETCH:
 		{
-			AST tmp2150_AST_in = (AST)_t;
+			AST tmp2128_AST_in = (AST)_t;
 			match(_t,DEFERLOBFETCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFINE:
 		{
-			AST tmp2151_AST_in = (AST)_t;
+			AST tmp2129_AST_in = (AST)_t;
 			match(_t,DEFINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFINED:
 		{
-			AST tmp2152_AST_in = (AST)_t;
+			AST tmp2130_AST_in = (AST)_t;
 			match(_t,DEFINED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELETE_KW:
 		{
-			AST tmp2153_AST_in = (AST)_t;
+			AST tmp2131_AST_in = (AST)_t;
 			match(_t,DELETE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELETERESULTLISTENTRY:
 		{
-			AST tmp2154_AST_in = (AST)_t;
+			AST tmp2132_AST_in = (AST)_t;
 			match(_t,DELETERESULTLISTENTRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELIMITER:
 		{
-			AST tmp2155_AST_in = (AST)_t;
+			AST tmp2133_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESC:
 		{
-			AST tmp2156_AST_in = (AST)_t;
+			AST tmp2134_AST_in = (AST)_t;
 			match(_t,DESC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESCENDING:
 		{
-			AST tmp2157_AST_in = (AST)_t;
+			AST tmp2135_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESELECTION:
 		{
-			AST tmp2158_AST_in = (AST)_t;
+			AST tmp2136_AST_in = (AST)_t;
 			match(_t,DESELECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp2159_AST_in = (AST)_t;
+			AST tmp2137_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGHELP:
 		{
-			AST tmp2160_AST_in = (AST)_t;
+			AST tmp2138_AST_in = (AST)_t;
 			match(_t,DIALOGHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DICTIONARY:
 		{
-			AST tmp2161_AST_in = (AST)_t;
+			AST tmp2139_AST_in = (AST)_t;
 			match(_t,DICTIONARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIR:
 		{
-			AST tmp2162_AST_in = (AST)_t;
+			AST tmp2140_AST_in = (AST)_t;
 			match(_t,DIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISABLE:
 		{
-			AST tmp2163_AST_in = (AST)_t;
+			AST tmp2141_AST_in = (AST)_t;
 			match(_t,DISABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISABLEAUTOZAP:
 		{
-			AST tmp2164_AST_in = (AST)_t;
+			AST tmp2142_AST_in = (AST)_t;
 			match(_t,DISABLEAUTOZAP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISABLED:
 		{
-			AST tmp2165_AST_in = (AST)_t;
+			AST tmp2143_AST_in = (AST)_t;
 			match(_t,DISABLED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISCONNECT:
 		{
-			AST tmp2166_AST_in = (AST)_t;
+			AST tmp2144_AST_in = (AST)_t;
 			match(_t,DISCONNECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISPLAY:
 		{
-			AST tmp2167_AST_in = (AST)_t;
+			AST tmp2145_AST_in = (AST)_t;
 			match(_t,DISPLAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISTINCT:
 		{
-			AST tmp2168_AST_in = (AST)_t;
+			AST tmp2146_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DO:
 		{
-			AST tmp2169_AST_in = (AST)_t;
+			AST tmp2147_AST_in = (AST)_t;
 			match(_t,DO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOS:
 		{
-			AST tmp2170_AST_in = (AST)_t;
+			AST tmp2148_AST_in = (AST)_t;
 			match(_t,DOS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOUBLE:
 		{
-			AST tmp2171_AST_in = (AST)_t;
+			AST tmp2149_AST_in = (AST)_t;
 			match(_t,DOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOWN:
 		{
-			AST tmp2172_AST_in = (AST)_t;
+			AST tmp2150_AST_in = (AST)_t;
 			match(_t,DOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROP:
 		{
-			AST tmp2173_AST_in = (AST)_t;
+			AST tmp2151_AST_in = (AST)_t;
 			match(_t,DROP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPDOWN:
 		{
-			AST tmp2174_AST_in = (AST)_t;
+			AST tmp2152_AST_in = (AST)_t;
 			match(_t,DROPDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPDOWNLIST:
 		{
-			AST tmp2175_AST_in = (AST)_t;
+			AST tmp2153_AST_in = (AST)_t;
 			match(_t,DROPDOWNLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPFILENOTIFY:
 		{
-			AST tmp2176_AST_in = (AST)_t;
+			AST tmp2154_AST_in = (AST)_t;
 			match(_t,DROPFILENOTIFY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPTARGET:
 		{
-			AST tmp2177_AST_in = (AST)_t;
+			AST tmp2155_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DUMP:
 		{
-			AST tmp2178_AST_in = (AST)_t;
+			AST tmp2156_AST_in = (AST)_t;
 			match(_t,DUMP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMIC:
 		{
-			AST tmp2179_AST_in = (AST)_t;
+			AST tmp2157_AST_in = (AST)_t;
 			match(_t,DYNAMIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICCURRENTVALUE:
 		{
-			AST tmp2180_AST_in = (AST)_t;
+			AST tmp2158_AST_in = (AST)_t;
 			match(_t,DYNAMICCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICNEXTVALUE:
 		{
-			AST tmp2181_AST_in = (AST)_t;
+			AST tmp2159_AST_in = (AST)_t;
 			match(_t,DYNAMICNEXTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICFUNCTION:
 		{
-			AST tmp2182_AST_in = (AST)_t;
+			AST tmp2160_AST_in = (AST)_t;
 			match(_t,DYNAMICFUNCTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EACH:
 		{
-			AST tmp2183_AST_in = (AST)_t;
+			AST tmp2161_AST_in = (AST)_t;
 			match(_t,EACH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ECHO:
 		{
-			AST tmp2184_AST_in = (AST)_t;
+			AST tmp2162_AST_in = (AST)_t;
 			match(_t,ECHO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDGECHARS:
 		{
-			AST tmp2185_AST_in = (AST)_t;
+			AST tmp2163_AST_in = (AST)_t;
 			match(_t,EDGECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDGEPIXELS:
 		{
-			AST tmp2186_AST_in = (AST)_t;
+			AST tmp2164_AST_in = (AST)_t;
 			match(_t,EDGEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITUNDO:
 		{
-			AST tmp2187_AST_in = (AST)_t;
+			AST tmp2165_AST_in = (AST)_t;
 			match(_t,EDITUNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITING:
 		{
-			AST tmp2188_AST_in = (AST)_t;
+			AST tmp2166_AST_in = (AST)_t;
 			match(_t,EDITING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp2189_AST_in = (AST)_t;
+			AST tmp2167_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ELSE:
 		{
-			AST tmp2190_AST_in = (AST)_t;
+			AST tmp2168_AST_in = (AST)_t;
 			match(_t,ELSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EMPTY:
 		{
-			AST tmp2191_AST_in = (AST)_t;
+			AST tmp2169_AST_in = (AST)_t;
 			match(_t,EMPTY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENABLE:
 		{
-			AST tmp2192_AST_in = (AST)_t;
+			AST tmp2170_AST_in = (AST)_t;
 			match(_t,ENABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCODE:
 		{
-			AST tmp2193_AST_in = (AST)_t;
+			AST tmp2171_AST_in = (AST)_t;
 			match(_t,ENCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST tmp2194_AST_in = (AST)_t;
+			AST tmp2172_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDMOVE:
 		{
-			AST tmp2195_AST_in = (AST)_t;
+			AST tmp2173_AST_in = (AST)_t;
 			match(_t,ENDMOVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDRESIZE:
 		{
-			AST tmp2196_AST_in = (AST)_t;
+			AST tmp2174_AST_in = (AST)_t;
 			match(_t,ENDRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDROWRESIZE:
 		{
-			AST tmp2197_AST_in = (AST)_t;
+			AST tmp2175_AST_in = (AST)_t;
 			match(_t,ENDROWRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDKEY:
 		{
-			AST tmp2198_AST_in = (AST)_t;
+			AST tmp2176_AST_in = (AST)_t;
 			match(_t,ENDKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENTERED:
 		{
-			AST tmp2199_AST_in = (AST)_t;
+			AST tmp2177_AST_in = (AST)_t;
 			match(_t,ENTERED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENTRY:
 		{
-			AST tmp2200_AST_in = (AST)_t;
+			AST tmp2178_AST_in = (AST)_t;
 			match(_t,ENTRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EQ:
 		{
-			AST tmp2201_AST_in = (AST)_t;
+			AST tmp2179_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERROR:
 		{
-			AST tmp2202_AST_in = (AST)_t;
+			AST tmp2180_AST_in = (AST)_t;
 			match(_t,ERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORCODE:
 		{
-			AST tmp2203_AST_in = (AST)_t;
+			AST tmp2181_AST_in = (AST)_t;
 			match(_t,ERRORCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORSTATUS:
 		{
-			AST tmp2204_AST_in = (AST)_t;
+			AST tmp2182_AST_in = (AST)_t;
 			match(_t,ERRORSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ESCAPE:
 		{
-			AST tmp2205_AST_in = (AST)_t;
+			AST tmp2183_AST_in = (AST)_t;
 			match(_t,ESCAPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ETIME_KW:
 		{
-			AST tmp2206_AST_in = (AST)_t;
+			AST tmp2184_AST_in = (AST)_t;
 			match(_t,ETIME_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EVENTPROCEDURE:
 		{
-			AST tmp2207_AST_in = (AST)_t;
+			AST tmp2185_AST_in = (AST)_t;
 			match(_t,EVENTPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EVENTS:
 		{
-			AST tmp2208_AST_in = (AST)_t;
+			AST tmp2186_AST_in = (AST)_t;
 			match(_t,EVENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCEPT:
 		{
-			AST tmp2209_AST_in = (AST)_t;
+			AST tmp2187_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVEID:
 		{
-			AST tmp2210_AST_in = (AST)_t;
+			AST tmp2188_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp2211_AST_in = (AST)_t;
+			AST tmp2189_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVEWEBUSER:
 		{
-			AST tmp2212_AST_in = (AST)_t;
+			AST tmp2190_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEWEBUSER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXECUTE:
 		{
-			AST tmp2213_AST_in = (AST)_t;
+			AST tmp2191_AST_in = (AST)_t;
 			match(_t,EXECUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXISTS:
 		{
-			AST tmp2214_AST_in = (AST)_t;
+			AST tmp2192_AST_in = (AST)_t;
 			match(_t,EXISTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXP:
 		{
-			AST tmp2215_AST_in = (AST)_t;
+			AST tmp2193_AST_in = (AST)_t;
 			match(_t,EXP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPAND:
 		{
-			AST tmp2216_AST_in = (AST)_t;
+			AST tmp2194_AST_in = (AST)_t;
 			match(_t,EXPAND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPANDABLE:
 		{
-			AST tmp2217_AST_in = (AST)_t;
+			AST tmp2195_AST_in = (AST)_t;
 			match(_t,EXPANDABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPLICIT:
 		{
-			AST tmp2218_AST_in = (AST)_t;
+			AST tmp2196_AST_in = (AST)_t;
 			match(_t,EXPLICIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPORT:
 		{
-			AST tmp2219_AST_in = (AST)_t;
+			AST tmp2197_AST_in = (AST)_t;
 			match(_t,EXPORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTENDED:
 		{
-			AST tmp2220_AST_in = (AST)_t;
+			AST tmp2198_AST_in = (AST)_t;
 			match(_t,EXTENDED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTENT:
 		{
-			AST tmp2221_AST_in = (AST)_t;
+			AST tmp2199_AST_in = (AST)_t;
 			match(_t,EXTENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTERNAL:
 		{
-			AST tmp2222_AST_in = (AST)_t;
+			AST tmp2200_AST_in = (AST)_t;
 			match(_t,EXTERNAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FALSE_KW:
 		{
-			AST tmp2223_AST_in = (AST)_t;
+			AST tmp2201_AST_in = (AST)_t;
 			match(_t,FALSE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FETCH:
 		{
-			AST tmp2224_AST_in = (AST)_t;
+			AST tmp2202_AST_in = (AST)_t;
 			match(_t,FETCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FGCOLOR:
 		{
-			AST tmp2225_AST_in = (AST)_t;
+			AST tmp2203_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp2226_AST_in = (AST)_t;
+			AST tmp2204_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELDS:
 		{
-			AST tmp2227_AST_in = (AST)_t;
+			AST tmp2205_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILE:
 		{
-			AST tmp2228_AST_in = (AST)_t;
+			AST tmp2206_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILEINFORMATION:
 		{
-			AST tmp2229_AST_in = (AST)_t;
+			AST tmp2207_AST_in = (AST)_t;
 			match(_t,FILEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILL:
 		{
-			AST tmp2230_AST_in = (AST)_t;
+			AST tmp2208_AST_in = (AST)_t;
 			match(_t,FILL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp2231_AST_in = (AST)_t;
+			AST tmp2209_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILTERS:
 		{
-			AST tmp2232_AST_in = (AST)_t;
+			AST tmp2210_AST_in = (AST)_t;
 			match(_t,FILTERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIND:
 		{
-			AST tmp2233_AST_in = (AST)_t;
+			AST tmp2211_AST_in = (AST)_t;
 			match(_t,FIND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDCASESENSITIVE:
 		{
-			AST tmp2234_AST_in = (AST)_t;
+			AST tmp2212_AST_in = (AST)_t;
 			match(_t,FINDCASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDER:
 		{
-			AST tmp2235_AST_in = (AST)_t;
+			AST tmp2213_AST_in = (AST)_t;
 			match(_t,FINDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDGLOBAL:
 		{
-			AST tmp2236_AST_in = (AST)_t;
+			AST tmp2214_AST_in = (AST)_t;
 			match(_t,FINDGLOBAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDNEXTOCCURRENCE:
 		{
-			AST tmp2237_AST_in = (AST)_t;
+			AST tmp2215_AST_in = (AST)_t;
 			match(_t,FINDNEXTOCCURRENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDPREVOCCURRENCE:
 		{
-			AST tmp2238_AST_in = (AST)_t;
+			AST tmp2216_AST_in = (AST)_t;
 			match(_t,FINDPREVOCCURRENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDSELECT:
 		{
-			AST tmp2239_AST_in = (AST)_t;
+			AST tmp2217_AST_in = (AST)_t;
 			match(_t,FINDSELECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDWRAPAROUND:
 		{
-			AST tmp2240_AST_in = (AST)_t;
+			AST tmp2218_AST_in = (AST)_t;
 			match(_t,FINDWRAPAROUND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRST:
 		{
-			AST tmp2241_AST_in = (AST)_t;
+			AST tmp2219_AST_in = (AST)_t;
 			match(_t,FIRST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRSTOF:
 		{
-			AST tmp2242_AST_in = (AST)_t;
+			AST tmp2220_AST_in = (AST)_t;
 			match(_t,FIRSTOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FITLASTCOLUMN:
 		{
-			AST tmp2243_AST_in = (AST)_t;
+			AST tmp2221_AST_in = (AST)_t;
 			match(_t,FITLASTCOLUMN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIXCODEPAGE:
 		{
-			AST tmp2244_AST_in = (AST)_t;
+			AST tmp2222_AST_in = (AST)_t;
 			match(_t,FIXCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIXEDONLY:
 		{
-			AST tmp2245_AST_in = (AST)_t;
+			AST tmp2223_AST_in = (AST)_t;
 			match(_t,FIXEDONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLATBUTTON:
 		{
-			AST tmp2246_AST_in = (AST)_t;
+			AST tmp2224_AST_in = (AST)_t;
 			match(_t,FLATBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp2247_AST_in = (AST)_t;
+			AST tmp2225_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FOCUS:
 		{
-			AST tmp2248_AST_in = (AST)_t;
+			AST tmp2226_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONT:
 		{
-			AST tmp2249_AST_in = (AST)_t;
+			AST tmp2227_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONTTABLE:
 		{
-			AST tmp2250_AST_in = (AST)_t;
+			AST tmp2228_AST_in = (AST)_t;
 			match(_t,FONTTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FOR:
 		{
-			AST tmp2251_AST_in = (AST)_t;
+			AST tmp2229_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORCEFILE:
 		{
-			AST tmp2252_AST_in = (AST)_t;
+			AST tmp2230_AST_in = (AST)_t;
 			match(_t,FORCEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMINPUT:
 		{
-			AST tmp2253_AST_in = (AST)_t;
+			AST tmp2231_AST_in = (AST)_t;
 			match(_t,FORMINPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMAT:
 		{
-			AST tmp2254_AST_in = (AST)_t;
+			AST tmp2232_AST_in = (AST)_t;
 			match(_t,FORMAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORWARDS:
 		{
-			AST tmp2255_AST_in = (AST)_t;
+			AST tmp2233_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp2256_AST_in = (AST)_t;
+			AST tmp2234_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMECOL:
 		{
-			AST tmp2257_AST_in = (AST)_t;
+			AST tmp2235_AST_in = (AST)_t;
 			match(_t,FRAMECOL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDB:
 		{
-			AST tmp2258_AST_in = (AST)_t;
+			AST tmp2236_AST_in = (AST)_t;
 			match(_t,FRAMEDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDOWN:
 		{
-			AST tmp2259_AST_in = (AST)_t;
+			AST tmp2237_AST_in = (AST)_t;
 			match(_t,FRAMEDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFIELD:
 		{
-			AST tmp2260_AST_in = (AST)_t;
+			AST tmp2238_AST_in = (AST)_t;
 			match(_t,FRAMEFIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFILE:
 		{
-			AST tmp2261_AST_in = (AST)_t;
+			AST tmp2239_AST_in = (AST)_t;
 			match(_t,FRAMEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEINDEX:
 		{
-			AST tmp2262_AST_in = (AST)_t;
+			AST tmp2240_AST_in = (AST)_t;
 			match(_t,FRAMEINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMELINE:
 		{
-			AST tmp2263_AST_in = (AST)_t;
+			AST tmp2241_AST_in = (AST)_t;
 			match(_t,FRAMELINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMENAME:
 		{
-			AST tmp2264_AST_in = (AST)_t;
+			AST tmp2242_AST_in = (AST)_t;
 			match(_t,FRAMENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEROW:
 		{
-			AST tmp2265_AST_in = (AST)_t;
+			AST tmp2243_AST_in = (AST)_t;
 			match(_t,FRAMEROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEVALUE:
 		{
-			AST tmp2266_AST_in = (AST)_t;
+			AST tmp2244_AST_in = (AST)_t;
 			match(_t,FRAMEVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FREQUENCY:
 		{
-			AST tmp2267_AST_in = (AST)_t;
+			AST tmp2245_AST_in = (AST)_t;
 			match(_t,FREQUENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FROM:
 		{
-			AST tmp2268_AST_in = (AST)_t;
+			AST tmp2246_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FROMCURRENT:
 		{
-			AST tmp2269_AST_in = (AST)_t;
+			AST tmp2247_AST_in = (AST)_t;
 			match(_t,FROMCURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FUNCTION:
 		{
-			AST tmp2270_AST_in = (AST)_t;
+			AST tmp2248_AST_in = (AST)_t;
 			match(_t,FUNCTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FUNCTIONCALLTYPE:
 		{
-			AST tmp2271_AST_in = (AST)_t;
+			AST tmp2249_AST_in = (AST)_t;
 			match(_t,FUNCTIONCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GE:
 		{
-			AST tmp2272_AST_in = (AST)_t;
+			AST tmp2250_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEMD5:
 		{
-			AST tmp2273_AST_in = (AST)_t;
+			AST tmp2251_AST_in = (AST)_t;
 			match(_t,GENERATEMD5);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GET:
 		{
-			AST tmp2274_AST_in = (AST)_t;
+			AST tmp2252_AST_in = (AST)_t;
 			match(_t,GET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETATTRCALLTYPE:
 		{
-			AST tmp2275_AST_in = (AST)_t;
+			AST tmp2253_AST_in = (AST)_t;
 			match(_t,GETATTRCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBITS:
 		{
-			AST tmp2276_AST_in = (AST)_t;
+			AST tmp2254_AST_in = (AST)_t;
 			match(_t,GETBITS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBUFFERHANDLE:
 		{
-			AST tmp2277_AST_in = (AST)_t;
+			AST tmp2255_AST_in = (AST)_t;
 			match(_t,GETBUFFERHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTE:
 		{
-			AST tmp2278_AST_in = (AST)_t;
+			AST tmp2256_AST_in = (AST)_t;
 			match(_t,GETBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTES:
 		{
-			AST tmp2279_AST_in = (AST)_t;
+			AST tmp2257_AST_in = (AST)_t;
 			match(_t,GETBYTES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTEORDER:
 		{
-			AST tmp2280_AST_in = (AST)_t;
+			AST tmp2258_AST_in = (AST)_t;
 			match(_t,GETBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGILIST:
 		{
-			AST tmp2281_AST_in = (AST)_t;
+			AST tmp2259_AST_in = (AST)_t;
 			match(_t,GETCGILIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGIVALUE:
 		{
-			AST tmp2282_AST_in = (AST)_t;
+			AST tmp2260_AST_in = (AST)_t;
 			match(_t,GETCGIVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCODEPAGES:
 		{
-			AST tmp2283_AST_in = (AST)_t;
+			AST tmp2261_AST_in = (AST)_t;
 			match(_t,GETCODEPAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCOLLATIONS:
 		{
-			AST tmp2284_AST_in = (AST)_t;
+			AST tmp2262_AST_in = (AST)_t;
 			match(_t,GETCOLLATIONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCONFIGVALUE:
 		{
-			AST tmp2285_AST_in = (AST)_t;
+			AST tmp2263_AST_in = (AST)_t;
 			match(_t,GETCONFIGVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETDIR:
 		{
-			AST tmp2286_AST_in = (AST)_t;
+			AST tmp2264_AST_in = (AST)_t;
 			match(_t,GETDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETDOUBLE:
 		{
-			AST tmp2287_AST_in = (AST)_t;
+			AST tmp2265_AST_in = (AST)_t;
 			match(_t,GETDOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETFILE:
 		{
-			AST tmp2288_AST_in = (AST)_t;
+			AST tmp2266_AST_in = (AST)_t;
 			match(_t,GETFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETFLOAT:
 		{
-			AST tmp2289_AST_in = (AST)_t;
+			AST tmp2267_AST_in = (AST)_t;
 			match(_t,GETFLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETKEYVALUE:
 		{
-			AST tmp2290_AST_in = (AST)_t;
+			AST tmp2268_AST_in = (AST)_t;
 			match(_t,GETKEYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLICENSE:
 		{
-			AST tmp2291_AST_in = (AST)_t;
+			AST tmp2269_AST_in = (AST)_t;
 			match(_t,GETLICENSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLONG:
 		{
-			AST tmp2292_AST_in = (AST)_t;
+			AST tmp2270_AST_in = (AST)_t;
 			match(_t,GETLONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETPOINTERVALUE:
 		{
-			AST tmp2293_AST_in = (AST)_t;
+			AST tmp2271_AST_in = (AST)_t;
 			match(_t,GETPOINTERVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSHORT:
 		{
-			AST tmp2294_AST_in = (AST)_t;
+			AST tmp2272_AST_in = (AST)_t;
 			match(_t,GETSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSIZE:
 		{
-			AST tmp2295_AST_in = (AST)_t;
+			AST tmp2273_AST_in = (AST)_t;
 			match(_t,GETSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSTRING:
 		{
-			AST tmp2296_AST_in = (AST)_t;
+			AST tmp2274_AST_in = (AST)_t;
 			match(_t,GETSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETUNSIGNEDSHORT:
 		{
-			AST tmp2297_AST_in = (AST)_t;
+			AST tmp2275_AST_in = (AST)_t;
 			match(_t,GETUNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GLOBAL:
 		{
-			AST tmp2298_AST_in = (AST)_t;
+			AST tmp2276_AST_in = (AST)_t;
 			match(_t,GLOBAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GOON:
 		{
-			AST tmp2299_AST_in = (AST)_t;
+			AST tmp2277_AST_in = (AST)_t;
 			match(_t,GOON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GOPENDING:
 		{
-			AST tmp2300_AST_in = (AST)_t;
+			AST tmp2278_AST_in = (AST)_t;
 			match(_t,GOPENDING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GRANT:
 		{
-			AST tmp2301_AST_in = (AST)_t;
+			AST tmp2279_AST_in = (AST)_t;
 			match(_t,GRANT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GRAPHICEDGE:
 		{
-			AST tmp2302_AST_in = (AST)_t;
+			AST tmp2280_AST_in = (AST)_t;
 			match(_t,GRAPHICEDGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GROUP:
 		{
-			AST tmp2303_AST_in = (AST)_t;
+			AST tmp2281_AST_in = (AST)_t;
 			match(_t,GROUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GTHAN:
 		{
-			AST tmp2304_AST_in = (AST)_t;
+			AST tmp2282_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HANDLE:
 		{
-			AST tmp2305_AST_in = (AST)_t;
+			AST tmp2283_AST_in = (AST)_t;
 			match(_t,HANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HAVING:
 		{
-			AST tmp2306_AST_in = (AST)_t;
+			AST tmp2284_AST_in = (AST)_t;
 			match(_t,HAVING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HEADER:
 		{
-			AST tmp2307_AST_in = (AST)_t;
+			AST tmp2285_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HEIGHT:
 		{
-			AST tmp2308_AST_in = (AST)_t;
+			AST tmp2286_AST_in = (AST)_t;
 			match(_t,HEIGHT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELP:
 		{
-			AST tmp2309_AST_in = (AST)_t;
+			AST tmp2287_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELPTOPIC:
 		{
-			AST tmp2310_AST_in = (AST)_t;
+			AST tmp2288_AST_in = (AST)_t;
 			match(_t,HELPTOPIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HIDE:
 		{
-			AST tmp2311_AST_in = (AST)_t;
+			AST tmp2289_AST_in = (AST)_t;
 			match(_t,HIDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HINT:
 		{
-			AST tmp2312_AST_in = (AST)_t;
+			AST tmp2290_AST_in = (AST)_t;
 			match(_t,HINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HORIZONTAL:
 		{
-			AST tmp2313_AST_in = (AST)_t;
+			AST tmp2291_AST_in = (AST)_t;
 			match(_t,HORIZONTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HOSTBYTEORDER:
 		{
-			AST tmp2314_AST_in = (AST)_t;
+			AST tmp2292_AST_in = (AST)_t;
 			match(_t,HOSTBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLENDOFLINE:
 		{
-			AST tmp2315_AST_in = (AST)_t;
+			AST tmp2293_AST_in = (AST)_t;
 			match(_t,HTMLENDOFLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLFRAMEBEGIN:
 		{
-			AST tmp2316_AST_in = (AST)_t;
+			AST tmp2294_AST_in = (AST)_t;
 			match(_t,HTMLFRAMEBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLFRAMEEND:
 		{
-			AST tmp2317_AST_in = (AST)_t;
+			AST tmp2295_AST_in = (AST)_t;
 			match(_t,HTMLFRAMEEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLHEADERBEGIN:
 		{
-			AST tmp2318_AST_in = (AST)_t;
+			AST tmp2296_AST_in = (AST)_t;
 			match(_t,HTMLHEADERBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLHEADEREND:
 		{
-			AST tmp2319_AST_in = (AST)_t;
+			AST tmp2297_AST_in = (AST)_t;
 			match(_t,HTMLHEADEREND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLTITLEBEGIN:
 		{
-			AST tmp2320_AST_in = (AST)_t;
+			AST tmp2298_AST_in = (AST)_t;
 			match(_t,HTMLTITLEBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLTITLEEND:
 		{
-			AST tmp2321_AST_in = (AST)_t;
+			AST tmp2299_AST_in = (AST)_t;
 			match(_t,HTMLTITLEEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IF:
 		{
-			AST tmp2322_AST_in = (AST)_t;
+			AST tmp2300_AST_in = (AST)_t;
 			match(_t,IF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp2323_AST_in = (AST)_t;
+			AST tmp2301_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEDOWN:
 		{
-			AST tmp2324_AST_in = (AST)_t;
+			AST tmp2302_AST_in = (AST)_t;
 			match(_t,IMAGEDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEINSENSITIVE:
 		{
-			AST tmp2325_AST_in = (AST)_t;
+			AST tmp2303_AST_in = (AST)_t;
 			match(_t,IMAGEINSENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZE:
 		{
-			AST tmp2326_AST_in = (AST)_t;
+			AST tmp2304_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZECHARS:
 		{
-			AST tmp2327_AST_in = (AST)_t;
+			AST tmp2305_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZEPIXELS:
 		{
-			AST tmp2328_AST_in = (AST)_t;
+			AST tmp2306_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEUP:
 		{
-			AST tmp2329_AST_in = (AST)_t;
+			AST tmp2307_AST_in = (AST)_t;
 			match(_t,IMAGEUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMPORT:
 		{
-			AST tmp2330_AST_in = (AST)_t;
+			AST tmp2308_AST_in = (AST)_t;
 			match(_t,IMPORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IN_KW:
 		{
-			AST tmp2331_AST_in = (AST)_t;
+			AST tmp2309_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INCREMENTEXCLUSIVEID:
 		{
-			AST tmp2332_AST_in = (AST)_t;
+			AST tmp2310_AST_in = (AST)_t;
 			match(_t,INCREMENTEXCLUSIVEID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEX:
 		{
-			AST tmp2333_AST_in = (AST)_t;
+			AST tmp2311_AST_in = (AST)_t;
 			match(_t,INDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEXHINT:
 		{
-			AST tmp2334_AST_in = (AST)_t;
+			AST tmp2312_AST_in = (AST)_t;
 			match(_t,INDEXHINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEXEDREPOSITION:
 		{
-			AST tmp2335_AST_in = (AST)_t;
+			AST tmp2313_AST_in = (AST)_t;
 			match(_t,INDEXEDREPOSITION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDICATOR:
 		{
-			AST tmp2336_AST_in = (AST)_t;
+			AST tmp2314_AST_in = (AST)_t;
 			match(_t,INDICATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INFORMATION:
 		{
-			AST tmp2337_AST_in = (AST)_t;
+			AST tmp2315_AST_in = (AST)_t;
 			match(_t,INFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIAL:
 		{
-			AST tmp2338_AST_in = (AST)_t;
+			AST tmp2316_AST_in = (AST)_t;
 			match(_t,INITIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIALDIR:
 		{
-			AST tmp2339_AST_in = (AST)_t;
+			AST tmp2317_AST_in = (AST)_t;
 			match(_t,INITIALDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIALFILTER:
 		{
-			AST tmp2340_AST_in = (AST)_t;
+			AST tmp2318_AST_in = (AST)_t;
 			match(_t,INITIALFILTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIATE:
 		{
-			AST tmp2341_AST_in = (AST)_t;
+			AST tmp2319_AST_in = (AST)_t;
 			match(_t,INITIATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNER:
 		{
-			AST tmp2342_AST_in = (AST)_t;
+			AST tmp2320_AST_in = (AST)_t;
 			match(_t,INNER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNERCHARS:
 		{
-			AST tmp2343_AST_in = (AST)_t;
+			AST tmp2321_AST_in = (AST)_t;
 			match(_t,INNERCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNERLINES:
 		{
-			AST tmp2344_AST_in = (AST)_t;
+			AST tmp2322_AST_in = (AST)_t;
 			match(_t,INNERLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUT:
 		{
-			AST tmp2345_AST_in = (AST)_t;
+			AST tmp2323_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUTOUTPUT:
 		{
-			AST tmp2346_AST_in = (AST)_t;
+			AST tmp2324_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INSERT:
 		{
-			AST tmp2347_AST_in = (AST)_t;
+			AST tmp2325_AST_in = (AST)_t;
 			match(_t,INSERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST tmp2348_AST_in = (AST)_t;
+			AST tmp2326_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTERVAL:
 		{
-			AST tmp2349_AST_in = (AST)_t;
+			AST tmp2327_AST_in = (AST)_t;
 			match(_t,INTERVAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTO:
 		{
-			AST tmp2350_AST_in = (AST)_t;
+			AST tmp2328_AST_in = (AST)_t;
 			match(_t,INTO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IS:
 		{
-			AST tmp2351_AST_in = (AST)_t;
+			AST tmp2329_AST_in = (AST)_t;
 			match(_t,IS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISATTRSPACE:
 		{
-			AST tmp2352_AST_in = (AST)_t;
+			AST tmp2330_AST_in = (AST)_t;
 			match(_t,ISATTRSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCODEPAGEFIXED:
 		{
-			AST tmp2353_AST_in = (AST)_t;
+			AST tmp2331_AST_in = (AST)_t;
 			match(_t,ISCODEPAGEFIXED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCOLUMNCODEPAGE:
 		{
-			AST tmp2354_AST_in = (AST)_t;
+			AST tmp2332_AST_in = (AST)_t;
 			match(_t,ISCOLUMNCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISLEADBYTE:
 		{
-			AST tmp2355_AST_in = (AST)_t;
+			AST tmp2333_AST_in = (AST)_t;
 			match(_t,ISLEADBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISODATE:
 		{
-			AST tmp2356_AST_in = (AST)_t;
+			AST tmp2334_AST_in = (AST)_t;
 			match(_t,ISODATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ITEM:
 		{
-			AST tmp2357_AST_in = (AST)_t;
+			AST tmp2335_AST_in = (AST)_t;
 			match(_t,ITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IUNKNOWN:
 		{
-			AST tmp2358_AST_in = (AST)_t;
+			AST tmp2336_AST_in = (AST)_t;
 			match(_t,IUNKNOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case JOIN:
 		{
-			AST tmp2359_AST_in = (AST)_t;
+			AST tmp2337_AST_in = (AST)_t;
 			match(_t,JOIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case JOINBYSQLDB:
 		{
-			AST tmp2360_AST_in = (AST)_t;
+			AST tmp2338_AST_in = (AST)_t;
 			match(_t,JOINBYSQLDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KBLABEL:
 		{
-			AST tmp2361_AST_in = (AST)_t;
+			AST tmp2339_AST_in = (AST)_t;
 			match(_t,KBLABEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEEPMESSAGES:
 		{
-			AST tmp2362_AST_in = (AST)_t;
+			AST tmp2340_AST_in = (AST)_t;
 			match(_t,KEEPMESSAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEEPTABORDER:
 		{
-			AST tmp2363_AST_in = (AST)_t;
+			AST tmp2341_AST_in = (AST)_t;
 			match(_t,KEEPTABORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEY:
 		{
-			AST tmp2364_AST_in = (AST)_t;
+			AST tmp2342_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYCODE:
 		{
-			AST tmp2365_AST_in = (AST)_t;
+			AST tmp2343_AST_in = (AST)_t;
 			match(_t,KEYCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYFUNCTION:
 		{
-			AST tmp2366_AST_in = (AST)_t;
+			AST tmp2344_AST_in = (AST)_t;
 			match(_t,KEYFUNCTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYLABEL:
 		{
-			AST tmp2367_AST_in = (AST)_t;
+			AST tmp2345_AST_in = (AST)_t;
 			match(_t,KEYLABEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYS:
 		{
-			AST tmp2368_AST_in = (AST)_t;
+			AST tmp2346_AST_in = (AST)_t;
 			match(_t,KEYS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYWORD:
 		{
-			AST tmp2369_AST_in = (AST)_t;
+			AST tmp2347_AST_in = (AST)_t;
 			match(_t,KEYWORD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYWORDALL:
 		{
-			AST tmp2370_AST_in = (AST)_t;
+			AST tmp2348_AST_in = (AST)_t;
 			match(_t,KEYWORDALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABEL:
 		{
-			AST tmp2371_AST_in = (AST)_t;
+			AST tmp2349_AST_in = (AST)_t;
 			match(_t,LABEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELBGCOLOR:
 		{
-			AST tmp2372_AST_in = (AST)_t;
+			AST tmp2350_AST_in = (AST)_t;
 			match(_t,LABELBGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELDCOLOR:
 		{
-			AST tmp2373_AST_in = (AST)_t;
+			AST tmp2351_AST_in = (AST)_t;
 			match(_t,LABELDCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELFGCOLOR:
 		{
-			AST tmp2374_AST_in = (AST)_t;
+			AST tmp2352_AST_in = (AST)_t;
 			match(_t,LABELFGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELFONT:
 		{
-			AST tmp2375_AST_in = (AST)_t;
+			AST tmp2353_AST_in = (AST)_t;
 			match(_t,LABELFONT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LANDSCAPE:
 		{
-			AST tmp2376_AST_in = (AST)_t;
+			AST tmp2354_AST_in = (AST)_t;
 			match(_t,LANDSCAPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LANGUAGES:
 		{
-			AST tmp2377_AST_in = (AST)_t;
+			AST tmp2355_AST_in = (AST)_t;
 			match(_t,LANGUAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LARGE:
 		{
-			AST tmp2378_AST_in = (AST)_t;
+			AST tmp2356_AST_in = (AST)_t;
 			match(_t,LARGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LARGETOSMALL:
 		{
-			AST tmp2379_AST_in = (AST)_t;
+			AST tmp2357_AST_in = (AST)_t;
 			match(_t,LARGETOSMALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LAST:
 		{
-			AST tmp2380_AST_in = (AST)_t;
+			AST tmp2358_AST_in = (AST)_t;
 			match(_t,LAST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTEVENT:
 		{
-			AST tmp2381_AST_in = (AST)_t;
+			AST tmp2359_AST_in = (AST)_t;
 			match(_t,LASTEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTOF:
 		{
-			AST tmp2382_AST_in = (AST)_t;
+			AST tmp2360_AST_in = (AST)_t;
 			match(_t,LASTOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTKEY:
 		{
-			AST tmp2383_AST_in = (AST)_t;
+			AST tmp2361_AST_in = (AST)_t;
 			match(_t,LASTKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LC:
 		{
-			AST tmp2384_AST_in = (AST)_t;
+			AST tmp2362_AST_in = (AST)_t;
 			match(_t,LC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LDBNAME:
 		{
-			AST tmp2385_AST_in = (AST)_t;
+			AST tmp2363_AST_in = (AST)_t;
 			match(_t,LDBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LE:
 		{
-			AST tmp2386_AST_in = (AST)_t;
+			AST tmp2364_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEAVE:
 		{
-			AST tmp2387_AST_in = (AST)_t;
+			AST tmp2365_AST_in = (AST)_t;
 			match(_t,LEAVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFT:
 		{
-			AST tmp2388_AST_in = (AST)_t;
+			AST tmp2366_AST_in = (AST)_t;
 			match(_t,LEFT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp2389_AST_in = (AST)_t;
+			AST tmp2367_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTTRIM:
 		{
-			AST tmp2390_AST_in = (AST)_t;
+			AST tmp2368_AST_in = (AST)_t;
 			match(_t,LEFTTRIM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LENGTH:
 		{
-			AST tmp2391_AST_in = (AST)_t;
+			AST tmp2369_AST_in = (AST)_t;
 			match(_t,LENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LIBRARY:
 		{
-			AST tmp2392_AST_in = (AST)_t;
+			AST tmp2370_AST_in = (AST)_t;
 			match(_t,LIBRARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LIKE:
 		{
-			AST tmp2393_AST_in = (AST)_t;
+			AST tmp2371_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LINECOUNTER:
 		{
-			AST tmp2394_AST_in = (AST)_t;
+			AST tmp2372_AST_in = (AST)_t;
 			match(_t,LINECOUNTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTEVENTS:
 		{
-			AST tmp2395_AST_in = (AST)_t;
+			AST tmp2373_AST_in = (AST)_t;
 			match(_t,LISTEVENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTITEMPAIRS:
 		{
-			AST tmp2396_AST_in = (AST)_t;
+			AST tmp2374_AST_in = (AST)_t;
 			match(_t,LISTITEMPAIRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTITEMS:
 		{
-			AST tmp2397_AST_in = (AST)_t;
+			AST tmp2375_AST_in = (AST)_t;
 			match(_t,LISTITEMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTQUERYATTRS:
 		{
-			AST tmp2398_AST_in = (AST)_t;
+			AST tmp2376_AST_in = (AST)_t;
 			match(_t,LISTQUERYATTRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTSETATTRS:
 		{
-			AST tmp2399_AST_in = (AST)_t;
+			AST tmp2377_AST_in = (AST)_t;
 			match(_t,LISTSETATTRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTWIDGETS:
 		{
-			AST tmp2400_AST_in = (AST)_t;
+			AST tmp2378_AST_in = (AST)_t;
 			match(_t,LISTWIDGETS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTING:
 		{
-			AST tmp2401_AST_in = (AST)_t;
+			AST tmp2379_AST_in = (AST)_t;
 			match(_t,LISTING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LITTLEENDIAN:
 		{
-			AST tmp2402_AST_in = (AST)_t;
+			AST tmp2380_AST_in = (AST)_t;
 			match(_t,LITTLEENDIAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOAD:
 		{
-			AST tmp2403_AST_in = (AST)_t;
+			AST tmp2381_AST_in = (AST)_t;
 			match(_t,LOAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOADPICTURE:
 		{
-			AST tmp2404_AST_in = (AST)_t;
+			AST tmp2382_AST_in = (AST)_t;
 			match(_t,LOADPICTURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOBDIR:
 		{
-			AST tmp2405_AST_in = (AST)_t;
+			AST tmp2383_AST_in = (AST)_t;
 			match(_t,LOBDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOCKED:
 		{
-			AST tmp2406_AST_in = (AST)_t;
+			AST tmp2384_AST_in = (AST)_t;
 			match(_t,LOCKED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGMANAGER:
 		{
-			AST tmp2407_AST_in = (AST)_t;
+			AST tmp2385_AST_in = (AST)_t;
 			match(_t,LOGMANAGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOG:
 		{
-			AST tmp2408_AST_in = (AST)_t;
+			AST tmp2386_AST_in = (AST)_t;
 			match(_t,LOG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST tmp2409_AST_in = (AST)_t;
+			AST tmp2387_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONG:
 		{
-			AST tmp2410_AST_in = (AST)_t;
+			AST tmp2388_AST_in = (AST)_t;
 			match(_t,LONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONGCHAR:
 		{
-			AST tmp2411_AST_in = (AST)_t;
+			AST tmp2389_AST_in = (AST)_t;
 			match(_t,LONGCHAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOOKAHEAD:
 		{
-			AST tmp2412_AST_in = (AST)_t;
+			AST tmp2390_AST_in = (AST)_t;
 			match(_t,LOOKAHEAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOOKUP:
 		{
-			AST tmp2413_AST_in = (AST)_t;
+			AST tmp2391_AST_in = (AST)_t;
 			match(_t,LOOKUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LTHAN:
 		{
-			AST tmp2414_AST_in = (AST)_t;
+			AST tmp2392_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MACHINECLASS:
 		{
-			AST tmp2415_AST_in = (AST)_t;
+			AST tmp2393_AST_in = (AST)_t;
 			match(_t,MACHINECLASS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAP:
 		{
-			AST tmp2416_AST_in = (AST)_t;
+			AST tmp2394_AST_in = (AST)_t;
 			match(_t,MAP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MARGINEXTRA:
 		{
-			AST tmp2417_AST_in = (AST)_t;
+			AST tmp2395_AST_in = (AST)_t;
 			match(_t,MARGINEXTRA);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MATCHES:
 		{
-			AST tmp2418_AST_in = (AST)_t;
+			AST tmp2396_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAX:
 		{
-			AST tmp2419_AST_in = (AST)_t;
+			AST tmp2397_AST_in = (AST)_t;
 			match(_t,MAX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXCHARS:
 		{
-			AST tmp2420_AST_in = (AST)_t;
+			AST tmp2398_AST_in = (AST)_t;
 			match(_t,MAXCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXROWS:
 		{
-			AST tmp2421_AST_in = (AST)_t;
+			AST tmp2399_AST_in = (AST)_t;
 			match(_t,MAXROWS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXSIZE:
 		{
-			AST tmp2422_AST_in = (AST)_t;
+			AST tmp2400_AST_in = (AST)_t;
 			match(_t,MAXSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXVALUE:
 		{
-			AST tmp2423_AST_in = (AST)_t;
+			AST tmp2401_AST_in = (AST)_t;
 			match(_t,MAXVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMIZE:
 		{
-			AST tmp2424_AST_in = (AST)_t;
+			AST tmp2402_AST_in = (AST)_t;
 			match(_t,MAXIMIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMUM:
 		{
-			AST tmp2425_AST_in = (AST)_t;
+			AST tmp2403_AST_in = (AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMBER:
 		{
-			AST tmp2426_AST_in = (AST)_t;
+			AST tmp2404_AST_in = (AST)_t;
 			match(_t,MEMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMPTR:
 		{
-			AST tmp2427_AST_in = (AST)_t;
+			AST tmp2405_AST_in = (AST)_t;
 			match(_t,MEMPTR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp2428_AST_in = (AST)_t;
+			AST tmp2406_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp2429_AST_in = (AST)_t;
+			AST tmp2407_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUBAR:
 		{
-			AST tmp2430_AST_in = (AST)_t;
+			AST tmp2408_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGE:
 		{
-			AST tmp2431_AST_in = (AST)_t;
+			AST tmp2409_AST_in = (AST)_t;
 			match(_t,MESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGELINE:
 		{
-			AST tmp2432_AST_in = (AST)_t;
+			AST tmp2410_AST_in = (AST)_t;
 			match(_t,MESSAGELINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGELINES:
 		{
-			AST tmp2433_AST_in = (AST)_t;
+			AST tmp2411_AST_in = (AST)_t;
 			match(_t,MESSAGELINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MIN:
 		{
-			AST tmp2434_AST_in = (AST)_t;
+			AST tmp2412_AST_in = (AST)_t;
 			match(_t,MIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINSIZE:
 		{
-			AST tmp2435_AST_in = (AST)_t;
+			AST tmp2413_AST_in = (AST)_t;
 			match(_t,MINSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINVALUE:
 		{
-			AST tmp2436_AST_in = (AST)_t;
+			AST tmp2414_AST_in = (AST)_t;
 			match(_t,MINVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINIMUM:
 		{
-			AST tmp2437_AST_in = (AST)_t;
+			AST tmp2415_AST_in = (AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MODULO:
 		{
-			AST tmp2438_AST_in = (AST)_t;
+			AST tmp2416_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MONTH:
 		{
-			AST tmp2439_AST_in = (AST)_t;
+			AST tmp2417_AST_in = (AST)_t;
 			match(_t,MONTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSE:
 		{
-			AST tmp2440_AST_in = (AST)_t;
+			AST tmp2418_AST_in = (AST)_t;
 			match(_t,MOUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSEPOINTER:
 		{
-			AST tmp2441_AST_in = (AST)_t;
+			AST tmp2419_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MPE:
 		{
-			AST tmp2442_AST_in = (AST)_t;
+			AST tmp2420_AST_in = (AST)_t;
 			match(_t,MPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MTIME:
 		{
-			AST tmp2443_AST_in = (AST)_t;
+			AST tmp2421_AST_in = (AST)_t;
 			match(_t,MTIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLE:
 		{
-			AST tmp2444_AST_in = (AST)_t;
+			AST tmp2422_AST_in = (AST)_t;
 			match(_t,MULTIPLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLEKEY:
 		{
-			AST tmp2445_AST_in = (AST)_t;
+			AST tmp2423_AST_in = (AST)_t;
 			match(_t,MULTIPLEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MUSTEXIST:
 		{
-			AST tmp2446_AST_in = (AST)_t;
+			AST tmp2424_AST_in = (AST)_t;
 			match(_t,MUSTEXIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NATIVE:
 		{
-			AST tmp2447_AST_in = (AST)_t;
+			AST tmp2425_AST_in = (AST)_t;
 			match(_t,NATIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NE:
 		{
-			AST tmp2448_AST_in = (AST)_t;
+			AST tmp2426_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEW:
 		{
-			AST tmp2449_AST_in = (AST)_t;
+			AST tmp2427_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXT:
 		{
-			AST tmp2450_AST_in = (AST)_t;
+			AST tmp2428_AST_in = (AST)_t;
 			match(_t,NEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXTPROMPT:
 		{
-			AST tmp2451_AST_in = (AST)_t;
+			AST tmp2429_AST_in = (AST)_t;
 			match(_t,NEXTPROMPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXTVALUE:
 		{
-			AST tmp2452_AST_in = (AST)_t;
+			AST tmp2430_AST_in = (AST)_t;
 			match(_t,NEXTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NO:
 		{
-			AST tmp2453_AST_in = (AST)_t;
+			AST tmp2431_AST_in = (AST)_t;
 			match(_t,NO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOAPPLY:
 		{
-			AST tmp2454_AST_in = (AST)_t;
+			AST tmp2432_AST_in = (AST)_t;
 			match(_t,NOAPPLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOARRAYMESSAGE:
 		{
-			AST tmp2455_AST_in = (AST)_t;
+			AST tmp2433_AST_in = (AST)_t;
 			match(_t,NOARRAYMESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOASSIGN:
 		{
-			AST tmp2456_AST_in = (AST)_t;
+			AST tmp2434_AST_in = (AST)_t;
 			match(_t,NOASSIGN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOATTRLIST:
 		{
-			AST tmp2457_AST_in = (AST)_t;
+			AST tmp2435_AST_in = (AST)_t;
 			match(_t,NOATTRLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOATTRSPACE:
 		{
-			AST tmp2458_AST_in = (AST)_t;
+			AST tmp2436_AST_in = (AST)_t;
 			match(_t,NOATTRSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOAUTOVALIDATE:
 		{
-			AST tmp2459_AST_in = (AST)_t;
+			AST tmp2437_AST_in = (AST)_t;
 			match(_t,NOAUTOVALIDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOBINDWHERE:
 		{
-			AST tmp2460_AST_in = (AST)_t;
+			AST tmp2438_AST_in = (AST)_t;
 			match(_t,NOBINDWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOBOX:
 		{
-			AST tmp2461_AST_in = (AST)_t;
+			AST tmp2439_AST_in = (AST)_t;
 			match(_t,NOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCOLUMNSCROLLING:
 		{
-			AST tmp2462_AST_in = (AST)_t;
+			AST tmp2440_AST_in = (AST)_t;
 			match(_t,NOCOLUMNSCROLLING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONSOLE:
 		{
-			AST tmp2463_AST_in = (AST)_t;
+			AST tmp2441_AST_in = (AST)_t;
 			match(_t,NOCONSOLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONVERT:
 		{
-			AST tmp2464_AST_in = (AST)_t;
+			AST tmp2442_AST_in = (AST)_t;
 			match(_t,NOCONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONVERT3DCOLORS:
 		{
-			AST tmp2465_AST_in = (AST)_t;
+			AST tmp2443_AST_in = (AST)_t;
 			match(_t,NOCONVERT3DCOLORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCURRENTVALUE:
 		{
-			AST tmp2466_AST_in = (AST)_t;
+			AST tmp2444_AST_in = (AST)_t;
 			match(_t,NOCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NODEBUG:
 		{
-			AST tmp2467_AST_in = (AST)_t;
+			AST tmp2445_AST_in = (AST)_t;
 			match(_t,NODEBUG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NODRAG:
 		{
-			AST tmp2468_AST_in = (AST)_t;
+			AST tmp2446_AST_in = (AST)_t;
 			match(_t,NODRAG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOECHO:
 		{
-			AST tmp2469_AST_in = (AST)_t;
+			AST tmp2447_AST_in = (AST)_t;
 			match(_t,NOECHO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOEMPTYSPACE:
 		{
-			AST tmp2470_AST_in = (AST)_t;
+			AST tmp2448_AST_in = (AST)_t;
 			match(_t,NOEMPTYSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOERROR_KW:
 		{
-			AST tmp2471_AST_in = (AST)_t;
+			AST tmp2449_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOFILL:
 		{
-			AST tmp2472_AST_in = (AST)_t;
+			AST tmp2450_AST_in = (AST)_t;
 			match(_t,NOFILL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOFOCUS:
 		{
-			AST tmp2473_AST_in = (AST)_t;
+			AST tmp2451_AST_in = (AST)_t;
 			match(_t,NOFOCUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOHELP:
 		{
-			AST tmp2474_AST_in = (AST)_t;
+			AST tmp2452_AST_in = (AST)_t;
 			match(_t,NOHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOHIDE:
 		{
-			AST tmp2475_AST_in = (AST)_t;
+			AST tmp2453_AST_in = (AST)_t;
 			match(_t,NOHIDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOINDEXHINT:
 		{
-			AST tmp2476_AST_in = (AST)_t;
+			AST tmp2454_AST_in = (AST)_t;
 			match(_t,NOINDEXHINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOJOINBYSQLDB:
 		{
-			AST tmp2477_AST_in = (AST)_t;
+			AST tmp2455_AST_in = (AST)_t;
 			match(_t,NOJOINBYSQLDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLABELS:
 		{
-			AST tmp2478_AST_in = (AST)_t;
+			AST tmp2456_AST_in = (AST)_t;
 			match(_t,NOLABELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOBS:
 		{
-			AST tmp2479_AST_in = (AST)_t;
+			AST tmp2457_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp2480_AST_in = (AST)_t;
+			AST tmp2458_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOOKAHEAD:
 		{
-			AST tmp2481_AST_in = (AST)_t;
+			AST tmp2459_AST_in = (AST)_t;
 			match(_t,NOLOOKAHEAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOMAP:
 		{
-			AST tmp2482_AST_in = (AST)_t;
+			AST tmp2460_AST_in = (AST)_t;
 			match(_t,NOMAP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOMESSAGE:
 		{
-			AST tmp2483_AST_in = (AST)_t;
+			AST tmp2461_AST_in = (AST)_t;
 			match(_t,NOMESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NONE:
 		{
-			AST tmp2484_AST_in = (AST)_t;
+			AST tmp2462_AST_in = (AST)_t;
 			match(_t,NONE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOPAUSE:
 		{
-			AST tmp2485_AST_in = (AST)_t;
+			AST tmp2463_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOPREFETCH:
 		{
-			AST tmp2486_AST_in = (AST)_t;
+			AST tmp2464_AST_in = (AST)_t;
 			match(_t,NOPREFETCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORETURNVALUE:
 		{
-			AST tmp2487_AST_in = (AST)_t;
+			AST tmp2465_AST_in = (AST)_t;
 			match(_t,NORETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORMAL:
 		{
-			AST tmp2488_AST_in = (AST)_t;
+			AST tmp2466_AST_in = (AST)_t;
 			match(_t,NORMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOROWMARKERS:
 		{
-			AST tmp2489_AST_in = (AST)_t;
+			AST tmp2467_AST_in = (AST)_t;
 			match(_t,NOROWMARKERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSCROLLBARVERTICAL:
 		{
-			AST tmp2490_AST_in = (AST)_t;
+			AST tmp2468_AST_in = (AST)_t;
 			match(_t,NOSCROLLBARVERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSEPARATECONNECTION:
 		{
-			AST tmp2491_AST_in = (AST)_t;
+			AST tmp2469_AST_in = (AST)_t;
 			match(_t,NOSEPARATECONNECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSEPARATORS:
 		{
-			AST tmp2492_AST_in = (AST)_t;
+			AST tmp2470_AST_in = (AST)_t;
 			match(_t,NOSEPARATORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOTABSTOP:
 		{
-			AST tmp2493_AST_in = (AST)_t;
+			AST tmp2471_AST_in = (AST)_t;
 			match(_t,NOTABSTOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDERLINE:
 		{
-			AST tmp2494_AST_in = (AST)_t;
+			AST tmp2472_AST_in = (AST)_t;
 			match(_t,NOUNDERLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp2495_AST_in = (AST)_t;
+			AST tmp2473_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOVALIDATE:
 		{
-			AST tmp2496_AST_in = (AST)_t;
+			AST tmp2474_AST_in = (AST)_t;
 			match(_t,NOVALIDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOWAIT:
 		{
-			AST tmp2497_AST_in = (AST)_t;
+			AST tmp2475_AST_in = (AST)_t;
 			match(_t,NOWAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOWORDWRAP:
 		{
-			AST tmp2498_AST_in = (AST)_t;
+			AST tmp2476_AST_in = (AST)_t;
 			match(_t,NOWORDWRAP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOT:
 		{
-			AST tmp2499_AST_in = (AST)_t;
+			AST tmp2477_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOW:
 		{
-			AST tmp2500_AST_in = (AST)_t;
+			AST tmp2478_AST_in = (AST)_t;
 			match(_t,NOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NULL_KW:
 		{
-			AST tmp2501_AST_in = (AST)_t;
+			AST tmp2479_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMALIASES:
 		{
-			AST tmp2502_AST_in = (AST)_t;
+			AST tmp2480_AST_in = (AST)_t;
 			match(_t,NUMALIASES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMCOPIES:
 		{
-			AST tmp2503_AST_in = (AST)_t;
+			AST tmp2481_AST_in = (AST)_t;
 			match(_t,NUMCOPIES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMDBS:
 		{
-			AST tmp2504_AST_in = (AST)_t;
+			AST tmp2482_AST_in = (AST)_t;
 			match(_t,NUMDBS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMENTRIES:
 		{
-			AST tmp2505_AST_in = (AST)_t;
+			AST tmp2483_AST_in = (AST)_t;
 			match(_t,NUMENTRIES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMRESULTS:
 		{
-			AST tmp2506_AST_in = (AST)_t;
+			AST tmp2484_AST_in = (AST)_t;
 			match(_t,NUMRESULTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMERIC:
 		{
-			AST tmp2507_AST_in = (AST)_t;
+			AST tmp2485_AST_in = (AST)_t;
 			match(_t,NUMERIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OBJECT:
 		{
-			AST tmp2508_AST_in = (AST)_t;
+			AST tmp2486_AST_in = (AST)_t;
 			match(_t,OBJECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OCTETLENGTH:
 		{
-			AST tmp2509_AST_in = (AST)_t;
+			AST tmp2487_AST_in = (AST)_t;
 			match(_t,OCTETLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OF:
 		{
-			AST tmp2510_AST_in = (AST)_t;
+			AST tmp2488_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OFF:
 		{
-			AST tmp2511_AST_in = (AST)_t;
+			AST tmp2489_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OK:
 		{
-			AST tmp2512_AST_in = (AST)_t;
+			AST tmp2490_AST_in = (AST)_t;
 			match(_t,OK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OKCANCEL:
 		{
-			AST tmp2513_AST_in = (AST)_t;
+			AST tmp2491_AST_in = (AST)_t;
 			match(_t,OKCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OLD:
 		{
-			AST tmp2514_AST_in = (AST)_t;
+			AST tmp2492_AST_in = (AST)_t;
 			match(_t,OLD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ON:
 		{
-			AST tmp2515_AST_in = (AST)_t;
+			AST tmp2493_AST_in = (AST)_t;
 			match(_t,ON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ONLY:
 		{
-			AST tmp2516_AST_in = (AST)_t;
+			AST tmp2494_AST_in = (AST)_t;
 			match(_t,ONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OPEN:
 		{
-			AST tmp2517_AST_in = (AST)_t;
+			AST tmp2495_AST_in = (AST)_t;
 			match(_t,OPEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OPSYS:
 		{
-			AST tmp2518_AST_in = (AST)_t;
+			AST tmp2496_AST_in = (AST)_t;
 			match(_t,OPSYS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OPTION:
 		{
-			AST tmp2519_AST_in = (AST)_t;
+			AST tmp2497_AST_in = (AST)_t;
 			match(_t,OPTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OR:
 		{
-			AST tmp2520_AST_in = (AST)_t;
+			AST tmp2498_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDER:
 		{
-			AST tmp2521_AST_in = (AST)_t;
+			AST tmp2499_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDEREDJOIN:
 		{
-			AST tmp2522_AST_in = (AST)_t;
+			AST tmp2500_AST_in = (AST)_t;
 			match(_t,ORDEREDJOIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDINAL:
 		{
-			AST tmp2523_AST_in = (AST)_t;
+			AST tmp2501_AST_in = (AST)_t;
 			match(_t,ORDINAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OS2:
 		{
-			AST tmp2524_AST_in = (AST)_t;
+			AST tmp2502_AST_in = (AST)_t;
 			match(_t,OS2);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OS400:
 		{
-			AST tmp2525_AST_in = (AST)_t;
+			AST tmp2503_AST_in = (AST)_t;
 			match(_t,OS400);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSAPPEND:
 		{
-			AST tmp2526_AST_in = (AST)_t;
+			AST tmp2504_AST_in = (AST)_t;
 			match(_t,OSAPPEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSCOMMAND:
 		{
-			AST tmp2527_AST_in = (AST)_t;
+			AST tmp2505_AST_in = (AST)_t;
 			match(_t,OSCOMMAND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSCOPY:
 		{
-			AST tmp2528_AST_in = (AST)_t;
+			AST tmp2506_AST_in = (AST)_t;
 			match(_t,OSCOPY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSCREATEDIR:
 		{
-			AST tmp2529_AST_in = (AST)_t;
+			AST tmp2507_AST_in = (AST)_t;
 			match(_t,OSCREATEDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDELETE:
 		{
-			AST tmp2530_AST_in = (AST)_t;
+			AST tmp2508_AST_in = (AST)_t;
 			match(_t,OSDELETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDIR:
 		{
-			AST tmp2531_AST_in = (AST)_t;
+			AST tmp2509_AST_in = (AST)_t;
 			match(_t,OSDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDRIVES:
 		{
-			AST tmp2532_AST_in = (AST)_t;
+			AST tmp2510_AST_in = (AST)_t;
 			match(_t,OSDRIVES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSERROR:
 		{
-			AST tmp2533_AST_in = (AST)_t;
+			AST tmp2511_AST_in = (AST)_t;
 			match(_t,OSERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSGETENV:
 		{
-			AST tmp2534_AST_in = (AST)_t;
+			AST tmp2512_AST_in = (AST)_t;
 			match(_t,OSGETENV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSRENAME:
 		{
-			AST tmp2535_AST_in = (AST)_t;
+			AST tmp2513_AST_in = (AST)_t;
 			match(_t,OSRENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OTHERWISE:
 		{
-			AST tmp2536_AST_in = (AST)_t;
+			AST tmp2514_AST_in = (AST)_t;
 			match(_t,OTHERWISE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTER:
 		{
-			AST tmp2537_AST_in = (AST)_t;
+			AST tmp2515_AST_in = (AST)_t;
 			match(_t,OUTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTERJOIN:
 		{
-			AST tmp2538_AST_in = (AST)_t;
+			AST tmp2516_AST_in = (AST)_t;
 			match(_t,OUTERJOIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST tmp2539_AST_in = (AST)_t;
+			AST tmp2517_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OVERLAY:
 		{
-			AST tmp2540_AST_in = (AST)_t;
+			AST tmp2518_AST_in = (AST)_t;
 			match(_t,OVERLAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OVERRIDE:
 		{
-			AST tmp2541_AST_in = (AST)_t;
+			AST tmp2519_AST_in = (AST)_t;
 			match(_t,OVERRIDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGE:
 		{
-			AST tmp2542_AST_in = (AST)_t;
+			AST tmp2520_AST_in = (AST)_t;
 			match(_t,PAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGEBOTTOM:
 		{
-			AST tmp2543_AST_in = (AST)_t;
+			AST tmp2521_AST_in = (AST)_t;
 			match(_t,PAGEBOTTOM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGENUMBER:
 		{
-			AST tmp2544_AST_in = (AST)_t;
+			AST tmp2522_AST_in = (AST)_t;
 			match(_t,PAGENUMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGESIZE_KW:
 		{
-			AST tmp2545_AST_in = (AST)_t;
+			AST tmp2523_AST_in = (AST)_t;
 			match(_t,PAGESIZE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGETOP:
 		{
-			AST tmp2546_AST_in = (AST)_t;
+			AST tmp2524_AST_in = (AST)_t;
 			match(_t,PAGETOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGEWIDTH:
 		{
-			AST tmp2547_AST_in = (AST)_t;
+			AST tmp2525_AST_in = (AST)_t;
 			match(_t,PAGEWIDTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGED:
 		{
-			AST tmp2548_AST_in = (AST)_t;
+			AST tmp2526_AST_in = (AST)_t;
 			match(_t,PAGED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARAMETER:
 		{
-			AST tmp2549_AST_in = (AST)_t;
+			AST tmp2527_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARENT:
 		{
-			AST tmp2550_AST_in = (AST)_t;
+			AST tmp2528_AST_in = (AST)_t;
 			match(_t,PARENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARTIALKEY:
 		{
-			AST tmp2551_AST_in = (AST)_t;
+			AST tmp2529_AST_in = (AST)_t;
 			match(_t,PARTIALKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PASCAL_KW:
 		{
-			AST tmp2552_AST_in = (AST)_t;
+			AST tmp2530_AST_in = (AST)_t;
 			match(_t,PASCAL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAUSE:
 		{
-			AST tmp2553_AST_in = (AST)_t;
+			AST tmp2531_AST_in = (AST)_t;
 			match(_t,PAUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PDBNAME:
 		{
-			AST tmp2554_AST_in = (AST)_t;
+			AST tmp2532_AST_in = (AST)_t;
 			match(_t,PDBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PERFORMANCE:
 		{
-			AST tmp2555_AST_in = (AST)_t;
+			AST tmp2533_AST_in = (AST)_t;
 			match(_t,PERFORMANCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PERSISTENT:
 		{
-			AST tmp2556_AST_in = (AST)_t;
+			AST tmp2534_AST_in = (AST)_t;
 			match(_t,PERSISTENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PFCOLOR:
 		{
-			AST tmp2557_AST_in = (AST)_t;
+			AST tmp2535_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp2558_AST_in = (AST)_t;
+			AST tmp2536_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PORTRAIT:
 		{
-			AST tmp2559_AST_in = (AST)_t;
+			AST tmp2537_AST_in = (AST)_t;
 			match(_t,PORTRAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case POSITION:
 		{
-			AST tmp2560_AST_in = (AST)_t;
+			AST tmp2538_AST_in = (AST)_t;
 			match(_t,POSITION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRECISION:
 		{
-			AST tmp2561_AST_in = (AST)_t;
+			AST tmp2539_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREPROCESS:
 		{
-			AST tmp2562_AST_in = (AST)_t;
+			AST tmp2540_AST_in = (AST)_t;
 			match(_t,PREPROCESS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRESELECT:
 		{
-			AST tmp2563_AST_in = (AST)_t;
+			AST tmp2541_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREV:
 		{
-			AST tmp2564_AST_in = (AST)_t;
+			AST tmp2542_AST_in = (AST)_t;
 			match(_t,PREV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIMARY:
 		{
-			AST tmp2565_AST_in = (AST)_t;
+			AST tmp2543_AST_in = (AST)_t;
 			match(_t,PRIMARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRINTER:
 		{
-			AST tmp2566_AST_in = (AST)_t;
+			AST tmp2544_AST_in = (AST)_t;
 			match(_t,PRINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRINTERSETUP:
 		{
-			AST tmp2567_AST_in = (AST)_t;
+			AST tmp2545_AST_in = (AST)_t;
 			match(_t,PRINTERSETUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIVATE:
 		{
-			AST tmp2568_AST_in = (AST)_t;
+			AST tmp2546_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIVILEGES:
 		{
-			AST tmp2569_AST_in = (AST)_t;
+			AST tmp2547_AST_in = (AST)_t;
 			match(_t,PRIVILEGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCEDURECALLTYPE:
 		{
-			AST tmp2570_AST_in = (AST)_t;
+			AST tmp2548_AST_in = (AST)_t;
 			match(_t,PROCEDURECALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCTEXT:
 		{
-			AST tmp2571_AST_in = (AST)_t;
+			AST tmp2549_AST_in = (AST)_t;
 			match(_t,PROCTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCTEXTBUFFER:
 		{
-			AST tmp2572_AST_in = (AST)_t;
+			AST tmp2550_AST_in = (AST)_t;
 			match(_t,PROCTEXTBUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCHANDLE:
 		{
-			AST tmp2573_AST_in = (AST)_t;
+			AST tmp2551_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCSTATUS:
 		{
-			AST tmp2574_AST_in = (AST)_t;
+			AST tmp2552_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCEDURE:
 		{
-			AST tmp2575_AST_in = (AST)_t;
+			AST tmp2553_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCESS:
 		{
-			AST tmp2576_AST_in = (AST)_t;
+			AST tmp2554_AST_in = (AST)_t;
 			match(_t,PROCESS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROFILER:
 		{
-			AST tmp2577_AST_in = (AST)_t;
+			AST tmp2555_AST_in = (AST)_t;
 			match(_t,PROFILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROGRAMNAME:
 		{
-			AST tmp2578_AST_in = (AST)_t;
+			AST tmp2556_AST_in = (AST)_t;
 			match(_t,PROGRAMNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROGRESS:
 		{
-			AST tmp2579_AST_in = (AST)_t;
+			AST tmp2557_AST_in = (AST)_t;
 			match(_t,PROGRESS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMPT:
 		{
-			AST tmp2580_AST_in = (AST)_t;
+			AST tmp2558_AST_in = (AST)_t;
 			match(_t,PROMPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMPTFOR:
 		{
-			AST tmp2581_AST_in = (AST)_t;
+			AST tmp2559_AST_in = (AST)_t;
 			match(_t,PROMPTFOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMSGS:
 		{
-			AST tmp2582_AST_in = (AST)_t;
+			AST tmp2560_AST_in = (AST)_t;
 			match(_t,PROMSGS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROPATH:
 		{
-			AST tmp2583_AST_in = (AST)_t;
+			AST tmp2561_AST_in = (AST)_t;
 			match(_t,PROPATH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROVERSION:
 		{
-			AST tmp2584_AST_in = (AST)_t;
+			AST tmp2562_AST_in = (AST)_t;
 			match(_t,PROVERSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLIC:
 		{
-			AST tmp2585_AST_in = (AST)_t;
+			AST tmp2563_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLISH:
 		{
-			AST tmp2586_AST_in = (AST)_t;
+			AST tmp2564_AST_in = (AST)_t;
 			match(_t,PUBLISH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUT:
 		{
-			AST tmp2587_AST_in = (AST)_t;
+			AST tmp2565_AST_in = (AST)_t;
 			match(_t,PUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBITS:
 		{
-			AST tmp2588_AST_in = (AST)_t;
+			AST tmp2566_AST_in = (AST)_t;
 			match(_t,PUTBITS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBYTE:
 		{
-			AST tmp2589_AST_in = (AST)_t;
+			AST tmp2567_AST_in = (AST)_t;
 			match(_t,PUTBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBYTES:
 		{
-			AST tmp2590_AST_in = (AST)_t;
+			AST tmp2568_AST_in = (AST)_t;
 			match(_t,PUTBYTES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTDOUBLE:
 		{
-			AST tmp2591_AST_in = (AST)_t;
+			AST tmp2569_AST_in = (AST)_t;
 			match(_t,PUTDOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTFLOAT:
 		{
-			AST tmp2592_AST_in = (AST)_t;
+			AST tmp2570_AST_in = (AST)_t;
 			match(_t,PUTFLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTKEYVALUE:
 		{
-			AST tmp2593_AST_in = (AST)_t;
+			AST tmp2571_AST_in = (AST)_t;
 			match(_t,PUTKEYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTLONG:
 		{
-			AST tmp2594_AST_in = (AST)_t;
+			AST tmp2572_AST_in = (AST)_t;
 			match(_t,PUTLONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSHORT:
 		{
-			AST tmp2595_AST_in = (AST)_t;
+			AST tmp2573_AST_in = (AST)_t;
 			match(_t,PUTSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSTRING:
 		{
-			AST tmp2596_AST_in = (AST)_t;
+			AST tmp2574_AST_in = (AST)_t;
 			match(_t,PUTSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERY:
 		{
-			AST tmp2597_AST_in = (AST)_t;
+			AST tmp2575_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERYCLOSE:
 		{
-			AST tmp2598_AST_in = (AST)_t;
+			AST tmp2576_AST_in = (AST)_t;
 			match(_t,QUERYCLOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERYOFFEND:
 		{
-			AST tmp2599_AST_in = (AST)_t;
+			AST tmp2577_AST_in = (AST)_t;
 			match(_t,QUERYOFFEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERYTUNING:
 		{
-			AST tmp2600_AST_in = (AST)_t;
+			AST tmp2578_AST_in = (AST)_t;
 			match(_t,QUERYTUNING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUESTION:
 		{
-			AST tmp2601_AST_in = (AST)_t;
+			AST tmp2579_AST_in = (AST)_t;
 			match(_t,QUESTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUIT:
 		{
-			AST tmp2602_AST_in = (AST)_t;
+			AST tmp2580_AST_in = (AST)_t;
 			match(_t,QUIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUOTER:
 		{
-			AST tmp2603_AST_in = (AST)_t;
+			AST tmp2581_AST_in = (AST)_t;
 			match(_t,QUOTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RINDEX:
 		{
-			AST tmp2604_AST_in = (AST)_t;
+			AST tmp2582_AST_in = (AST)_t;
 			match(_t,RINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOBUTTONS:
 		{
-			AST tmp2605_AST_in = (AST)_t;
+			AST tmp2583_AST_in = (AST)_t;
 			match(_t,RADIOBUTTONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp2606_AST_in = (AST)_t;
+			AST tmp2584_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RANDOM:
 		{
-			AST tmp2607_AST_in = (AST)_t;
+			AST tmp2585_AST_in = (AST)_t;
 			match(_t,RANDOM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAW:
 		{
-			AST tmp2608_AST_in = (AST)_t;
+			AST tmp2586_AST_in = (AST)_t;
 			match(_t,RAW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAWTRANSFER:
 		{
-			AST tmp2609_AST_in = (AST)_t;
+			AST tmp2587_AST_in = (AST)_t;
 			match(_t,RAWTRANSFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RCODEINFORMATION:
 		{
-			AST tmp2610_AST_in = (AST)_t;
+			AST tmp2588_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READ:
 		{
-			AST tmp2611_AST_in = (AST)_t;
+			AST tmp2589_AST_in = (AST)_t;
 			match(_t,READ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READAVAILABLE:
 		{
-			AST tmp2612_AST_in = (AST)_t;
+			AST tmp2590_AST_in = (AST)_t;
 			match(_t,READAVAILABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READEXACTNUM:
 		{
-			AST tmp2613_AST_in = (AST)_t;
+			AST tmp2591_AST_in = (AST)_t;
 			match(_t,READEXACTNUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READONLY:
 		{
-			AST tmp2614_AST_in = (AST)_t;
+			AST tmp2592_AST_in = (AST)_t;
 			match(_t,READONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READKEY:
 		{
-			AST tmp2615_AST_in = (AST)_t;
+			AST tmp2593_AST_in = (AST)_t;
 			match(_t,READKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REAL:
 		{
-			AST tmp2616_AST_in = (AST)_t;
+			AST tmp2594_AST_in = (AST)_t;
 			match(_t,REAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECID:
 		{
-			AST tmp2617_AST_in = (AST)_t;
+			AST tmp2595_AST_in = (AST)_t;
 			match(_t,RECID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECORDLENGTH:
 		{
-			AST tmp2618_AST_in = (AST)_t;
+			AST tmp2596_AST_in = (AST)_t;
 			match(_t,RECORDLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECTANGLE:
 		{
-			AST tmp2619_AST_in = (AST)_t;
+			AST tmp2597_AST_in = (AST)_t;
 			match(_t,RECTANGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECURSIVE:
 		{
-			AST tmp2620_AST_in = (AST)_t;
+			AST tmp2598_AST_in = (AST)_t;
 			match(_t,RECURSIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RELATIONFIELDS:
 		{
-			AST tmp2621_AST_in = (AST)_t;
+			AST tmp2599_AST_in = (AST)_t;
 			match(_t,RELATIONFIELDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RELEASE:
 		{
-			AST tmp2622_AST_in = (AST)_t;
+			AST tmp2600_AST_in = (AST)_t;
 			match(_t,RELEASE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPEAT:
 		{
-			AST tmp2623_AST_in = (AST)_t;
+			AST tmp2601_AST_in = (AST)_t;
 			match(_t,REPEAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLACE:
 		{
-			AST tmp2624_AST_in = (AST)_t;
+			AST tmp2602_AST_in = (AST)_t;
 			match(_t,REPLACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONCREATE:
 		{
-			AST tmp2625_AST_in = (AST)_t;
+			AST tmp2603_AST_in = (AST)_t;
 			match(_t,REPLICATIONCREATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONDELETE:
 		{
-			AST tmp2626_AST_in = (AST)_t;
+			AST tmp2604_AST_in = (AST)_t;
 			match(_t,REPLICATIONDELETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONWRITE:
 		{
-			AST tmp2627_AST_in = (AST)_t;
+			AST tmp2605_AST_in = (AST)_t;
 			match(_t,REPLICATIONWRITE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITION:
 		{
-			AST tmp2628_AST_in = (AST)_t;
+			AST tmp2606_AST_in = (AST)_t;
 			match(_t,REPOSITION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONFORWARD:
 		{
-			AST tmp2629_AST_in = (AST)_t;
+			AST tmp2607_AST_in = (AST)_t;
 			match(_t,REPOSITIONFORWARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONBACKWARD:
 		{
-			AST tmp2630_AST_in = (AST)_t;
+			AST tmp2608_AST_in = (AST)_t;
 			match(_t,REPOSITIONBACKWARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONTOROW:
 		{
-			AST tmp2631_AST_in = (AST)_t;
+			AST tmp2609_AST_in = (AST)_t;
 			match(_t,REPOSITIONTOROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONTOROWID:
 		{
-			AST tmp2632_AST_in = (AST)_t;
+			AST tmp2610_AST_in = (AST)_t;
 			match(_t,REPOSITIONTOROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REQUEST:
 		{
-			AST tmp2633_AST_in = (AST)_t;
+			AST tmp2611_AST_in = (AST)_t;
 			match(_t,REQUEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RESULT:
 		{
-			AST tmp2634_AST_in = (AST)_t;
+			AST tmp2612_AST_in = (AST)_t;
 			match(_t,RESULT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETAIN:
 		{
-			AST tmp2635_AST_in = (AST)_t;
+			AST tmp2613_AST_in = (AST)_t;
 			match(_t,RETAIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETAINSHAPE:
 		{
-			AST tmp2636_AST_in = (AST)_t;
+			AST tmp2614_AST_in = (AST)_t;
 			match(_t,RETAINSHAPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETRY:
 		{
-			AST tmp2637_AST_in = (AST)_t;
+			AST tmp2615_AST_in = (AST)_t;
 			match(_t,RETRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETRYCANCEL:
 		{
-			AST tmp2638_AST_in = (AST)_t;
+			AST tmp2616_AST_in = (AST)_t;
 			match(_t,RETRYCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURN:
 		{
-			AST tmp2639_AST_in = (AST)_t;
+			AST tmp2617_AST_in = (AST)_t;
 			match(_t,RETURN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNTOSTARTDIR:
 		{
-			AST tmp2640_AST_in = (AST)_t;
+			AST tmp2618_AST_in = (AST)_t;
 			match(_t,RETURNTOSTARTDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNVALUE:
 		{
-			AST tmp2641_AST_in = (AST)_t;
+			AST tmp2619_AST_in = (AST)_t;
 			match(_t,RETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNS:
 		{
-			AST tmp2642_AST_in = (AST)_t;
+			AST tmp2620_AST_in = (AST)_t;
 			match(_t,RETURNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REVERSEFROM:
 		{
-			AST tmp2643_AST_in = (AST)_t;
+			AST tmp2621_AST_in = (AST)_t;
 			match(_t,REVERSEFROM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REVERT:
 		{
-			AST tmp2644_AST_in = (AST)_t;
+			AST tmp2622_AST_in = (AST)_t;
 			match(_t,REVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REVOKE:
 		{
-			AST tmp2645_AST_in = (AST)_t;
+			AST tmp2623_AST_in = (AST)_t;
 			match(_t,REVOKE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RGBVALUE:
 		{
-			AST tmp2646_AST_in = (AST)_t;
+			AST tmp2624_AST_in = (AST)_t;
 			match(_t,RGBVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHT:
 		{
-			AST tmp2647_AST_in = (AST)_t;
+			AST tmp2625_AST_in = (AST)_t;
 			match(_t,RIGHT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp2648_AST_in = (AST)_t;
+			AST tmp2626_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTTRIM:
 		{
-			AST tmp2649_AST_in = (AST)_t;
+			AST tmp2627_AST_in = (AST)_t;
 			match(_t,RIGHTTRIM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROUND:
 		{
-			AST tmp2650_AST_in = (AST)_t;
+			AST tmp2628_AST_in = (AST)_t;
 			match(_t,ROUND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROW:
 		{
-			AST tmp2651_AST_in = (AST)_t;
+			AST tmp2629_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWHEIGHTCHARS:
 		{
-			AST tmp2652_AST_in = (AST)_t;
+			AST tmp2630_AST_in = (AST)_t;
 			match(_t,ROWHEIGHTCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWHEIGHTPIXELS:
 		{
-			AST tmp2653_AST_in = (AST)_t;
+			AST tmp2631_AST_in = (AST)_t;
 			match(_t,ROWHEIGHTPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST tmp2654_AST_in = (AST)_t;
+			AST tmp2632_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWOF:
 		{
-			AST tmp2655_AST_in = (AST)_t;
+			AST tmp2633_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RULE:
 		{
-			AST tmp2656_AST_in = (AST)_t;
+			AST tmp2634_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RUN:
 		{
-			AST tmp2657_AST_in = (AST)_t;
+			AST tmp2635_AST_in = (AST)_t;
 			match(_t,RUN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RUNPROCEDURE:
 		{
-			AST tmp2658_AST_in = (AST)_t;
+			AST tmp2636_AST_in = (AST)_t;
 			match(_t,RUNPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAVE:
 		{
-			AST tmp2659_AST_in = (AST)_t;
+			AST tmp2637_AST_in = (AST)_t;
 			match(_t,SAVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAVECACHE:
 		{
-			AST tmp2660_AST_in = (AST)_t;
+			AST tmp2638_AST_in = (AST)_t;
 			match(_t,SAVECACHE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAVEAS:
 		{
-			AST tmp2661_AST_in = (AST)_t;
+			AST tmp2639_AST_in = (AST)_t;
 			match(_t,SAVEAS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXCOMPLETE:
 		{
-			AST tmp2662_AST_in = (AST)_t;
+			AST tmp2640_AST_in = (AST)_t;
 			match(_t,SAXCOMPLETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXPARSERERROR:
 		{
-			AST tmp2663_AST_in = (AST)_t;
+			AST tmp2641_AST_in = (AST)_t;
 			match(_t,SAXPARSERERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXREADER:
 		{
-			AST tmp2664_AST_in = (AST)_t;
+			AST tmp2642_AST_in = (AST)_t;
 			match(_t,SAXREADER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXRUNNING:
 		{
-			AST tmp2665_AST_in = (AST)_t;
+			AST tmp2643_AST_in = (AST)_t;
 			match(_t,SAXRUNNING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXUNINITIALIZED:
 		{
-			AST tmp2666_AST_in = (AST)_t;
+			AST tmp2644_AST_in = (AST)_t;
 			match(_t,SAXUNINITIALIZED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCHEMA:
 		{
-			AST tmp2667_AST_in = (AST)_t;
+			AST tmp2645_AST_in = (AST)_t;
 			match(_t,SCHEMA);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCREEN:
 		{
-			AST tmp2668_AST_in = (AST)_t;
+			AST tmp2646_AST_in = (AST)_t;
 			match(_t,SCREEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCREENIO:
 		{
-			AST tmp2669_AST_in = (AST)_t;
+			AST tmp2647_AST_in = (AST)_t;
 			match(_t,SCREENIO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCREENLINES:
 		{
-			AST tmp2670_AST_in = (AST)_t;
+			AST tmp2648_AST_in = (AST)_t;
 			match(_t,SCREENLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLL:
 		{
-			AST tmp2671_AST_in = (AST)_t;
+			AST tmp2649_AST_in = (AST)_t;
 			match(_t,SCROLL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLABLE:
 		{
-			AST tmp2672_AST_in = (AST)_t;
+			AST tmp2650_AST_in = (AST)_t;
 			match(_t,SCROLLABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLBARHORIZONTAL:
 		{
-			AST tmp2673_AST_in = (AST)_t;
+			AST tmp2651_AST_in = (AST)_t;
 			match(_t,SCROLLBARHORIZONTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLBARVERTICAL:
 		{
-			AST tmp2674_AST_in = (AST)_t;
+			AST tmp2652_AST_in = (AST)_t;
 			match(_t,SCROLLBARVERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLING:
 		{
-			AST tmp2675_AST_in = (AST)_t;
+			AST tmp2653_AST_in = (AST)_t;
 			match(_t,SCROLLING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SDBNAME:
 		{
-			AST tmp2676_AST_in = (AST)_t;
+			AST tmp2654_AST_in = (AST)_t;
 			match(_t,SDBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCH:
 		{
-			AST tmp2677_AST_in = (AST)_t;
+			AST tmp2655_AST_in = (AST)_t;
 			match(_t,SEARCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCHSELF:
 		{
-			AST tmp2678_AST_in = (AST)_t;
+			AST tmp2656_AST_in = (AST)_t;
 			match(_t,SEARCHSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCHTARGET:
 		{
-			AST tmp2679_AST_in = (AST)_t;
+			AST tmp2657_AST_in = (AST)_t;
 			match(_t,SEARCHTARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECTION:
 		{
-			AST tmp2680_AST_in = (AST)_t;
+			AST tmp2658_AST_in = (AST)_t;
 			match(_t,SECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEEK:
 		{
-			AST tmp2681_AST_in = (AST)_t;
+			AST tmp2659_AST_in = (AST)_t;
 			match(_t,SEEK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECT:
 		{
-			AST tmp2682_AST_in = (AST)_t;
+			AST tmp2660_AST_in = (AST)_t;
 			match(_t,SELECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTION:
 		{
-			AST tmp2683_AST_in = (AST)_t;
+			AST tmp2661_AST_in = (AST)_t;
 			match(_t,SELECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp2684_AST_in = (AST)_t;
+			AST tmp2662_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELF:
 		{
-			AST tmp2685_AST_in = (AST)_t;
+			AST tmp2663_AST_in = (AST)_t;
 			match(_t,SELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEND:
 		{
-			AST tmp2686_AST_in = (AST)_t;
+			AST tmp2664_AST_in = (AST)_t;
 			match(_t,SEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SENDSQLSTATEMENT:
 		{
-			AST tmp2687_AST_in = (AST)_t;
+			AST tmp2665_AST_in = (AST)_t;
 			match(_t,SENDSQLSTATEMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEPARATECONNECTION:
 		{
-			AST tmp2688_AST_in = (AST)_t;
+			AST tmp2666_AST_in = (AST)_t;
 			match(_t,SEPARATECONNECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEPARATORS:
 		{
-			AST tmp2689_AST_in = (AST)_t;
+			AST tmp2667_AST_in = (AST)_t;
 			match(_t,SEPARATORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SERVER:
 		{
-			AST tmp2690_AST_in = (AST)_t;
+			AST tmp2668_AST_in = (AST)_t;
 			match(_t,SERVER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SERVERSOCKET:
 		{
-			AST tmp2691_AST_in = (AST)_t;
+			AST tmp2669_AST_in = (AST)_t;
 			match(_t,SERVERSOCKET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SESSION:
 		{
-			AST tmp2692_AST_in = (AST)_t;
+			AST tmp2670_AST_in = (AST)_t;
 			match(_t,SESSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SET:
 		{
-			AST tmp2693_AST_in = (AST)_t;
+			AST tmp2671_AST_in = (AST)_t;
 			match(_t,SET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETATTRCALLTYPE:
 		{
-			AST tmp2694_AST_in = (AST)_t;
+			AST tmp2672_AST_in = (AST)_t;
 			match(_t,SETATTRCALLTYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETBYTEORDER:
 		{
-			AST tmp2695_AST_in = (AST)_t;
+			AST tmp2673_AST_in = (AST)_t;
 			match(_t,SETBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETCONTENTS:
 		{
-			AST tmp2696_AST_in = (AST)_t;
+			AST tmp2674_AST_in = (AST)_t;
 			match(_t,SETCONTENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETCURRENTVALUE:
 		{
-			AST tmp2697_AST_in = (AST)_t;
+			AST tmp2675_AST_in = (AST)_t;
 			match(_t,SETCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETPOINTERVALUE:
 		{
-			AST tmp2698_AST_in = (AST)_t;
+			AST tmp2676_AST_in = (AST)_t;
 			match(_t,SETPOINTERVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETSIZE:
 		{
-			AST tmp2699_AST_in = (AST)_t;
+			AST tmp2677_AST_in = (AST)_t;
 			match(_t,SETSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETUSERID:
 		{
-			AST tmp2700_AST_in = (AST)_t;
+			AST tmp2678_AST_in = (AST)_t;
 			match(_t,SETUSERID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARELOCK:
 		{
-			AST tmp2701_AST_in = (AST)_t;
+			AST tmp2679_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHARED:
 		{
-			AST tmp2702_AST_in = (AST)_t;
+			AST tmp2680_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHORT:
 		{
-			AST tmp2703_AST_in = (AST)_t;
+			AST tmp2681_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHOWSTATS:
 		{
-			AST tmp2704_AST_in = (AST)_t;
+			AST tmp2682_AST_in = (AST)_t;
 			match(_t,SHOWSTATS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIDELABELS:
 		{
-			AST tmp2705_AST_in = (AST)_t;
+			AST tmp2683_AST_in = (AST)_t;
 			match(_t,SIDELABELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SILENT:
 		{
-			AST tmp2706_AST_in = (AST)_t;
+			AST tmp2684_AST_in = (AST)_t;
 			match(_t,SILENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIMPLE:
 		{
-			AST tmp2707_AST_in = (AST)_t;
+			AST tmp2685_AST_in = (AST)_t;
 			match(_t,SIMPLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SINGLE:
 		{
-			AST tmp2708_AST_in = (AST)_t;
+			AST tmp2686_AST_in = (AST)_t;
 			match(_t,SINGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZE:
 		{
-			AST tmp2709_AST_in = (AST)_t;
+			AST tmp2687_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZECHARS:
 		{
-			AST tmp2710_AST_in = (AST)_t;
+			AST tmp2688_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZEPIXELS:
 		{
-			AST tmp2711_AST_in = (AST)_t;
+			AST tmp2689_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SKIP:
 		{
-			AST tmp2712_AST_in = (AST)_t;
+			AST tmp2690_AST_in = (AST)_t;
 			match(_t,SKIP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SKIPDELETEDRECORD:
 		{
-			AST tmp2713_AST_in = (AST)_t;
+			AST tmp2691_AST_in = (AST)_t;
 			match(_t,SKIPDELETEDRECORD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp2714_AST_in = (AST)_t;
+			AST tmp2692_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SMALLINT:
 		{
-			AST tmp2715_AST_in = (AST)_t;
+			AST tmp2693_AST_in = (AST)_t;
 			match(_t,SMALLINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOAPHEADER:
 		{
-			AST tmp2716_AST_in = (AST)_t;
+			AST tmp2694_AST_in = (AST)_t;
 			match(_t,SOAPHEADER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOAPHEADERENTRYREF:
 		{
-			AST tmp2717_AST_in = (AST)_t;
+			AST tmp2695_AST_in = (AST)_t;
 			match(_t,SOAPHEADERENTRYREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp2718_AST_in = (AST)_t;
+			AST tmp2696_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOME:
 		{
-			AST tmp2719_AST_in = (AST)_t;
+			AST tmp2697_AST_in = (AST)_t;
 			match(_t,SOME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SORT:
 		{
-			AST tmp2720_AST_in = (AST)_t;
+			AST tmp2698_AST_in = (AST)_t;
 			match(_t,SORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCE:
 		{
-			AST tmp2721_AST_in = (AST)_t;
+			AST tmp2699_AST_in = (AST)_t;
 			match(_t,SOURCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCEPROCEDURE:
 		{
-			AST tmp2722_AST_in = (AST)_t;
+			AST tmp2700_AST_in = (AST)_t;
 			match(_t,SOURCEPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SPACE:
 		{
-			AST tmp2723_AST_in = (AST)_t;
+			AST tmp2701_AST_in = (AST)_t;
 			match(_t,SPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SQL:
 		{
-			AST tmp2724_AST_in = (AST)_t;
+			AST tmp2702_AST_in = (AST)_t;
 			match(_t,SQL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SQRT:
 		{
-			AST tmp2725_AST_in = (AST)_t;
+			AST tmp2703_AST_in = (AST)_t;
 			match(_t,SQRT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case START:
 		{
-			AST tmp2726_AST_in = (AST)_t;
+			AST tmp2704_AST_in = (AST)_t;
 			match(_t,START);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTING:
 		{
-			AST tmp2727_AST_in = (AST)_t;
+			AST tmp2705_AST_in = (AST)_t;
 			match(_t,STARTING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTMOVE:
 		{
-			AST tmp2728_AST_in = (AST)_t;
+			AST tmp2706_AST_in = (AST)_t;
 			match(_t,STARTMOVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTRESIZE:
 		{
-			AST tmp2729_AST_in = (AST)_t;
+			AST tmp2707_AST_in = (AST)_t;
 			match(_t,STARTRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTROWRESIZE:
 		{
-			AST tmp2730_AST_in = (AST)_t;
+			AST tmp2708_AST_in = (AST)_t;
 			match(_t,STARTROWRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STATUS:
 		{
-			AST tmp2731_AST_in = (AST)_t;
+			AST tmp2709_AST_in = (AST)_t;
 			match(_t,STATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STATUSBAR:
 		{
-			AST tmp2732_AST_in = (AST)_t;
+			AST tmp2710_AST_in = (AST)_t;
 			match(_t,STATUSBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STDCALL_KW:
 		{
-			AST tmp2733_AST_in = (AST)_t;
+			AST tmp2711_AST_in = (AST)_t;
 			match(_t,STDCALL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRETCHTOFIT:
 		{
-			AST tmp2734_AST_in = (AST)_t;
+			AST tmp2712_AST_in = (AST)_t;
 			match(_t,STRETCHTOFIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOP:
 		{
-			AST tmp2735_AST_in = (AST)_t;
+			AST tmp2713_AST_in = (AST)_t;
 			match(_t,STOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOREDPROCEDURE:
 		{
-			AST tmp2736_AST_in = (AST)_t;
+			AST tmp2714_AST_in = (AST)_t;
 			match(_t,STOREDPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STREAM:
 		{
-			AST tmp2737_AST_in = (AST)_t;
+			AST tmp2715_AST_in = (AST)_t;
 			match(_t,STREAM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STREAMIO:
 		{
-			AST tmp2738_AST_in = (AST)_t;
+			AST tmp2716_AST_in = (AST)_t;
 			match(_t,STREAMIO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRING:
 		{
-			AST tmp2739_AST_in = (AST)_t;
+			AST tmp2717_AST_in = (AST)_t;
 			match(_t,STRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRINGXREF:
 		{
-			AST tmp2740_AST_in = (AST)_t;
+			AST tmp2718_AST_in = (AST)_t;
 			match(_t,STRINGXREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBAVERAGE:
 		{
-			AST tmp2741_AST_in = (AST)_t;
+			AST tmp2719_AST_in = (AST)_t;
 			match(_t,SUBAVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBCOUNT:
 		{
-			AST tmp2742_AST_in = (AST)_t;
+			AST tmp2720_AST_in = (AST)_t;
 			match(_t,SUBCOUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMAXIMUM:
 		{
-			AST tmp2743_AST_in = (AST)_t;
+			AST tmp2721_AST_in = (AST)_t;
 			match(_t,SUBMAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp2744_AST_in = (AST)_t;
+			AST tmp2722_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp2745_AST_in = (AST)_t;
+			AST tmp2723_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMINIMUM:
 		{
-			AST tmp2746_AST_in = (AST)_t;
+			AST tmp2724_AST_in = (AST)_t;
 			match(_t,SUBMINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBTOTAL:
 		{
-			AST tmp2747_AST_in = (AST)_t;
+			AST tmp2725_AST_in = (AST)_t;
 			match(_t,SUBTOTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSCRIBE:
 		{
-			AST tmp2748_AST_in = (AST)_t;
+			AST tmp2726_AST_in = (AST)_t;
 			match(_t,SUBSCRIBE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSTITUTE:
 		{
-			AST tmp2749_AST_in = (AST)_t;
+			AST tmp2727_AST_in = (AST)_t;
 			match(_t,SUBSTITUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSTRING:
 		{
-			AST tmp2750_AST_in = (AST)_t;
+			AST tmp2728_AST_in = (AST)_t;
 			match(_t,SUBSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUM:
 		{
-			AST tmp2751_AST_in = (AST)_t;
+			AST tmp2729_AST_in = (AST)_t;
 			match(_t,SUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUMMARY:
 		{
-			AST tmp2752_AST_in = (AST)_t;
+			AST tmp2730_AST_in = (AST)_t;
 			match(_t,SUMMARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUPER:
 		{
-			AST tmp2753_AST_in = (AST)_t;
+			AST tmp2731_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYSTEMDIALOG:
 		{
-			AST tmp2754_AST_in = (AST)_t;
+			AST tmp2732_AST_in = (AST)_t;
 			match(_t,SYSTEMDIALOG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYSTEMHELP:
 		{
-			AST tmp2755_AST_in = (AST)_t;
+			AST tmp2733_AST_in = (AST)_t;
 			match(_t,SYSTEMHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TABLE:
 		{
-			AST tmp2756_AST_in = (AST)_t;
+			AST tmp2734_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TABLEHANDLE:
 		{
-			AST tmp2757_AST_in = (AST)_t;
+			AST tmp2735_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TABLENUMBER:
 		{
-			AST tmp2758_AST_in = (AST)_t;
+			AST tmp2736_AST_in = (AST)_t;
 			match(_t,TABLENUMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGET:
 		{
-			AST tmp2759_AST_in = (AST)_t;
+			AST tmp2737_AST_in = (AST)_t;
 			match(_t,TARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGETPROCEDURE:
 		{
-			AST tmp2760_AST_in = (AST)_t;
+			AST tmp2738_AST_in = (AST)_t;
 			match(_t,TARGETPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp2761_AST_in = (AST)_t;
+			AST tmp2739_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINAL:
 		{
-			AST tmp2762_AST_in = (AST)_t;
+			AST tmp2740_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINATE:
 		{
-			AST tmp2763_AST_in = (AST)_t;
+			AST tmp2741_AST_in = (AST)_t;
 			match(_t,TERMINATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXT:
 		{
-			AST tmp2764_AST_in = (AST)_t;
+			AST tmp2742_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTCURSOR:
 		{
-			AST tmp2765_AST_in = (AST)_t;
+			AST tmp2743_AST_in = (AST)_t;
 			match(_t,TEXTCURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTSEGGROW:
 		{
-			AST tmp2766_AST_in = (AST)_t;
+			AST tmp2744_AST_in = (AST)_t;
 			match(_t,TEXTSEGGROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THEN:
 		{
-			AST tmp2767_AST_in = (AST)_t;
+			AST tmp2745_AST_in = (AST)_t;
 			match(_t,THEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISPROCEDURE:
 		{
-			AST tmp2768_AST_in = (AST)_t;
+			AST tmp2746_AST_in = (AST)_t;
 			match(_t,THISPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THREED:
 		{
-			AST tmp2769_AST_in = (AST)_t;
+			AST tmp2747_AST_in = (AST)_t;
 			match(_t,THREED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THROUGH:
 		{
-			AST tmp2770_AST_in = (AST)_t;
+			AST tmp2748_AST_in = (AST)_t;
 			match(_t,THROUGH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TICMARKS:
 		{
-			AST tmp2771_AST_in = (AST)_t;
+			AST tmp2749_AST_in = (AST)_t;
 			match(_t,TICMARKS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TIME:
 		{
-			AST tmp2772_AST_in = (AST)_t;
+			AST tmp2750_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TIMEZONE:
 		{
-			AST tmp2773_AST_in = (AST)_t;
+			AST tmp2751_AST_in = (AST)_t;
 			match(_t,TIMEZONE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TITLE:
 		{
-			AST tmp2774_AST_in = (AST)_t;
+			AST tmp2752_AST_in = (AST)_t;
 			match(_t,TITLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TO:
 		{
-			AST tmp2775_AST_in = (AST)_t;
+			AST tmp2753_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOOLTIP:
 		{
-			AST tmp2776_AST_in = (AST)_t;
+			AST tmp2754_AST_in = (AST)_t;
 			match(_t,TOOLTIP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOP:
 		{
-			AST tmp2777_AST_in = (AST)_t;
+			AST tmp2755_AST_in = (AST)_t;
 			match(_t,TOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOROWID:
 		{
-			AST tmp2778_AST_in = (AST)_t;
+			AST tmp2756_AST_in = (AST)_t;
 			match(_t,TOROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TODAY:
 		{
-			AST tmp2779_AST_in = (AST)_t;
+			AST tmp2757_AST_in = (AST)_t;
 			match(_t,TODAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp2780_AST_in = (AST)_t;
+			AST tmp2758_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOOLBAR:
 		{
-			AST tmp2781_AST_in = (AST)_t;
+			AST tmp2759_AST_in = (AST)_t;
 			match(_t,TOOLBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOPONLY:
 		{
-			AST tmp2782_AST_in = (AST)_t;
+			AST tmp2760_AST_in = (AST)_t;
 			match(_t,TOPONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOPIC:
 		{
-			AST tmp2783_AST_in = (AST)_t;
+			AST tmp2761_AST_in = (AST)_t;
 			match(_t,TOPIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOTAL:
 		{
-			AST tmp2784_AST_in = (AST)_t;
+			AST tmp2762_AST_in = (AST)_t;
 			match(_t,TOTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSACTION:
 		{
-			AST tmp2785_AST_in = (AST)_t;
+			AST tmp2763_AST_in = (AST)_t;
 			match(_t,TRANSACTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSACTIONMODE:
 		{
-			AST tmp2786_AST_in = (AST)_t;
+			AST tmp2764_AST_in = (AST)_t;
 			match(_t,TRANSACTIONMODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSPARENT:
 		{
-			AST tmp2787_AST_in = (AST)_t;
+			AST tmp2765_AST_in = (AST)_t;
 			match(_t,TRANSPARENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRAILING:
 		{
-			AST tmp2788_AST_in = (AST)_t;
+			AST tmp2766_AST_in = (AST)_t;
 			match(_t,TRAILING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRIGGER:
 		{
-			AST tmp2789_AST_in = (AST)_t;
+			AST tmp2767_AST_in = (AST)_t;
 			match(_t,TRIGGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRIGGERS:
 		{
-			AST tmp2790_AST_in = (AST)_t;
+			AST tmp2768_AST_in = (AST)_t;
 			match(_t,TRIGGERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRIM:
 		{
-			AST tmp2791_AST_in = (AST)_t;
+			AST tmp2769_AST_in = (AST)_t;
 			match(_t,TRIM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRUE_KW:
 		{
-			AST tmp2792_AST_in = (AST)_t;
+			AST tmp2770_AST_in = (AST)_t;
 			match(_t,TRUE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRUNCATE:
 		{
-			AST tmp2793_AST_in = (AST)_t;
+			AST tmp2771_AST_in = (AST)_t;
 			match(_t,TRUNCATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp2794_AST_in = (AST)_t;
+			AST tmp2772_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNBUFFERED:
 		{
-			AST tmp2795_AST_in = (AST)_t;
+			AST tmp2773_AST_in = (AST)_t;
 			match(_t,UNBUFFERED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNDERLINE:
 		{
-			AST tmp2796_AST_in = (AST)_t;
+			AST tmp2774_AST_in = (AST)_t;
 			match(_t,UNDERLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNDO:
 		{
-			AST tmp2797_AST_in = (AST)_t;
+			AST tmp2775_AST_in = (AST)_t;
 			match(_t,UNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNFORMATTED:
 		{
-			AST tmp2798_AST_in = (AST)_t;
+			AST tmp2776_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNLESSHIDDEN:
 		{
-			AST tmp2799_AST_in = (AST)_t;
+			AST tmp2777_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNION:
 		{
-			AST tmp2800_AST_in = (AST)_t;
+			AST tmp2778_AST_in = (AST)_t;
 			match(_t,UNION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNIQUE:
 		{
-			AST tmp2801_AST_in = (AST)_t;
+			AST tmp2779_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNIQUEMATCH:
 		{
-			AST tmp2802_AST_in = (AST)_t;
+			AST tmp2780_AST_in = (AST)_t;
 			match(_t,UNIQUEMATCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNIX:
 		{
-			AST tmp2803_AST_in = (AST)_t;
+			AST tmp2781_AST_in = (AST)_t;
 			match(_t,UNIX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNLOAD:
 		{
-			AST tmp2804_AST_in = (AST)_t;
+			AST tmp2782_AST_in = (AST)_t;
 			match(_t,UNLOAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDBYTE:
 		{
-			AST tmp2805_AST_in = (AST)_t;
+			AST tmp2783_AST_in = (AST)_t;
 			match(_t,UNSIGNEDBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDSHORT:
 		{
-			AST tmp2806_AST_in = (AST)_t;
+			AST tmp2784_AST_in = (AST)_t;
 			match(_t,UNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSUBSCRIBE:
 		{
-			AST tmp2807_AST_in = (AST)_t;
+			AST tmp2785_AST_in = (AST)_t;
 			match(_t,UNSUBSCRIBE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UP:
 		{
-			AST tmp2808_AST_in = (AST)_t;
+			AST tmp2786_AST_in = (AST)_t;
 			match(_t,UP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UPDATE:
 		{
-			AST tmp2809_AST_in = (AST)_t;
+			AST tmp2787_AST_in = (AST)_t;
 			match(_t,UPDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case URLDECODE:
 		{
-			AST tmp2810_AST_in = (AST)_t;
+			AST tmp2788_AST_in = (AST)_t;
 			match(_t,URLDECODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case URLENCODE:
 		{
-			AST tmp2811_AST_in = (AST)_t;
+			AST tmp2789_AST_in = (AST)_t;
 			match(_t,URLENCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USE:
 		{
-			AST tmp2812_AST_in = (AST)_t;
+			AST tmp2790_AST_in = (AST)_t;
 			match(_t,USE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEDICTEXPS:
 		{
-			AST tmp2813_AST_in = (AST)_t;
+			AST tmp2791_AST_in = (AST)_t;
 			match(_t,USEDICTEXPS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEFILENAME:
 		{
-			AST tmp2814_AST_in = (AST)_t;
+			AST tmp2792_AST_in = (AST)_t;
 			match(_t,USEFILENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEINDEX:
 		{
-			AST tmp2815_AST_in = (AST)_t;
+			AST tmp2793_AST_in = (AST)_t;
 			match(_t,USEINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEREVVIDEO:
 		{
-			AST tmp2816_AST_in = (AST)_t;
+			AST tmp2794_AST_in = (AST)_t;
 			match(_t,USEREVVIDEO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USETEXT:
 		{
-			AST tmp2817_AST_in = (AST)_t;
+			AST tmp2795_AST_in = (AST)_t;
 			match(_t,USETEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEUNDERLINE:
 		{
-			AST tmp2818_AST_in = (AST)_t;
+			AST tmp2796_AST_in = (AST)_t;
 			match(_t,USEUNDERLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USER:
 		{
-			AST tmp2819_AST_in = (AST)_t;
+			AST tmp2797_AST_in = (AST)_t;
 			match(_t,USER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USERID:
 		{
-			AST tmp2820_AST_in = (AST)_t;
+			AST tmp2798_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USING:
 		{
-			AST tmp2821_AST_in = (AST)_t;
+			AST tmp2799_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case V6FRAME:
 		{
-			AST tmp2822_AST_in = (AST)_t;
+			AST tmp2800_AST_in = (AST)_t;
 			match(_t,V6FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDEVENT:
 		{
-			AST tmp2823_AST_in = (AST)_t;
+			AST tmp2801_AST_in = (AST)_t;
 			match(_t,VALIDEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDHANDLE:
 		{
-			AST tmp2824_AST_in = (AST)_t;
+			AST tmp2802_AST_in = (AST)_t;
 			match(_t,VALIDHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDATE:
 		{
-			AST tmp2825_AST_in = (AST)_t;
+			AST tmp2803_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALUE:
 		{
-			AST tmp2826_AST_in = (AST)_t;
+			AST tmp2804_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALUECHANGED:
 		{
-			AST tmp2827_AST_in = (AST)_t;
+			AST tmp2805_AST_in = (AST)_t;
 			match(_t,VALUECHANGED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALUES:
 		{
-			AST tmp2828_AST_in = (AST)_t;
+			AST tmp2806_AST_in = (AST)_t;
 			match(_t,VALUES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VARIABLE:
 		{
-			AST tmp2829_AST_in = (AST)_t;
+			AST tmp2807_AST_in = (AST)_t;
 			match(_t,VARIABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VERBOSE:
 		{
-			AST tmp2830_AST_in = (AST)_t;
+			AST tmp2808_AST_in = (AST)_t;
 			match(_t,VERBOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VERTICAL:
 		{
-			AST tmp2831_AST_in = (AST)_t;
+			AST tmp2809_AST_in = (AST)_t;
 			match(_t,VERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VIEW:
 		{
-			AST tmp2832_AST_in = (AST)_t;
+			AST tmp2810_AST_in = (AST)_t;
 			match(_t,VIEW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VIEWAS:
 		{
-			AST tmp2833_AST_in = (AST)_t;
+			AST tmp2811_AST_in = (AST)_t;
 			match(_t,VIEWAS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VMS:
 		{
-			AST tmp2834_AST_in = (AST)_t;
+			AST tmp2812_AST_in = (AST)_t;
 			match(_t,VMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WAIT:
 		{
-			AST tmp2835_AST_in = (AST)_t;
+			AST tmp2813_AST_in = (AST)_t;
 			match(_t,WAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WAITFOR:
 		{
-			AST tmp2836_AST_in = (AST)_t;
+			AST tmp2814_AST_in = (AST)_t;
 			match(_t,WAITFOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WARNING:
 		{
-			AST tmp2837_AST_in = (AST)_t;
+			AST tmp2815_AST_in = (AST)_t;
 			match(_t,WARNING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEBCONTEXT:
 		{
-			AST tmp2838_AST_in = (AST)_t;
+			AST tmp2816_AST_in = (AST)_t;
 			match(_t,WEBCONTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEEKDAY:
 		{
-			AST tmp2839_AST_in = (AST)_t;
+			AST tmp2817_AST_in = (AST)_t;
 			match(_t,WEEKDAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WHEN:
 		{
-			AST tmp2840_AST_in = (AST)_t;
+			AST tmp2818_AST_in = (AST)_t;
 			match(_t,WHEN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WHERE:
 		{
-			AST tmp2841_AST_in = (AST)_t;
+			AST tmp2819_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WHILE:
 		{
-			AST tmp2842_AST_in = (AST)_t;
+			AST tmp2820_AST_in = (AST)_t;
 			match(_t,WHILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGET:
 		{
-			AST tmp2843_AST_in = (AST)_t;
+			AST tmp2821_AST_in = (AST)_t;
 			match(_t,WIDGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST tmp2844_AST_in = (AST)_t;
+			AST tmp2822_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETPOOL:
 		{
-			AST tmp2845_AST_in = (AST)_t;
+			AST tmp2823_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTH:
 		{
-			AST tmp2846_AST_in = (AST)_t;
+			AST tmp2824_AST_in = (AST)_t;
 			match(_t,WIDTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTHCHARS:
 		{
-			AST tmp2847_AST_in = (AST)_t;
+			AST tmp2825_AST_in = (AST)_t;
 			match(_t,WIDTHCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTHPIXELS:
 		{
-			AST tmp2848_AST_in = (AST)_t;
+			AST tmp2826_AST_in = (AST)_t;
 			match(_t,WIDTHPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOW:
 		{
-			AST tmp2849_AST_in = (AST)_t;
+			AST tmp2827_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWDELAYEDMINIMIZE:
 		{
-			AST tmp2850_AST_in = (AST)_t;
+			AST tmp2828_AST_in = (AST)_t;
 			match(_t,WINDOWDELAYEDMINIMIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWMAXIMIZED:
 		{
-			AST tmp2851_AST_in = (AST)_t;
+			AST tmp2829_AST_in = (AST)_t;
 			match(_t,WINDOWMAXIMIZED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWMINIMIZED:
 		{
-			AST tmp2852_AST_in = (AST)_t;
+			AST tmp2830_AST_in = (AST)_t;
 			match(_t,WINDOWMINIMIZED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWNAME:
 		{
-			AST tmp2853_AST_in = (AST)_t;
+			AST tmp2831_AST_in = (AST)_t;
 			match(_t,WINDOWNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWNORMAL:
 		{
-			AST tmp2854_AST_in = (AST)_t;
+			AST tmp2832_AST_in = (AST)_t;
 			match(_t,WINDOWNORMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WITH:
 		{
-			AST tmp2855_AST_in = (AST)_t;
+			AST tmp2833_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WORDINDEX:
 		{
-			AST tmp2856_AST_in = (AST)_t;
+			AST tmp2834_AST_in = (AST)_t;
 			match(_t,WORDINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WORKTABLE:
 		{
-			AST tmp2857_AST_in = (AST)_t;
+			AST tmp2835_AST_in = (AST)_t;
 			match(_t,WORKTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WRITE:
 		{
-			AST tmp2858_AST_in = (AST)_t;
+			AST tmp2836_AST_in = (AST)_t;
 			match(_t,WRITE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case X:
 		{
-			AST tmp2859_AST_in = (AST)_t;
+			AST tmp2837_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp2860_AST_in = (AST)_t;
+			AST tmp2838_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp2861_AST_in = (AST)_t;
+			AST tmp2839_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XOF:
 		{
-			AST tmp2862_AST_in = (AST)_t;
+			AST tmp2840_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XCODE:
 		{
-			AST tmp2863_AST_in = (AST)_t;
+			AST tmp2841_AST_in = (AST)_t;
 			match(_t,XCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XREF:
 		{
-			AST tmp2864_AST_in = (AST)_t;
+			AST tmp2842_AST_in = (AST)_t;
 			match(_t,XREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Y:
 		{
-			AST tmp2865_AST_in = (AST)_t;
+			AST tmp2843_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YOF:
 		{
-			AST tmp2866_AST_in = (AST)_t;
+			AST tmp2844_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YEAR:
 		{
-			AST tmp2867_AST_in = (AST)_t;
+			AST tmp2845_AST_in = (AST)_t;
 			match(_t,YEAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YES:
 		{
-			AST tmp2868_AST_in = (AST)_t;
+			AST tmp2846_AST_in = (AST)_t;
 			match(_t,YES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YESNO:
 		{
-			AST tmp2869_AST_in = (AST)_t;
+			AST tmp2847_AST_in = (AST)_t;
 			match(_t,YESNO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YESNOCANCEL:
 		{
-			AST tmp2870_AST_in = (AST)_t;
+			AST tmp2848_AST_in = (AST)_t;
 			match(_t,YESNOCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64DECODE:
 		{
-			AST tmp2871_AST_in = (AST)_t;
+			AST tmp2849_AST_in = (AST)_t;
 			match(_t,BASE64DECODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64ENCODE:
 		{
-			AST tmp2872_AST_in = (AST)_t;
+			AST tmp2850_AST_in = (AST)_t;
 			match(_t,BASE64ENCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BATCHSIZE:
 		{
-			AST tmp2873_AST_in = (AST)_t;
+			AST tmp2851_AST_in = (AST)_t;
 			match(_t,BATCHSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEFORETABLE:
 		{
-			AST tmp2874_AST_in = (AST)_t;
+			AST tmp2852_AST_in = (AST)_t;
 			match(_t,BEFORETABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COPYDATASET:
 		{
-			AST tmp2875_AST_in = (AST)_t;
+			AST tmp2853_AST_in = (AST)_t;
 			match(_t,COPYDATASET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COPYTEMPTABLE:
 		{
-			AST tmp2876_AST_in = (AST)_t;
+			AST tmp2854_AST_in = (AST)_t;
 			match(_t,COPYTEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCEMODIFIED:
 		{
-			AST tmp2877_AST_in = (AST)_t;
+			AST tmp2855_AST_in = (AST)_t;
 			match(_t,DATASOURCEMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECRYPT:
 		{
-			AST tmp2878_AST_in = (AST)_t;
+			AST tmp2856_AST_in = (AST)_t;
 			match(_t,DECRYPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELETECHARACTER:
 		{
-			AST tmp2879_AST_in = (AST)_t;
+			AST tmp2857_AST_in = (AST)_t;
 			match(_t,DELETECHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENABLEDFIELDS:
 		{
-			AST tmp2880_AST_in = (AST)_t;
+			AST tmp2858_AST_in = (AST)_t;
 			match(_t,ENABLEDFIELDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCRYPT:
 		{
-			AST tmp2881_AST_in = (AST)_t;
+			AST tmp2859_AST_in = (AST)_t;
 			match(_t,ENCRYPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCRYPTIONSALT:
 		{
-			AST tmp2882_AST_in = (AST)_t;
+			AST tmp2860_AST_in = (AST)_t;
 			match(_t,ENCRYPTIONSALT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMLONGINPUT:
 		{
-			AST tmp2883_AST_in = (AST)_t;
+			AST tmp2861_AST_in = (AST)_t;
 			match(_t,FORMLONGINPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEPBEKEY:
 		{
-			AST tmp2884_AST_in = (AST)_t;
+			AST tmp2862_AST_in = (AST)_t;
 			match(_t,GENERATEPBEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEPBESALT:
 		{
-			AST tmp2885_AST_in = (AST)_t;
+			AST tmp2863_AST_in = (AST)_t;
 			match(_t,GENERATEPBESALT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATERANDOMKEY:
 		{
-			AST tmp2886_AST_in = (AST)_t;
+			AST tmp2864_AST_in = (AST)_t;
 			match(_t,GENERATERANDOMKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGILONGVALUE:
 		{
-			AST tmp2887_AST_in = (AST)_t;
+			AST tmp2865_AST_in = (AST)_t;
 			match(_t,GETCGILONGVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTBATCH:
 		{
-			AST tmp2888_AST_in = (AST)_t;
+			AST tmp2866_AST_in = (AST)_t;
 			match(_t,LASTBATCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MD5DIGEST:
 		{
-			AST tmp2889_AST_in = (AST)_t;
+			AST tmp2867_AST_in = (AST)_t;
 			match(_t,MD5DIGEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MERGEBYFIELD:
 		{
-			AST tmp2890_AST_in = (AST)_t;
+			AST tmp2868_AST_in = (AST)_t;
 			match(_t,MERGEBYFIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORMALIZE:
 		{
-			AST tmp2891_AST_in = (AST)_t;
+			AST tmp2869_AST_in = (AST)_t;
 			match(_t,NORMALIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PBEHASHALGORITHM:
 		{
-			AST tmp2892_AST_in = (AST)_t;
+			AST tmp2870_AST_in = (AST)_t;
 			match(_t,PBEHASHALGORITHM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PBEKEYROUNDS:
 		{
-			AST tmp2893_AST_in = (AST)_t;
+			AST tmp2871_AST_in = (AST)_t;
 			match(_t,PBEKEYROUNDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREFERDATASET:
 		{
-			AST tmp2894_AST_in = (AST)_t;
+			AST tmp2872_AST_in = (AST)_t;
 			match(_t,PREFERDATASET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REJECTED:
 		{
-			AST tmp2895_AST_in = (AST)_t;
+			AST tmp2873_AST_in = (AST)_t;
 			match(_t,REJECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONMODE:
 		{
-			AST tmp2896_AST_in = (AST)_t;
+			AST tmp2874_AST_in = (AST)_t;
 			match(_t,REPOSITIONMODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWSTATE:
 		{
-			AST tmp2897_AST_in = (AST)_t;
+			AST tmp2875_AST_in = (AST)_t;
 			match(_t,ROWSTATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWUNMODIFIED:
 		{
-			AST tmp2898_AST_in = (AST)_t;
+			AST tmp2876_AST_in = (AST)_t;
 			match(_t,ROWUNMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWDELETED:
 		{
-			AST tmp2899_AST_in = (AST)_t;
+			AST tmp2877_AST_in = (AST)_t;
 			match(_t,ROWDELETED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWMODIFIED:
 		{
-			AST tmp2900_AST_in = (AST)_t;
+			AST tmp2878_AST_in = (AST)_t;
 			match(_t,ROWMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWCREATED:
 		{
-			AST tmp2901_AST_in = (AST)_t;
+			AST tmp2879_AST_in = (AST)_t;
 			match(_t,ROWCREATED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECURITYPOLICY:
 		{
-			AST tmp2902_AST_in = (AST)_t;
+			AST tmp2880_AST_in = (AST)_t;
 			match(_t,SECURITYPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHA1DIGEST:
 		{
-			AST tmp2903_AST_in = (AST)_t;
+			AST tmp2881_AST_in = (AST)_t;
 			match(_t,SHA1DIGEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SSLSERVERNAME:
 		{
-			AST tmp2904_AST_in = (AST)_t;
+			AST tmp2882_AST_in = (AST)_t;
 			match(_t,SSLSERVERNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONALGORITHM:
 		{
-			AST tmp2905_AST_in = (AST)_t;
+			AST tmp2883_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONALGORITHM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONIV:
 		{
-			AST tmp2906_AST_in = (AST)_t;
+			AST tmp2884_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONIV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONKEY:
 		{
-			AST tmp2907_AST_in = (AST)_t;
+			AST tmp2885_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICSUPPORT:
 		{
-			AST tmp2908_AST_in = (AST)_t;
+			AST tmp2886_AST_in = (AST)_t;
 			match(_t,SYMMETRICSUPPORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSINITPROCEDURE:
 		{
-			AST tmp2909_AST_in = (AST)_t;
+			AST tmp2887_AST_in = (AST)_t;
 			match(_t,TRANSINITPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
@@ -40708,12 +40604,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t247 = _t;
-				AST tmp2910_AST_in = (AST)_t;
+				AST __t242 = _t;
+				AST tmp2888_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop249:
+				_loop244:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -40721,12 +40617,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop249;
+						break _loop244;
 					}
 					
 				} while (true);
 				}
-				_t = __t247;
+				_t = __t242;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -40753,7 +40649,7 @@
 		case Assign_from_buffer:
 		{
 			{
-			_loop256:
+			_loop251:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -40766,13 +40662,13 @@
 					switch ( _t.getType()) {
 					case WHEN:
 					{
-						AST __t252 = _t;
-						AST tmp2911_AST_in = (AST)_t;
+						AST __t247 = _t;
+						AST tmp2889_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t252;
+						_t = __t247;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -40795,26 +40691,26 @@
 				}
 				case Assign_from_buffer:
 				{
-					AST __t253 = _t;
-					AST tmp2912_AST_in = (AST)_t;
+					AST __t248 = _t;
+					AST tmp2890_AST_in = (AST)_t;
 					match(_t,Assign_from_buffer);
 					_t = _t.getFirstChild();
 					fld(_t,CQ.UPDATING);
 					_t = _retTree;
-					_t = __t253;
+					_t = __t248;
 					_t = _t.getNextSibling();
 					{
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case WHEN:
 					{
-						AST __t255 = _t;
-						AST tmp2913_AST_in = (AST)_t;
+						AST __t250 = _t;
+						AST tmp2891_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t255;
+						_t = __t250;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -40837,7 +40733,7 @@
 				}
 				default:
 				{
-					break _loop256;
+					break _loop251;
 				}
 				}
 			} while (true);
@@ -40856,8 +40752,8 @@
 		
 		AST assign_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t258 = _t;
-		AST tmp2914_AST_in = (AST)_t;
+		AST __t253 = _t;
+		AST tmp2892_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		{
@@ -40952,7 +40848,7 @@
 		}
 		expression(_t);
 		_t = _retTree;
-		_t = __t258;
+		_t = __t253;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -40961,8 +40857,8 @@
 		
 		AST atphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t261 = _t;
-		AST tmp2915_AST_in = (AST)_t;
+		AST __t256 = _t;
+		AST tmp2893_AST_in = (AST)_t;
 		match(_t,AT);
 		_t = _t.getFirstChild();
 		{
@@ -40987,21 +40883,21 @@
 		switch ( _t.getType()) {
 		case COLONALIGNED:
 		{
-			AST tmp2916_AST_in = (AST)_t;
+			AST tmp2894_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp2917_AST_in = (AST)_t;
+			AST tmp2895_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp2918_AST_in = (AST)_t;
+			AST tmp2896_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
@@ -41016,7 +40912,7 @@
 		}
 		}
 		}
-		_t = __t261;
+		_t = __t256;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -41029,97 +40925,97 @@
 		switch ( _t.getType()) {
 		case COLUMN:
 		{
-			AST __t265 = _t;
-			AST tmp2919_AST_in = (AST)_t;
+			AST __t260 = _t;
+			AST tmp2897_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t265;
+			_t = __t260;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNOF:
 		{
-			AST __t266 = _t;
-			AST tmp2920_AST_in = (AST)_t;
+			AST __t261 = _t;
+			AST tmp2898_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t266;
+			_t = __t261;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROW:
 		{
-			AST __t267 = _t;
-			AST tmp2921_AST_in = (AST)_t;
+			AST __t262 = _t;
+			AST tmp2899_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t267;
+			_t = __t262;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWOF:
 		{
-			AST __t268 = _t;
-			AST tmp2922_AST_in = (AST)_t;
+			AST __t263 = _t;
+			AST tmp2900_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t268;
+			_t = __t263;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case X:
 		{
-			AST __t269 = _t;
-			AST tmp2923_AST_in = (AST)_t;
+			AST __t264 = _t;
+			AST tmp2901_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t269;
+			_t = __t264;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XOF:
 		{
-			AST __t270 = _t;
-			AST tmp2924_AST_in = (AST)_t;
+			AST __t265 = _t;
+			AST tmp2902_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t270;
+			_t = __t265;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Y:
 		{
-			AST __t271 = _t;
-			AST tmp2925_AST_in = (AST)_t;
+			AST __t266 = _t;
+			AST tmp2903_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t271;
+			_t = __t266;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YOF:
 		{
-			AST __t272 = _t;
-			AST tmp2926_AST_in = (AST)_t;
+			AST __t267 = _t;
+			AST tmp2904_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t272;
+			_t = __t267;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -41148,14 +41044,14 @@
 			switch ( _t.getType()) {
 			case PLUS:
 			{
-				AST tmp2927_AST_in = (AST)_t;
+				AST tmp2905_AST_in = (AST)_t;
 				match(_t,PLUS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINUS:
 			{
-				AST tmp2928_AST_in = (AST)_t;
+				AST tmp2906_AST_in = (AST)_t;
 				match(_t,MINUS);
 				_t = _t.getNextSibling();
 				break;
@@ -41261,7 +41157,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TODAY)) {
-			AST tmp2929_AST_in = (AST)_t;
+			AST tmp2907_AST_in = (AST)_t;
 			match(_t,TODAY);
 			_t = _t.getNextSibling();
 		}
@@ -41277,46 +41173,46 @@
 		
 		}
 		{
-		_loop1984:
+		_loop1979:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LEFT:
 			{
-				AST __t1976 = _t;
-				AST tmp2930_AST_in = (AST)_t;
+				AST __t1971 = _t;
+				AST tmp2908_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
-				AST tmp2931_AST_in = (AST)_t;
+				AST tmp2909_AST_in = (AST)_t;
 				match(_t,OUTERJOIN);
 				_t = _t.getNextSibling();
-				_t = __t1976;
+				_t = __t1971;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OUTERJOIN:
 			{
-				AST tmp2932_AST_in = (AST)_t;
+				AST tmp2910_AST_in = (AST)_t;
 				match(_t,OUTERJOIN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OF:
 			{
-				AST __t1977 = _t;
-				AST tmp2933_AST_in = (AST)_t;
+				AST __t1972 = _t;
+				AST tmp2911_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.REF);
 				_t = _retTree;
-				_t = __t1977;
+				_t = __t1972;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WHERE:
 			{
-				AST __t1978 = _t;
-				AST tmp2934_AST_in = (AST)_t;
+				AST __t1973 = _t;
+				AST tmp2912_AST_in = (AST)_t;
 				match(_t,WHERE);
 				_t = _t.getFirstChild();
 				{
@@ -41332,49 +41228,49 @@
 				}
 				
 				}
-				_t = __t1978;
+				_t = __t1973;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEINDEX:
 			{
-				AST __t1980 = _t;
-				AST tmp2935_AST_in = (AST)_t;
+				AST __t1975 = _t;
+				AST tmp2913_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp2936_AST_in = (AST)_t;
+				AST tmp2914_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				_t = __t1980;
+				_t = __t1975;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USING:
 			{
-				AST __t1981 = _t;
-				AST tmp2937_AST_in = (AST)_t;
+				AST __t1976 = _t;
+				AST tmp2915_AST_in = (AST)_t;
 				match(_t,USING);
 				_t = _t.getFirstChild();
 				fld1(_t,CQ.SYMBOL);
 				_t = _retTree;
 				{
-				_loop1983:
+				_loop1978:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==AND)) {
-						AST tmp2938_AST_in = (AST)_t;
+						AST tmp2916_AST_in = (AST)_t;
 						match(_t,AND);
 						_t = _t.getNextSibling();
 						fld1(_t,CQ.SYMBOL);
 						_t = _retTree;
 					}
 					else {
-						break _loop1983;
+						break _loop1978;
 					}
 					
 				} while (true);
 				}
-				_t = __t1981;
+				_t = __t1976;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -41388,28 +41284,28 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp2939_AST_in = (AST)_t;
+				AST tmp2917_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOPREFETCH:
 			{
-				AST tmp2940_AST_in = (AST)_t;
+				AST tmp2918_AST_in = (AST)_t;
 				match(_t,NOPREFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp2941_AST_in = (AST)_t;
+				AST tmp2919_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1984;
+				break _loop1979;
 			}
 			}
 		} while (true);
@@ -41425,23 +41321,23 @@
 		switch ( _t.getType()) {
 		case Not_casesens:
 		{
-			AST __t340 = _t;
-			AST tmp2942_AST_in = (AST)_t;
+			AST __t335 = _t;
+			AST tmp2920_AST_in = (AST)_t;
 			match(_t,Not_casesens);
 			_t = _t.getFirstChild();
-			AST tmp2943_AST_in = (AST)_t;
+			AST tmp2921_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp2944_AST_in = (AST)_t;
+			AST tmp2922_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
-			_t = __t340;
+			_t = __t335;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CASESENSITIVE:
 		{
-			AST tmp2945_AST_in = (AST)_t;
+			AST tmp2923_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -41458,50 +41354,50 @@
 		
 		AST case_expression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		boolean synPredMatched355 = false;
+		boolean synPredMatched350 = false;
 		if (((_t.getType()==OR))) {
-			AST __t355 = _t;
-			synPredMatched355 = true;
+			AST __t350 = _t;
+			synPredMatched350 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST __t354 = _t;
-				AST tmp2946_AST_in = (AST)_t;
+				AST __t349 = _t;
+				AST tmp2924_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
-				AST tmp2947_AST_in = (AST)_t;
+				AST tmp2925_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
-				_t = __t354;
+				_t = __t349;
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched355 = false;
+				synPredMatched350 = false;
 			}
-			_t = __t355;
+			_t = __t350;
 			inputState.guessing--;
 		}
-		if ( synPredMatched355 ) {
-			AST __t356 = _t;
-			AST tmp2948_AST_in = (AST)_t;
+		if ( synPredMatched350 ) {
+			AST __t351 = _t;
+			AST tmp2926_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			case_expression(_t);
 			_t = _retTree;
 			case_expression(_t);
 			_t = _retTree;
-			_t = __t356;
+			_t = __t351;
 			_t = _t.getNextSibling();
 		}
 		else if ((_t.getType()==WHEN)) {
-			AST __t357 = _t;
-			AST tmp2949_AST_in = (AST)_t;
+			AST __t352 = _t;
+			AST tmp2927_AST_in = (AST)_t;
 			match(_t,WHEN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t357;
+			_t = __t352;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_4.member(_t.getType()))) {
@@ -41519,24 +41415,24 @@
 		
 		AST goonphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1411 = _t;
-		AST tmp2950_AST_in = (AST)_t;
+		AST __t1406 = _t;
+		AST tmp2928_AST_in = (AST)_t;
 		match(_t,GOON);
 		_t = _t.getFirstChild();
-		AST tmp2951_AST_in = (AST)_t;
+		AST tmp2929_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		goon_elem(_t);
 		_t = _retTree;
 		{
-		_loop1414:
+		_loop1409:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_35.member(_t.getType()))) {
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2952_AST_in = (AST)_t;
+					AST tmp2930_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 				}
@@ -41551,15 +41447,15 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1414;
+				break _loop1409;
 			}
 			
 		} while (true);
 		}
-		AST tmp2953_AST_in = (AST)_t;
+		AST tmp2931_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1411;
+		_t = __t1406;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -41572,49 +41468,49 @@
 		switch ( _t.getType()) {
 		case BGCOLOR:
 		{
-			AST __t396 = _t;
-			AST tmp2954_AST_in = (AST)_t;
+			AST __t390 = _t;
+			AST tmp2932_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t396;
+			_t = __t390;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DCOLOR:
 		{
-			AST __t397 = _t;
-			AST tmp2955_AST_in = (AST)_t;
+			AST __t391 = _t;
+			AST tmp2933_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t397;
+			_t = __t391;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FGCOLOR:
 		{
-			AST __t398 = _t;
-			AST tmp2956_AST_in = (AST)_t;
+			AST __t392 = _t;
+			AST tmp2934_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t398;
+			_t = __t392;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PFCOLOR:
 		{
-			AST __t399 = _t;
-			AST tmp2957_AST_in = (AST)_t;
+			AST __t393 = _t;
+			AST tmp2935_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t399;
+			_t = __t393;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -41638,8 +41534,8 @@
 		case PFCOLOR:
 		{
 			{
-			int _cnt402=0;
-			_loop402:
+			int _cnt396=0;
+			_loop396:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_tokenSet_36.member(_t.getType()))) {
@@ -41647,18 +41543,18 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt402>=1 ) { break _loop402; } else {throw new NoViableAltException(_t);}
+					if ( _cnt396>=1 ) { break _loop396; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt402++;
+				_cnt396++;
 			} while (true);
 			}
 			break;
 		}
 		case COLOR:
 		{
-			AST __t403 = _t;
-			AST tmp2958_AST_in = (AST)_t;
+			AST __t397 = _t;
+			AST tmp2936_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			{
@@ -41666,7 +41562,7 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST tmp2959_AST_in = (AST)_t;
+				AST tmp2937_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getNextSibling();
 				break;
@@ -41689,13 +41585,13 @@
 			switch ( _t.getType()) {
 			case PROMPT:
 			{
-				AST __t406 = _t;
-				AST tmp2960_AST_in = (AST)_t;
+				AST __t400 = _t;
+				AST tmp2938_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t406;
+				_t = __t400;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -41709,7 +41605,7 @@
 			}
 			}
 			}
-			_t = __t403;
+			_t = __t397;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -41725,25 +41621,25 @@
 		
 		AST formatphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1264 = _t;
-		AST tmp2961_AST_in = (AST)_t;
+		AST __t1258 = _t;
+		AST tmp2939_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
-		int _cnt1278=0;
-		_loop1278:
+		int _cnt1272=0;
+		_loop1272:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case AS:
 			{
-				AST __t1266 = _t;
-				AST tmp2962_AST_in = (AST)_t;
+				AST __t1260 = _t;
+				AST tmp2940_AST_in = (AST)_t;
 				match(_t,AS);
 				_t = _t.getFirstChild();
 				datatype_var(_t);
 				_t = _retTree;
-				_t = __t1266;
+				_t = __t1260;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -41755,21 +41651,21 @@
 			}
 			case ATTRSPACE:
 			{
-				AST tmp2963_AST_in = (AST)_t;
+				AST tmp2941_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp2964_AST_in = (AST)_t;
+				AST tmp2942_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTORETURN:
 			{
-				AST tmp2965_AST_in = (AST)_t;
+				AST tmp2943_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -41785,94 +41681,94 @@
 			}
 			case CONTEXTHELPID:
 			{
-				AST __t1267 = _t;
-				AST tmp2966_AST_in = (AST)_t;
+				AST __t1261 = _t;
+				AST tmp2944_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1267;
+				_t = __t1261;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BLANK:
 			{
-				AST tmp2967_AST_in = (AST)_t;
+				AST tmp2945_AST_in = (AST)_t;
 				match(_t,BLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLON:
 			{
-				AST __t1268 = _t;
-				AST tmp2968_AST_in = (AST)_t;
+				AST __t1262 = _t;
+				AST tmp2946_AST_in = (AST)_t;
 				match(_t,COLON);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1268;
+				_t = __t1262;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TO:
 			{
-				AST __t1269 = _t;
-				AST tmp2969_AST_in = (AST)_t;
+				AST __t1263 = _t;
+				AST tmp2947_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1269;
+				_t = __t1263;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEBLANK:
 			{
-				AST tmp2970_AST_in = (AST)_t;
+				AST tmp2948_AST_in = (AST)_t;
 				match(_t,DEBLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DISABLEAUTOZAP:
 			{
-				AST tmp2971_AST_in = (AST)_t;
+				AST tmp2949_AST_in = (AST)_t;
 				match(_t,DISABLEAUTOZAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t1270 = _t;
-				AST tmp2972_AST_in = (AST)_t;
+				AST __t1264 = _t;
+				AST tmp2950_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1270;
+				_t = __t1264;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FORMAT:
 			{
-				AST __t1271 = _t;
-				AST tmp2973_AST_in = (AST)_t;
+				AST __t1265 = _t;
+				AST tmp2951_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1271;
+				_t = __t1265;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case HELP:
 			{
-				AST __t1272 = _t;
-				AST tmp2974_AST_in = (AST)_t;
+				AST __t1266 = _t;
+				AST tmp2952_AST_in = (AST)_t;
 				match(_t,HELP);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
-				_t = __t1272;
+				_t = __t1266;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -41885,8 +41781,8 @@
 			}
 			case LEXAT:
 			{
-				AST __t1273 = _t;
-				AST tmp2975_AST_in = (AST)_t;
+				AST __t1267 = _t;
+				AST tmp2953_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -41910,57 +41806,57 @@
 				}
 				}
 				}
-				_t = __t1273;
+				_t = __t1267;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t1275 = _t;
-				AST tmp2976_AST_in = (AST)_t;
+				AST __t1269 = _t;
+				AST tmp2954_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t1275;
+				_t = __t1269;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOLABELS:
 			{
-				AST tmp2977_AST_in = (AST)_t;
+				AST tmp2955_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOTABSTOP:
 			{
-				AST tmp2978_AST_in = (AST)_t;
+				AST tmp2956_AST_in = (AST)_t;
 				match(_t,NOTABSTOP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case VALIDATE:
 			{
-				AST __t1276 = _t;
-				AST tmp2979_AST_in = (AST)_t;
+				AST __t1270 = _t;
+				AST tmp2957_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getFirstChild();
 				funargs(_t);
 				_t = _retTree;
-				_t = __t1276;
+				_t = __t1270;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WHEN:
 			{
-				AST __t1277 = _t;
-				AST tmp2980_AST_in = (AST)_t;
+				AST __t1271 = _t;
+				AST tmp2958_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1277;
+				_t = __t1271;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -41972,13 +41868,13 @@
 			}
 			default:
 			{
-				if ( _cnt1278>=1 ) { break _loop1278; } else {throw new NoViableAltException(_t);}
+				if ( _cnt1272>=1 ) { break _loop1272; } else {throw new NoViableAltException(_t);}
 			}
 			}
-			_cnt1278++;
+			_cnt1272++;
 		} while (true);
 		}
-		_t = __t1264;
+		_t = __t1258;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -41987,25 +41883,25 @@
 		
 		AST columnformat_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t422 = _t;
-		AST tmp2981_AST_in = (AST)_t;
+		AST __t416 = _t;
+		AST tmp2959_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
-		int _cnt439=0;
-		_loop439:
+		int _cnt433=0;
+		_loop433:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case FORMAT:
 			{
-				AST __t424 = _t;
-				AST tmp2982_AST_in = (AST)_t;
+				AST __t418 = _t;
+				AST tmp2960_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t424;
+				_t = __t418;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -42018,123 +41914,123 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp2983_AST_in = (AST)_t;
+				AST tmp2961_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNFONT:
 			{
-				AST __t425 = _t;
-				AST tmp2984_AST_in = (AST)_t;
+				AST __t419 = _t;
+				AST tmp2962_AST_in = (AST)_t;
 				match(_t,COLUMNFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t425;
+				_t = __t419;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNDCOLOR:
 			{
-				AST __t426 = _t;
-				AST tmp2985_AST_in = (AST)_t;
+				AST __t420 = _t;
+				AST tmp2963_AST_in = (AST)_t;
 				match(_t,COLUMNDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t426;
+				_t = __t420;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNBGCOLOR:
 			{
-				AST __t427 = _t;
-				AST tmp2986_AST_in = (AST)_t;
+				AST __t421 = _t;
+				AST tmp2964_AST_in = (AST)_t;
 				match(_t,COLUMNBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t427;
+				_t = __t421;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNFGCOLOR:
 			{
-				AST __t428 = _t;
-				AST tmp2987_AST_in = (AST)_t;
+				AST __t422 = _t;
+				AST tmp2965_AST_in = (AST)_t;
 				match(_t,COLUMNFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t428;
+				_t = __t422;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNPFCOLOR:
 			{
-				AST __t429 = _t;
-				AST tmp2988_AST_in = (AST)_t;
+				AST __t423 = _t;
+				AST tmp2966_AST_in = (AST)_t;
 				match(_t,COLUMNPFCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t429;
+				_t = __t423;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFONT:
 			{
-				AST __t430 = _t;
-				AST tmp2989_AST_in = (AST)_t;
+				AST __t424 = _t;
+				AST tmp2967_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t430;
+				_t = __t424;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELDCOLOR:
 			{
-				AST __t431 = _t;
-				AST tmp2990_AST_in = (AST)_t;
+				AST __t425 = _t;
+				AST tmp2968_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t431;
+				_t = __t425;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELBGCOLOR:
 			{
-				AST __t432 = _t;
-				AST tmp2991_AST_in = (AST)_t;
+				AST __t426 = _t;
+				AST tmp2969_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t432;
+				_t = __t426;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFGCOLOR:
 			{
-				AST __t433 = _t;
-				AST tmp2992_AST_in = (AST)_t;
+				AST __t427 = _t;
+				AST tmp2970_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t433;
+				_t = __t427;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LEXAT:
 			{
-				AST __t434 = _t;
-				AST tmp2993_AST_in = (AST)_t;
+				AST __t428 = _t;
+				AST tmp2971_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -42158,58 +42054,58 @@
 				}
 				}
 				}
-				_t = __t434;
+				_t = __t428;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTH:
 			{
-				AST __t436 = _t;
-				AST tmp2994_AST_in = (AST)_t;
+				AST __t430 = _t;
+				AST tmp2972_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
-				AST tmp2995_AST_in = (AST)_t;
+				AST tmp2973_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t436;
+				_t = __t430;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTHPIXELS:
 			{
-				AST __t437 = _t;
-				AST tmp2996_AST_in = (AST)_t;
+				AST __t431 = _t;
+				AST tmp2974_AST_in = (AST)_t;
 				match(_t,WIDTHPIXELS);
 				_t = _t.getFirstChild();
-				AST tmp2997_AST_in = (AST)_t;
+				AST tmp2975_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t437;
+				_t = __t431;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTHCHARS:
 			{
-				AST __t438 = _t;
-				AST tmp2998_AST_in = (AST)_t;
+				AST __t432 = _t;
+				AST tmp2976_AST_in = (AST)_t;
 				match(_t,WIDTHCHARS);
 				_t = _t.getFirstChild();
-				AST tmp2999_AST_in = (AST)_t;
+				AST tmp2977_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t438;
+				_t = __t432;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				if ( _cnt439>=1 ) { break _loop439; } else {throw new NoViableAltException(_t);}
+				if ( _cnt433>=1 ) { break _loop433; } else {throw new NoViableAltException(_t);}
 			}
 			}
-			_cnt439++;
+			_cnt433++;
 		} while (true);
 		}
-		_t = __t422;
+		_t = __t416;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -42218,88 +42114,88 @@
 		
 		AST comboboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t441 = _t;
-		AST tmp3000_AST_in = (AST)_t;
+		AST __t435 = _t;
+		AST tmp2978_AST_in = (AST)_t;
 		match(_t,COMBOBOX);
 		_t = _t.getFirstChild();
 		{
-		_loop453:
+		_loop447:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LISTITEMS:
 			{
-				AST __t443 = _t;
-				AST tmp3001_AST_in = (AST)_t;
+				AST __t437 = _t;
+				AST tmp2979_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
 				{
-				_loop445:
+				_loop439:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3002_AST_in = (AST)_t;
+						AST tmp2980_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop445;
+						break _loop439;
 					}
 					
 				} while (true);
 				}
-				_t = __t443;
+				_t = __t437;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LISTITEMPAIRS:
 			{
-				AST __t446 = _t;
-				AST tmp3003_AST_in = (AST)_t;
+				AST __t440 = _t;
+				AST tmp2981_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
 				{
-				_loop448:
+				_loop442:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3004_AST_in = (AST)_t;
+						AST tmp2982_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop448;
+						break _loop442;
 					}
 					
 				} while (true);
 				}
-				_t = __t446;
+				_t = __t440;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INNERLINES:
 			{
-				AST __t449 = _t;
-				AST tmp3005_AST_in = (AST)_t;
+				AST __t443 = _t;
+				AST tmp2983_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t449;
+				_t = __t443;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SORT:
 			{
-				AST tmp3006_AST_in = (AST)_t;
+				AST tmp2984_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -42312,42 +42208,42 @@
 			}
 			case SIMPLE:
 			{
-				AST tmp3007_AST_in = (AST)_t;
+				AST tmp2985_AST_in = (AST)_t;
 				match(_t,SIMPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWN:
 			{
-				AST tmp3008_AST_in = (AST)_t;
+				AST tmp2986_AST_in = (AST)_t;
 				match(_t,DROPDOWN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWNLIST:
 			{
-				AST tmp3009_AST_in = (AST)_t;
+				AST tmp2987_AST_in = (AST)_t;
 				match(_t,DROPDOWNLIST);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXCHARS:
 			{
-				AST __t450 = _t;
-				AST tmp3010_AST_in = (AST)_t;
+				AST __t444 = _t;
+				AST tmp2988_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
-				AST tmp3011_AST_in = (AST)_t;
+				AST tmp2989_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t450;
+				_t = __t444;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTOCOMPLETION:
 			{
-				AST __t451 = _t;
-				AST tmp3012_AST_in = (AST)_t;
+				AST __t445 = _t;
+				AST tmp2990_AST_in = (AST)_t;
 				match(_t,AUTOCOMPLETION);
 				_t = _t.getFirstChild();
 				{
@@ -42355,7 +42251,7 @@
 				switch ( _t.getType()) {
 				case UNIQUEMATCH:
 				{
-					AST tmp3013_AST_in = (AST)_t;
+					AST tmp2991_AST_in = (AST)_t;
 					match(_t,UNIQUEMATCH);
 					_t = _t.getNextSibling();
 					break;
@@ -42370,7 +42266,7 @@
 				}
 				}
 				}
-				_t = __t451;
+				_t = __t445;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -42384,12 +42280,12 @@
 			}
 			default:
 			{
-				break _loop453;
+				break _loop447;
 			}
 			}
 		} while (true);
 		}
-		_t = __t441;
+		_t = __t435;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -42398,8 +42294,8 @@
 		
 		AST tooltip_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2276 = _t;
-		AST tmp3014_AST_in = (AST)_t;
+		AST __t2271 = _t;
+		AST tmp2992_AST_in = (AST)_t;
 		match(_t,TOOLTIP);
 		_t = _t.getFirstChild();
 		{
@@ -42464,7 +42360,7 @@
 		}
 		}
 		}
-		_t = __t2276;
+		_t = __t2271;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -42477,52 +42373,52 @@
 		switch ( _t.getType()) {
 		case SIZE:
 		{
-			AST __t2141 = _t;
-			AST tmp3015_AST_in = (AST)_t;
+			AST __t2136 = _t;
+			AST tmp2993_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3016_AST_in = (AST)_t;
+			AST tmp2994_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2141;
+			_t = __t2136;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZECHARS:
 		{
-			AST __t2142 = _t;
-			AST tmp3017_AST_in = (AST)_t;
+			AST __t2137 = _t;
+			AST tmp2995_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3018_AST_in = (AST)_t;
+			AST tmp2996_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2142;
+			_t = __t2137;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZEPIXELS:
 		{
-			AST __t2143 = _t;
-			AST tmp3019_AST_in = (AST)_t;
+			AST __t2138 = _t;
+			AST tmp2997_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3020_AST_in = (AST)_t;
+			AST tmp2998_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2143;
+			_t = __t2138;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -42538,8 +42434,8 @@
 		
 		AST compile_append_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t511 = _t;
-		AST tmp3021_AST_in = (AST)_t;
+		AST __t505 = _t;
+		AST tmp2999_AST_in = (AST)_t;
 		match(_t,APPEND);
 		_t = _t.getFirstChild();
 		{
@@ -42547,13 +42443,13 @@
 		switch ( _t.getType()) {
 		case EQUAL:
 		{
-			AST __t513 = _t;
-			AST tmp3022_AST_in = (AST)_t;
+			AST __t507 = _t;
+			AST tmp3000_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t513;
+			_t = __t507;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -42567,7 +42463,7 @@
 		}
 		}
 		}
-		_t = __t511;
+		_t = __t505;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -42586,23 +42482,23 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp3023_AST_in = (AST)_t;
+			AST tmp3001_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			{
-			_loop509:
+			_loop503:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==LEXCOLON)) {
-					AST tmp3024_AST_in = (AST)_t;
+					AST tmp3002_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
-					AST tmp3025_AST_in = (AST)_t;
+					AST tmp3003_AST_in = (AST)_t;
 					match(_t,TYPELESS_TOKEN);
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop509;
+					break _loop503;
 				}
 				
 			} while (true);
@@ -42621,8 +42517,8 @@
 		
 		AST convertphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t521 = _t;
-		AST tmp3026_AST_in = (AST)_t;
+		AST __t515 = _t;
+		AST tmp3004_AST_in = (AST)_t;
 		match(_t,CONVERT);
 		_t = _t.getFirstChild();
 		{
@@ -42630,8 +42526,8 @@
 		switch ( _t.getType()) {
 		case SOURCE:
 		{
-			AST __t523 = _t;
-			AST tmp3027_AST_in = (AST)_t;
+			AST __t517 = _t;
+			AST tmp3005_AST_in = (AST)_t;
 			match(_t,SOURCE);
 			_t = _t.getFirstChild();
 			{
@@ -42639,14 +42535,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp3028_AST_in = (AST)_t;
+				AST tmp3006_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp3029_AST_in = (AST)_t;
+				AST tmp3007_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -42656,7 +42552,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp3030_AST_in = (AST)_t;
+					AST tmp3008_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -42679,7 +42575,7 @@
 			}
 			}
 			}
-			_t = __t523;
+			_t = __t517;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -42699,8 +42595,8 @@
 		switch ( _t.getType()) {
 		case TARGET:
 		{
-			AST __t527 = _t;
-			AST tmp3031_AST_in = (AST)_t;
+			AST __t521 = _t;
+			AST tmp3009_AST_in = (AST)_t;
 			match(_t,TARGET);
 			_t = _t.getFirstChild();
 			{
@@ -42708,14 +42604,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp3032_AST_in = (AST)_t;
+				AST tmp3010_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp3033_AST_in = (AST)_t;
+				AST tmp3011_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -42725,7 +42621,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp3034_AST_in = (AST)_t;
+					AST tmp3012_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -42748,7 +42644,7 @@
 			}
 			}
 			}
-			_t = __t527;
+			_t = __t521;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -42762,7 +42658,7 @@
 		}
 		}
 		}
-		_t = __t521;
+		_t = __t515;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -42772,22 +42668,22 @@
 		AST triggerphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST on = null;
 		
-		AST __t2285 = _t;
-		AST tmp3035_AST_in = (AST)_t;
+		AST __t2280 = _t;
+		AST tmp3013_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getFirstChild();
 		block_colon(_t);
 		_t = _retTree;
-		AST __t2286 = _t;
-		AST tmp3036_AST_in = (AST)_t;
+		AST __t2281 = _t;
+		AST tmp3014_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
-		_loop2291:
+		_loop2286:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==ON)) {
-				AST __t2288 = _t;
+				AST __t2283 = _t;
 				on = _t==ASTNULL ? null :(AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
@@ -42801,7 +42697,7 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp3037_AST_in = (AST)_t;
+					AST tmp3015_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
@@ -42933,7 +42829,7 @@
 				switch ( _t.getType()) {
 				case PERSISTENT:
 				{
-					AST tmp3038_AST_in = (AST)_t;
+					AST tmp3016_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					runstate(_t);
@@ -43066,19 +42962,19 @@
 				if ( inputState.guessing==0 ) {
 					action.scopeClose(on);
 				}
-				_t = __t2288;
+				_t = __t2283;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop2291;
+				break _loop2286;
 			}
 			
 		} while (true);
 		}
-		_t = __t2286;
+		_t = __t2281;
 		_t = _t.getNextSibling();
-		AST __t2292 = _t;
-		AST tmp3039_AST_in = (AST)_t;
+		AST __t2287 = _t;
+		AST tmp3017_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -43086,7 +42982,7 @@
 		switch ( _t.getType()) {
 		case TRIGGERS:
 		{
-			AST tmp3040_AST_in = (AST)_t;
+			AST tmp3018_AST_in = (AST)_t;
 			match(_t,TRIGGERS);
 			_t = _t.getNextSibling();
 			break;
@@ -43101,9 +42997,9 @@
 		}
 		}
 		}
-		_t = __t2292;
+		_t = __t2287;
 		_t = _t.getNextSibling();
-		_t = __t2285;
+		_t = __t2280;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43116,7 +43012,7 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp3041_AST_in = (AST)_t;
+			AST tmp3019_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
@@ -43148,42 +43044,42 @@
 		switch ( _t.getType()) {
 		case BYTE:
 		{
-			AST tmp3042_AST_in = (AST)_t;
+			AST tmp3020_AST_in = (AST)_t;
 			match(_t,BYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOUBLE:
 		{
-			AST tmp3043_AST_in = (AST)_t;
+			AST tmp3021_AST_in = (AST)_t;
 			match(_t,DOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp3044_AST_in = (AST)_t;
+			AST tmp3022_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONG:
 		{
-			AST tmp3045_AST_in = (AST)_t;
+			AST tmp3023_AST_in = (AST)_t;
 			match(_t,LONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHORT:
 		{
-			AST tmp3046_AST_in = (AST)_t;
+			AST tmp3024_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDSHORT:
 		{
-			AST tmp3047_AST_in = (AST)_t;
+			AST tmp3025_AST_in = (AST)_t;
 			match(_t,UNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
@@ -43224,14 +43120,14 @@
 		}
 		case BLOB:
 		{
-			AST tmp3048_AST_in = (AST)_t;
+			AST tmp3026_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp3049_AST_in = (AST)_t;
+			AST tmp3027_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
@@ -43293,8 +43189,8 @@
 		
 		AST spacephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2158 = _t;
-		AST tmp3050_AST_in = (AST)_t;
+		AST __t2153 = _t;
+		AST tmp3028_AST_in = (AST)_t;
 		match(_t,SPACE);
 		_t = _t.getFirstChild();
 		{
@@ -43316,7 +43212,7 @@
 		}
 		}
 		}
-		_t = __t2158;
+		_t = __t2153;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43325,45 +43221,45 @@
 		
 		AST display_with_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		boolean synPredMatched1110 = false;
+		boolean synPredMatched1104 = false;
 		if (((_t.getType()==WITH))) {
-			AST __t1110 = _t;
-			synPredMatched1110 = true;
+			AST __t1104 = _t;
+			synPredMatched1104 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST __t1109 = _t;
-				AST tmp3051_AST_in = (AST)_t;
+				AST __t1103 = _t;
+				AST tmp3029_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp3052_AST_in = (AST)_t;
+				AST tmp3030_AST_in = (AST)_t;
 				match(_t,BROWSE);
 				_t = _t.getNextSibling();
-				AST tmp3053_AST_in = (AST)_t;
+				AST tmp3031_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				_t = __t1109;
+				_t = __t1103;
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1110 = false;
+				synPredMatched1104 = false;
 			}
-			_t = __t1110;
+			_t = __t1104;
 			inputState.guessing--;
 		}
-		if ( synPredMatched1110 ) {
-			AST __t1111 = _t;
-			AST tmp3054_AST_in = (AST)_t;
+		if ( synPredMatched1104 ) {
+			AST __t1105 = _t;
+			AST tmp3032_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getFirstChild();
-			AST tmp3055_AST_in = (AST)_t;
+			AST tmp3033_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp3056_AST_in = (AST)_t;
+			AST tmp3034_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t1111;
+			_t = __t1105;
 			_t = _t.getNextSibling();
 		}
 		else if ((_t.getType()==WITH)) {
@@ -43385,71 +43281,71 @@
 		switch ( _t.getType()) {
 		case FILE:
 		{
-			AST __t1439 = _t;
-			AST tmp3057_AST_in = (AST)_t;
+			AST __t1434 = _t;
+			AST tmp3035_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1439;
+			_t = __t1434;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZE:
 		{
-			AST __t1440 = _t;
-			AST tmp3058_AST_in = (AST)_t;
+			AST __t1435 = _t;
+			AST tmp3036_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3059_AST_in = (AST)_t;
+			AST tmp3037_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1440;
+			_t = __t1435;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZECHARS:
 		{
-			AST __t1441 = _t;
-			AST tmp3060_AST_in = (AST)_t;
+			AST __t1436 = _t;
+			AST tmp3038_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3061_AST_in = (AST)_t;
+			AST tmp3039_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1441;
+			_t = __t1436;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZEPIXELS:
 		{
-			AST __t1442 = _t;
-			AST tmp3062_AST_in = (AST)_t;
+			AST __t1437 = _t;
+			AST tmp3040_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp3063_AST_in = (AST)_t;
+			AST tmp3041_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1442;
+			_t = __t1437;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FROM:
 		{
-			AST __t1443 = _t;
-			AST tmp3064_AST_in = (AST)_t;
+			AST __t1438 = _t;
+			AST tmp3042_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -43457,7 +43353,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp3065_AST_in = (AST)_t;
+				AST tmp3043_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43466,7 +43362,7 @@
 			}
 			case Y:
 			{
-				AST tmp3066_AST_in = (AST)_t;
+				AST tmp3044_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43475,7 +43371,7 @@
 			}
 			case ROW:
 			{
-				AST tmp3067_AST_in = (AST)_t;
+				AST tmp3045_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43484,7 +43380,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp3068_AST_in = (AST)_t;
+				AST tmp3046_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43502,7 +43398,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp3069_AST_in = (AST)_t;
+				AST tmp3047_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43511,7 +43407,7 @@
 			}
 			case Y:
 			{
-				AST tmp3070_AST_in = (AST)_t;
+				AST tmp3048_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43520,7 +43416,7 @@
 			}
 			case ROW:
 			{
-				AST tmp3071_AST_in = (AST)_t;
+				AST tmp3049_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43529,7 +43425,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp3072_AST_in = (AST)_t;
+				AST tmp3050_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -43542,7 +43438,7 @@
 			}
 			}
 			}
-			_t = __t1443;
+			_t = __t1438;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -43558,8 +43454,8 @@
 		
 		AST data_relation_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t827 = _t;
-		AST tmp3073_AST_in = (AST)_t;
+		AST __t821 = _t;
+		AST tmp3051_AST_in = (AST)_t;
 		match(_t,DATARELATION);
 		_t = _t.getFirstChild();
 		{
@@ -43567,7 +43463,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp3074_AST_in = (AST)_t;
+			AST tmp3052_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -43582,12 +43478,12 @@
 		}
 		}
 		}
-		AST tmp3075_AST_in = (AST)_t;
+		AST tmp3053_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
 		_t = _retTree;
-		AST tmp3076_AST_in = (AST)_t;
+		AST tmp3054_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -43617,7 +43513,7 @@
 		switch ( _t.getType()) {
 		case REPOSITION:
 		{
-			AST tmp3077_AST_in = (AST)_t;
+			AST tmp3055_AST_in = (AST)_t;
 			match(_t,REPOSITION);
 			_t = _t.getNextSibling();
 			break;
@@ -43632,7 +43528,7 @@
 		}
 		}
 		}
-		_t = __t827;
+		_t = __t821;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43641,46 +43537,46 @@
 		
 		AST field_mapping_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t832 = _t;
-		AST tmp3078_AST_in = (AST)_t;
+		AST __t826 = _t;
+		AST tmp3056_AST_in = (AST)_t;
 		match(_t,RELATIONFIELDS);
 		_t = _t.getFirstChild();
-		AST tmp3079_AST_in = (AST)_t;
+		AST tmp3057_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld2(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp3080_AST_in = (AST)_t;
+		AST tmp3058_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		fld1(_t,CQ.SYMBOL);
 		_t = _retTree;
 		{
-		_loop834:
+		_loop828:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp3081_AST_in = (AST)_t;
+				AST tmp3059_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld2(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp3082_AST_in = (AST)_t;
+				AST tmp3060_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld1(_t,CQ.SYMBOL);
 				_t = _retTree;
 			}
 			else {
-				break _loop834;
+				break _loop828;
 			}
 			
 		} while (true);
 		}
-		AST tmp3083_AST_in = (AST)_t;
+		AST tmp3061_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t832;
+		_t = __t826;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43690,7 +43586,7 @@
 		AST source_buffer_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t846 = _t;
+		AST __t840 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -43702,10 +43598,10 @@
 		switch ( _t.getType()) {
 		case KEYS:
 		{
-			AST tmp3084_AST_in = (AST)_t;
+			AST tmp3062_AST_in = (AST)_t;
 			match(_t,KEYS);
 			_t = _t.getNextSibling();
-			AST tmp3085_AST_in = (AST)_t;
+			AST tmp3063_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -43713,7 +43609,7 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp3086_AST_in = (AST)_t;
+				AST tmp3064_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
@@ -43723,18 +43619,18 @@
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
 				{
-				_loop850:
+				_loop844:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3087_AST_in = (AST)_t;
+						AST tmp3065_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.SYMBOL);
 						_t = _retTree;
 					}
 					else {
-						break _loop850;
+						break _loop844;
 					}
 					
 				} while (true);
@@ -43747,7 +43643,7 @@
 			}
 			}
 			}
-			AST tmp3088_AST_in = (AST)_t;
+			AST tmp3066_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -43762,7 +43658,7 @@
 		}
 		}
 		}
-		_t = __t846;
+		_t = __t840;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43776,8 +43672,8 @@
 			if (contextQualifier==CQ.SYMBOL) tblQualifier = CQ.BUFFERSYMBOL;
 		
 		
-		AST __t1239 = _t;
-		AST tmp3089_AST_in = (AST)_t;
+		AST __t1233 = _t;
+		AST tmp3067_AST_in = (AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
 		{
@@ -43791,15 +43687,15 @@
 		}
 		case TEXT:
 		{
-			AST __t1241 = _t;
-			AST tmp3090_AST_in = (AST)_t;
+			AST __t1235 = _t;
+			AST tmp3068_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getFirstChild();
-			AST tmp3091_AST_in = (AST)_t;
+			AST tmp3069_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
-			_loop1243:
+			_loop1237:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -43807,15 +43703,15 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1243;
+					break _loop1237;
 				}
 				
 			} while (true);
 			}
-			AST tmp3092_AST_in = (AST)_t;
+			AST tmp3070_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1241;
+			_t = __t1235;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -43899,7 +43795,7 @@
 		}
 		case CARET:
 		{
-			AST tmp3093_AST_in = (AST)_t;
+			AST tmp3071_AST_in = (AST)_t;
 			match(_t,CARET);
 			_t = _t.getNextSibling();
 			break;
@@ -43909,7 +43805,7 @@
 			fld(_t,contextQualifier);
 			_t = _retTree;
 			{
-			_loop1246:
+			_loop1240:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -43927,7 +43823,7 @@
 				}
 				default:
 				{
-					break _loop1246;
+					break _loop1240;
 				}
 				}
 			} while (true);
@@ -43946,7 +43842,7 @@
 		}
 		}
 		}
-		_t = __t1239;
+		_t = __t1233;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -43968,20 +43864,20 @@
 		}
 		case FONT:
 		{
-			AST __t892 = _t;
-			AST tmp3094_AST_in = (AST)_t;
+			AST __t886 = _t;
+			AST tmp3072_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t892;
+			_t = __t886;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LIKE:
 		{
-			AST __t893 = _t;
-			AST tmp3095_AST_in = (AST)_t;
+			AST __t887 = _t;
+			AST tmp3073_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.SYMBOL);
@@ -43991,7 +43887,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp3096_AST_in = (AST)_t;
+				AST tmp3074_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -44006,39 +43902,39 @@
 			}
 			}
 			}
-			_t = __t893;
+			_t = __t887;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TITLE:
 		{
-			AST __t895 = _t;
-			AST tmp3097_AST_in = (AST)_t;
+			AST __t889 = _t;
+			AST tmp3075_AST_in = (AST)_t;
 			match(_t,TITLE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t895;
+			_t = __t889;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUBAR:
 		{
-			AST tmp3098_AST_in = (AST)_t;
+			AST tmp3076_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp3099_AST_in = (AST)_t;
+			AST tmp3077_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp3100_AST_in = (AST)_t;
+			AST tmp3078_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
@@ -44062,8 +43958,8 @@
 		switch ( _t.getType()) {
 		case MENUITEM:
 		{
-			AST __t898 = _t;
-			AST tmp3101_AST_in = (AST)_t;
+			AST __t892 = _t;
+			AST tmp3079_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getFirstChild();
 			id = (AST)_t;
@@ -44073,19 +43969,19 @@
 				push(action.defineSymbol(MENUITEM, id, id));
 			}
 			{
-			_loop902:
+			_loop896:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case ACCELERATOR:
 				{
-					AST __t900 = _t;
-					AST tmp3102_AST_in = (AST)_t;
+					AST __t894 = _t;
+					AST tmp3080_AST_in = (AST)_t;
 					match(_t,ACCELERATOR);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t900;
+					_t = __t894;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -44100,20 +43996,20 @@
 				}
 				case DISABLED:
 				{
-					AST tmp3103_AST_in = (AST)_t;
+					AST tmp3081_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FONT:
 				{
-					AST __t901 = _t;
-					AST tmp3104_AST_in = (AST)_t;
+					AST __t895 = _t;
+					AST tmp3082_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t901;
+					_t = __t895;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -44126,21 +44022,21 @@
 				}
 				case READONLY:
 				{
-					AST tmp3105_AST_in = (AST)_t;
+					AST tmp3083_AST_in = (AST)_t;
 					match(_t,READONLY);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOGGLEBOX:
 				{
-					AST tmp3106_AST_in = (AST)_t;
+					AST tmp3084_AST_in = (AST)_t;
 					match(_t,TOGGLEBOX);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop902;
+					break _loop896;
 				}
 				}
 			} while (true);
@@ -44167,14 +44063,14 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(pop());
 			}
-			_t = __t898;
+			_t = __t892;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST __t904 = _t;
-			AST tmp3107_AST_in = (AST)_t;
+			AST __t898 = _t;
+			AST tmp3085_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getFirstChild();
 			id2 = (AST)_t;
@@ -44184,13 +44080,13 @@
 				push(action.defineSymbol(SUBMENU, id2, id2));
 			}
 			{
-			_loop907:
+			_loop901:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case DISABLED:
 				{
-					AST tmp3108_AST_in = (AST)_t;
+					AST tmp3086_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -44204,13 +44100,13 @@
 				}
 				case FONT:
 				{
-					AST __t906 = _t;
-					AST tmp3109_AST_in = (AST)_t;
+					AST __t900 = _t;
+					AST tmp3087_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t906;
+					_t = __t900;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -44225,7 +44121,7 @@
 				}
 				default:
 				{
-					break _loop907;
+					break _loop901;
 				}
 				}
 			} while (true);
@@ -44233,30 +44129,30 @@
 			if ( inputState.guessing==0 ) {
 				action.addToScope(pop());
 			}
-			_t = __t904;
+			_t = __t898;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RULE:
 		{
-			AST __t908 = _t;
-			AST tmp3110_AST_in = (AST)_t;
+			AST __t902 = _t;
+			AST tmp3088_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getFirstChild();
 			{
-			_loop911:
+			_loop905:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case FONT:
 				{
-					AST __t910 = _t;
-					AST tmp3111_AST_in = (AST)_t;
+					AST __t904 = _t;
+					AST tmp3089_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t910;
+					_t = __t904;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -44271,18 +44167,18 @@
 				}
 				default:
 				{
-					break _loop911;
+					break _loop905;
 				}
 				}
 			} while (true);
 			}
-			_t = __t908;
+			_t = __t902;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SKIP:
 		{
-			AST tmp3112_AST_in = (AST)_t;
+			AST tmp3090_AST_in = (AST)_t;
 			match(_t,SKIP);
 			_t = _t.getNextSibling();
 			break;
@@ -44294,14 +44190,14 @@
 		}
 		}
 		{
-		boolean synPredMatched915 = false;
+		boolean synPredMatched909 = false;
 		if (((_t.getType()==PERIOD))) {
-			AST __t915 = _t;
-			synPredMatched915 = true;
+			AST __t909 = _t;
+			synPredMatched909 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST tmp3113_AST_in = (AST)_t;
+				AST tmp3091_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				{
@@ -44309,28 +44205,28 @@
 				switch ( _t.getType()) {
 				case RULE:
 				{
-					AST tmp3114_AST_in = (AST)_t;
+					AST tmp3092_AST_in = (AST)_t;
 					match(_t,RULE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SKIP:
 				{
-					AST tmp3115_AST_in = (AST)_t;
+					AST tmp3093_AST_in = (AST)_t;
 					match(_t,SKIP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SUBMENU:
 				{
-					AST tmp3116_AST_in = (AST)_t;
+					AST tmp3094_AST_in = (AST)_t;
 					match(_t,SUBMENU);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case MENUITEM:
 				{
-					AST tmp3117_AST_in = (AST)_t;
+					AST tmp3095_AST_in = (AST)_t;
 					match(_t,MENUITEM);
 					_t = _t.getNextSibling();
 					break;
@@ -44344,13 +44240,13 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched915 = false;
+				synPredMatched909 = false;
 			}
-			_t = __t915;
+			_t = __t909;
 			inputState.guessing--;
 		}
-		if ( synPredMatched915 ) {
-			AST tmp3118_AST_in = (AST)_t;
+		if ( synPredMatched909 ) {
+			AST tmp3096_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 		}
@@ -44375,19 +44271,19 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST __t939 = _t;
+			AST __t933 = _t;
 			as = _t==ASTNULL ? null :(AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
 			{
-			boolean synPredMatched943 = false;
+			boolean synPredMatched937 = false;
 			if (((_t.getType()==HANDLE))) {
-				AST __t943 = _t;
-				synPredMatched943 = true;
+				AST __t937 = _t;
+				synPredMatched937 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp3119_AST_in = (AST)_t;
+					AST tmp3097_AST_in = (AST)_t;
 					match(_t,HANDLE);
 					_t = _t.getNextSibling();
 					{
@@ -44395,7 +44291,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp3120_AST_in = (AST)_t;
+						AST tmp3098_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -44421,13 +44317,13 @@
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched943 = false;
+					synPredMatched937 = false;
 				}
-				_t = __t943;
+				_t = __t937;
 				inputState.guessing--;
 			}
-			if ( synPredMatched943 ) {
-				AST tmp3121_AST_in = (AST)_t;
+			if ( synPredMatched937 ) {
+				AST tmp3099_AST_in = (AST)_t;
 				match(_t,HANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -44435,7 +44331,7 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp3122_AST_in = (AST)_t;
+					AST tmp3100_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
@@ -44468,7 +44364,7 @@
 			}
 			
 			}
-			_t = __t939;
+			_t = __t933;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defAs(as);
@@ -44612,7 +44508,7 @@
 		}
 		}
 		{
-		_loop950:
+		_loop944:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -44625,19 +44521,19 @@
 			}
 			case DECIMALS:
 			{
-				AST __t947 = _t;
-				AST tmp3123_AST_in = (AST)_t;
+				AST __t941 = _t;
+				AST tmp3101_AST_in = (AST)_t;
 				match(_t,DECIMALS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t947;
+				_t = __t941;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t948 = _t;
+				AST __t942 = _t;
 				li = _t==ASTNULL ? null :(AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
@@ -44648,7 +44544,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp3124_AST_in = (AST)_t;
+					AST tmp3102_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -44663,7 +44559,7 @@
 				}
 				}
 				}
-				_t = __t948;
+				_t = __t942;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.defLike(li);
@@ -44685,7 +44581,7 @@
 			}
 			case NOUNDO:
 			{
-				AST tmp3125_AST_in = (AST)_t;
+				AST tmp3103_AST_in = (AST)_t;
 				match(_t,NOUNDO);
 				_t = _t.getNextSibling();
 				break;
@@ -44699,17 +44595,17 @@
 			default:
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==FORMAT)) {
-					AST __t946 = _t;
-					AST tmp3126_AST_in = (AST)_t;
+					AST __t940 = _t;
+					AST tmp3104_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t946;
+					_t = __t940;
 					_t = _t.getNextSibling();
 				}
 			else {
-				break _loop950;
+				break _loop944;
 			}
 			}
 		} while (true);
@@ -44721,8 +44617,8 @@
 		
 		AST initial_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1463 = _t;
-		AST tmp3127_AST_in = (AST)_t;
+		AST __t1458 = _t;
+		AST tmp3105_AST_in = (AST)_t;
 		match(_t,INITIAL);
 		_t = _t.getFirstChild();
 		{
@@ -44730,7 +44626,7 @@
 		switch ( _t.getType()) {
 		case LEFTBRACE:
 		{
-			AST tmp3128_AST_in = (AST)_t;
+			AST tmp3106_AST_in = (AST)_t;
 			match(_t,LEFTBRACE);
 			_t = _t.getNextSibling();
 			{
@@ -44738,7 +44634,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp3129_AST_in = (AST)_t;
+				AST tmp3107_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -44797,11 +44693,11 @@
 			}
 			}
 			{
-			_loop1468:
+			_loop1463:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp3130_AST_in = (AST)_t;
+					AST tmp3108_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					{
@@ -44809,7 +44705,7 @@
 					switch ( _t.getType()) {
 					case TODAY:
 					{
-						AST tmp3131_AST_in = (AST)_t;
+						AST tmp3109_AST_in = (AST)_t;
 						match(_t,TODAY);
 						_t = _t.getNextSibling();
 						break;
@@ -44869,12 +44765,12 @@
 					}
 				}
 				else {
-					break _loop1468;
+					break _loop1463;
 				}
 				
 			} while (true);
 			}
-			AST tmp3132_AST_in = (AST)_t;
+			AST tmp3110_AST_in = (AST)_t;
 			match(_t,RIGHTBRACE);
 			_t = _t.getNextSibling();
 			break;
@@ -44928,7 +44824,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp3133_AST_in = (AST)_t;
+				AST tmp3111_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -44994,7 +44890,7 @@
 		}
 		}
 		}
-		_t = __t1463;
+		_t = __t1458;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45003,8 +44899,8 @@
 		
 		AST extentphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1196 = _t;
-		AST tmp3134_AST_in = (AST)_t;
+		AST __t1190 = _t;
+		AST tmp3112_AST_in = (AST)_t;
 		match(_t,EXTENT);
 		_t = _t.getFirstChild();
 		{
@@ -45020,7 +44916,7 @@
 		}
 		
 		}
-		_t = __t1196;
+		_t = __t1190;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45033,8 +44929,8 @@
 		switch ( _t.getType()) {
 		case FIELDS:
 		{
-			AST __t1960 = _t;
-			AST tmp3135_AST_in = (AST)_t;
+			AST __t1955 = _t;
+			AST tmp3113_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
@@ -45042,11 +44938,11 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp3136_AST_in = (AST)_t;
+				AST tmp3114_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
-				_loop1965:
+				_loop1960:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -45057,13 +44953,13 @@
 						switch ( _t.getType()) {
 						case WHEN:
 						{
-							AST __t1964 = _t;
-							AST tmp3137_AST_in = (AST)_t;
+							AST __t1959 = _t;
+							AST tmp3115_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1964;
+							_t = __t1959;
 							_t = _t.getNextSibling();
 							break;
 						}
@@ -45080,12 +44976,12 @@
 						}
 					}
 					else {
-						break _loop1965;
+						break _loop1960;
 					}
 					
 				} while (true);
 				}
-				AST tmp3138_AST_in = (AST)_t;
+				AST tmp3116_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -45100,14 +44996,14 @@
 			}
 			}
 			}
-			_t = __t1960;
+			_t = __t1955;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCEPT:
 		{
-			AST __t1966 = _t;
-			AST tmp3139_AST_in = (AST)_t;
+			AST __t1961 = _t;
+			AST tmp3117_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -45115,11 +45011,11 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp3140_AST_in = (AST)_t;
+				AST tmp3118_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
-				_loop1971:
+				_loop1966:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -45130,13 +45026,13 @@
 						switch ( _t.getType()) {
 						case WHEN:
 						{
-							AST __t1970 = _t;
-							AST tmp3141_AST_in = (AST)_t;
+							AST __t1965 = _t;
+							AST tmp3119_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1970;
+							_t = __t1965;
 							_t = _t.getNextSibling();
 							break;
 						}
@@ -45153,12 +45049,12 @@
 						}
 					}
 					else {
-						break _loop1971;
+						break _loop1966;
 					}
 					
 				} while (true);
 				}
-				AST tmp3142_AST_in = (AST)_t;
+				AST tmp3120_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -45173,7 +45069,7 @@
 			}
 			}
 			}
-			_t = __t1966;
+			_t = __t1961;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -45190,8 +45086,8 @@
 		AST def_table_like_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST rec = null;
 		
-		AST __t1014 = _t;
-		AST tmp3143_AST_in = (AST)_t;
+		AST __t1008 = _t;
+		AST tmp3121_AST_in = (AST)_t;
 		match(_t,LIKE);
 		_t = _t.getFirstChild();
 		rec = _t==ASTNULL ? null : (AST)_t;
@@ -45202,7 +45098,7 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST tmp3144_AST_in = (AST)_t;
+			AST tmp3122_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
@@ -45219,15 +45115,15 @@
 		}
 		}
 		{
-		_loop1020:
+		_loop1014:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==USEINDEX)) {
-				AST __t1017 = _t;
-				AST tmp3145_AST_in = (AST)_t;
+				AST __t1011 = _t;
+				AST tmp3123_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp3146_AST_in = (AST)_t;
+				AST tmp3124_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
@@ -45241,14 +45137,14 @@
 					switch ( _t.getType()) {
 					case AS:
 					{
-						AST tmp3147_AST_in = (AST)_t;
+						AST tmp3125_AST_in = (AST)_t;
 						match(_t,AS);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case IS:
 					{
-						AST tmp3148_AST_in = (AST)_t;
+						AST tmp3126_AST_in = (AST)_t;
 						match(_t,IS);
 						_t = _t.getNextSibling();
 						break;
@@ -45259,7 +45155,7 @@
 					}
 					}
 					}
-					AST tmp3149_AST_in = (AST)_t;
+					AST tmp3127_AST_in = (AST)_t;
 					match(_t,PRIMARY);
 					_t = _t.getNextSibling();
 					break;
@@ -45274,16 +45170,16 @@
 				}
 				}
 				}
-				_t = __t1017;
+				_t = __t1011;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1020;
+				break _loop1014;
 			}
 			
 		} while (true);
 		}
-		_t = __t1014;
+		_t = __t1008;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.defineTableLike(rec);
@@ -45296,8 +45192,8 @@
 		AST def_table_field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST id = null;
 		
-		AST __t1022 = _t;
-		AST tmp3150_AST_in = (AST)_t;
+		AST __t1016 = _t;
+		AST tmp3128_AST_in = (AST)_t;
 		match(_t,FIELD);
 		_t = _t.getFirstChild();
 		id = (AST)_t;
@@ -45307,7 +45203,7 @@
 			action.defineTableField(id);
 		}
 		{
-		_loop1024:
+		_loop1018:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_13.member(_t.getType()))) {
@@ -45315,12 +45211,12 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1024;
+				break _loop1018;
 			}
 			
 		} while (true);
 		}
-		_t = __t1022;
+		_t = __t1016;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45335,13 +45231,13 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST __t1199 = _t;
+			AST __t1193 = _t;
 			as = _t==ASTNULL ? null :(AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
 			datatype_field(_t);
 			_t = _retTree;
-			_t = __t1199;
+			_t = __t1193;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defAs(as);
@@ -45366,43 +45262,43 @@
 		}
 		case COLUMNCODEPAGE:
 		{
-			AST __t1200 = _t;
-			AST tmp3151_AST_in = (AST)_t;
+			AST __t1194 = _t;
+			AST tmp3129_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1200;
+			_t = __t1194;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPID:
 		{
-			AST __t1201 = _t;
-			AST tmp3152_AST_in = (AST)_t;
+			AST __t1195 = _t;
+			AST tmp3130_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1201;
+			_t = __t1195;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMALS:
 		{
-			AST __t1202 = _t;
-			AST tmp3153_AST_in = (AST)_t;
+			AST __t1196 = _t;
+			AST tmp3131_AST_in = (AST)_t;
 			match(_t,DECIMALS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1202;
+			_t = __t1196;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPTARGET:
 		{
-			AST tmp3154_AST_in = (AST)_t;
+			AST tmp3132_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
@@ -45415,37 +45311,37 @@
 		}
 		case FONT:
 		{
-			AST __t1203 = _t;
-			AST tmp3155_AST_in = (AST)_t;
+			AST __t1197 = _t;
+			AST tmp3133_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1203;
+			_t = __t1197;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMAT:
 		{
-			AST __t1204 = _t;
-			AST tmp3156_AST_in = (AST)_t;
+			AST __t1198 = _t;
+			AST tmp3134_AST_in = (AST)_t;
 			match(_t,FORMAT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1204;
+			_t = __t1198;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELP:
 		{
-			AST __t1205 = _t;
-			AST tmp3157_AST_in = (AST)_t;
+			AST __t1199 = _t;
+			AST tmp3135_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t1205;
+			_t = __t1199;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -45464,7 +45360,7 @@
 		}
 		case LIKE:
 		{
-			AST __t1206 = _t;
+			AST __t1200 = _t;
 			li = _t==ASTNULL ? null :(AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
@@ -45475,7 +45371,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp3158_AST_in = (AST)_t;
+				AST tmp3136_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -45490,7 +45386,7 @@
 			}
 			}
 			}
-			_t = __t1206;
+			_t = __t1200;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defLike(li);
@@ -45499,19 +45395,19 @@
 		}
 		case MOUSEPOINTER:
 		{
-			AST __t1208 = _t;
-			AST tmp3159_AST_in = (AST)_t;
+			AST __t1202 = _t;
+			AST tmp3137_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1208;
+			_t = __t1202;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp3160_AST_in = (AST)_t;
+			AST tmp3138_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -45524,7 +45420,7 @@
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp3161_AST_in = (AST)_t;
+			AST tmp3139_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
@@ -45541,8 +45437,8 @@
 		
 		AST skipphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2145 = _t;
-		AST tmp3162_AST_in = (AST)_t;
+		AST __t2140 = _t;
+		AST tmp3140_AST_in = (AST)_t;
 		match(_t,SKIP);
 		_t = _t.getFirstChild();
 		{
@@ -45564,7 +45460,7 @@
 		}
 		}
 		}
-		_t = __t2145;
+		_t = __t2140;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45573,106 +45469,106 @@
 		
 		AST editorphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1138 = _t;
-		AST tmp3163_AST_in = (AST)_t;
+		AST __t1132 = _t;
+		AST tmp3141_AST_in = (AST)_t;
 		match(_t,EDITOR);
 		_t = _t.getFirstChild();
 		{
-		_loop1145:
+		_loop1139:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case INNERCHARS:
 			{
-				AST __t1140 = _t;
-				AST tmp3164_AST_in = (AST)_t;
+				AST __t1134 = _t;
+				AST tmp3142_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1140;
+				_t = __t1134;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INNERLINES:
 			{
-				AST __t1141 = _t;
-				AST tmp3165_AST_in = (AST)_t;
+				AST __t1135 = _t;
+				AST tmp3143_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1141;
+				_t = __t1135;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BUFFERCHARS:
 			{
-				AST __t1142 = _t;
-				AST tmp3166_AST_in = (AST)_t;
+				AST __t1136 = _t;
+				AST tmp3144_AST_in = (AST)_t;
 				match(_t,BUFFERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1142;
+				_t = __t1136;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BUFFERLINES:
 			{
-				AST __t1143 = _t;
-				AST tmp3167_AST_in = (AST)_t;
+				AST __t1137 = _t;
+				AST tmp3145_AST_in = (AST)_t;
 				match(_t,BUFFERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1143;
+				_t = __t1137;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LARGE:
 			{
-				AST tmp3168_AST_in = (AST)_t;
+				AST tmp3146_AST_in = (AST)_t;
 				match(_t,LARGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXCHARS:
 			{
-				AST __t1144 = _t;
-				AST tmp3169_AST_in = (AST)_t;
+				AST __t1138 = _t;
+				AST tmp3147_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1144;
+				_t = __t1138;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOBOX:
 			{
-				AST tmp3170_AST_in = (AST)_t;
+				AST tmp3148_AST_in = (AST)_t;
 				match(_t,NOBOX);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWORDWRAP:
 			{
-				AST tmp3171_AST_in = (AST)_t;
+				AST tmp3149_AST_in = (AST)_t;
 				match(_t,NOWORDWRAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp3172_AST_in = (AST)_t;
+				AST tmp3150_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp3173_AST_in = (AST)_t;
+				AST tmp3151_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -45693,12 +45589,12 @@
 			}
 			default:
 			{
-				break _loop1145;
+				break _loop1139;
 			}
 			}
 		} while (true);
 		}
-		_t = __t1138;
+		_t = __t1132;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45707,8 +45603,8 @@
 		
 		AST editingphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1164 = _t;
-		AST tmp3174_AST_in = (AST)_t;
+		AST __t1158 = _t;
+		AST tmp3152_AST_in = (AST)_t;
 		match(_t,Editing_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -45716,10 +45612,10 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp3175_AST_in = (AST)_t;
+			AST tmp3153_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp3176_AST_in = (AST)_t;
+			AST tmp3154_AST_in = (AST)_t;
 			match(_t,LEXCOLON);
 			_t = _t.getNextSibling();
 			break;
@@ -45734,13 +45630,13 @@
 		}
 		}
 		}
-		AST tmp3177_AST_in = (AST)_t;
+		AST tmp3155_AST_in = (AST)_t;
 		match(_t,EDITING);
 		_t = _t.getNextSibling();
 		block_colon(_t);
 		_t = _retTree;
 		{
-		_loop1167:
+		_loop1161:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_0.member(_t.getType()))) {
@@ -45748,15 +45644,15 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1167;
+				break _loop1161;
 			}
 			
 		} while (true);
 		}
-		AST tmp3178_AST_in = (AST)_t;
+		AST tmp3156_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getNextSibling();
-		_t = __t1164;
+		_t = __t1158;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45765,8 +45661,8 @@
 		
 		AST viewasphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2400 = _t;
-		AST tmp3179_AST_in = (AST)_t;
+		AST __t2395 = _t;
+		AST tmp3157_AST_in = (AST)_t;
 		match(_t,VIEWAS);
 		_t = _t.getFirstChild();
 		{
@@ -45826,7 +45722,7 @@
 		}
 		}
 		}
-		_t = __t2400;
+		_t = __t2395;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45835,18 +45731,18 @@
 		
 		AST fillinphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1210 = _t;
-		AST tmp3180_AST_in = (AST)_t;
+		AST __t1204 = _t;
+		AST tmp3158_AST_in = (AST)_t;
 		match(_t,FILLIN);
 		_t = _t.getFirstChild();
 		{
-		_loop1212:
+		_loop1206:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NATIVE:
 			{
-				AST tmp3181_AST_in = (AST)_t;
+				AST tmp3159_AST_in = (AST)_t;
 				match(_t,NATIVE);
 				_t = _t.getNextSibling();
 				break;
@@ -45867,12 +45763,12 @@
 			}
 			default:
 			{
-				break _loop1212;
+				break _loop1206;
 			}
 			}
 		} while (true);
 		}
-		_t = __t1210;
+		_t = __t1204;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45881,12 +45777,12 @@
 		
 		AST titlephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2265 = _t;
-		AST tmp3182_AST_in = (AST)_t;
+		AST __t2260 = _t;
+		AST tmp3160_AST_in = (AST)_t;
 		match(_t,TITLE);
 		_t = _t.getFirstChild();
 		{
-		_loop2269:
+		_loop2264:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -45901,38 +45797,38 @@
 			}
 			case COLOR:
 			{
-				AST __t2267 = _t;
-				AST tmp3183_AST_in = (AST)_t;
+				AST __t2262 = _t;
+				AST tmp3161_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t2267;
+				_t = __t2262;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t2268 = _t;
-				AST tmp3184_AST_in = (AST)_t;
+				AST __t2263 = _t;
+				AST tmp3162_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2268;
+				_t = __t2263;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2269;
+				break _loop2264;
 			}
 			}
 		} while (true);
 		}
 		expression(_t);
 		_t = _retTree;
-		_t = __t2265;
+		_t = __t2260;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -45947,8 +45843,8 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST __t1350 = _t;
-			AST tmp3185_AST_in = (AST)_t;
+			AST __t1345 = _t;
+			AST tmp3163_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			{
@@ -45971,7 +45867,7 @@
 			}
 			}
 			}
-			AST tmp3186_AST_in = (AST)_t;
+			AST tmp3164_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -45982,7 +45878,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp3187_AST_in = (AST)_t;
+				AST tmp3165_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -45997,7 +45893,7 @@
 			}
 			}
 			}
-			_t = __t1350;
+			_t = __t1345;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defineBuffer(id, id, rec, true);
@@ -46006,37 +45902,37 @@
 		}
 		case INPUT:
 		{
-			AST __t1353 = _t;
-			AST tmp3188_AST_in = (AST)_t;
+			AST __t1348 = _t;
+			AST tmp3166_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t1353;
+			_t = __t1348;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST __t1354 = _t;
-			AST tmp3189_AST_in = (AST)_t;
+			AST __t1349 = _t;
+			AST tmp3167_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t1354;
+			_t = __t1349;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUTOUTPUT:
 		{
-			AST __t1355 = _t;
-			AST tmp3190_AST_in = (AST)_t;
+			AST __t1350 = _t;
+			AST tmp3168_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t1355;
+			_t = __t1350;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -46059,7 +45955,7 @@
 		switch ( _t.getType()) {
 		case TABLE:
 		{
-			AST tmp3191_AST_in = (AST)_t;
+			AST tmp3169_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			{
@@ -46067,7 +45963,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp3192_AST_in = (AST)_t;
+				AST tmp3170_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -46089,7 +45985,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp3193_AST_in = (AST)_t;
+				AST tmp3171_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -46108,7 +46004,7 @@
 		}
 		case TABLEHANDLE:
 		{
-			AST tmp3194_AST_in = (AST)_t;
+			AST tmp3172_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			{
@@ -46116,7 +46012,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp3195_AST_in = (AST)_t;
+				AST tmp3173_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -46139,7 +46035,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp3196_AST_in = (AST)_t;
+				AST tmp3174_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -46256,31 +46152,31 @@
 		AST goon_elem_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		{
-		AST tmp3197_AST_in = (AST)_t;
+		AST tmp3175_AST_in = (AST)_t;
 		match(_t,_tokenSet_35);
 		_t = _t.getNextSibling();
 		}
 		{
-		boolean synPredMatched1419 = false;
+		boolean synPredMatched1414 = false;
 		if (((_t.getType()==OF))) {
-			AST __t1419 = _t;
-			synPredMatched1419 = true;
+			AST __t1414 = _t;
+			synPredMatched1414 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST tmp3198_AST_in = (AST)_t;
+				AST tmp3176_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1419 = false;
+				synPredMatched1414 = false;
 			}
-			_t = __t1419;
+			_t = __t1414;
 			inputState.guessing--;
 		}
-		if ( synPredMatched1419 ) {
-			AST tmp3199_AST_in = (AST)_t;
+		if ( synPredMatched1414 ) {
+			AST tmp3177_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			gwidget(_t);
@@ -46300,7 +46196,7 @@
 		
 		AST sqlaggregatefunc_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp3200_AST_in = (AST)_t;
+		AST tmp3178_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -46308,7 +46204,7 @@
 		switch ( _t.getType()) {
 		case DISTINCT:
 		{
-			AST tmp3201_AST_in = (AST)_t;
+			AST tmp3179_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			{
@@ -46316,12 +46212,12 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp3202_AST_in = (AST)_t;
+				AST tmp3180_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.REF);
 				_t = _retTree;
-				AST tmp3203_AST_in = (AST)_t;
+				AST tmp3181_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -46342,7 +46238,7 @@
 		}
 		case STAR:
 		{
-			AST tmp3204_AST_in = (AST)_t;
+			AST tmp3182_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -46353,7 +46249,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ALL)) {
-					AST tmp3205_AST_in = (AST)_t;
+					AST tmp3183_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 				}
@@ -46372,7 +46268,7 @@
 		}
 		}
 		}
-		AST tmp3206_AST_in = (AST)_t;
+		AST tmp3184_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -46383,10 +46279,10 @@
 		AST return_options_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		{
-		boolean synPredMatched2025 = false;
+		boolean synPredMatched2020 = false;
 		if (((_tokenSet_4.member(_t.getType())))) {
-			AST __t2025 = _t;
-			synPredMatched2025 = true;
+			AST __t2020 = _t;
+			synPredMatched2020 = true;
 			inputState.guessing++;
 			try {
 				{
@@ -46395,36 +46291,36 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched2025 = false;
+				synPredMatched2020 = false;
 			}
-			_t = __t2025;
+			_t = __t2020;
 			inputState.guessing--;
 		}
-		if ( synPredMatched2025 ) {
+		if ( synPredMatched2020 ) {
 			expression(_t);
 			_t = _retTree;
 		}
 		else {
-			boolean synPredMatched2027 = false;
+			boolean synPredMatched2022 = false;
 			if (((_t.getType()==ERROR))) {
-				AST __t2027 = _t;
-				synPredMatched2027 = true;
+				AST __t2022 = _t;
+				synPredMatched2022 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp3207_AST_in = (AST)_t;
+					AST tmp3185_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched2027 = false;
+					synPredMatched2022 = false;
 				}
-				_t = __t2027;
+				_t = __t2022;
 				inputState.guessing--;
 			}
-			if ( synPredMatched2027 ) {
-				AST tmp3208_AST_in = (AST)_t;
+			if ( synPredMatched2022 ) {
+				AST tmp3186_AST_in = (AST)_t;
 				match(_t,ERROR);
 				_t = _t.getNextSibling();
 				{
@@ -46442,7 +46338,7 @@
 				}
 			}
 			else if ((_t.getType()==NOAPPLY)) {
-				AST tmp3209_AST_in = (AST)_t;
+				AST tmp3187_AST_in = (AST)_t;
 				match(_t,NOAPPLY);
 				_t = _t.getNextSibling();
 				{
@@ -46475,19 +46371,19 @@
 		
 		AST radiosetphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1928 = _t;
-		AST tmp3210_AST_in = (AST)_t;
+		AST __t1923 = _t;
+		AST tmp3188_AST_in = (AST)_t;
 		match(_t,RADIOSET);
 		_t = _t.getFirstChild();
 		{
-		_loop1940:
+		_loop1935:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case HORIZONTAL:
 			{
-				AST __t1930 = _t;
-				AST tmp3211_AST_in = (AST)_t;
+				AST __t1925 = _t;
+				AST tmp3189_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getFirstChild();
 				{
@@ -46495,7 +46391,7 @@
 				switch ( _t.getType()) {
 				case EXPAND:
 				{
-					AST tmp3212_AST_in = (AST)_t;
+					AST tmp3190_AST_in = (AST)_t;
 					match(_t,EXPAND);
 					_t = _t.getNextSibling();
 					break;
@@ -46510,13 +46406,13 @@
 				}
 				}
 				}
-				_t = __t1930;
+				_t = __t1925;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case VERTICAL:
 			{
-				AST tmp3213_AST_in = (AST)_t;
+				AST tmp3191_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -46533,8 +46429,8 @@
 			}
 			case RADIOBUTTONS:
 			{
-				AST __t1933 = _t;
-				AST tmp3214_AST_in = (AST)_t;
+				AST __t1928 = _t;
+				AST tmp3192_AST_in = (AST)_t;
 				match(_t,RADIOBUTTONS);
 				_t = _t.getFirstChild();
 				{
@@ -46542,14 +46438,14 @@
 				switch ( _t.getType()) {
 				case QSTRING:
 				{
-					AST tmp3215_AST_in = (AST)_t;
+					AST tmp3193_AST_in = (AST)_t;
 					match(_t,QSTRING);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case UNQUOTEDSTRING:
 				{
-					AST tmp3216_AST_in = (AST)_t;
+					AST tmp3194_AST_in = (AST)_t;
 					match(_t,UNQUOTEDSTRING);
 					_t = _t.getNextSibling();
 					break;
@@ -46560,7 +46456,7 @@
 				}
 				}
 				}
-				AST tmp3217_AST_in = (AST)_t;
+				AST tmp3195_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -46615,7 +46511,7 @@
 				}
 				case TODAY:
 				{
-					AST tmp3218_AST_in = (AST)_t;
+					AST tmp3196_AST_in = (AST)_t;
 					match(_t,TODAY);
 					_t = _t.getNextSibling();
 					break;
@@ -46627,11 +46523,11 @@
 				}
 				}
 				{
-				_loop1939:
+				_loop1934:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3219_AST_in = (AST)_t;
+						AST tmp3197_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -46639,14 +46535,14 @@
 						switch ( _t.getType()) {
 						case QSTRING:
 						{
-							AST tmp3220_AST_in = (AST)_t;
+							AST tmp3198_AST_in = (AST)_t;
 							match(_t,QSTRING);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case UNQUOTEDSTRING:
 						{
-							AST tmp3221_AST_in = (AST)_t;
+							AST tmp3199_AST_in = (AST)_t;
 							match(_t,UNQUOTEDSTRING);
 							_t = _t.getNextSibling();
 							break;
@@ -46657,7 +46553,7 @@
 						}
 						}
 						}
-						AST tmp3222_AST_in = (AST)_t;
+						AST tmp3200_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -46712,7 +46608,7 @@
 						}
 						case TODAY:
 						{
-							AST tmp3223_AST_in = (AST)_t;
+							AST tmp3201_AST_in = (AST)_t;
 							match(_t,TODAY);
 							_t = _t.getNextSibling();
 							break;
@@ -46725,12 +46621,12 @@
 						}
 					}
 					else {
-						break _loop1939;
+						break _loop1934;
 					}
 					
 				} while (true);
 				}
-				_t = __t1933;
+				_t = __t1928;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -46742,12 +46638,12 @@
 			}
 			default:
 			{
-				break _loop1940;
+				break _loop1935;
 			}
 			}
 		} while (true);
 		}
-		_t = __t1928;
+		_t = __t1923;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -46756,135 +46652,135 @@
 		
 		AST selectionlistphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2100 = _t;
-		AST tmp3224_AST_in = (AST)_t;
+		AST __t2095 = _t;
+		AST tmp3202_AST_in = (AST)_t;
 		match(_t,SELECTIONLIST);
 		_t = _t.getFirstChild();
 		{
-		_loop2110:
+		_loop2105:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case SINGLE:
 			{
-				AST tmp3225_AST_in = (AST)_t;
+				AST tmp3203_AST_in = (AST)_t;
 				match(_t,SINGLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MULTIPLE:
 			{
-				AST tmp3226_AST_in = (AST)_t;
+				AST tmp3204_AST_in = (AST)_t;
 				match(_t,MULTIPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NODRAG:
 			{
-				AST tmp3227_AST_in = (AST)_t;
+				AST tmp3205_AST_in = (AST)_t;
 				match(_t,NODRAG);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LISTITEMS:
 			{
-				AST __t2102 = _t;
-				AST tmp3228_AST_in = (AST)_t;
+				AST __t2097 = _t;
+				AST tmp3206_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
 				{
-				_loop2104:
+				_loop2099:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3229_AST_in = (AST)_t;
+						AST tmp3207_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop2104;
+						break _loop2099;
 					}
 					
 				} while (true);
 				}
-				_t = __t2102;
+				_t = __t2097;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LISTITEMPAIRS:
 			{
-				AST __t2105 = _t;
-				AST tmp3230_AST_in = (AST)_t;
+				AST __t2100 = _t;
+				AST tmp3208_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
 				{
-				_loop2107:
+				_loop2102:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3231_AST_in = (AST)_t;
+						AST tmp3209_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop2107;
+						break _loop2102;
 					}
 					
 				} while (true);
 				}
-				_t = __t2105;
+				_t = __t2100;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp3232_AST_in = (AST)_t;
+				AST tmp3210_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp3233_AST_in = (AST)_t;
+				AST tmp3211_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INNERCHARS:
 			{
-				AST __t2108 = _t;
-				AST tmp3234_AST_in = (AST)_t;
+				AST __t2103 = _t;
+				AST tmp3212_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2108;
+				_t = __t2103;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INNERLINES:
 			{
-				AST __t2109 = _t;
-				AST tmp3235_AST_in = (AST)_t;
+				AST __t2104 = _t;
+				AST tmp3213_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2109;
+				_t = __t2104;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SORT:
 			{
-				AST tmp3236_AST_in = (AST)_t;
+				AST tmp3214_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -46905,12 +46801,12 @@
 			}
 			default:
 			{
-				break _loop2110;
+				break _loop2105;
 			}
 			}
 		} while (true);
 		}
-		_t = __t2100;
+		_t = __t2095;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -46919,71 +46815,71 @@
 		
 		AST sliderphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2148 = _t;
-		AST tmp3237_AST_in = (AST)_t;
+		AST __t2143 = _t;
+		AST tmp3215_AST_in = (AST)_t;
 		match(_t,SLIDER);
 		_t = _t.getFirstChild();
 		{
-		_loop2156:
+		_loop2151:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case HORIZONTAL:
 			{
-				AST tmp3238_AST_in = (AST)_t;
+				AST tmp3216_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXVALUE:
 			{
-				AST __t2150 = _t;
-				AST tmp3239_AST_in = (AST)_t;
+				AST __t2145 = _t;
+				AST tmp3217_AST_in = (AST)_t;
 				match(_t,MAXVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2150;
+				_t = __t2145;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINVALUE:
 			{
-				AST __t2151 = _t;
-				AST tmp3240_AST_in = (AST)_t;
+				AST __t2146 = _t;
+				AST tmp3218_AST_in = (AST)_t;
 				match(_t,MINVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2151;
+				_t = __t2146;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case VERTICAL:
 			{
-				AST tmp3241_AST_in = (AST)_t;
+				AST tmp3219_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCURRENTVALUE:
 			{
-				AST tmp3242_AST_in = (AST)_t;
+				AST tmp3220_AST_in = (AST)_t;
 				match(_t,NOCURRENTVALUE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LARGETOSMALL:
 			{
-				AST tmp3243_AST_in = (AST)_t;
+				AST tmp3221_AST_in = (AST)_t;
 				match(_t,LARGETOSMALL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TICMARKS:
 			{
-				AST __t2152 = _t;
-				AST tmp3244_AST_in = (AST)_t;
+				AST __t2147 = _t;
+				AST tmp3222_AST_in = (AST)_t;
 				match(_t,TICMARKS);
 				_t = _t.getFirstChild();
 				{
@@ -46991,42 +46887,42 @@
 				switch ( _t.getType()) {
 				case NONE:
 				{
-					AST tmp3245_AST_in = (AST)_t;
+					AST tmp3223_AST_in = (AST)_t;
 					match(_t,NONE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOP:
 				{
-					AST tmp3246_AST_in = (AST)_t;
+					AST tmp3224_AST_in = (AST)_t;
 					match(_t,TOP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTTOM:
 				{
-					AST tmp3247_AST_in = (AST)_t;
+					AST tmp3225_AST_in = (AST)_t;
 					match(_t,BOTTOM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case LEFT:
 				{
-					AST tmp3248_AST_in = (AST)_t;
+					AST tmp3226_AST_in = (AST)_t;
 					match(_t,LEFT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case RIGHT:
 				{
-					AST tmp3249_AST_in = (AST)_t;
+					AST tmp3227_AST_in = (AST)_t;
 					match(_t,RIGHT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTH:
 				{
-					AST tmp3250_AST_in = (AST)_t;
+					AST tmp3228_AST_in = (AST)_t;
 					match(_t,BOTH);
 					_t = _t.getNextSibling();
 					break;
@@ -47042,13 +46938,13 @@
 				switch ( _t.getType()) {
 				case FREQUENCY:
 				{
-					AST __t2155 = _t;
-					AST tmp3251_AST_in = (AST)_t;
+					AST __t2150 = _t;
+					AST tmp3229_AST_in = (AST)_t;
 					match(_t,FREQUENCY);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t2155;
+					_t = __t2150;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -47062,7 +46958,7 @@
 				}
 				}
 				}
-				_t = __t2152;
+				_t = __t2147;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -47082,12 +46978,12 @@
 			}
 			default:
 			{
-				break _loop2156;
+				break _loop2151;
 			}
 			}
 		} while (true);
 		}
-		_t = __t2148;
+		_t = __t2143;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -47096,12 +46992,12 @@
 		
 		AST textphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2257 = _t;
-		AST tmp3252_AST_in = (AST)_t;
+		AST __t2252 = _t;
+		AST tmp3230_AST_in = (AST)_t;
 		match(_t,TEXT);
 		_t = _t.getFirstChild();
 		{
-		_loop2259:
+		_loop2254:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -47121,12 +47017,12 @@
 			}
 			default:
 			{
-				break _loop2259;
+				break _loop2254;
 			}
 			}
 		} while (true);
 		}
-		_t = __t2257;
+		_t = __t2252;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -47135,12 +47031,12 @@
 		
 		AST toggleboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2272 = _t;
-		AST tmp3253_AST_in = (AST)_t;
+		AST __t2267 = _t;
+		AST tmp3231_AST_in = (AST)_t;
 		match(_t,TOGGLEBOX);
 		_t = _t.getFirstChild();
 		{
-		_loop2274:
+		_loop2269:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -47160,12 +47056,12 @@
 			}
 			default:
 			{
-				break _loop2274;
+				break _loop2269;
 			}
 			}
 		} while (true);
 		}
-		_t = __t2272;
+		_t = __t2267;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -47174,30 +47070,30 @@
 		
 		AST sqlupdatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2587 = _t;
-		AST tmp3254_AST_in = (AST)_t;
+		AST __t2582 = _t;
+		AST tmp3232_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
-		AST tmp3255_AST_in = (AST)_t;
+		AST tmp3233_AST_in = (AST)_t;
 		match(_t,SET);
 		_t = _t.getNextSibling();
 		sqlupdate_equal(_t);
 		_t = _retTree;
 		{
-		_loop2589:
+		_loop2584:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp3256_AST_in = (AST)_t;
+				AST tmp3234_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlupdate_equal(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop2589;
+				break _loop2584;
 			}
 			
 		} while (true);
@@ -47207,8 +47103,8 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t2591 = _t;
-			AST tmp3257_AST_in = (AST)_t;
+			AST __t2586 = _t;
+			AST tmp3235_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -47218,13 +47114,13 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CURRENT)) {
-				AST tmp3258_AST_in = (AST)_t;
+				AST tmp3236_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getNextSibling();
-				AST tmp3259_AST_in = (AST)_t;
+				AST tmp3237_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp3260_AST_in = (AST)_t;
+				AST tmp3238_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 			}
@@ -47233,7 +47129,7 @@
 			}
 			
 			}
-			_t = __t2591;
+			_t = __t2586;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -47250,7 +47146,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2587;
+		_t = __t2582;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -47259,8 +47155,8 @@
 		
 		AST updatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2363 = _t;
-		AST tmp3261_AST_in = (AST)_t;
+		AST __t2358 = _t;
+		AST tmp3239_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
 		{
@@ -47268,7 +47164,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp3262_AST_in = (AST)_t;
+			AST tmp3240_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -47292,7 +47188,7 @@
 		}
 		}
 		{
-		_loop2366:
+		_loop2361:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -47300,7 +47196,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop2366;
+				break _loop2361;
 			}
 			
 		} while (true);
@@ -47335,12 +47231,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t2369 = _t;
-			AST tmp3263_AST_in = (AST)_t;
+			AST __t2364 = _t;
+			AST tmp3241_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop2371:
+			_loop2366:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -47348,12 +47244,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop2371;
+					break _loop2366;
 				}
 				
 			} while (true);
 			}
-			_t = __t2369;
+			_t = __t2364;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -47377,16 +47273,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t2373 = _t;
-			AST tmp3264_AST_in = (AST)_t;
+			AST __t2368 = _t;
+			AST tmp3242_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp3265_AST_in = (AST)_t;
+			AST tmp3243_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t2373;
+			_t = __t2368;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -47452,7 +47348,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp3266_AST_in = (AST)_t;
+			AST tmp3244_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -47470,7 +47366,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t2363;
+		_t = __t2358;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -47483,4091 +47379,4091 @@
 		switch ( _t.getType()) {
 		case AACBIT:
 		{
-			AST tmp3267_AST_in = (AST)_t;
+			AST tmp3245_AST_in = (AST)_t;
 			match(_t,AACBIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AACONTROL:
 		{
-			AST tmp3268_AST_in = (AST)_t;
+			AST tmp3246_AST_in = (AST)_t;
 			match(_t,AACONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AALIST:
 		{
-			AST tmp3269_AST_in = (AST)_t;
+			AST tmp3247_AST_in = (AST)_t;
 			match(_t,AALIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAMEMORY:
 		{
-			AST tmp3270_AST_in = (AST)_t;
+			AST tmp3248_AST_in = (AST)_t;
 			match(_t,AAMEMORY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAMSG:
 		{
-			AST tmp3271_AST_in = (AST)_t;
+			AST tmp3249_AST_in = (AST)_t;
 			match(_t,AAMSG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAPCONTROL:
 		{
-			AST tmp3272_AST_in = (AST)_t;
+			AST tmp3250_AST_in = (AST)_t;
 			match(_t,AAPCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AASERIAL:
 		{
-			AST tmp3273_AST_in = (AST)_t;
+			AST tmp3251_AST_in = (AST)_t;
 			match(_t,AASERIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AATRACE:
 		{
-			AST tmp3274_AST_in = (AST)_t;
+			AST tmp3252_AST_in = (AST)_t;
 			match(_t,AATRACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ABSOLUTE:
 		{
-			AST tmp3275_AST_in = (AST)_t;
+			AST tmp3253_AST_in = (AST)_t;
 			match(_t,ABSOLUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACCELERATOR:
 		{
-			AST tmp3276_AST_in = (AST)_t;
+			AST tmp3254_AST_in = (AST)_t;
 			match(_t,ACCELERATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ADDINTERVAL:
 		{
-			AST tmp3277_AST_in = (AST)_t;
+			AST tmp3255_AST_in = (AST)_t;
 			match(_t,ADDINTERVAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ADVISE:
 		{
-			AST tmp3278_AST_in = (AST)_t;
+			AST tmp3256_AST_in = (AST)_t;
 			match(_t,ADVISE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALERTBOX:
 		{
-			AST tmp3279_AST_in = (AST)_t;
+			AST tmp3257_AST_in = (AST)_t;
 			match(_t,ALERTBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALLOWREPLICATION:
 		{
-			AST tmp3280_AST_in = (AST)_t;
+			AST tmp3258_AST_in = (AST)_t;
 			match(_t,ALLOWREPLICATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALTERNATEKEY:
 		{
-			AST tmp3281_AST_in = (AST)_t;
+			AST tmp3259_AST_in = (AST)_t;
 			match(_t,ALTERNATEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANALYZE:
 		{
-			AST tmp3282_AST_in = (AST)_t;
+			AST tmp3260_AST_in = (AST)_t;
 			match(_t,ANALYZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANSIONLY:
 		{
-			AST tmp3283_AST_in = (AST)_t;
+			AST tmp3261_AST_in = (AST)_t;
 			match(_t,ANSIONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ANYWHERE:
 		{
-			AST tmp3284_AST_in = (AST)_t;
+			AST tmp3262_AST_in = (AST)_t;
 			match(_t,ANYWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case APPEND:
 		{
-			AST tmp3285_AST_in = (AST)_t;
+			AST tmp3263_AST_in = (AST)_t;
 			match(_t,APPEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case APPLICATION:
 		{
-			AST tmp3286_AST_in = (AST)_t;
+			AST tmp3264_AST_in = (AST)_t;
 			match(_t,APPLICATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ARRAYMESSAGE:
 		{
-			AST tmp3287_AST_in = (AST)_t;
+			AST tmp3265_AST_in = (AST)_t;
 			match(_t,ARRAYMESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AS:
 		{
-			AST tmp3288_AST_in = (AST)_t;
+			AST tmp3266_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASC:
 		{
-			AST tmp3289_AST_in = (AST)_t;
+			AST tmp3267_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASKOVERWRITE:
 		{
-			AST tmp3290_AST_in = (AST)_t;
+			AST tmp3268_AST_in = (AST)_t;
 			match(_t,ASKOVERWRITE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASYNCHRONOUS:
 		{
-			AST tmp3291_AST_in = (AST)_t;
+			AST tmp3269_AST_in = (AST)_t;
 			match(_t,ASYNCHRONOUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ATTACHMENT:
 		{
-			AST tmp3292_AST_in = (AST)_t;
+			AST tmp3270_AST_in = (AST)_t;
 			match(_t,ATTACHMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOCOMPLETION:
 		{
-			AST tmp3293_AST_in = (AST)_t;
+			AST tmp3271_AST_in = (AST)_t;
 			match(_t,AUTOCOMPLETION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOENDKEY:
 		{
-			AST tmp3294_AST_in = (AST)_t;
+			AST tmp3272_AST_in = (AST)_t;
 			match(_t,AUTOENDKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOGO:
 		{
-			AST tmp3295_AST_in = (AST)_t;
+			AST tmp3273_AST_in = (AST)_t;
 			match(_t,AUTOGO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUTOMATIC:
 		{
-			AST tmp3296_AST_in = (AST)_t;
+			AST tmp3274_AST_in = (AST)_t;
 			match(_t,AUTOMATIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVERAGE:
 		{
-			AST tmp3297_AST_in = (AST)_t;
+			AST tmp3275_AST_in = (AST)_t;
 			match(_t,AVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVG:
 		{
-			AST tmp3298_AST_in = (AST)_t;
+			AST tmp3276_AST_in = (AST)_t;
 			match(_t,AVG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKWARDS:
 		{
-			AST tmp3299_AST_in = (AST)_t;
+			AST tmp3277_AST_in = (AST)_t;
 			match(_t,BACKWARDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64:
 		{
-			AST tmp3300_AST_in = (AST)_t;
+			AST tmp3278_AST_in = (AST)_t;
 			match(_t,BASE64);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASEKEY:
 		{
-			AST tmp3301_AST_in = (AST)_t;
+			AST tmp3279_AST_in = (AST)_t;
 			match(_t,BASEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BGCOLOR:
 		{
-			AST tmp3302_AST_in = (AST)_t;
+			AST tmp3280_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINARY:
 		{
-			AST tmp3303_AST_in = (AST)_t;
+			AST tmp3281_AST_in = (AST)_t;
 			match(_t,BINARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINDWHERE:
 		{
-			AST tmp3304_AST_in = (AST)_t;
+			AST tmp3282_AST_in = (AST)_t;
 			match(_t,BINDWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BLOB:
 		{
-			AST tmp3305_AST_in = (AST)_t;
+			AST tmp3283_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BOTH:
 		{
-			AST tmp3306_AST_in = (AST)_t;
+			AST tmp3284_AST_in = (AST)_t;
 			match(_t,BOTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BOTTOM:
 		{
-			AST tmp3307_AST_in = (AST)_t;
+			AST tmp3285_AST_in = (AST)_t;
 			match(_t,BOTTOM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST tmp3308_AST_in = (AST)_t;
+			AST tmp3286_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BTOS:
 		{
-			AST tmp3309_AST_in = (AST)_t;
+			AST tmp3287_AST_in = (AST)_t;
 			match(_t,BTOS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp3310_AST_in = (AST)_t;
+			AST tmp3288_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERCHARS:
 		{
-			AST tmp3311_AST_in = (AST)_t;
+			AST tmp3289_AST_in = (AST)_t;
 			match(_t,BUFFERCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERLINES:
 		{
-			AST tmp3312_AST_in = (AST)_t;
+			AST tmp3290_AST_in = (AST)_t;
 			match(_t,BUFFERLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFERNAME:
 		{
-			AST tmp3313_AST_in = (AST)_t;
+			AST tmp3291_AST_in = (AST)_t;
 			match(_t,BUFFERNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUTTON:
 		{
-			AST tmp3314_AST_in = (AST)_t;
+			AST tmp3292_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUTTONS:
 		{
-			AST tmp3315_AST_in = (AST)_t;
+			AST tmp3293_AST_in = (AST)_t;
 			match(_t,BUTTONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYREFERENCE:
 		{
-			AST tmp3316_AST_in = (AST)_t;
+			AST tmp3294_AST_in = (AST)_t;
 			match(_t,BYREFERENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVALUE:
 		{
-			AST tmp3317_AST_in = (AST)_t;
+			AST tmp3295_AST_in = (AST)_t;
 			match(_t,BYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYTE:
 		{
-			AST tmp3318_AST_in = (AST)_t;
+			AST tmp3296_AST_in = (AST)_t;
 			match(_t,BYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CACHE:
 		{
-			AST tmp3319_AST_in = (AST)_t;
+			AST tmp3297_AST_in = (AST)_t;
 			match(_t,CACHE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CACHESIZE:
 		{
-			AST tmp3320_AST_in = (AST)_t;
+			AST tmp3298_AST_in = (AST)_t;
 			match(_t,CACHESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANQUERY:
 		{
-			AST tmp3321_AST_in = (AST)_t;
+			AST tmp3299_AST_in = (AST)_t;
 			match(_t,CANQUERY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANSET:
 		{
-			AST tmp3322_AST_in = (AST)_t;
+			AST tmp3300_AST_in = (AST)_t;
 			match(_t,CANSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANCELBUTTON:
 		{
-			AST tmp3323_AST_in = (AST)_t;
+			AST tmp3301_AST_in = (AST)_t;
 			match(_t,CANCELBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CAPS:
 		{
-			AST tmp3324_AST_in = (AST)_t;
+			AST tmp3302_AST_in = (AST)_t;
 			match(_t,CAPS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CDECL_KW:
 		{
-			AST tmp3325_AST_in = (AST)_t;
+			AST tmp3303_AST_in = (AST)_t;
 			match(_t,CDECL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHAINED:
 		{
-			AST tmp3326_AST_in = (AST)_t;
+			AST tmp3304_AST_in = (AST)_t;
 			match(_t,CHAINED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHARACTER:
 		{
-			AST tmp3327_AST_in = (AST)_t;
+			AST tmp3305_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHARACTERLENGTH:
 		{
-			AST tmp3328_AST_in = (AST)_t;
+			AST tmp3306_AST_in = (AST)_t;
 			match(_t,CHARACTERLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHOOSE:
 		{
-			AST tmp3329_AST_in = (AST)_t;
+			AST tmp3307_AST_in = (AST)_t;
 			match(_t,CHOOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp3330_AST_in = (AST)_t;
+			AST tmp3308_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOSE:
 		{
-			AST tmp3331_AST_in = (AST)_t;
+			AST tmp3309_AST_in = (AST)_t;
 			match(_t,CLOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEBASELOCATOR:
 		{
-			AST tmp3332_AST_in = (AST)_t;
+			AST tmp3310_AST_in = (AST)_t;
 			match(_t,CODEBASELOCATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEPAGE:
 		{
-			AST tmp3333_AST_in = (AST)_t;
+			AST tmp3311_AST_in = (AST)_t;
 			match(_t,CODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEPAGECONVERT:
 		{
-			AST tmp3334_AST_in = (AST)_t;
+			AST tmp3312_AST_in = (AST)_t;
 			match(_t,CODEPAGECONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLLATE:
 		{
-			AST tmp3335_AST_in = (AST)_t;
+			AST tmp3313_AST_in = (AST)_t;
 			match(_t,COLLATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLOF:
 		{
-			AST tmp3336_AST_in = (AST)_t;
+			AST tmp3314_AST_in = (AST)_t;
 			match(_t,COLOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLONALIGNED:
 		{
-			AST tmp3337_AST_in = (AST)_t;
+			AST tmp3315_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLORTABLE:
 		{
-			AST tmp3338_AST_in = (AST)_t;
+			AST tmp3316_AST_in = (AST)_t;
 			match(_t,COLORTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMN:
 		{
-			AST tmp3339_AST_in = (AST)_t;
+			AST tmp3317_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNBGCOLOR:
 		{
-			AST tmp3340_AST_in = (AST)_t;
+			AST tmp3318_AST_in = (AST)_t;
 			match(_t,COLUMNBGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNCODEPAGE:
 		{
-			AST tmp3341_AST_in = (AST)_t;
+			AST tmp3319_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNDCOLOR:
 		{
-			AST tmp3342_AST_in = (AST)_t;
+			AST tmp3320_AST_in = (AST)_t;
 			match(_t,COLUMNDCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNFGCOLOR:
 		{
-			AST tmp3343_AST_in = (AST)_t;
+			AST tmp3321_AST_in = (AST)_t;
 			match(_t,COLUMNFGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNFONT:
 		{
-			AST tmp3344_AST_in = (AST)_t;
+			AST tmp3322_AST_in = (AST)_t;
 			match(_t,COLUMNFONT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNOF:
 		{
-			AST tmp3345_AST_in = (AST)_t;
+			AST tmp3323_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNPFCOLOR:
 		{
-			AST tmp3346_AST_in = (AST)_t;
+			AST tmp3324_AST_in = (AST)_t;
 			match(_t,COLUMNPFCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNS:
 		{
-			AST tmp3347_AST_in = (AST)_t;
+			AST tmp3325_AST_in = (AST)_t;
 			match(_t,COLUMNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMHANDLE:
 		{
-			AST tmp3348_AST_in = (AST)_t;
+			AST tmp3326_AST_in = (AST)_t;
 			match(_t,COMHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp3349_AST_in = (AST)_t;
+			AST tmp3327_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMMAND:
 		{
-			AST tmp3350_AST_in = (AST)_t;
+			AST tmp3328_AST_in = (AST)_t;
 			match(_t,COMMAND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPARES:
 		{
-			AST tmp3351_AST_in = (AST)_t;
+			AST tmp3329_AST_in = (AST)_t;
 			match(_t,COMPARES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPLETE:
 		{
-			AST tmp3352_AST_in = (AST)_t;
+			AST tmp3330_AST_in = (AST)_t;
 			match(_t,COMPLETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILE:
 		{
-			AST tmp3353_AST_in = (AST)_t;
+			AST tmp3331_AST_in = (AST)_t;
 			match(_t,COMPILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONFIGNAME:
 		{
-			AST tmp3354_AST_in = (AST)_t;
+			AST tmp3332_AST_in = (AST)_t;
 			match(_t,CONFIGNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONNECT:
 		{
-			AST tmp3355_AST_in = (AST)_t;
+			AST tmp3333_AST_in = (AST)_t;
 			match(_t,CONNECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTAINS:
 		{
-			AST tmp3356_AST_in = (AST)_t;
+			AST tmp3334_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTENTS:
 		{
-			AST tmp3357_AST_in = (AST)_t;
+			AST tmp3335_AST_in = (AST)_t;
 			match(_t,CONTENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXT:
 		{
-			AST tmp3358_AST_in = (AST)_t;
+			AST tmp3336_AST_in = (AST)_t;
 			match(_t,CONTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELP:
 		{
-			AST tmp3359_AST_in = (AST)_t;
+			AST tmp3337_AST_in = (AST)_t;
 			match(_t,CONTEXTHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPFILE:
 		{
-			AST tmp3360_AST_in = (AST)_t;
+			AST tmp3338_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPID:
 		{
-			AST tmp3361_AST_in = (AST)_t;
+			AST tmp3339_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTPOPUP:
 		{
-			AST tmp3362_AST_in = (AST)_t;
+			AST tmp3340_AST_in = (AST)_t;
 			match(_t,CONTEXTPOPUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp3363_AST_in = (AST)_t;
+			AST tmp3341_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONVERT:
 		{
-			AST tmp3364_AST_in = (AST)_t;
+			AST tmp3342_AST_in = (AST)_t;
 			match(_t,CONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONVERT3DCOLORS:
 		{
-			AST tmp3365_AST_in = (AST)_t;
+			AST tmp3343_AST_in = (AST)_t;
 			match(_t,CONVERT3DCOLORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST tmp3366_AST_in = (AST)_t;
+			AST tmp3344_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CREATETESTFILE:
 		{
-			AST tmp3367_AST_in = (AST)_t;
+			AST tmp3345_AST_in = (AST)_t;
 			match(_t,CREATETESTFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENCY:
 		{
-			AST tmp3368_AST_in = (AST)_t;
+			AST tmp3346_AST_in = (AST)_t;
 			match(_t,CURRENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTENVIRONMENT:
 		{
-			AST tmp3369_AST_in = (AST)_t;
+			AST tmp3347_AST_in = (AST)_t;
 			match(_t,CURRENTENVIRONMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTRESULTROW:
 		{
-			AST tmp3370_AST_in = (AST)_t;
+			AST tmp3348_AST_in = (AST)_t;
 			match(_t,CURRENTRESULTROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTVALUE:
 		{
-			AST tmp3371_AST_in = (AST)_t;
+			AST tmp3349_AST_in = (AST)_t;
 			match(_t,CURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATABIND:
 		{
-			AST tmp3372_AST_in = (AST)_t;
+			AST tmp3350_AST_in = (AST)_t;
 			match(_t,DATABIND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST tmp3373_AST_in = (AST)_t;
+			AST tmp3351_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST tmp3374_AST_in = (AST)_t;
+			AST tmp3352_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST tmp3375_AST_in = (AST)_t;
+			AST tmp3353_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DAY:
 		{
-			AST tmp3376_AST_in = (AST)_t;
+			AST tmp3354_AST_in = (AST)_t;
 			match(_t,DAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBIMS:
 		{
-			AST tmp3377_AST_in = (AST)_t;
+			AST tmp3355_AST_in = (AST)_t;
 			match(_t,DBIMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DCOLOR:
 		{
-			AST tmp3378_AST_in = (AST)_t;
+			AST tmp3356_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUG:
 		{
-			AST tmp3379_AST_in = (AST)_t;
+			AST tmp3357_AST_in = (AST)_t;
 			match(_t,DEBUG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST tmp3380_AST_in = (AST)_t;
+			AST tmp3358_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTBUTTON:
 		{
-			AST tmp3381_AST_in = (AST)_t;
+			AST tmp3359_AST_in = (AST)_t;
 			match(_t,DEFAULTBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTEXTENSION:
 		{
-			AST tmp3382_AST_in = (AST)_t;
+			AST tmp3360_AST_in = (AST)_t;
 			match(_t,DEFAULTEXTENSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTNOXLATE:
 		{
-			AST tmp3383_AST_in = (AST)_t;
+			AST tmp3361_AST_in = (AST)_t;
 			match(_t,DEFAULTNOXLATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFERLOBFETCH:
 		{
-			AST tmp3384_AST_in = (AST)_t;
+			AST tmp3362_AST_in = (AST)_t;
 			match(_t,DEFERLOBFETCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFINED:
 		{
-			AST tmp3385_AST_in = (AST)_t;
+			AST tmp3363_AST_in = (AST)_t;
 			match(_t,DEFINED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELETERESULTLISTENTRY:
 		{
-			AST tmp3386_AST_in = (AST)_t;
+			AST tmp3364_AST_in = (AST)_t;
 			match(_t,DELETERESULTLISTENTRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESC:
 		{
-			AST tmp3387_AST_in = (AST)_t;
+			AST tmp3365_AST_in = (AST)_t;
 			match(_t,DESC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESELECTION:
 		{
-			AST tmp3388_AST_in = (AST)_t;
+			AST tmp3366_AST_in = (AST)_t;
 			match(_t,DESELECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp3389_AST_in = (AST)_t;
+			AST tmp3367_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGHELP:
 		{
-			AST tmp3390_AST_in = (AST)_t;
+			AST tmp3368_AST_in = (AST)_t;
 			match(_t,DIALOGHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIR:
 		{
-			AST tmp3391_AST_in = (AST)_t;
+			AST tmp3369_AST_in = (AST)_t;
 			match(_t,DIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISABLED:
 		{
-			AST tmp3392_AST_in = (AST)_t;
+			AST tmp3370_AST_in = (AST)_t;
 			match(_t,DISABLED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOUBLE:
 		{
-			AST tmp3393_AST_in = (AST)_t;
+			AST tmp3371_AST_in = (AST)_t;
 			match(_t,DOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPDOWN:
 		{
-			AST tmp3394_AST_in = (AST)_t;
+			AST tmp3372_AST_in = (AST)_t;
 			match(_t,DROPDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPDOWNLIST:
 		{
-			AST tmp3395_AST_in = (AST)_t;
+			AST tmp3373_AST_in = (AST)_t;
 			match(_t,DROPDOWNLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPFILENOTIFY:
 		{
-			AST tmp3396_AST_in = (AST)_t;
+			AST tmp3374_AST_in = (AST)_t;
 			match(_t,DROPFILENOTIFY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPTARGET:
 		{
-			AST tmp3397_AST_in = (AST)_t;
+			AST tmp3375_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DUMP:
 		{
-			AST tmp3398_AST_in = (AST)_t;
+			AST tmp3376_AST_in = (AST)_t;
 			match(_t,DUMP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMIC:
 		{
-			AST tmp3399_AST_in = (AST)_t;
+			AST tmp3377_AST_in = (AST)_t;
 			match(_t,DYNAMIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICCURRENTVALUE:
 		{
-			AST tmp3400_AST_in = (AST)_t;
+			AST tmp3378_AST_in = (AST)_t;
 			match(_t,DYNAMICCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICNEXTVALUE:
 		{
-			AST tmp3401_AST_in = (AST)_t;
+			AST tmp3379_AST_in = (AST)_t;
 			match(_t,DYNAMICNEXTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ECHO:
 		{
-			AST tmp3402_AST_in = (AST)_t;
+			AST tmp3380_AST_in = (AST)_t;
 			match(_t,ECHO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDGECHARS:
 		{
-			AST tmp3403_AST_in = (AST)_t;
+			AST tmp3381_AST_in = (AST)_t;
 			match(_t,EDGECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDGEPIXELS:
 		{
-			AST tmp3404_AST_in = (AST)_t;
+			AST tmp3382_AST_in = (AST)_t;
 			match(_t,EDGEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITUNDO:
 		{
-			AST tmp3405_AST_in = (AST)_t;
+			AST tmp3383_AST_in = (AST)_t;
 			match(_t,EDITUNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp3406_AST_in = (AST)_t;
+			AST tmp3384_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EMPTY:
 		{
-			AST tmp3407_AST_in = (AST)_t;
+			AST tmp3385_AST_in = (AST)_t;
 			match(_t,EMPTY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDMOVE:
 		{
-			AST tmp3408_AST_in = (AST)_t;
+			AST tmp3386_AST_in = (AST)_t;
 			match(_t,ENDMOVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDRESIZE:
 		{
-			AST tmp3409_AST_in = (AST)_t;
+			AST tmp3387_AST_in = (AST)_t;
 			match(_t,ENDRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDROWRESIZE:
 		{
-			AST tmp3410_AST_in = (AST)_t;
+			AST tmp3388_AST_in = (AST)_t;
 			match(_t,ENDROWRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENDKEY:
 		{
-			AST tmp3411_AST_in = (AST)_t;
+			AST tmp3389_AST_in = (AST)_t;
 			match(_t,ENDKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENTERED:
 		{
-			AST tmp3412_AST_in = (AST)_t;
+			AST tmp3390_AST_in = (AST)_t;
 			match(_t,ENTERED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EQ:
 		{
-			AST tmp3413_AST_in = (AST)_t;
+			AST tmp3391_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERROR:
 		{
-			AST tmp3414_AST_in = (AST)_t;
+			AST tmp3392_AST_in = (AST)_t;
 			match(_t,ERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORCODE:
 		{
-			AST tmp3415_AST_in = (AST)_t;
+			AST tmp3393_AST_in = (AST)_t;
 			match(_t,ERRORCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EVENTPROCEDURE:
 		{
-			AST tmp3416_AST_in = (AST)_t;
+			AST tmp3394_AST_in = (AST)_t;
 			match(_t,EVENTPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EVENTS:
 		{
-			AST tmp3417_AST_in = (AST)_t;
+			AST tmp3395_AST_in = (AST)_t;
 			match(_t,EVENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVEID:
 		{
-			AST tmp3418_AST_in = (AST)_t;
+			AST tmp3396_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVEWEBUSER:
 		{
-			AST tmp3419_AST_in = (AST)_t;
+			AST tmp3397_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEWEBUSER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXECUTE:
 		{
-			AST tmp3420_AST_in = (AST)_t;
+			AST tmp3398_AST_in = (AST)_t;
 			match(_t,EXECUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXP:
 		{
-			AST tmp3421_AST_in = (AST)_t;
+			AST tmp3399_AST_in = (AST)_t;
 			match(_t,EXP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPAND:
 		{
-			AST tmp3422_AST_in = (AST)_t;
+			AST tmp3400_AST_in = (AST)_t;
 			match(_t,EXPAND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPANDABLE:
 		{
-			AST tmp3423_AST_in = (AST)_t;
+			AST tmp3401_AST_in = (AST)_t;
 			match(_t,EXPANDABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXPLICIT:
 		{
-			AST tmp3424_AST_in = (AST)_t;
+			AST tmp3402_AST_in = (AST)_t;
 			match(_t,EXPLICIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTENDED:
 		{
-			AST tmp3425_AST_in = (AST)_t;
+			AST tmp3403_AST_in = (AST)_t;
 			match(_t,EXTENDED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTENT:
 		{
-			AST tmp3426_AST_in = (AST)_t;
+			AST tmp3404_AST_in = (AST)_t;
 			match(_t,EXTENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXTERNAL:
 		{
-			AST tmp3427_AST_in = (AST)_t;
+			AST tmp3405_AST_in = (AST)_t;
 			match(_t,EXTERNAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FGCOLOR:
 		{
-			AST tmp3428_AST_in = (AST)_t;
+			AST tmp3406_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILE:
 		{
-			AST tmp3429_AST_in = (AST)_t;
+			AST tmp3407_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp3430_AST_in = (AST)_t;
+			AST tmp3408_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILTERS:
 		{
-			AST tmp3431_AST_in = (AST)_t;
+			AST tmp3409_AST_in = (AST)_t;
 			match(_t,FILTERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FINDER:
 		{
-			AST tmp3432_AST_in = (AST)_t;
+			AST tmp3410_AST_in = (AST)_t;
 			match(_t,FINDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FITLASTCOLUMN:
 		{
-			AST tmp3433_AST_in = (AST)_t;
+			AST tmp3411_AST_in = (AST)_t;
 			match(_t,FITLASTCOLUMN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIXCODEPAGE:
 		{
-			AST tmp3434_AST_in = (AST)_t;
+			AST tmp3412_AST_in = (AST)_t;
 			match(_t,FIXCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIXEDONLY:
 		{
-			AST tmp3435_AST_in = (AST)_t;
+			AST tmp3413_AST_in = (AST)_t;
 			match(_t,FIXEDONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLATBUTTON:
 		{
-			AST tmp3436_AST_in = (AST)_t;
+			AST tmp3414_AST_in = (AST)_t;
 			match(_t,FLATBUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp3437_AST_in = (AST)_t;
+			AST tmp3415_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONTTABLE:
 		{
-			AST tmp3438_AST_in = (AST)_t;
+			AST tmp3416_AST_in = (AST)_t;
 			match(_t,FONTTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORCEFILE:
 		{
-			AST tmp3439_AST_in = (AST)_t;
+			AST tmp3417_AST_in = (AST)_t;
 			match(_t,FORCEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMINPUT:
 		{
-			AST tmp3440_AST_in = (AST)_t;
+			AST tmp3418_AST_in = (AST)_t;
 			match(_t,FORMINPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORWARDS:
 		{
-			AST tmp3441_AST_in = (AST)_t;
+			AST tmp3419_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FREQUENCY:
 		{
-			AST tmp3442_AST_in = (AST)_t;
+			AST tmp3420_AST_in = (AST)_t;
 			match(_t,FREQUENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FROMCURRENT:
 		{
-			AST tmp3443_AST_in = (AST)_t;
+			AST tmp3421_AST_in = (AST)_t;
 			match(_t,FROMCURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FUNCTION:
 		{
-			AST tmp3444_AST_in = (AST)_t;
+			AST tmp3422_AST_in = (AST)_t;
 			match(_t,FUNCTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GE:
 		{
-			AST tmp3445_AST_in = (AST)_t;
+			AST tmp3423_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEMD5:
 		{
-			AST tmp3446_AST_in = (AST)_t;
+			AST tmp3424_AST_in = (AST)_t;
 			match(_t,GENERATEMD5);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GET:
 		{
-			AST tmp3447_AST_in = (AST)_t;
+			AST tmp3425_AST_in = (AST)_t;
 			match(_t,GET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBITS:
 		{
-			AST tmp3448_AST_in = (AST)_t;
+			AST tmp3426_AST_in = (AST)_t;
 			match(_t,GETBITS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTE:
 		{
-			AST tmp3449_AST_in = (AST)_t;
+			AST tmp3427_AST_in = (AST)_t;
 			match(_t,GETBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTES:
 		{
-			AST tmp3450_AST_in = (AST)_t;
+			AST tmp3428_AST_in = (AST)_t;
 			match(_t,GETBYTES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTEORDER:
 		{
-			AST tmp3451_AST_in = (AST)_t;
+			AST tmp3429_AST_in = (AST)_t;
 			match(_t,GETBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGILIST:
 		{
-			AST tmp3452_AST_in = (AST)_t;
+			AST tmp3430_AST_in = (AST)_t;
 			match(_t,GETCGILIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGIVALUE:
 		{
-			AST tmp3453_AST_in = (AST)_t;
+			AST tmp3431_AST_in = (AST)_t;
 			match(_t,GETCGIVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCONFIGVALUE:
 		{
-			AST tmp3454_AST_in = (AST)_t;
+			AST tmp3432_AST_in = (AST)_t;
 			match(_t,GETCONFIGVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETDIR:
 		{
-			AST tmp3455_AST_in = (AST)_t;
+			AST tmp3433_AST_in = (AST)_t;
 			match(_t,GETDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETDOUBLE:
 		{
-			AST tmp3456_AST_in = (AST)_t;
+			AST tmp3434_AST_in = (AST)_t;
 			match(_t,GETDOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETFILE:
 		{
-			AST tmp3457_AST_in = (AST)_t;
+			AST tmp3435_AST_in = (AST)_t;
 			match(_t,GETFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETFLOAT:
 		{
-			AST tmp3458_AST_in = (AST)_t;
+			AST tmp3436_AST_in = (AST)_t;
 			match(_t,GETFLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLICENSE:
 		{
-			AST tmp3459_AST_in = (AST)_t;
+			AST tmp3437_AST_in = (AST)_t;
 			match(_t,GETLICENSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLONG:
 		{
-			AST tmp3460_AST_in = (AST)_t;
+			AST tmp3438_AST_in = (AST)_t;
 			match(_t,GETLONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETPOINTERVALUE:
 		{
-			AST tmp3461_AST_in = (AST)_t;
+			AST tmp3439_AST_in = (AST)_t;
 			match(_t,GETPOINTERVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSHORT:
 		{
-			AST tmp3462_AST_in = (AST)_t;
+			AST tmp3440_AST_in = (AST)_t;
 			match(_t,GETSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSIZE:
 		{
-			AST tmp3463_AST_in = (AST)_t;
+			AST tmp3441_AST_in = (AST)_t;
 			match(_t,GETSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSTRING:
 		{
-			AST tmp3464_AST_in = (AST)_t;
+			AST tmp3442_AST_in = (AST)_t;
 			match(_t,GETSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETUNSIGNEDSHORT:
 		{
-			AST tmp3465_AST_in = (AST)_t;
+			AST tmp3443_AST_in = (AST)_t;
 			match(_t,GETUNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GTHAN:
 		{
-			AST tmp3466_AST_in = (AST)_t;
+			AST tmp3444_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HANDLE:
 		{
-			AST tmp3467_AST_in = (AST)_t;
+			AST tmp3445_AST_in = (AST)_t;
 			match(_t,HANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HEIGHT:
 		{
-			AST tmp3468_AST_in = (AST)_t;
+			AST tmp3446_AST_in = (AST)_t;
 			match(_t,HEIGHT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELPTOPIC:
 		{
-			AST tmp3469_AST_in = (AST)_t;
+			AST tmp3447_AST_in = (AST)_t;
 			match(_t,HELPTOPIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HINT:
 		{
-			AST tmp3470_AST_in = (AST)_t;
+			AST tmp3448_AST_in = (AST)_t;
 			match(_t,HINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HORIZONTAL:
 		{
-			AST tmp3471_AST_in = (AST)_t;
+			AST tmp3449_AST_in = (AST)_t;
 			match(_t,HORIZONTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLENDOFLINE:
 		{
-			AST tmp3472_AST_in = (AST)_t;
+			AST tmp3450_AST_in = (AST)_t;
 			match(_t,HTMLENDOFLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLFRAMEBEGIN:
 		{
-			AST tmp3473_AST_in = (AST)_t;
+			AST tmp3451_AST_in = (AST)_t;
 			match(_t,HTMLFRAMEBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLFRAMEEND:
 		{
-			AST tmp3474_AST_in = (AST)_t;
+			AST tmp3452_AST_in = (AST)_t;
 			match(_t,HTMLFRAMEEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLHEADERBEGIN:
 		{
-			AST tmp3475_AST_in = (AST)_t;
+			AST tmp3453_AST_in = (AST)_t;
 			match(_t,HTMLHEADERBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLHEADEREND:
 		{
-			AST tmp3476_AST_in = (AST)_t;
+			AST tmp3454_AST_in = (AST)_t;
 			match(_t,HTMLHEADEREND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLTITLEBEGIN:
 		{
-			AST tmp3477_AST_in = (AST)_t;
+			AST tmp3455_AST_in = (AST)_t;
 			match(_t,HTMLTITLEBEGIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HTMLTITLEEND:
 		{
-			AST tmp3478_AST_in = (AST)_t;
+			AST tmp3456_AST_in = (AST)_t;
 			match(_t,HTMLTITLEEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp3479_AST_in = (AST)_t;
+			AST tmp3457_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEDOWN:
 		{
-			AST tmp3480_AST_in = (AST)_t;
+			AST tmp3458_AST_in = (AST)_t;
 			match(_t,IMAGEDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEINSENSITIVE:
 		{
-			AST tmp3481_AST_in = (AST)_t;
+			AST tmp3459_AST_in = (AST)_t;
 			match(_t,IMAGEINSENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZE:
 		{
-			AST tmp3482_AST_in = (AST)_t;
+			AST tmp3460_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZECHARS:
 		{
-			AST tmp3483_AST_in = (AST)_t;
+			AST tmp3461_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGESIZEPIXELS:
 		{
-			AST tmp3484_AST_in = (AST)_t;
+			AST tmp3462_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGEUP:
 		{
-			AST tmp3485_AST_in = (AST)_t;
+			AST tmp3463_AST_in = (AST)_t;
 			match(_t,IMAGEUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INCREMENTEXCLUSIVEID:
 		{
-			AST tmp3486_AST_in = (AST)_t;
+			AST tmp3464_AST_in = (AST)_t;
 			match(_t,INCREMENTEXCLUSIVEID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEXHINT:
 		{
-			AST tmp3487_AST_in = (AST)_t;
+			AST tmp3465_AST_in = (AST)_t;
 			match(_t,INDEXHINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEXEDREPOSITION:
 		{
-			AST tmp3488_AST_in = (AST)_t;
+			AST tmp3466_AST_in = (AST)_t;
 			match(_t,INDEXEDREPOSITION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INFORMATION:
 		{
-			AST tmp3489_AST_in = (AST)_t;
+			AST tmp3467_AST_in = (AST)_t;
 			match(_t,INFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIAL:
 		{
-			AST tmp3490_AST_in = (AST)_t;
+			AST tmp3468_AST_in = (AST)_t;
 			match(_t,INITIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIALDIR:
 		{
-			AST tmp3491_AST_in = (AST)_t;
+			AST tmp3469_AST_in = (AST)_t;
 			match(_t,INITIALDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIALFILTER:
 		{
-			AST tmp3492_AST_in = (AST)_t;
+			AST tmp3470_AST_in = (AST)_t;
 			match(_t,INITIALFILTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INITIATE:
 		{
-			AST tmp3493_AST_in = (AST)_t;
+			AST tmp3471_AST_in = (AST)_t;
 			match(_t,INITIATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNER:
 		{
-			AST tmp3494_AST_in = (AST)_t;
+			AST tmp3472_AST_in = (AST)_t;
 			match(_t,INNER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNERCHARS:
 		{
-			AST tmp3495_AST_in = (AST)_t;
+			AST tmp3473_AST_in = (AST)_t;
 			match(_t,INNERCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INNERLINES:
 		{
-			AST tmp3496_AST_in = (AST)_t;
+			AST tmp3474_AST_in = (AST)_t;
 			match(_t,INNERLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST tmp3497_AST_in = (AST)_t;
+			AST tmp3475_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTERVAL:
 		{
-			AST tmp3498_AST_in = (AST)_t;
+			AST tmp3476_AST_in = (AST)_t;
 			match(_t,INTERVAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ITEM:
 		{
-			AST tmp3499_AST_in = (AST)_t;
+			AST tmp3477_AST_in = (AST)_t;
 			match(_t,ITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCODEPAGEFIXED:
 		{
-			AST tmp3500_AST_in = (AST)_t;
+			AST tmp3478_AST_in = (AST)_t;
 			match(_t,ISCODEPAGEFIXED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCOLUMNCODEPAGE:
 		{
-			AST tmp3501_AST_in = (AST)_t;
+			AST tmp3479_AST_in = (AST)_t;
 			match(_t,ISCOLUMNCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISODATE:
 		{
-			AST tmp3502_AST_in = (AST)_t;
+			AST tmp3480_AST_in = (AST)_t;
 			match(_t,ISODATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IUNKNOWN:
 		{
-			AST tmp3503_AST_in = (AST)_t;
+			AST tmp3481_AST_in = (AST)_t;
 			match(_t,IUNKNOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case JOINBYSQLDB:
 		{
-			AST tmp3504_AST_in = (AST)_t;
+			AST tmp3482_AST_in = (AST)_t;
 			match(_t,JOINBYSQLDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEEPMESSAGES:
 		{
-			AST tmp3505_AST_in = (AST)_t;
+			AST tmp3483_AST_in = (AST)_t;
 			match(_t,KEEPMESSAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEEPTABORDER:
 		{
-			AST tmp3506_AST_in = (AST)_t;
+			AST tmp3484_AST_in = (AST)_t;
 			match(_t,KEEPTABORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEY:
 		{
-			AST tmp3507_AST_in = (AST)_t;
+			AST tmp3485_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYCODE:
 		{
-			AST tmp3508_AST_in = (AST)_t;
+			AST tmp3486_AST_in = (AST)_t;
 			match(_t,KEYCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYFUNCTION:
 		{
-			AST tmp3509_AST_in = (AST)_t;
+			AST tmp3487_AST_in = (AST)_t;
 			match(_t,KEYFUNCTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYLABEL:
 		{
-			AST tmp3510_AST_in = (AST)_t;
+			AST tmp3488_AST_in = (AST)_t;
 			match(_t,KEYLABEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYWORDALL:
 		{
-			AST tmp3511_AST_in = (AST)_t;
+			AST tmp3489_AST_in = (AST)_t;
 			match(_t,KEYWORDALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELBGCOLOR:
 		{
-			AST tmp3512_AST_in = (AST)_t;
+			AST tmp3490_AST_in = (AST)_t;
 			match(_t,LABELBGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELDCOLOR:
 		{
-			AST tmp3513_AST_in = (AST)_t;
+			AST tmp3491_AST_in = (AST)_t;
 			match(_t,LABELDCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELFGCOLOR:
 		{
-			AST tmp3514_AST_in = (AST)_t;
+			AST tmp3492_AST_in = (AST)_t;
 			match(_t,LABELFGCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LABELFONT:
 		{
-			AST tmp3515_AST_in = (AST)_t;
+			AST tmp3493_AST_in = (AST)_t;
 			match(_t,LABELFONT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LANDSCAPE:
 		{
-			AST tmp3516_AST_in = (AST)_t;
+			AST tmp3494_AST_in = (AST)_t;
 			match(_t,LANDSCAPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LANGUAGES:
 		{
-			AST tmp3517_AST_in = (AST)_t;
+			AST tmp3495_AST_in = (AST)_t;
 			match(_t,LANGUAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LARGE:
 		{
-			AST tmp3518_AST_in = (AST)_t;
+			AST tmp3496_AST_in = (AST)_t;
 			match(_t,LARGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LARGETOSMALL:
 		{
-			AST tmp3519_AST_in = (AST)_t;
+			AST tmp3497_AST_in = (AST)_t;
 			match(_t,LARGETOSMALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LC:
 		{
-			AST tmp3520_AST_in = (AST)_t;
+			AST tmp3498_AST_in = (AST)_t;
 			match(_t,LC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LE:
 		{
-			AST tmp3521_AST_in = (AST)_t;
+			AST tmp3499_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFT:
 		{
-			AST tmp3522_AST_in = (AST)_t;
+			AST tmp3500_AST_in = (AST)_t;
 			match(_t,LEFT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp3523_AST_in = (AST)_t;
+			AST tmp3501_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTTRIM:
 		{
-			AST tmp3524_AST_in = (AST)_t;
+			AST tmp3502_AST_in = (AST)_t;
 			match(_t,LEFTTRIM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LENGTH:
 		{
-			AST tmp3525_AST_in = (AST)_t;
+			AST tmp3503_AST_in = (AST)_t;
 			match(_t,LENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTEVENTS:
 		{
-			AST tmp3526_AST_in = (AST)_t;
+			AST tmp3504_AST_in = (AST)_t;
 			match(_t,LISTEVENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTITEMPAIRS:
 		{
-			AST tmp3527_AST_in = (AST)_t;
+			AST tmp3505_AST_in = (AST)_t;
 			match(_t,LISTITEMPAIRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTITEMS:
 		{
-			AST tmp3528_AST_in = (AST)_t;
+			AST tmp3506_AST_in = (AST)_t;
 			match(_t,LISTITEMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTQUERYATTRS:
 		{
-			AST tmp3529_AST_in = (AST)_t;
+			AST tmp3507_AST_in = (AST)_t;
 			match(_t,LISTQUERYATTRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTSETATTRS:
 		{
-			AST tmp3530_AST_in = (AST)_t;
+			AST tmp3508_AST_in = (AST)_t;
 			match(_t,LISTSETATTRS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTWIDGETS:
 		{
-			AST tmp3531_AST_in = (AST)_t;
+			AST tmp3509_AST_in = (AST)_t;
 			match(_t,LISTWIDGETS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOAD:
 		{
-			AST tmp3532_AST_in = (AST)_t;
+			AST tmp3510_AST_in = (AST)_t;
 			match(_t,LOAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOADPICTURE:
 		{
-			AST tmp3533_AST_in = (AST)_t;
+			AST tmp3511_AST_in = (AST)_t;
 			match(_t,LOADPICTURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOBDIR:
 		{
-			AST tmp3534_AST_in = (AST)_t;
+			AST tmp3512_AST_in = (AST)_t;
 			match(_t,LOBDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOG:
 		{
-			AST tmp3535_AST_in = (AST)_t;
+			AST tmp3513_AST_in = (AST)_t;
 			match(_t,LOG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST tmp3536_AST_in = (AST)_t;
+			AST tmp3514_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONG:
 		{
-			AST tmp3537_AST_in = (AST)_t;
+			AST tmp3515_AST_in = (AST)_t;
 			match(_t,LONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONGCHAR:
 		{
-			AST tmp3538_AST_in = (AST)_t;
+			AST tmp3516_AST_in = (AST)_t;
 			match(_t,LONGCHAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOOKAHEAD:
 		{
-			AST tmp3539_AST_in = (AST)_t;
+			AST tmp3517_AST_in = (AST)_t;
 			match(_t,LOOKAHEAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LTHAN:
 		{
-			AST tmp3540_AST_in = (AST)_t;
+			AST tmp3518_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MACHINECLASS:
 		{
-			AST tmp3541_AST_in = (AST)_t;
+			AST tmp3519_AST_in = (AST)_t;
 			match(_t,MACHINECLASS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MARGINEXTRA:
 		{
-			AST tmp3542_AST_in = (AST)_t;
+			AST tmp3520_AST_in = (AST)_t;
 			match(_t,MARGINEXTRA);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MATCHES:
 		{
-			AST tmp3543_AST_in = (AST)_t;
+			AST tmp3521_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAX:
 		{
-			AST tmp3544_AST_in = (AST)_t;
+			AST tmp3522_AST_in = (AST)_t;
 			match(_t,MAX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXCHARS:
 		{
-			AST tmp3545_AST_in = (AST)_t;
+			AST tmp3523_AST_in = (AST)_t;
 			match(_t,MAXCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXROWS:
 		{
-			AST tmp3546_AST_in = (AST)_t;
+			AST tmp3524_AST_in = (AST)_t;
 			match(_t,MAXROWS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXSIZE:
 		{
-			AST tmp3547_AST_in = (AST)_t;
+			AST tmp3525_AST_in = (AST)_t;
 			match(_t,MAXSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXVALUE:
 		{
-			AST tmp3548_AST_in = (AST)_t;
+			AST tmp3526_AST_in = (AST)_t;
 			match(_t,MAXVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMIZE:
 		{
-			AST tmp3549_AST_in = (AST)_t;
+			AST tmp3527_AST_in = (AST)_t;
 			match(_t,MAXIMIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMUM:
 		{
-			AST tmp3550_AST_in = (AST)_t;
+			AST tmp3528_AST_in = (AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMPTR:
 		{
-			AST tmp3551_AST_in = (AST)_t;
+			AST tmp3529_AST_in = (AST)_t;
 			match(_t,MEMPTR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp3552_AST_in = (AST)_t;
+			AST tmp3530_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp3553_AST_in = (AST)_t;
+			AST tmp3531_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUBAR:
 		{
-			AST tmp3554_AST_in = (AST)_t;
+			AST tmp3532_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGELINE:
 		{
-			AST tmp3555_AST_in = (AST)_t;
+			AST tmp3533_AST_in = (AST)_t;
 			match(_t,MESSAGELINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MIN:
 		{
-			AST tmp3556_AST_in = (AST)_t;
+			AST tmp3534_AST_in = (AST)_t;
 			match(_t,MIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINSIZE:
 		{
-			AST tmp3557_AST_in = (AST)_t;
+			AST tmp3535_AST_in = (AST)_t;
 			match(_t,MINSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINVALUE:
 		{
-			AST tmp3558_AST_in = (AST)_t;
+			AST tmp3536_AST_in = (AST)_t;
 			match(_t,MINVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINIMUM:
 		{
-			AST tmp3559_AST_in = (AST)_t;
+			AST tmp3537_AST_in = (AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MODULO:
 		{
-			AST tmp3560_AST_in = (AST)_t;
+			AST tmp3538_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MONTH:
 		{
-			AST tmp3561_AST_in = (AST)_t;
+			AST tmp3539_AST_in = (AST)_t;
 			match(_t,MONTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSE:
 		{
-			AST tmp3562_AST_in = (AST)_t;
+			AST tmp3540_AST_in = (AST)_t;
 			match(_t,MOUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSEPOINTER:
 		{
-			AST tmp3563_AST_in = (AST)_t;
+			AST tmp3541_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MPE:
 		{
-			AST tmp3564_AST_in = (AST)_t;
+			AST tmp3542_AST_in = (AST)_t;
 			match(_t,MPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MTIME:
 		{
-			AST tmp3565_AST_in = (AST)_t;
+			AST tmp3543_AST_in = (AST)_t;
 			match(_t,MTIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLE:
 		{
-			AST tmp3566_AST_in = (AST)_t;
+			AST tmp3544_AST_in = (AST)_t;
 			match(_t,MULTIPLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLEKEY:
 		{
-			AST tmp3567_AST_in = (AST)_t;
+			AST tmp3545_AST_in = (AST)_t;
 			match(_t,MULTIPLEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MUSTEXIST:
 		{
-			AST tmp3568_AST_in = (AST)_t;
+			AST tmp3546_AST_in = (AST)_t;
 			match(_t,MUSTEXIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NATIVE:
 		{
-			AST tmp3569_AST_in = (AST)_t;
+			AST tmp3547_AST_in = (AST)_t;
 			match(_t,NATIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NE:
 		{
-			AST tmp3570_AST_in = (AST)_t;
+			AST tmp3548_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXTVALUE:
 		{
-			AST tmp3571_AST_in = (AST)_t;
+			AST tmp3549_AST_in = (AST)_t;
 			match(_t,NEXTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOAPPLY:
 		{
-			AST tmp3572_AST_in = (AST)_t;
+			AST tmp3550_AST_in = (AST)_t;
 			match(_t,NOAPPLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOARRAYMESSAGE:
 		{
-			AST tmp3573_AST_in = (AST)_t;
+			AST tmp3551_AST_in = (AST)_t;
 			match(_t,NOARRAYMESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOASSIGN:
 		{
-			AST tmp3574_AST_in = (AST)_t;
+			AST tmp3552_AST_in = (AST)_t;
 			match(_t,NOASSIGN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOAUTOVALIDATE:
 		{
-			AST tmp3575_AST_in = (AST)_t;
+			AST tmp3553_AST_in = (AST)_t;
 			match(_t,NOAUTOVALIDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOBINDWHERE:
 		{
-			AST tmp3576_AST_in = (AST)_t;
+			AST tmp3554_AST_in = (AST)_t;
 			match(_t,NOBINDWHERE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOBOX:
 		{
-			AST tmp3577_AST_in = (AST)_t;
+			AST tmp3555_AST_in = (AST)_t;
 			match(_t,NOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCOLUMNSCROLLING:
 		{
-			AST tmp3578_AST_in = (AST)_t;
+			AST tmp3556_AST_in = (AST)_t;
 			match(_t,NOCOLUMNSCROLLING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONSOLE:
 		{
-			AST tmp3579_AST_in = (AST)_t;
+			AST tmp3557_AST_in = (AST)_t;
 			match(_t,NOCONSOLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONVERT:
 		{
-			AST tmp3580_AST_in = (AST)_t;
+			AST tmp3558_AST_in = (AST)_t;
 			match(_t,NOCONVERT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCONVERT3DCOLORS:
 		{
-			AST tmp3581_AST_in = (AST)_t;
+			AST tmp3559_AST_in = (AST)_t;
 			match(_t,NOCONVERT3DCOLORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOCURRENTVALUE:
 		{
-			AST tmp3582_AST_in = (AST)_t;
+			AST tmp3560_AST_in = (AST)_t;
 			match(_t,NOCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NODEBUG:
 		{
-			AST tmp3583_AST_in = (AST)_t;
+			AST tmp3561_AST_in = (AST)_t;
 			match(_t,NODEBUG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NODRAG:
 		{
-			AST tmp3584_AST_in = (AST)_t;
+			AST tmp3562_AST_in = (AST)_t;
 			match(_t,NODRAG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOECHO:
 		{
-			AST tmp3585_AST_in = (AST)_t;
+			AST tmp3563_AST_in = (AST)_t;
 			match(_t,NOECHO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOEMPTYSPACE:
 		{
-			AST tmp3586_AST_in = (AST)_t;
+			AST tmp3564_AST_in = (AST)_t;
 			match(_t,NOEMPTYSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOINDEXHINT:
 		{
-			AST tmp3587_AST_in = (AST)_t;
+			AST tmp3565_AST_in = (AST)_t;
 			match(_t,NOINDEXHINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOJOINBYSQLDB:
 		{
-			AST tmp3588_AST_in = (AST)_t;
+			AST tmp3566_AST_in = (AST)_t;
 			match(_t,NOJOINBYSQLDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOOKAHEAD:
 		{
-			AST tmp3589_AST_in = (AST)_t;
+			AST tmp3567_AST_in = (AST)_t;
 			match(_t,NOLOOKAHEAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NONE:
 		{
-			AST tmp3590_AST_in = (AST)_t;
+			AST tmp3568_AST_in = (AST)_t;
 			match(_t,NONE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORMAL:
 		{
-			AST tmp3591_AST_in = (AST)_t;
+			AST tmp3569_AST_in = (AST)_t;
 			match(_t,NORMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOROWMARKERS:
 		{
-			AST tmp3592_AST_in = (AST)_t;
+			AST tmp3570_AST_in = (AST)_t;
 			match(_t,NOROWMARKERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSCROLLBARVERTICAL:
 		{
-			AST tmp3593_AST_in = (AST)_t;
+			AST tmp3571_AST_in = (AST)_t;
 			match(_t,NOSCROLLBARVERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSEPARATECONNECTION:
 		{
-			AST tmp3594_AST_in = (AST)_t;
+			AST tmp3572_AST_in = (AST)_t;
 			match(_t,NOSEPARATECONNECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOSEPARATORS:
 		{
-			AST tmp3595_AST_in = (AST)_t;
+			AST tmp3573_AST_in = (AST)_t;
 			match(_t,NOSEPARATORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOTABSTOP:
 		{
-			AST tmp3596_AST_in = (AST)_t;
+			AST tmp3574_AST_in = (AST)_t;
 			match(_t,NOTABSTOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDERLINE:
 		{
-			AST tmp3597_AST_in = (AST)_t;
+			AST tmp3575_AST_in = (AST)_t;
 			match(_t,NOUNDERLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOWORDWRAP:
 		{
-			AST tmp3598_AST_in = (AST)_t;
+			AST tmp3576_AST_in = (AST)_t;
 			match(_t,NOWORDWRAP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMCOPIES:
 		{
-			AST tmp3599_AST_in = (AST)_t;
+			AST tmp3577_AST_in = (AST)_t;
 			match(_t,NUMCOPIES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMRESULTS:
 		{
-			AST tmp3600_AST_in = (AST)_t;
+			AST tmp3578_AST_in = (AST)_t;
 			match(_t,NUMRESULTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMERIC:
 		{
-			AST tmp3601_AST_in = (AST)_t;
+			AST tmp3579_AST_in = (AST)_t;
 			match(_t,NUMERIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OBJECT:
 		{
-			AST tmp3602_AST_in = (AST)_t;
+			AST tmp3580_AST_in = (AST)_t;
 			match(_t,OBJECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OCTETLENGTH:
 		{
-			AST tmp3603_AST_in = (AST)_t;
+			AST tmp3581_AST_in = (AST)_t;
 			match(_t,OCTETLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OK:
 		{
-			AST tmp3604_AST_in = (AST)_t;
+			AST tmp3582_AST_in = (AST)_t;
 			match(_t,OK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OKCANCEL:
 		{
-			AST tmp3605_AST_in = (AST)_t;
+			AST tmp3583_AST_in = (AST)_t;
 			match(_t,OKCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ONLY:
 		{
-			AST tmp3606_AST_in = (AST)_t;
+			AST tmp3584_AST_in = (AST)_t;
 			match(_t,ONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDER:
 		{
-			AST tmp3607_AST_in = (AST)_t;
+			AST tmp3585_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDEREDJOIN:
 		{
-			AST tmp3608_AST_in = (AST)_t;
+			AST tmp3586_AST_in = (AST)_t;
 			match(_t,ORDEREDJOIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ORDINAL:
 		{
-			AST tmp3609_AST_in = (AST)_t;
+			AST tmp3587_AST_in = (AST)_t;
 			match(_t,ORDINAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OS2:
 		{
-			AST tmp3610_AST_in = (AST)_t;
+			AST tmp3588_AST_in = (AST)_t;
 			match(_t,OS2);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OS400:
 		{
-			AST tmp3611_AST_in = (AST)_t;
+			AST tmp3589_AST_in = (AST)_t;
 			match(_t,OS400);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDRIVES:
 		{
-			AST tmp3612_AST_in = (AST)_t;
+			AST tmp3590_AST_in = (AST)_t;
 			match(_t,OSDRIVES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSERROR:
 		{
-			AST tmp3613_AST_in = (AST)_t;
+			AST tmp3591_AST_in = (AST)_t;
 			match(_t,OSERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSGETENV:
 		{
-			AST tmp3614_AST_in = (AST)_t;
+			AST tmp3592_AST_in = (AST)_t;
 			match(_t,OSGETENV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTER:
 		{
-			AST tmp3615_AST_in = (AST)_t;
+			AST tmp3593_AST_in = (AST)_t;
 			match(_t,OUTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTERJOIN:
 		{
-			AST tmp3616_AST_in = (AST)_t;
+			AST tmp3594_AST_in = (AST)_t;
 			match(_t,OUTERJOIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OVERRIDE:
 		{
-			AST tmp3617_AST_in = (AST)_t;
+			AST tmp3595_AST_in = (AST)_t;
 			match(_t,OVERRIDE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGESIZE_KW:
 		{
-			AST tmp3618_AST_in = (AST)_t;
+			AST tmp3596_AST_in = (AST)_t;
 			match(_t,PAGESIZE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGEWIDTH:
 		{
-			AST tmp3619_AST_in = (AST)_t;
+			AST tmp3597_AST_in = (AST)_t;
 			match(_t,PAGEWIDTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGED:
 		{
-			AST tmp3620_AST_in = (AST)_t;
+			AST tmp3598_AST_in = (AST)_t;
 			match(_t,PAGED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARENT:
 		{
-			AST tmp3621_AST_in = (AST)_t;
+			AST tmp3599_AST_in = (AST)_t;
 			match(_t,PARENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PARTIALKEY:
 		{
-			AST tmp3622_AST_in = (AST)_t;
+			AST tmp3600_AST_in = (AST)_t;
 			match(_t,PARTIALKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PASCAL_KW:
 		{
-			AST tmp3623_AST_in = (AST)_t;
+			AST tmp3601_AST_in = (AST)_t;
 			match(_t,PASCAL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PERFORMANCE:
 		{
-			AST tmp3624_AST_in = (AST)_t;
+			AST tmp3602_AST_in = (AST)_t;
 			match(_t,PERFORMANCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PFCOLOR:
 		{
-			AST tmp3625_AST_in = (AST)_t;
+			AST tmp3603_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp3626_AST_in = (AST)_t;
+			AST tmp3604_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PORTRAIT:
 		{
-			AST tmp3627_AST_in = (AST)_t;
+			AST tmp3605_AST_in = (AST)_t;
 			match(_t,PORTRAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case POSITION:
 		{
-			AST tmp3628_AST_in = (AST)_t;
+			AST tmp3606_AST_in = (AST)_t;
 			match(_t,POSITION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRECISION:
 		{
-			AST tmp3629_AST_in = (AST)_t;
+			AST tmp3607_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRESELECT:
 		{
-			AST tmp3630_AST_in = (AST)_t;
+			AST tmp3608_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREV:
 		{
-			AST tmp3631_AST_in = (AST)_t;
+			AST tmp3609_AST_in = (AST)_t;
 			match(_t,PREV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIMARY:
 		{
-			AST tmp3632_AST_in = (AST)_t;
+			AST tmp3610_AST_in = (AST)_t;
 			match(_t,PRIMARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRINTER:
 		{
-			AST tmp3633_AST_in = (AST)_t;
+			AST tmp3611_AST_in = (AST)_t;
 			match(_t,PRINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRINTERSETUP:
 		{
-			AST tmp3634_AST_in = (AST)_t;
+			AST tmp3612_AST_in = (AST)_t;
 			match(_t,PRINTERSETUP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIVATE:
 		{
-			AST tmp3635_AST_in = (AST)_t;
+			AST tmp3613_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCTEXT:
 		{
-			AST tmp3636_AST_in = (AST)_t;
+			AST tmp3614_AST_in = (AST)_t;
 			match(_t,PROCTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCTEXTBUFFER:
 		{
-			AST tmp3637_AST_in = (AST)_t;
+			AST tmp3615_AST_in = (AST)_t;
 			match(_t,PROCTEXTBUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCEDURE:
 		{
-			AST tmp3638_AST_in = (AST)_t;
+			AST tmp3616_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROFILER:
 		{
-			AST tmp3639_AST_in = (AST)_t;
+			AST tmp3617_AST_in = (AST)_t;
 			match(_t,PROFILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMPT:
 		{
-			AST tmp3640_AST_in = (AST)_t;
+			AST tmp3618_AST_in = (AST)_t;
 			match(_t,PROMPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLIC:
 		{
-			AST tmp3641_AST_in = (AST)_t;
+			AST tmp3619_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLISH:
 		{
-			AST tmp3642_AST_in = (AST)_t;
+			AST tmp3620_AST_in = (AST)_t;
 			match(_t,PUBLISH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBITS:
 		{
-			AST tmp3643_AST_in = (AST)_t;
+			AST tmp3621_AST_in = (AST)_t;
 			match(_t,PUTBITS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBYTES:
 		{
-			AST tmp3644_AST_in = (AST)_t;
+			AST tmp3622_AST_in = (AST)_t;
 			match(_t,PUTBYTES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTDOUBLE:
 		{
-			AST tmp3645_AST_in = (AST)_t;
+			AST tmp3623_AST_in = (AST)_t;
 			match(_t,PUTDOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTFLOAT:
 		{
-			AST tmp3646_AST_in = (AST)_t;
+			AST tmp3624_AST_in = (AST)_t;
 			match(_t,PUTFLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTLONG:
 		{
-			AST tmp3647_AST_in = (AST)_t;
+			AST tmp3625_AST_in = (AST)_t;
 			match(_t,PUTLONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSHORT:
 		{
-			AST tmp3648_AST_in = (AST)_t;
+			AST tmp3626_AST_in = (AST)_t;
 			match(_t,PUTSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSTRING:
 		{
-			AST tmp3649_AST_in = (AST)_t;
+			AST tmp3627_AST_in = (AST)_t;
 			match(_t,PUTSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUESTION:
 		{
-			AST tmp3650_AST_in = (AST)_t;
+			AST tmp3628_AST_in = (AST)_t;
 			match(_t,QUESTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUOTER:
 		{
-			AST tmp3651_AST_in = (AST)_t;
+			AST tmp3629_AST_in = (AST)_t;
 			match(_t,QUOTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOBUTTONS:
 		{
-			AST tmp3652_AST_in = (AST)_t;
+			AST tmp3630_AST_in = (AST)_t;
 			match(_t,RADIOBUTTONS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp3653_AST_in = (AST)_t;
+			AST tmp3631_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RANDOM:
 		{
-			AST tmp3654_AST_in = (AST)_t;
+			AST tmp3632_AST_in = (AST)_t;
 			match(_t,RANDOM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAW:
 		{
-			AST tmp3655_AST_in = (AST)_t;
+			AST tmp3633_AST_in = (AST)_t;
 			match(_t,RAW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAWTRANSFER:
 		{
-			AST tmp3656_AST_in = (AST)_t;
+			AST tmp3634_AST_in = (AST)_t;
 			match(_t,RAWTRANSFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READ:
 		{
-			AST tmp3657_AST_in = (AST)_t;
+			AST tmp3635_AST_in = (AST)_t;
 			match(_t,READ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case READONLY:
 		{
-			AST tmp3658_AST_in = (AST)_t;
+			AST tmp3636_AST_in = (AST)_t;
 			match(_t,READONLY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REAL:
 		{
-			AST tmp3659_AST_in = (AST)_t;
+			AST tmp3637_AST_in = (AST)_t;
 			match(_t,REAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECORDLENGTH:
 		{
-			AST tmp3660_AST_in = (AST)_t;
+			AST tmp3638_AST_in = (AST)_t;
 			match(_t,RECORDLENGTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECURSIVE:
 		{
-			AST tmp3661_AST_in = (AST)_t;
+			AST tmp3639_AST_in = (AST)_t;
 			match(_t,RECURSIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RELATIONFIELDS:
 		{
-			AST tmp3662_AST_in = (AST)_t;
+			AST tmp3640_AST_in = (AST)_t;
 			match(_t,RELATIONFIELDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLACE:
 		{
-			AST tmp3663_AST_in = (AST)_t;
+			AST tmp3641_AST_in = (AST)_t;
 			match(_t,REPLACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONCREATE:
 		{
-			AST tmp3664_AST_in = (AST)_t;
+			AST tmp3642_AST_in = (AST)_t;
 			match(_t,REPLICATIONCREATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONDELETE:
 		{
-			AST tmp3665_AST_in = (AST)_t;
+			AST tmp3643_AST_in = (AST)_t;
 			match(_t,REPLICATIONDELETE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLICATIONWRITE:
 		{
-			AST tmp3666_AST_in = (AST)_t;
+			AST tmp3644_AST_in = (AST)_t;
 			match(_t,REPLICATIONWRITE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONFORWARD:
 		{
-			AST tmp3667_AST_in = (AST)_t;
+			AST tmp3645_AST_in = (AST)_t;
 			match(_t,REPOSITIONFORWARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REQUEST:
 		{
-			AST tmp3668_AST_in = (AST)_t;
+			AST tmp3646_AST_in = (AST)_t;
 			match(_t,REQUEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RESULT:
 		{
-			AST tmp3669_AST_in = (AST)_t;
+			AST tmp3647_AST_in = (AST)_t;
 			match(_t,RESULT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETAINSHAPE:
 		{
-			AST tmp3670_AST_in = (AST)_t;
+			AST tmp3648_AST_in = (AST)_t;
 			match(_t,RETAINSHAPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETRYCANCEL:
 		{
-			AST tmp3671_AST_in = (AST)_t;
+			AST tmp3649_AST_in = (AST)_t;
 			match(_t,RETRYCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNS:
 		{
-			AST tmp3672_AST_in = (AST)_t;
+			AST tmp3650_AST_in = (AST)_t;
 			match(_t,RETURNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNTOSTARTDIR:
 		{
-			AST tmp3673_AST_in = (AST)_t;
+			AST tmp3651_AST_in = (AST)_t;
 			match(_t,RETURNTOSTARTDIR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNVALUE:
 		{
-			AST tmp3674_AST_in = (AST)_t;
+			AST tmp3652_AST_in = (AST)_t;
 			match(_t,RETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REVERSEFROM:
 		{
-			AST tmp3675_AST_in = (AST)_t;
+			AST tmp3653_AST_in = (AST)_t;
 			match(_t,REVERSEFROM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RGBVALUE:
 		{
-			AST tmp3676_AST_in = (AST)_t;
+			AST tmp3654_AST_in = (AST)_t;
 			match(_t,RGBVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHT:
 		{
-			AST tmp3677_AST_in = (AST)_t;
+			AST tmp3655_AST_in = (AST)_t;
 			match(_t,RIGHT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp3678_AST_in = (AST)_t;
+			AST tmp3656_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTTRIM:
 		{
-			AST tmp3679_AST_in = (AST)_t;
+			AST tmp3657_AST_in = (AST)_t;
 			match(_t,RIGHTTRIM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROUND:
 		{
-			AST tmp3680_AST_in = (AST)_t;
+			AST tmp3658_AST_in = (AST)_t;
 			match(_t,ROUND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROW:
 		{
-			AST tmp3681_AST_in = (AST)_t;
+			AST tmp3659_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWHEIGHTCHARS:
 		{
-			AST tmp3682_AST_in = (AST)_t;
+			AST tmp3660_AST_in = (AST)_t;
 			match(_t,ROWHEIGHTCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWHEIGHTPIXELS:
 		{
-			AST tmp3683_AST_in = (AST)_t;
+			AST tmp3661_AST_in = (AST)_t;
 			match(_t,ROWHEIGHTPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST tmp3684_AST_in = (AST)_t;
+			AST tmp3662_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWOF:
 		{
-			AST tmp3685_AST_in = (AST)_t;
+			AST tmp3663_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RULE:
 		{
-			AST tmp3686_AST_in = (AST)_t;
+			AST tmp3664_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RUNPROCEDURE:
 		{
-			AST tmp3687_AST_in = (AST)_t;
+			AST tmp3665_AST_in = (AST)_t;
 			match(_t,RUNPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAVECACHE:
 		{
-			AST tmp3688_AST_in = (AST)_t;
+			AST tmp3666_AST_in = (AST)_t;
 			match(_t,SAVECACHE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAVEAS:
 		{
-			AST tmp3689_AST_in = (AST)_t;
+			AST tmp3667_AST_in = (AST)_t;
 			match(_t,SAVEAS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SAXREADER:
 		{
-			AST tmp3690_AST_in = (AST)_t;
+			AST tmp3668_AST_in = (AST)_t;
 			match(_t,SAXREADER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLABLE:
 		{
-			AST tmp3691_AST_in = (AST)_t;
+			AST tmp3669_AST_in = (AST)_t;
 			match(_t,SCROLLABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLBARHORIZONTAL:
 		{
-			AST tmp3692_AST_in = (AST)_t;
+			AST tmp3670_AST_in = (AST)_t;
 			match(_t,SCROLLBARHORIZONTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLBARVERTICAL:
 		{
-			AST tmp3693_AST_in = (AST)_t;
+			AST tmp3671_AST_in = (AST)_t;
 			match(_t,SCROLLBARVERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCROLLING:
 		{
-			AST tmp3694_AST_in = (AST)_t;
+			AST tmp3672_AST_in = (AST)_t;
 			match(_t,SCROLLING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECTION:
 		{
-			AST tmp3695_AST_in = (AST)_t;
+			AST tmp3673_AST_in = (AST)_t;
 			match(_t,SECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTION:
 		{
-			AST tmp3696_AST_in = (AST)_t;
+			AST tmp3674_AST_in = (AST)_t;
 			match(_t,SELECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp3697_AST_in = (AST)_t;
+			AST tmp3675_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEND:
 		{
-			AST tmp3698_AST_in = (AST)_t;
+			AST tmp3676_AST_in = (AST)_t;
 			match(_t,SEND);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SENDSQLSTATEMENT:
 		{
-			AST tmp3699_AST_in = (AST)_t;
+			AST tmp3677_AST_in = (AST)_t;
 			match(_t,SENDSQLSTATEMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEPARATECONNECTION:
 		{
-			AST tmp3700_AST_in = (AST)_t;
+			AST tmp3678_AST_in = (AST)_t;
 			match(_t,SEPARATECONNECTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEPARATORS:
 		{
-			AST tmp3701_AST_in = (AST)_t;
+			AST tmp3679_AST_in = (AST)_t;
 			match(_t,SEPARATORS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SERVER:
 		{
-			AST tmp3702_AST_in = (AST)_t;
+			AST tmp3680_AST_in = (AST)_t;
 			match(_t,SERVER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SERVERSOCKET:
 		{
-			AST tmp3703_AST_in = (AST)_t;
+			AST tmp3681_AST_in = (AST)_t;
 			match(_t,SERVERSOCKET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETBYTEORDER:
 		{
-			AST tmp3704_AST_in = (AST)_t;
+			AST tmp3682_AST_in = (AST)_t;
 			match(_t,SETBYTEORDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETCONTENTS:
 		{
-			AST tmp3705_AST_in = (AST)_t;
+			AST tmp3683_AST_in = (AST)_t;
 			match(_t,SETCONTENTS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETCURRENTVALUE:
 		{
-			AST tmp3706_AST_in = (AST)_t;
+			AST tmp3684_AST_in = (AST)_t;
 			match(_t,SETCURRENTVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETPOINTERVALUE:
 		{
-			AST tmp3707_AST_in = (AST)_t;
+			AST tmp3685_AST_in = (AST)_t;
 			match(_t,SETPOINTERVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETSIZE:
 		{
-			AST tmp3708_AST_in = (AST)_t;
+			AST tmp3686_AST_in = (AST)_t;
 			match(_t,SETSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIDELABELS:
 		{
-			AST tmp3709_AST_in = (AST)_t;
+			AST tmp3687_AST_in = (AST)_t;
 			match(_t,SIDELABELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SILENT:
 		{
-			AST tmp3710_AST_in = (AST)_t;
+			AST tmp3688_AST_in = (AST)_t;
 			match(_t,SILENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIMPLE:
 		{
-			AST tmp3711_AST_in = (AST)_t;
+			AST tmp3689_AST_in = (AST)_t;
 			match(_t,SIMPLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SINGLE:
 		{
-			AST tmp3712_AST_in = (AST)_t;
+			AST tmp3690_AST_in = (AST)_t;
 			match(_t,SINGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZE:
 		{
-			AST tmp3713_AST_in = (AST)_t;
+			AST tmp3691_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZECHARS:
 		{
-			AST tmp3714_AST_in = (AST)_t;
+			AST tmp3692_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SIZEPIXELS:
 		{
-			AST tmp3715_AST_in = (AST)_t;
+			AST tmp3693_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHORT:
 		{
-			AST tmp3716_AST_in = (AST)_t;
+			AST tmp3694_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp3717_AST_in = (AST)_t;
+			AST tmp3695_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SMALLINT:
 		{
-			AST tmp3718_AST_in = (AST)_t;
+			AST tmp3696_AST_in = (AST)_t;
 			match(_t,SMALLINT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOAPHEADER:
 		{
-			AST tmp3719_AST_in = (AST)_t;
+			AST tmp3697_AST_in = (AST)_t;
 			match(_t,SOAPHEADER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOAPHEADERENTRYREF:
 		{
-			AST tmp3720_AST_in = (AST)_t;
+			AST tmp3698_AST_in = (AST)_t;
 			match(_t,SOAPHEADERENTRYREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp3721_AST_in = (AST)_t;
+			AST tmp3699_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SORT:
 		{
-			AST tmp3722_AST_in = (AST)_t;
+			AST tmp3700_AST_in = (AST)_t;
 			match(_t,SORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCE:
 		{
-			AST tmp3723_AST_in = (AST)_t;
+			AST tmp3701_AST_in = (AST)_t;
 			match(_t,SOURCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCEPROCEDURE:
 		{
-			AST tmp3724_AST_in = (AST)_t;
+			AST tmp3702_AST_in = (AST)_t;
 			match(_t,SOURCEPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SQL:
 		{
-			AST tmp3725_AST_in = (AST)_t;
+			AST tmp3703_AST_in = (AST)_t;
 			match(_t,SQL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SQRT:
 		{
-			AST tmp3726_AST_in = (AST)_t;
+			AST tmp3704_AST_in = (AST)_t;
 			match(_t,SQRT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case START:
 		{
-			AST tmp3727_AST_in = (AST)_t;
+			AST tmp3705_AST_in = (AST)_t;
 			match(_t,START);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTING:
 		{
-			AST tmp3728_AST_in = (AST)_t;
+			AST tmp3706_AST_in = (AST)_t;
 			match(_t,STARTING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTMOVE:
 		{
-			AST tmp3729_AST_in = (AST)_t;
+			AST tmp3707_AST_in = (AST)_t;
 			match(_t,STARTMOVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTRESIZE:
 		{
-			AST tmp3730_AST_in = (AST)_t;
+			AST tmp3708_AST_in = (AST)_t;
 			match(_t,STARTRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STARTROWRESIZE:
 		{
-			AST tmp3731_AST_in = (AST)_t;
+			AST tmp3709_AST_in = (AST)_t;
 			match(_t,STARTROWRESIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STATUSBAR:
 		{
-			AST tmp3732_AST_in = (AST)_t;
+			AST tmp3710_AST_in = (AST)_t;
 			match(_t,STATUSBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STDCALL_KW:
 		{
-			AST tmp3733_AST_in = (AST)_t;
+			AST tmp3711_AST_in = (AST)_t;
 			match(_t,STDCALL_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRETCHTOFIT:
 		{
-			AST tmp3734_AST_in = (AST)_t;
+			AST tmp3712_AST_in = (AST)_t;
 			match(_t,STRETCHTOFIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOP:
 		{
-			AST tmp3735_AST_in = (AST)_t;
+			AST tmp3713_AST_in = (AST)_t;
 			match(_t,STOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOREDPROCEDURE:
 		{
-			AST tmp3736_AST_in = (AST)_t;
+			AST tmp3714_AST_in = (AST)_t;
 			match(_t,STOREDPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRING:
 		{
-			AST tmp3737_AST_in = (AST)_t;
+			AST tmp3715_AST_in = (AST)_t;
 			match(_t,STRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRINGXREF:
 		{
-			AST tmp3738_AST_in = (AST)_t;
+			AST tmp3716_AST_in = (AST)_t;
 			match(_t,STRINGXREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBAVERAGE:
 		{
-			AST tmp3739_AST_in = (AST)_t;
+			AST tmp3717_AST_in = (AST)_t;
 			match(_t,SUBAVERAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBCOUNT:
 		{
-			AST tmp3740_AST_in = (AST)_t;
+			AST tmp3718_AST_in = (AST)_t;
 			match(_t,SUBCOUNT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMAXIMUM:
 		{
-			AST tmp3741_AST_in = (AST)_t;
+			AST tmp3719_AST_in = (AST)_t;
 			match(_t,SUBMAXIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp3742_AST_in = (AST)_t;
+			AST tmp3720_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp3743_AST_in = (AST)_t;
+			AST tmp3721_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMINIMUM:
 		{
-			AST tmp3744_AST_in = (AST)_t;
+			AST tmp3722_AST_in = (AST)_t;
 			match(_t,SUBMINIMUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBTOTAL:
 		{
-			AST tmp3745_AST_in = (AST)_t;
+			AST tmp3723_AST_in = (AST)_t;
 			match(_t,SUBTOTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSCRIBE:
 		{
-			AST tmp3746_AST_in = (AST)_t;
+			AST tmp3724_AST_in = (AST)_t;
 			match(_t,SUBSCRIBE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSTITUTE:
 		{
-			AST tmp3747_AST_in = (AST)_t;
+			AST tmp3725_AST_in = (AST)_t;
 			match(_t,SUBSTITUTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSTRING:
 		{
-			AST tmp3748_AST_in = (AST)_t;
+			AST tmp3726_AST_in = (AST)_t;
 			match(_t,SUBSTRING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUM:
 		{
-			AST tmp3749_AST_in = (AST)_t;
+			AST tmp3727_AST_in = (AST)_t;
 			match(_t,SUM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUMMARY:
 		{
-			AST tmp3750_AST_in = (AST)_t;
+			AST tmp3728_AST_in = (AST)_t;
 			match(_t,SUMMARY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUPER:
 		{
-			AST tmp3751_AST_in = (AST)_t;
+			AST tmp3729_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYSTEMHELP:
 		{
-			AST tmp3752_AST_in = (AST)_t;
+			AST tmp3730_AST_in = (AST)_t;
 			match(_t,SYSTEMHELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGET:
 		{
-			AST tmp3753_AST_in = (AST)_t;
+			AST tmp3731_AST_in = (AST)_t;
 			match(_t,TARGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGETPROCEDURE:
 		{
-			AST tmp3754_AST_in = (AST)_t;
+			AST tmp3732_AST_in = (AST)_t;
 			match(_t,TARGETPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp3755_AST_in = (AST)_t;
+			AST tmp3733_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINATE:
 		{
-			AST tmp3756_AST_in = (AST)_t;
+			AST tmp3734_AST_in = (AST)_t;
 			match(_t,TERMINATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTCURSOR:
 		{
-			AST tmp3757_AST_in = (AST)_t;
+			AST tmp3735_AST_in = (AST)_t;
 			match(_t,TEXTCURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTSEGGROW:
 		{
-			AST tmp3758_AST_in = (AST)_t;
+			AST tmp3736_AST_in = (AST)_t;
 			match(_t,TEXTSEGGROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THREED:
 		{
-			AST tmp3759_AST_in = (AST)_t;
+			AST tmp3737_AST_in = (AST)_t;
 			match(_t,THREED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THROUGH:
 		{
-			AST tmp3760_AST_in = (AST)_t;
+			AST tmp3738_AST_in = (AST)_t;
 			match(_t,THROUGH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TICMARKS:
 		{
-			AST tmp3761_AST_in = (AST)_t;
+			AST tmp3739_AST_in = (AST)_t;
 			match(_t,TICMARKS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TIMEZONE:
 		{
-			AST tmp3762_AST_in = (AST)_t;
+			AST tmp3740_AST_in = (AST)_t;
 			match(_t,TIMEZONE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TODAY:
 		{
-			AST tmp3763_AST_in = (AST)_t;
+			AST tmp3741_AST_in = (AST)_t;
 			match(_t,TODAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp3764_AST_in = (AST)_t;
+			AST tmp3742_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOOLBAR:
 		{
-			AST tmp3765_AST_in = (AST)_t;
+			AST tmp3743_AST_in = (AST)_t;
 			match(_t,TOOLBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOOLTIP:
 		{
-			AST tmp3766_AST_in = (AST)_t;
+			AST tmp3744_AST_in = (AST)_t;
 			match(_t,TOOLTIP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOP:
 		{
-			AST tmp3767_AST_in = (AST)_t;
+			AST tmp3745_AST_in = (AST)_t;
 			match(_t,TOP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOPIC:
 		{
-			AST tmp3768_AST_in = (AST)_t;
+			AST tmp3746_AST_in = (AST)_t;
 			match(_t,TOPIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOTAL:
 		{
-			AST tmp3769_AST_in = (AST)_t;
+			AST tmp3747_AST_in = (AST)_t;
 			match(_t,TOTAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSACTIONMODE:
 		{
-			AST tmp3770_AST_in = (AST)_t;
+			AST tmp3748_AST_in = (AST)_t;
 			match(_t,TRANSACTIONMODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSPARENT:
 		{
-			AST tmp3771_AST_in = (AST)_t;
+			AST tmp3749_AST_in = (AST)_t;
 			match(_t,TRANSPARENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRAILING:
 		{
-			AST tmp3772_AST_in = (AST)_t;
+			AST tmp3750_AST_in = (AST)_t;
 			match(_t,TRAILING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRUNCATE:
 		{
-			AST tmp3773_AST_in = (AST)_t;
+			AST tmp3751_AST_in = (AST)_t;
 			match(_t,TRUNCATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp3774_AST_in = (AST)_t;
+			AST tmp3752_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNBUFFERED:
 		{
-			AST tmp3775_AST_in = (AST)_t;
+			AST tmp3753_AST_in = (AST)_t;
 			match(_t,UNBUFFERED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNIQUEMATCH:
 		{
-			AST tmp3776_AST_in = (AST)_t;
+			AST tmp3754_AST_in = (AST)_t;
 			match(_t,UNIQUEMATCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNLOAD:
 		{
-			AST tmp3777_AST_in = (AST)_t;
+			AST tmp3755_AST_in = (AST)_t;
 			match(_t,UNLOAD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDBYTE:
 		{
-			AST tmp3778_AST_in = (AST)_t;
+			AST tmp3756_AST_in = (AST)_t;
 			match(_t,UNSIGNEDBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDSHORT:
 		{
-			AST tmp3779_AST_in = (AST)_t;
+			AST tmp3757_AST_in = (AST)_t;
 			match(_t,UNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSUBSCRIBE:
 		{
-			AST tmp3780_AST_in = (AST)_t;
+			AST tmp3758_AST_in = (AST)_t;
 			match(_t,UNSUBSCRIBE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case URLDECODE:
 		{
-			AST tmp3781_AST_in = (AST)_t;
+			AST tmp3759_AST_in = (AST)_t;
 			match(_t,URLDECODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case URLENCODE:
 		{
-			AST tmp3782_AST_in = (AST)_t;
+			AST tmp3760_AST_in = (AST)_t;
 			match(_t,URLENCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USE:
 		{
-			AST tmp3783_AST_in = (AST)_t;
+			AST tmp3761_AST_in = (AST)_t;
 			match(_t,USE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEDICTEXPS:
 		{
-			AST tmp3784_AST_in = (AST)_t;
+			AST tmp3762_AST_in = (AST)_t;
 			match(_t,USEDICTEXPS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEFILENAME:
 		{
-			AST tmp3785_AST_in = (AST)_t;
+			AST tmp3763_AST_in = (AST)_t;
 			match(_t,USEFILENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEREVVIDEO:
 		{
-			AST tmp3786_AST_in = (AST)_t;
+			AST tmp3764_AST_in = (AST)_t;
 			match(_t,USEREVVIDEO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USETEXT:
 		{
-			AST tmp3787_AST_in = (AST)_t;
+			AST tmp3765_AST_in = (AST)_t;
 			match(_t,USETEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USEUNDERLINE:
 		{
-			AST tmp3788_AST_in = (AST)_t;
+			AST tmp3766_AST_in = (AST)_t;
 			match(_t,USEUNDERLINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USER:
 		{
-			AST tmp3789_AST_in = (AST)_t;
+			AST tmp3767_AST_in = (AST)_t;
 			match(_t,USER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDEVENT:
 		{
-			AST tmp3790_AST_in = (AST)_t;
+			AST tmp3768_AST_in = (AST)_t;
 			match(_t,VALIDEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDHANDLE:
 		{
-			AST tmp3791_AST_in = (AST)_t;
+			AST tmp3769_AST_in = (AST)_t;
 			match(_t,VALIDHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDATE:
 		{
-			AST tmp3792_AST_in = (AST)_t;
+			AST tmp3770_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VARIABLE:
 		{
-			AST tmp3793_AST_in = (AST)_t;
+			AST tmp3771_AST_in = (AST)_t;
 			match(_t,VARIABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VERBOSE:
 		{
-			AST tmp3794_AST_in = (AST)_t;
+			AST tmp3772_AST_in = (AST)_t;
 			match(_t,VERBOSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VERTICAL:
 		{
-			AST tmp3795_AST_in = (AST)_t;
+			AST tmp3773_AST_in = (AST)_t;
 			match(_t,VERTICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VMS:
 		{
-			AST tmp3796_AST_in = (AST)_t;
+			AST tmp3774_AST_in = (AST)_t;
 			match(_t,VMS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WAIT:
 		{
-			AST tmp3797_AST_in = (AST)_t;
+			AST tmp3775_AST_in = (AST)_t;
 			match(_t,WAIT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WARNING:
 		{
-			AST tmp3798_AST_in = (AST)_t;
+			AST tmp3776_AST_in = (AST)_t;
 			match(_t,WARNING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEBCONTEXT:
 		{
-			AST tmp3799_AST_in = (AST)_t;
+			AST tmp3777_AST_in = (AST)_t;
 			match(_t,WEBCONTEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEEKDAY:
 		{
-			AST tmp3800_AST_in = (AST)_t;
+			AST tmp3778_AST_in = (AST)_t;
 			match(_t,WEEKDAY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGET:
 		{
-			AST tmp3801_AST_in = (AST)_t;
+			AST tmp3779_AST_in = (AST)_t;
 			match(_t,WIDGET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST tmp3802_AST_in = (AST)_t;
+			AST tmp3780_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETPOOL:
 		{
-			AST tmp3803_AST_in = (AST)_t;
+			AST tmp3781_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTH:
 		{
-			AST tmp3804_AST_in = (AST)_t;
+			AST tmp3782_AST_in = (AST)_t;
 			match(_t,WIDTH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTHCHARS:
 		{
-			AST tmp3805_AST_in = (AST)_t;
+			AST tmp3783_AST_in = (AST)_t;
 			match(_t,WIDTHCHARS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDTHPIXELS:
 		{
-			AST tmp3806_AST_in = (AST)_t;
+			AST tmp3784_AST_in = (AST)_t;
 			match(_t,WIDTHPIXELS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOWNAME:
 		{
-			AST tmp3807_AST_in = (AST)_t;
+			AST tmp3785_AST_in = (AST)_t;
 			match(_t,WINDOWNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WORDINDEX:
 		{
-			AST tmp3808_AST_in = (AST)_t;
+			AST tmp3786_AST_in = (AST)_t;
 			match(_t,WORDINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case X:
 		{
-			AST tmp3809_AST_in = (AST)_t;
+			AST tmp3787_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp3810_AST_in = (AST)_t;
+			AST tmp3788_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp3811_AST_in = (AST)_t;
+			AST tmp3789_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XOF:
 		{
-			AST tmp3812_AST_in = (AST)_t;
+			AST tmp3790_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Y:
 		{
-			AST tmp3813_AST_in = (AST)_t;
+			AST tmp3791_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YOF:
 		{
-			AST tmp3814_AST_in = (AST)_t;
+			AST tmp3792_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YEAR:
 		{
-			AST tmp3815_AST_in = (AST)_t;
+			AST tmp3793_AST_in = (AST)_t;
 			match(_t,YEAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YESNO:
 		{
-			AST tmp3816_AST_in = (AST)_t;
+			AST tmp3794_AST_in = (AST)_t;
 			match(_t,YESNO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YESNOCANCEL:
 		{
-			AST tmp3817_AST_in = (AST)_t;
+			AST tmp3795_AST_in = (AST)_t;
 			match(_t,YESNOCANCEL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64DECODE:
 		{
-			AST tmp3818_AST_in = (AST)_t;
+			AST tmp3796_AST_in = (AST)_t;
 			match(_t,BASE64DECODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64ENCODE:
 		{
-			AST tmp3819_AST_in = (AST)_t;
+			AST tmp3797_AST_in = (AST)_t;
 			match(_t,BASE64ENCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BATCHSIZE:
 		{
-			AST tmp3820_AST_in = (AST)_t;
+			AST tmp3798_AST_in = (AST)_t;
 			match(_t,BATCHSIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEFORETABLE:
 		{
-			AST tmp3821_AST_in = (AST)_t;
+			AST tmp3799_AST_in = (AST)_t;
 			match(_t,BEFORETABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COPYDATASET:
 		{
-			AST tmp3822_AST_in = (AST)_t;
+			AST tmp3800_AST_in = (AST)_t;
 			match(_t,COPYDATASET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COPYTEMPTABLE:
 		{
-			AST tmp3823_AST_in = (AST)_t;
+			AST tmp3801_AST_in = (AST)_t;
 			match(_t,COPYTEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCEMODIFIED:
 		{
-			AST tmp3824_AST_in = (AST)_t;
+			AST tmp3802_AST_in = (AST)_t;
 			match(_t,DATASOURCEMODIFIED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECRYPT:
 		{
-			AST tmp3825_AST_in = (AST)_t;
+			AST tmp3803_AST_in = (AST)_t;
 			match(_t,DECRYPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DELETECHARACTER:
 		{
-			AST tmp3826_AST_in = (AST)_t;
+			AST tmp3804_AST_in = (AST)_t;
 			match(_t,DELETECHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENABLEDFIELDS:
 		{
-			AST tmp3827_AST_in = (AST)_t;
+			AST tmp3805_AST_in = (AST)_t;
 			match(_t,ENABLEDFIELDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCRYPT:
 		{
-			AST tmp3828_AST_in = (AST)_t;
+			AST tmp3806_AST_in = (AST)_t;
 			match(_t,ENCRYPT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCRYPTIONSALT:
 		{
-			AST tmp3829_AST_in = (AST)_t;
+			AST tmp3807_AST_in = (AST)_t;
 			match(_t,ENCRYPTIONSALT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMLONGINPUT:
 		{
-			AST tmp3830_AST_in = (AST)_t;
+			AST tmp3808_AST_in = (AST)_t;
 			match(_t,FORMLONGINPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEPBEKEY:
 		{
-			AST tmp3831_AST_in = (AST)_t;
+			AST tmp3809_AST_in = (AST)_t;
 			match(_t,GENERATEPBEKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEPBESALT:
 		{
-			AST tmp3832_AST_in = (AST)_t;
+			AST tmp3810_AST_in = (AST)_t;
 			match(_t,GENERATEPBESALT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATERANDOMKEY:
 		{
-			AST tmp3833_AST_in = (AST)_t;
+			AST tmp3811_AST_in = (AST)_t;
 			match(_t,GENERATERANDOMKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCGILONGVALUE:
 		{
-			AST tmp3834_AST_in = (AST)_t;
+			AST tmp3812_AST_in = (AST)_t;
 			match(_t,GETCGILONGVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTBATCH:
 		{
-			AST tmp3835_AST_in = (AST)_t;
+			AST tmp3813_AST_in = (AST)_t;
 			match(_t,LASTBATCH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MD5DIGEST:
 		{
-			AST tmp3836_AST_in = (AST)_t;
+			AST tmp3814_AST_in = (AST)_t;
 			match(_t,MD5DIGEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MERGEBYFIELD:
 		{
-			AST tmp3837_AST_in = (AST)_t;
+			AST tmp3815_AST_in = (AST)_t;
 			match(_t,MERGEBYFIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORMALIZE:
 		{
-			AST tmp3838_AST_in = (AST)_t;
+			AST tmp3816_AST_in = (AST)_t;
 			match(_t,NORMALIZE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PBEHASHALGORITHM:
 		{
-			AST tmp3839_AST_in = (AST)_t;
+			AST tmp3817_AST_in = (AST)_t;
 			match(_t,PBEHASHALGORITHM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PBEKEYROUNDS:
 		{
-			AST tmp3840_AST_in = (AST)_t;
+			AST tmp3818_AST_in = (AST)_t;
 			match(_t,PBEKEYROUNDS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREFERDATASET:
 		{
-			AST tmp3841_AST_in = (AST)_t;
+			AST tmp3819_AST_in = (AST)_t;
 			match(_t,PREFERDATASET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REJECTED:
 		{
-			AST tmp3842_AST_in = (AST)_t;
+			AST tmp3820_AST_in = (AST)_t;
 			match(_t,REJECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPOSITIONMODE:
 		{
-			AST tmp3843_AST_in = (AST)_t;
+			AST tmp3821_AST_in = (AST)_t;
 			match(_t,REPOSITIONMODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWSTATE:
 		{
-			AST tmp3844_AST_in = (AST)_t;
+			AST tmp3822_AST_in = (AST)_t;
 			match(_t,ROWSTATE);
 			_t = _t.getNextSibling();
-			AST tmp3845_AST_in = (AST)_t;
+			AST tmp3823_AST_in = (AST)_t;
 			match(_t,SHA1DIGEST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SSLSERVERNAME:
 		{
-			AST tmp3846_AST_in = (AST)_t;
+			AST tmp3824_AST_in = (AST)_t;
 			match(_t,SSLSERVERNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONALGORITHM:
 		{
-			AST tmp3847_AST_in = (AST)_t;
+			AST tmp3825_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONALGORITHM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONIV:
 		{
-			AST tmp3848_AST_in = (AST)_t;
+			AST tmp3826_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONIV);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICENCRYPTIONKEY:
 		{
-			AST tmp3849_AST_in = (AST)_t;
+			AST tmp3827_AST_in = (AST)_t;
 			match(_t,SYMMETRICENCRYPTIONKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SYMMETRICSUPPORT:
 		{
-			AST tmp3850_AST_in = (AST)_t;
+			AST tmp3828_AST_in = (AST)_t;
 			match(_t,SYMMETRICSUPPORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSINITPROCEDURE:
 		{
-			AST tmp3851_AST_in = (AST)_t;
+			AST tmp3829_AST_in = (AST)_t;
 			match(_t,TRANSINITPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
@@ -51584,8 +51480,8 @@
 		
 		AST sql_col_def_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2605 = _t;
-		AST tmp3852_AST_in = (AST)_t;
+		AST __t2600 = _t;
+		AST tmp3830_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getFirstChild();
 		{
@@ -51595,7 +51491,7 @@
 			_t = _retTree;
 		}
 		else if ((_t.getType()==ID)) {
-			AST tmp3853_AST_in = (AST)_t;
+			AST tmp3831_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 		}
@@ -51609,7 +51505,7 @@
 		switch ( _t.getType()) {
 		case PRECISION:
 		{
-			AST tmp3854_AST_in = (AST)_t;
+			AST tmp3832_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
@@ -51637,10 +51533,10 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp3855_AST_in = (AST)_t;
+			AST tmp3833_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp3856_AST_in = (AST)_t;
+			AST tmp3834_AST_in = (AST)_t;
 			match(_t,NUMBER);
 			_t = _t.getNextSibling();
 			{
@@ -51648,10 +51544,10 @@
 			switch ( _t.getType()) {
 			case COMMA:
 			{
-				AST tmp3857_AST_in = (AST)_t;
+				AST tmp3835_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp3858_AST_in = (AST)_t;
+				AST tmp3836_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				break;
@@ -51666,7 +51562,7 @@
 			}
 			}
 			}
-			AST tmp3859_AST_in = (AST)_t;
+			AST tmp3837_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -51693,14 +51589,14 @@
 		switch ( _t.getType()) {
 		case Not_null:
 		{
-			AST __t2611 = _t;
-			AST tmp3860_AST_in = (AST)_t;
+			AST __t2606 = _t;
+			AST tmp3838_AST_in = (AST)_t;
 			match(_t,Not_null);
 			_t = _t.getFirstChild();
-			AST tmp3861_AST_in = (AST)_t;
+			AST tmp3839_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp3862_AST_in = (AST)_t;
+			AST tmp3840_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			{
@@ -51708,7 +51604,7 @@
 			switch ( _t.getType()) {
 			case UNIQUE:
 			{
-				AST tmp3863_AST_in = (AST)_t;
+				AST tmp3841_AST_in = (AST)_t;
 				match(_t,UNIQUE);
 				_t = _t.getNextSibling();
 				break;
@@ -51723,7 +51619,7 @@
 			}
 			}
 			}
-			_t = __t2611;
+			_t = __t2606;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -51744,7 +51640,7 @@
 		}
 		}
 		{
-		_loop2616:
+		_loop2611:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -51757,25 +51653,25 @@
 			}
 			case DEFAULT:
 			{
-				AST __t2614 = _t;
-				AST tmp3864_AST_in = (AST)_t;
+				AST __t2609 = _t;
+				AST tmp3842_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2614;
+				_t = __t2609;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FORMAT:
 			{
-				AST __t2615 = _t;
-				AST tmp3865_AST_in = (AST)_t;
+				AST __t2610 = _t;
+				AST tmp3843_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t2615;
+				_t = __t2610;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -51788,12 +51684,12 @@
 			}
 			default:
 			{
-				break _loop2616;
+				break _loop2611;
 			}
 			}
 		} while (true);
 		}
-		_t = __t2605;
+		_t = __t2600;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -51802,8 +51698,8 @@
 		
 		AST selectstatea_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2525 = _t;
-		AST tmp3866_AST_in = (AST)_t;
+		AST __t2520 = _t;
+		AST tmp3844_AST_in = (AST)_t;
 		match(_t,SELECT);
 		_t = _t.getFirstChild();
 		{
@@ -51811,14 +51707,14 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp3867_AST_in = (AST)_t;
+			AST tmp3845_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISTINCT:
 		{
-			AST tmp3868_AST_in = (AST)_t;
+			AST tmp3846_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			break;
@@ -51839,38 +51735,38 @@
 		switch ( _t.getType()) {
 		case STAR:
 		{
-			AST tmp3869_AST_in = (AST)_t;
+			AST tmp3847_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_select_what:
 		{
-			AST __t2528 = _t;
-			AST tmp3870_AST_in = (AST)_t;
+			AST __t2523 = _t;
+			AST tmp3848_AST_in = (AST)_t;
 			match(_t,Sql_select_what);
 			_t = _t.getFirstChild();
 			{
-			boolean synPredMatched2531 = false;
+			boolean synPredMatched2526 = false;
 			if (((_t.getType()==LEFTPAREN))) {
-				AST __t2531 = _t;
-				synPredMatched2531 = true;
+				AST __t2526 = _t;
+				synPredMatched2526 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp3871_AST_in = (AST)_t;
+					AST tmp3849_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched2531 = false;
+					synPredMatched2526 = false;
 				}
-				_t = __t2531;
+				_t = __t2526;
 				inputState.guessing--;
 			}
-			if ( synPredMatched2531 ) {
-				AST tmp3872_AST_in = (AST)_t;
+			if ( synPredMatched2526 ) {
+				AST tmp3850_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -51894,7 +51790,7 @@
 				}
 				}
 				}
-				AST tmp3873_AST_in = (AST)_t;
+				AST tmp3851_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -51948,11 +51844,11 @@
 			
 			}
 			{
-			_loop2537:
+			_loop2532:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp3874_AST_in = (AST)_t;
+					AST tmp3852_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -51979,12 +51875,12 @@
 					}
 				}
 				else {
-					break _loop2537;
+					break _loop2532;
 				}
 				
 			} while (true);
 			}
-			_t = __t2528;
+			_t = __t2523;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -51999,8 +51895,8 @@
 		switch ( _t.getType()) {
 		case INTO:
 		{
-			AST __t2539 = _t;
-			AST tmp3875_AST_in = (AST)_t;
+			AST __t2534 = _t;
+			AST tmp3853_AST_in = (AST)_t;
 			match(_t,INTO);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
@@ -52027,11 +51923,11 @@
 			}
 			}
 			{
-			_loop2543:
+			_loop2538:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp3876_AST_in = (AST)_t;
+					AST tmp3854_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
@@ -52059,12 +51955,12 @@
 					}
 				}
 				else {
-					break _loop2543;
+					break _loop2538;
 				}
 				
 			} while (true);
 			}
-			_t = __t2539;
+			_t = __t2534;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52078,63 +51974,63 @@
 		}
 		}
 		}
-		AST __t2544 = _t;
-		AST tmp3877_AST_in = (AST)_t;
+		AST __t2539 = _t;
+		AST tmp3855_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getFirstChild();
 		select_from_spec(_t);
 		_t = _retTree;
 		{
-		_loop2546:
+		_loop2541:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp3878_AST_in = (AST)_t;
+				AST tmp3856_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				select_from_spec(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop2546;
+				break _loop2541;
 			}
 			
 		} while (true);
 		}
-		_t = __t2544;
+		_t = __t2539;
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
 		case GROUP:
 		{
-			AST __t2548 = _t;
-			AST tmp3879_AST_in = (AST)_t;
+			AST __t2543 = _t;
+			AST tmp3857_AST_in = (AST)_t;
 			match(_t,GROUP);
 			_t = _t.getFirstChild();
-			AST tmp3880_AST_in = (AST)_t;
+			AST tmp3858_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
 			{
-			_loop2550:
+			_loop2545:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp3881_AST_in = (AST)_t;
+					AST tmp3859_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					expression(_t);
 					_t = _retTree;
 				}
 				else {
-					break _loop2550;
+					break _loop2545;
 				}
 				
 			} while (true);
 			}
-			_t = __t2548;
+			_t = __t2543;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52158,13 +52054,13 @@
 		switch ( _t.getType()) {
 		case HAVING:
 		{
-			AST __t2552 = _t;
-			AST tmp3882_AST_in = (AST)_t;
+			AST __t2547 = _t;
+			AST tmp3860_AST_in = (AST)_t;
 			match(_t,HAVING);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t2552;
+			_t = __t2547;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52187,28 +52083,28 @@
 		switch ( _t.getType()) {
 		case ORDER:
 		{
-			AST __t2554 = _t;
-			AST tmp3883_AST_in = (AST)_t;
+			AST __t2549 = _t;
+			AST tmp3861_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getFirstChild();
-			AST tmp3884_AST_in = (AST)_t;
+			AST tmp3862_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			select_order_expr(_t);
 			_t = _retTree;
-			_t = __t2554;
+			_t = __t2549;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BY:
 		{
-			AST __t2555 = _t;
-			AST tmp3885_AST_in = (AST)_t;
+			AST __t2550 = _t;
+			AST tmp3863_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getFirstChild();
 			select_order_expr(_t);
 			_t = _retTree;
-			_t = __t2555;
+			_t = __t2550;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52228,45 +52124,45 @@
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH))&&(_t != null)) {
 			{
-			boolean synPredMatched2560 = false;
+			boolean synPredMatched2555 = false;
 			if ((((_t.getType()==WITH))&&(_t != null))) {
-				AST __t2560 = _t;
-				synPredMatched2560 = true;
+				AST __t2555 = _t;
+				synPredMatched2555 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST __t2559 = _t;
-					AST tmp3886_AST_in = (AST)_t;
+					AST __t2554 = _t;
+					AST tmp3864_AST_in = (AST)_t;
 					match(_t,WITH);
 					_t = _t.getFirstChild();
-					AST tmp3887_AST_in = (AST)_t;
+					AST tmp3865_AST_in = (AST)_t;
 					match(_t,CHECK);
 					_t = _t.getNextSibling();
-					AST tmp3888_AST_in = (AST)_t;
+					AST tmp3866_AST_in = (AST)_t;
 					match(_t,OPTION);
 					_t = _t.getNextSibling();
-					_t = __t2559;
+					_t = __t2554;
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched2560 = false;
+					synPredMatched2555 = false;
 				}
-				_t = __t2560;
+				_t = __t2555;
 				inputState.guessing--;
 			}
-			if ( synPredMatched2560 ) {
-				AST __t2561 = _t;
-				AST tmp3889_AST_in = (AST)_t;
+			if ( synPredMatched2555 ) {
+				AST __t2556 = _t;
+				AST tmp3867_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp3890_AST_in = (AST)_t;
+				AST tmp3868_AST_in = (AST)_t;
 				match(_t,CHECK);
 				_t = _t.getNextSibling();
-				AST tmp3891_AST_in = (AST)_t;
+				AST tmp3869_AST_in = (AST)_t;
 				match(_t,OPTION);
 				_t = _t.getNextSibling();
-				_t = __t2561;
+				_t = __t2556;
 				_t = _t.getNextSibling();
 			}
 			else if ((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH)) {
@@ -52309,8 +52205,8 @@
 		switch ( _t.getType()) {
 		case UNION:
 		{
-			AST __t2564 = _t;
-			AST tmp3892_AST_in = (AST)_t;
+			AST __t2559 = _t;
+			AST tmp3870_AST_in = (AST)_t;
 			match(_t,UNION);
 			_t = _t.getFirstChild();
 			{
@@ -52318,7 +52214,7 @@
 			switch ( _t.getType()) {
 			case ALL:
 			{
-				AST tmp3893_AST_in = (AST)_t;
+				AST tmp3871_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
@@ -52335,7 +52231,7 @@
 			}
 			selectstatea(_t);
 			_t = _retTree;
-			_t = __t2564;
+			_t = __t2559;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52349,7 +52245,7 @@
 		}
 		}
 		}
-		_t = __t2525;
+		_t = __t2520;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -52362,48 +52258,48 @@
 		switch ( _t.getType()) {
 		case OR:
 		{
-			AST __t2618 = _t;
-			AST tmp3894_AST_in = (AST)_t;
+			AST __t2613 = _t;
+			AST tmp3872_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t2618;
+			_t = __t2613;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AND:
 		{
-			AST __t2619 = _t;
-			AST tmp3895_AST_in = (AST)_t;
+			AST __t2614 = _t;
+			AST tmp3873_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t2619;
+			_t = __t2614;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOT:
 		{
-			AST __t2620 = _t;
-			AST tmp3896_AST_in = (AST)_t;
+			AST __t2615 = _t;
+			AST tmp3874_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t2620;
+			_t = __t2615;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MATCHES:
 		{
-			AST __t2621 = _t;
-			AST tmp3897_AST_in = (AST)_t;
+			AST __t2616 = _t;
+			AST tmp3875_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52423,14 +52319,14 @@
 			}
 			
 			}
-			_t = __t2621;
+			_t = __t2616;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEGINS:
 		{
-			AST __t2623 = _t;
-			AST tmp3898_AST_in = (AST)_t;
+			AST __t2618 = _t;
+			AST tmp3876_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52450,14 +52346,14 @@
 			}
 			
 			}
-			_t = __t2623;
+			_t = __t2618;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTAINS:
 		{
-			AST __t2625 = _t;
-			AST tmp3899_AST_in = (AST)_t;
+			AST __t2620 = _t;
+			AST tmp3877_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52477,14 +52373,14 @@
 			}
 			
 			}
-			_t = __t2625;
+			_t = __t2620;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EQ:
 		{
-			AST __t2627 = _t;
-			AST tmp3900_AST_in = (AST)_t;
+			AST __t2622 = _t;
+			AST tmp3878_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52504,14 +52400,14 @@
 			}
 			
 			}
-			_t = __t2627;
+			_t = __t2622;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NE:
 		{
-			AST __t2629 = _t;
-			AST tmp3901_AST_in = (AST)_t;
+			AST __t2624 = _t;
+			AST tmp3879_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52531,14 +52427,14 @@
 			}
 			
 			}
-			_t = __t2629;
+			_t = __t2624;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GTHAN:
 		{
-			AST __t2631 = _t;
-			AST tmp3902_AST_in = (AST)_t;
+			AST __t2626 = _t;
+			AST tmp3880_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52558,14 +52454,14 @@
 			}
 			
 			}
-			_t = __t2631;
+			_t = __t2626;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GE:
 		{
-			AST __t2633 = _t;
-			AST tmp3903_AST_in = (AST)_t;
+			AST __t2628 = _t;
+			AST tmp3881_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52585,14 +52481,14 @@
 			}
 			
 			}
-			_t = __t2633;
+			_t = __t2628;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LTHAN:
 		{
-			AST __t2635 = _t;
-			AST tmp3904_AST_in = (AST)_t;
+			AST __t2630 = _t;
+			AST tmp3882_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52612,14 +52508,14 @@
 			}
 			
 			}
-			_t = __t2635;
+			_t = __t2630;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LE:
 		{
-			AST __t2637 = _t;
-			AST tmp3905_AST_in = (AST)_t;
+			AST __t2632 = _t;
+			AST tmp3883_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -52639,32 +52535,32 @@
 			}
 			
 			}
-			_t = __t2637;
+			_t = __t2632;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXISTS:
 		{
-			AST __t2639 = _t;
-			AST tmp3906_AST_in = (AST)_t;
+			AST __t2634 = _t;
+			AST tmp3884_AST_in = (AST)_t;
 			match(_t,EXISTS);
 			_t = _t.getFirstChild();
-			AST tmp3907_AST_in = (AST)_t;
+			AST tmp3885_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			selectstatea(_t);
 			_t = _retTree;
-			AST tmp3908_AST_in = (AST)_t;
+			AST tmp3886_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2639;
+			_t = __t2634;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_begins:
 		{
-			AST __t2640 = _t;
-			AST tmp3909_AST_in = (AST)_t;
+			AST __t2635 = _t;
+			AST tmp3887_AST_in = (AST)_t;
 			match(_t,Sql_begins);
 			_t = _t.getFirstChild();
 			{
@@ -52672,7 +52568,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp3910_AST_in = (AST)_t;
+				AST tmp3888_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -52687,19 +52583,19 @@
 			}
 			}
 			}
-			AST tmp3911_AST_in = (AST)_t;
+			AST tmp3889_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2640;
+			_t = __t2635;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_between:
 		{
-			AST __t2642 = _t;
-			AST tmp3912_AST_in = (AST)_t;
+			AST __t2637 = _t;
+			AST tmp3890_AST_in = (AST)_t;
 			match(_t,Sql_between);
 			_t = _t.getFirstChild();
 			{
@@ -52707,7 +52603,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp3913_AST_in = (AST)_t;
+				AST tmp3891_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -52722,24 +52618,24 @@
 			}
 			}
 			}
-			AST tmp3914_AST_in = (AST)_t;
+			AST tmp3892_AST_in = (AST)_t;
 			match(_t,BETWEEN);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			AST tmp3915_AST_in = (AST)_t;
+			AST tmp3893_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2642;
+			_t = __t2637;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_in:
 		{
-			AST __t2644 = _t;
-			AST tmp3916_AST_in = (AST)_t;
+			AST __t2639 = _t;
+			AST tmp3894_AST_in = (AST)_t;
 			match(_t,Sql_in);
 			_t = _t.getFirstChild();
 			{
@@ -52747,7 +52643,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp3917_AST_in = (AST)_t;
+				AST tmp3895_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -52762,10 +52658,10 @@
 			}
 			}
 			}
-			AST tmp3918_AST_in = (AST)_t;
+			AST tmp3896_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp3919_AST_in = (AST)_t;
+			AST tmp3897_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -52825,18 +52721,18 @@
 				sql_in_val(_t);
 				_t = _retTree;
 				{
-				_loop2648:
+				_loop2643:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3920_AST_in = (AST)_t;
+						AST tmp3898_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						sql_in_val(_t);
 						_t = _retTree;
 					}
 					else {
-						break _loop2648;
+						break _loop2643;
 					}
 					
 				} while (true);
@@ -52849,17 +52745,17 @@
 			}
 			}
 			}
-			AST tmp3921_AST_in = (AST)_t;
+			AST tmp3899_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t2644;
+			_t = __t2639;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_like:
 		{
-			AST __t2649 = _t;
-			AST tmp3922_AST_in = (AST)_t;
+			AST __t2644 = _t;
+			AST tmp3900_AST_in = (AST)_t;
 			match(_t,Sql_like);
 			_t = _t.getFirstChild();
 			{
@@ -52867,7 +52763,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp3923_AST_in = (AST)_t;
+				AST tmp3901_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -52882,7 +52778,7 @@
 			}
 			}
 			}
-			AST tmp3924_AST_in = (AST)_t;
+			AST tmp3902_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -52892,7 +52788,7 @@
 			switch ( _t.getType()) {
 			case ESCAPE:
 			{
-				AST tmp3925_AST_in = (AST)_t;
+				AST tmp3903_AST_in = (AST)_t;
 				match(_t,ESCAPE);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -52909,17 +52805,17 @@
 			}
 			}
 			}
-			_t = __t2649;
+			_t = __t2644;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_null_test:
 		{
-			AST __t2652 = _t;
-			AST tmp3926_AST_in = (AST)_t;
+			AST __t2647 = _t;
+			AST tmp3904_AST_in = (AST)_t;
 			match(_t,Sql_null_test);
 			_t = _t.getFirstChild();
-			AST tmp3927_AST_in = (AST)_t;
+			AST tmp3905_AST_in = (AST)_t;
 			match(_t,IS);
 			_t = _t.getNextSibling();
 			{
@@ -52927,7 +52823,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp3928_AST_in = (AST)_t;
+				AST tmp3906_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -52942,10 +52838,10 @@
 			}
 			}
 			}
-			AST tmp3929_AST_in = (AST)_t;
+			AST tmp3907_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
-			_t = __t2652;
+			_t = __t2647;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -52970,13 +52866,13 @@
 		switch ( _t.getType()) {
 		case INDICATOR:
 		{
-			AST __t2480 = _t;
-			AST tmp3930_AST_in = (AST)_t;
+			AST __t2475 = _t;
+			AST tmp3908_AST_in = (AST)_t;
 			match(_t,INDICATOR);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
-			_t = __t2480;
+			_t = __t2475;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -53002,8 +52898,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t2487 = _t;
-			AST tmp3931_AST_in = (AST)_t;
+			AST __t2482 = _t;
+			AST tmp3909_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -53011,7 +52907,7 @@
 			switch ( _t.getType()) {
 			case PRIVILEGES:
 			{
-				AST tmp3932_AST_in = (AST)_t;
+				AST tmp3910_AST_in = (AST)_t;
 				match(_t,PRIVILEGES);
 				_t = _t.getNextSibling();
 				break;
@@ -53026,7 +52922,7 @@
 			}
 			}
 			}
-			_t = __t2487;
+			_t = __t2482;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -53037,36 +52933,36 @@
 		case COMMA:
 		{
 			{
-			int _cnt2495=0;
-			_loop2495:
+			int _cnt2490=0;
+			_loop2490:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case SELECT:
 				{
-					AST tmp3933_AST_in = (AST)_t;
+					AST tmp3911_AST_in = (AST)_t;
 					match(_t,SELECT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INSERT:
 				{
-					AST tmp3934_AST_in = (AST)_t;
+					AST tmp3912_AST_in = (AST)_t;
 					match(_t,INSERT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp3935_AST_in = (AST)_t;
+					AST tmp3913_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case UPDATE:
 				{
-					AST __t2490 = _t;
-					AST tmp3936_AST_in = (AST)_t;
+					AST __t2485 = _t;
+					AST tmp3914_AST_in = (AST)_t;
 					match(_t,UPDATE);
 					_t = _t.getFirstChild();
 					{
@@ -53074,36 +52970,36 @@
 					switch ( _t.getType()) {
 					case Field_list:
 					{
-						AST __t2492 = _t;
-						AST tmp3937_AST_in = (AST)_t;
+						AST __t2487 = _t;
+						AST tmp3915_AST_in = (AST)_t;
 						match(_t,Field_list);
 						_t = _t.getFirstChild();
-						AST tmp3938_AST_in = (AST)_t;
+						AST tmp3916_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.UPDATING);
 						_t = _retTree;
 						{
-						_loop2494:
+						_loop2489:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp3939_AST_in = (AST)_t;
+								AST tmp3917_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								fld(_t,CQ.UPDATING);
 								_t = _retTree;
 							}
 							else {
-								break _loop2494;
+								break _loop2489;
 							}
 							
 						} while (true);
 						}
-						AST tmp3940_AST_in = (AST)_t;
+						AST tmp3918_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
-						_t = __t2492;
+						_t = __t2487;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -53117,23 +53013,23 @@
 					}
 					}
 					}
-					_t = __t2490;
+					_t = __t2485;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case COMMA:
 				{
-					AST tmp3941_AST_in = (AST)_t;
+					AST tmp3919_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					if ( _cnt2495>=1 ) { break _loop2495; } else {throw new NoViableAltException(_t);}
+					if ( _cnt2490>=1 ) { break _loop2490; } else {throw new NoViableAltException(_t);}
 				}
 				}
-				_cnt2495++;
+				_cnt2490++;
 			} while (true);
 			}
 			break;
@@ -53154,8 +53050,8 @@
 		switch ( _t.getType()) {
 		case TO:
 		{
-			AST __t2497 = _t;
-			AST tmp3942_AST_in = (AST)_t;
+			AST __t2492 = _t;
+			AST tmp3920_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -53163,30 +53059,30 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp3943_AST_in = (AST)_t;
+				AST tmp3921_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp3944_AST_in = (AST)_t;
+				AST tmp3922_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
-				_loop2500:
+				_loop2495:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3945_AST_in = (AST)_t;
+						AST tmp3923_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp3946_AST_in = (AST)_t;
+						AST tmp3924_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
 					else {
-						break _loop2500;
+						break _loop2495;
 					}
 					
 				} while (true);
@@ -53199,14 +53095,14 @@
 			}
 			}
 			}
-			_t = __t2497;
+			_t = __t2492;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FROM:
 		{
-			AST __t2501 = _t;
-			AST tmp3947_AST_in = (AST)_t;
+			AST __t2496 = _t;
+			AST tmp3925_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -53214,30 +53110,30 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp3948_AST_in = (AST)_t;
+				AST tmp3926_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp3949_AST_in = (AST)_t;
+				AST tmp3927_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
-				_loop2504:
+				_loop2499:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp3950_AST_in = (AST)_t;
+						AST tmp3928_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp3951_AST_in = (AST)_t;
+						AST tmp3929_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
 					else {
-						break _loop2504;
+						break _loop2499;
 					}
 					
 				} while (true);
@@ -53250,7 +53146,7 @@
 			}
 			}
 			}
-			_t = __t2501;
+			_t = __t2496;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -53269,14 +53165,14 @@
 		select_sqltableref(_t);
 		_t = _retTree;
 		{
-		_loop2575:
+		_loop2570:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LEFT:
 			{
-				AST __t2568 = _t;
-				AST tmp3952_AST_in = (AST)_t;
+				AST __t2563 = _t;
+				AST tmp3930_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
 				{
@@ -53284,7 +53180,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp3953_AST_in = (AST)_t;
+					AST tmp3931_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -53299,24 +53195,24 @@
 				}
 				}
 				}
-				AST tmp3954_AST_in = (AST)_t;
+				AST tmp3932_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp3955_AST_in = (AST)_t;
+				AST tmp3933_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
 				_t = _retTree;
-				_t = __t2568;
+				_t = __t2563;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RIGHT:
 			{
-				AST __t2570 = _t;
-				AST tmp3956_AST_in = (AST)_t;
+				AST __t2565 = _t;
+				AST tmp3934_AST_in = (AST)_t;
 				match(_t,RIGHT);
 				_t = _t.getFirstChild();
 				{
@@ -53324,7 +53220,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp3957_AST_in = (AST)_t;
+					AST tmp3935_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -53339,80 +53235,80 @@
 				}
 				}
 				}
-				AST tmp3958_AST_in = (AST)_t;
+				AST tmp3936_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp3959_AST_in = (AST)_t;
+				AST tmp3937_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
 				_t = _retTree;
-				_t = __t2570;
+				_t = __t2565;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INNER:
 			{
-				AST __t2572 = _t;
-				AST tmp3960_AST_in = (AST)_t;
+				AST __t2567 = _t;
+				AST tmp3938_AST_in = (AST)_t;
 				match(_t,INNER);
 				_t = _t.getFirstChild();
-				AST tmp3961_AST_in = (AST)_t;
+				AST tmp3939_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp3962_AST_in = (AST)_t;
+				AST tmp3940_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
 				_t = _retTree;
-				_t = __t2572;
+				_t = __t2567;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OUTER:
 			{
-				AST __t2573 = _t;
-				AST tmp3963_AST_in = (AST)_t;
+				AST __t2568 = _t;
+				AST tmp3941_AST_in = (AST)_t;
 				match(_t,OUTER);
 				_t = _t.getFirstChild();
-				AST tmp3964_AST_in = (AST)_t;
+				AST tmp3942_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp3965_AST_in = (AST)_t;
+				AST tmp3943_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
 				_t = _retTree;
-				_t = __t2573;
+				_t = __t2568;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case JOIN:
 			{
-				AST __t2574 = _t;
-				AST tmp3966_AST_in = (AST)_t;
+				AST __t2569 = _t;
+				AST tmp3944_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getFirstChild();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp3967_AST_in = (AST)_t;
+				AST tmp3945_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
 				_t = _retTree;
-				_t = __t2574;
+				_t = __t2569;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop2575;
+				break _loop2570;
 			}
 			}
 		} while (true);
@@ -53422,13 +53318,13 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t2577 = _t;
-			AST tmp3968_AST_in = (AST)_t;
+			AST __t2572 = _t;
+			AST tmp3946_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t2577;
+			_t = __t2572;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -53457,14 +53353,14 @@
 		switch ( _t.getType()) {
 		case ASC:
 		{
-			AST tmp3969_AST_in = (AST)_t;
+			AST tmp3947_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESCENDING:
 		{
-			AST tmp3970_AST_in = (AST)_t;
+			AST tmp3948_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
@@ -53481,11 +53377,11 @@
 		}
 		}
 		{
-		_loop2585:
+		_loop2580:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp3971_AST_in = (AST)_t;
+				AST tmp3949_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -53495,14 +53391,14 @@
 				switch ( _t.getType()) {
 				case ASC:
 				{
-					AST tmp3972_AST_in = (AST)_t;
+					AST tmp3950_AST_in = (AST)_t;
 					match(_t,ASC);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DESCENDING:
 				{
-					AST tmp3973_AST_in = (AST)_t;
+					AST tmp3951_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -53520,7 +53416,7 @@
 				}
 			}
 			else {
-				break _loop2585;
+				break _loop2580;
 			}
 			
 		} while (true);
@@ -53543,7 +53439,7 @@
 		}
 		case ID:
 		{
-			AST tmp3974_AST_in = (AST)_t;
+			AST tmp3952_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -53559,7 +53455,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp3975_AST_in = (AST)_t;
+			AST tmp3953_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -53593,128 +53489,128 @@
 		switch ( _t.getType()) {
 		case PLUS:
 		{
-			AST __t2660 = _t;
-			AST tmp3976_AST_in = (AST)_t;
+			AST __t2655 = _t;
+			AST tmp3954_AST_in = (AST)_t;
 			match(_t,PLUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
 			_t = _retTree;
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2660;
+			_t = __t2655;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINUS:
 		{
-			AST __t2661 = _t;
-			AST tmp3977_AST_in = (AST)_t;
+			AST __t2656 = _t;
+			AST tmp3955_AST_in = (AST)_t;
 			match(_t,MINUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
 			_t = _retTree;
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2661;
+			_t = __t2656;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLY:
 		{
-			AST __t2662 = _t;
-			AST tmp3978_AST_in = (AST)_t;
+			AST __t2657 = _t;
+			AST tmp3956_AST_in = (AST)_t;
 			match(_t,MULTIPLY);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
 			_t = _retTree;
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2662;
+			_t = __t2657;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIVIDE:
 		{
-			AST __t2663 = _t;
-			AST tmp3979_AST_in = (AST)_t;
+			AST __t2658 = _t;
+			AST tmp3957_AST_in = (AST)_t;
 			match(_t,DIVIDE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
 			_t = _retTree;
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2663;
+			_t = __t2658;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MODULO:
 		{
-			AST __t2664 = _t;
-			AST tmp3980_AST_in = (AST)_t;
+			AST __t2659 = _t;
+			AST tmp3958_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
 			_t = _retTree;
 			sqlscalar(_t);
 			_t = _retTree;
-			_t = __t2664;
+			_t = __t2659;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNARY_PLUS:
 		{
-			AST __t2665 = _t;
-			AST tmp3981_AST_in = (AST)_t;
+			AST __t2660 = _t;
+			AST tmp3959_AST_in = (AST)_t;
 			match(_t,UNARY_PLUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
 			_t = _retTree;
-			_t = __t2665;
+			_t = __t2660;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNARY_MINUS:
 		{
-			AST __t2666 = _t;
-			AST tmp3982_AST_in = (AST)_t;
+			AST __t2661 = _t;
+			AST tmp3960_AST_in = (AST)_t;
 			match(_t,UNARY_MINUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
 			_t = _retTree;
-			_t = __t2666;
+			_t = __t2661;
 			_t = _t.getNextSibling();
 			break;
 		}
 		default:
-			boolean synPredMatched2668 = false;
+			boolean synPredMatched2663 = false;
 			if (((_t.getType()==LEFTPAREN))) {
-				AST __t2668 = _t;
-				synPredMatched2668 = true;
+				AST __t2663 = _t;
+				synPredMatched2663 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp3983_AST_in = (AST)_t;
+					AST tmp3961_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched2668 = false;
+					synPredMatched2663 = false;
 				}
-				_t = __t2668;
+				_t = __t2663;
 				inputState.guessing--;
 			}
-			if ( synPredMatched2668 ) {
-				AST __t2669 = _t;
-				AST tmp3984_AST_in = (AST)_t;
+			if ( synPredMatched2663 ) {
+				AST __t2664 = _t;
+				AST tmp3962_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getFirstChild();
 				sqlexpression(_t);
 				_t = _retTree;
-				AST tmp3985_AST_in = (AST)_t;
+				AST tmp3963_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
-				_t = __t2669;
+				_t = __t2664;
 				_t = _t.getNextSibling();
 			}
 			else if ((_tokenSet_1.member(_t.getType()))) {
@@ -53732,8 +53628,8 @@
 		
 		AST sqlupdate_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2594 = _t;
-		AST tmp3986_AST_in = (AST)_t;
+		AST __t2589 = _t;
+		AST tmp3964_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.REF);
@@ -53760,7 +53656,7 @@
 		}
 		}
 		}
-		_t = __t2594;
+		_t = __t2589;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -53769,8 +53665,8 @@
 		
 		AST sql_comp_query_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t2655 = _t;
-		AST tmp3987_AST_in = (AST)_t;
+		AST __t2650 = _t;
+		AST tmp3965_AST_in = (AST)_t;
 		match(_t,Sql_comp_query);
 		_t = _t.getFirstChild();
 		{
@@ -53778,21 +53674,21 @@
 		switch ( _t.getType()) {
 		case ANY:
 		{
-			AST tmp3988_AST_in = (AST)_t;
+			AST tmp3966_AST_in = (AST)_t;
 			match(_t,ANY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp3989_AST_in = (AST)_t;
+			AST tmp3967_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOME:
 		{
-			AST tmp3990_AST_in = (AST)_t;
+			AST tmp3968_AST_in = (AST)_t;
 			match(_t,SOME);
 			_t = _t.getNextSibling();
 			break;
@@ -53807,15 +53703,15 @@
 		}
 		}
 		}
-		AST tmp3991_AST_in = (AST)_t;
+		AST tmp3969_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
 		_t = _retTree;
-		AST tmp3992_AST_in = (AST)_t;
+		AST tmp3970_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t2655;
+		_t = __t2650;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -53902,7 +53798,7 @@
 		}
 		case USERID:
 		{
-			AST tmp3993_AST_in = (AST)_t;
+			AST tmp3971_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2005-07-18 21:36:10 UTC (rev 35)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2005-07-18 21:42:03 UTC (rev 36)
@@ -543,12 +543,12 @@
 			(NORETURNVALUE)?
 			s_widget
 			(OBJCOLON . (array_subscript)? (method_param_list)? )+
-			(#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? (AS .)?
+			(#(IN_KW widname))? (AS .)?
 		)
 	;
 
 gwidget
-	:	#(Widget_ref s_widget (#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? )
+	:	#(Widget_ref s_widget (#(IN_KW widname))? )
 	;
 
 widgetlist
@@ -563,7 +563,7 @@
 	:	systemhandlename
 	|	DATASET ID
 	|	DATASOURCE ID
-	|	FRAME ID
+	|	FRAME f:ID { action.frameRef(#f); }
 	|	MENU ID
 	|	SUBMENU ID
 	|	MENUITEM ID
@@ -585,15 +585,15 @@
 // referenced table. fld2 indicates that this must be a field of the *previous*
 // referenced table.
 fld[int contextQualifier]
-	:	#(ref:Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? id:ID (array_subscript)? )
+	:	#(ref:Field_ref (INPUT)? (frame_ref | #(BROWSE ID))? id:ID (array_subscript)? )
 		{action.field(#ref, #id, contextQualifier, 0);}
 	;
 fld1[int contextQualifier]
-	:	#(ref:Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? id:ID (array_subscript)? )
+	:	#(ref:Field_ref (INPUT)? (frame_ref | #(BROWSE ID))? id:ID (array_subscript)? )
 		{action.field(#ref, #id, contextQualifier, 1);}
 	;
 fld2[int contextQualifier]
-	:	#(ref:Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? id:ID (array_subscript)? )
+	:	#(ref:Field_ref (INPUT)? (frame_ref | #(BROWSE ID))? id:ID (array_subscript)? )
 		{action.field(#ref, #id, contextQualifier, 2);}
 	;
 
@@ -949,7 +949,7 @@
 	;
 
 clearstate
-	:	#(CLEAR (#(FRAME ID))? (ALL)? (NOPAUSE)? state_end )
+	:	#(CLEAR (frame_ref)? (ALL)? (NOPAUSE)? state_end )
 	;
 
 closequerystate
@@ -1456,13 +1456,12 @@
 
 defineframestate
 	:	#(	def:DEFINE (#(NEW (GLOBAL)? SHARED ) | SHARED)? FRAME
-			id:ID { push(action.defineSymbol(FRAME, #def, #id)); }
+			id:ID { action.frameDef(#def, #id); }
 			(form_item[CQ.SYMBOL])*
 			(	#(HEADER (display_item)+ )
 			|	#(BACKGROUND (display_item)+ )
 			)?
 			(#(EXCEPT (fld1[CQ.SYMBOL])*))?  (framephrase)?  state_end
-			{ action.addToScope(pop()); }
 		)
 	;
 
@@ -1932,6 +1931,10 @@
 		)
 	;
 
+frame_ref
+	:	#(FRAME f:ID) { action.frameRef(#f); }
+	;
+
 framephrase
 	:	#(	WITH
 			(	#(ACCUM (expression)? )
@@ -1945,7 +1948,7 @@
 			|	FITLASTCOLUMN
 			|	#(FONT expression )
 			|	FONTBASEDLAYOUT
-			|	#(FRAME ID)
+			|	frame_ref
 			|	#(LABELFONT expression )
 			|	#(LABELDCOLOR expression )
 			|	#(LABELFGCOLOR expression )



From johnallengreen at berlios.de  Tue Jul 19 03:48:11 2005
From: johnallengreen at berlios.de (John Green at BerliOS)
Date: Tue, 19 Jul 2005 03:48:11 +0200
Subject: [Prorefactor-svn] r37 - trunk/org.prorefactor.core/src/org/prorefactor/treeparser
Message-ID: <200507190148.j6J1mB5p000512@sheep.berlios.de>

Author: johnallengreen
Date: 2005-07-19 03:48:05 +0200 (Tue, 19 Jul 2005)
New Revision: 37

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
Log:
Fixed bug with adding FieldLevelWidget to scope.
Added support for getting the SymbolScope to a Block.java.
Added support for getting a list of symbols of a specific type from a scope.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java	2005-07-18 21:42:03 UTC (rev 36)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Block.java	2005-07-19 01:48:05 UTC (rev 37)
@@ -253,6 +253,10 @@
 
 
 
+	public SymbolScope getSymbolScope() { return symbolScope; }
+
+
+
 	/** Is a buffer scoped to this or any parent of this block. */
 	public boolean isBufferLocal(BufferScope buff) {
 		for (Block block = this; block.parent!=null; block = block.parent) {

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2005-07-18 21:42:03 UTC (rev 36)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2005-07-19 01:48:05 UTC (rev 37)
@@ -18,11 +18,13 @@
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
+import java.util.TreeSet;
 
 import org.prorefactor.core.IConstants;
 import org.prorefactor.core.TokenTypes;
 import org.prorefactor.core.schema.Schema;
 import org.prorefactor.core.schema.Table;
+import org.prorefactor.widgettypes.Frame;
 
 
 
@@ -73,6 +75,7 @@
 
 	/** Add a FieldLevelWidget for names lookup. */
 	public void add(FieldLevelWidget widget) {
+		fieldLevelWidgetMap.put(widget.getName().toLowerCase(), widget);
 	}
 	
 	/** Add a Routine for call handling. */
@@ -87,17 +90,13 @@
 
 	/** Add a Symbol for names lookup. */
 	public void add(Symbol symbol) {
-		if (symbol instanceof FieldLevelWidget) {
-			fieldLevelWidgetMap.put(symbol.getName().toLowerCase(), symbol);
-		} else {
-			Integer type = new Integer(symbol.getProgressType());
-			Map map = (Map) typeMap.get(type);
-			if (map==null) {
-				map = new HashMap();
-				typeMap.put(type, map);
-			}
-			map.put(symbol.getName().toLowerCase(), symbol);
+		Integer type = new Integer(symbol.getProgressType());
+		Map map = (Map) typeMap.get(type);
+		if (map==null) {
+			map = new HashMap();
+			typeMap.put(type, map);
 		}
+		map.put(symbol.getName().toLowerCase(), symbol);
 	}
 
 
@@ -157,6 +156,18 @@
 	
 	
 	
+	/** Get a list of this scope's symbols which match a given class */
+	public <T extends Symbol> ArrayList<T> getAllSymbols(Class<T> klass) {
+		ArrayList<T> ret = new ArrayList<T>();
+		for (Iterator it = allSymbols.iterator(); it.hasNext();) {
+			Object element = it.next();
+			if (klass.isInstance(element)) ret.add((T)element);
+		}
+		return ret;
+	}
+	
+	
+	
 	/** Get a list of this scope's symbols, and all symbols of all descendant scopes. */
 	public ArrayList getAllSymbolsDeep() {
 		ArrayList ret = new ArrayList(allSymbols);
@@ -206,8 +217,7 @@
 		return ret;
 	}
 
-	
-	
+
 	public SymbolScope getParentScope() { return parentScope; }
 
 



