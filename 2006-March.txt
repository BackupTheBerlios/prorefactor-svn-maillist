From johnallengreen at berlios.de  Mon Mar 13 22:46:09 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Mon, 13 Mar 2006 22:46:09 +0100
Subject: [Prorefactor-svn] r47 - trunk/org.prorefactor.doc
Message-ID: <200603132146.k2DLk9og025421@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-13 22:46:09 +0100 (Mon, 13 Mar 2006)
New Revision: 47

Modified:
   trunk/org.prorefactor.doc/manual.xml
Log:
Doc bug. In the last release, I moved the Antlr library and missed a reference to its location in the docs.

Modified: trunk/org.prorefactor.doc/manual.xml
===================================================================
--- trunk/org.prorefactor.doc/manual.xml	2006-02-11 00:57:26 UTC (rev 46)
+++ trunk/org.prorefactor.doc/manual.xml	2006-03-13 21:46:09 UTC (rev 47)
@@ -1128,7 +1128,7 @@
       Choose <guilabel>Window &gt; Preferences &gt; Ant &gt; Runtime &gt;
       Classpath</guilabel>. Select <guilabel>Global Entries</guilabel>. Click
       <guibutton>Add Jars...</guibutton>, and select
-      <filename>org.prorefactor.antlr/antlr.jar</filename> file. Click
+      <filename>org.prorefactor.lib/antlr/antlr.jar</filename> file. Click
       <guibutton>Add Variable...</guibutton> and enter <literal>
       ${workspace_loc:/org.prorefactor.core/bin/}</literal>. This is required
       because there is additional post-processing which must be done after



From johnallengreen at berlios.de  Wed Mar 15 22:55:14 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Wed, 15 Mar 2006 22:55:14 +0100
Subject: [Prorefactor-svn] r48 - in trunk: org.prorefactor.core/src/org/prorefactor/treeparser01 org.prorefactor.core/src/org/prorefactor/treeparserbase org.prorefactor.refactor/src/org/prorefactor/treeparser03
Message-ID: <200603152155.k2FLtEif030287@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-15 22:55:13 +0100 (Wed, 15 Mar 2006)
New Revision: 48

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/
   trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/
   trunk/org.prorefactor.refactor/src/org/prorefactor/treeparser03/
Log:
Ignore .smap files which are generated by Antlr 2.7.6.


Property changes on: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01
___________________________________________________________________
Name: svn:ignore
   - expandedtreeparser01.g

   + expandedtreeparser01.g
TreeParser01.smap



Property changes on: trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase
___________________________________________________________________
Name: svn:ignore
   + JPTreeParser.smap



Property changes on: trunk/org.prorefactor.refactor/src/org/prorefactor/treeparser03
___________________________________________________________________
Name: svn:ignore
   - expandedtreeparser03.g

   + expandedtreeparser03.g
TreeParser03.smap




From johnallengreen at berlios.de  Thu Mar 16 19:49:42 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 16 Mar 2006 19:49:42 +0100
Subject: [Prorefactor-svn] r50 - in trunk: org.prorefactor.core/data org.prorefactor.refactor/data
Message-ID: <200603161849.k2GIngbD016198@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-16 19:49:16 +0100 (Thu, 16 Mar 2006)
New Revision: 50

Added:
   trunk/org.prorefactor.core/data/appendprogram/
   trunk/org.prorefactor.core/data/bubble/
   trunk/org.prorefactor.core/data/extractmethod/
   trunk/org.prorefactor.core/data/match.p
   trunk/org.prorefactor.core/data/names.expect.p
   trunk/org.prorefactor.core/data/names.p
   trunk/org.prorefactor.core/data/names/
   trunk/org.prorefactor.core/data/no-undo.expect.p
   trunk/org.prorefactor.core/data/no-undo.p
   trunk/org.prorefactor.core/data/pub/
   trunk/org.prorefactor.core/data/qualifyfields/
   trunk/org.prorefactor.core/data/readme.txt
   trunk/org.prorefactor.core/data/rename/
   trunk/org.prorefactor.core/data/substitute.mod.p
   trunk/org.prorefactor.core/data/substitute.orig.p
   trunk/org.prorefactor.core/data/substitute.p
   trunk/org.prorefactor.core/data/wrapprocedure/
Removed:
   trunk/org.prorefactor.refactor/data/appendprogram/
   trunk/org.prorefactor.refactor/data/bubble/
   trunk/org.prorefactor.refactor/data/extractmethod/
   trunk/org.prorefactor.refactor/data/match.p
   trunk/org.prorefactor.refactor/data/names.expect.p
   trunk/org.prorefactor.refactor/data/names.p
   trunk/org.prorefactor.refactor/data/names/
   trunk/org.prorefactor.refactor/data/no-undo.expect.p
   trunk/org.prorefactor.refactor/data/no-undo.p
   trunk/org.prorefactor.refactor/data/pub/
   trunk/org.prorefactor.refactor/data/qualifyfields/
   trunk/org.prorefactor.refactor/data/readme.txt
   trunk/org.prorefactor.refactor/data/rename/
   trunk/org.prorefactor.refactor/data/substitute.mod.p
   trunk/org.prorefactor.refactor/data/substitute.orig.p
   trunk/org.prorefactor.refactor/data/substitute.p
   trunk/org.prorefactor.refactor/data/wrapprocedure/
Log:
WORK IN PROCESS. Merging "refactor" sub-project into "core" sub-project.
Want access to ProRefactor project features (especially PUB) files from the core treeparser/analysis services.

Copied: trunk/org.prorefactor.core/data/appendprogram (from rev 43, trunk/org.prorefactor.refactor/data/appendprogram)

Copied: trunk/org.prorefactor.core/data/bubble (from rev 43, trunk/org.prorefactor.refactor/data/bubble)

Copied: trunk/org.prorefactor.core/data/extractmethod (from rev 43, trunk/org.prorefactor.refactor/data/extractmethod)

Copied: trunk/org.prorefactor.core/data/match.p (from rev 43, trunk/org.prorefactor.refactor/data/match.p)

Copied: trunk/org.prorefactor.core/data/names (from rev 43, trunk/org.prorefactor.refactor/data/names)

Copied: trunk/org.prorefactor.core/data/names.expect.p (from rev 43, trunk/org.prorefactor.refactor/data/names.expect.p)

Copied: trunk/org.prorefactor.core/data/names.p (from rev 43, trunk/org.prorefactor.refactor/data/names.p)

Copied: trunk/org.prorefactor.core/data/no-undo.expect.p (from rev 43, trunk/org.prorefactor.refactor/data/no-undo.expect.p)

Copied: trunk/org.prorefactor.core/data/no-undo.p (from rev 43, trunk/org.prorefactor.refactor/data/no-undo.p)

Copied: trunk/org.prorefactor.core/data/pub (from rev 43, trunk/org.prorefactor.refactor/data/pub)

Copied: trunk/org.prorefactor.core/data/qualifyfields (from rev 43, trunk/org.prorefactor.refactor/data/qualifyfields)

Copied: trunk/org.prorefactor.core/data/readme.txt (from rev 43, trunk/org.prorefactor.refactor/data/readme.txt)

Copied: trunk/org.prorefactor.core/data/rename (from rev 43, trunk/org.prorefactor.refactor/data/rename)

Copied: trunk/org.prorefactor.core/data/substitute.mod.p (from rev 43, trunk/org.prorefactor.refactor/data/substitute.mod.p)

Copied: trunk/org.prorefactor.core/data/substitute.orig.p (from rev 43, trunk/org.prorefactor.refactor/data/substitute.orig.p)

Copied: trunk/org.prorefactor.core/data/substitute.p (from rev 43, trunk/org.prorefactor.refactor/data/substitute.p)

Copied: trunk/org.prorefactor.core/data/wrapprocedure (from rev 43, trunk/org.prorefactor.refactor/data/wrapprocedure)

Deleted: trunk/org.prorefactor.refactor/data/match.p
===================================================================
--- trunk/org.prorefactor.refactor/data/match.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/match.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,2 +0,0 @@
-
-DISPLAY "Hello world".

Deleted: trunk/org.prorefactor.refactor/data/names.expect.p
===================================================================
--- trunk/org.prorefactor.refactor/data/names.expect.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/names.expect.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,15 +0,0 @@
-/* Test "Names" refactoring
-*/
-
-def temp-table tt1 field f1 as char.
-find first tt1.
-display tt1.f1.
-
-FIND FIRST customer.
-DISPLAY customer.balance.
-DISPLAY customer.name.
-
-def buffer bBill for billto.
-find first bBill.
-display bBill.billtoid.
-

Deleted: trunk/org.prorefactor.refactor/data/names.p
===================================================================
--- trunk/org.prorefactor.refactor/data/names.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/names.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,15 +0,0 @@
-/* Test "Names" refactoring
-*/
-
-def temp-table tt1 field f1 as char.
-find first tt1.
-display F1.
-
-FIND FIRST CUST.
-DISPLAY CUST.BAL.
-DISPLAY NAME.
-
-def buffer bBill for billto.
-find first bBill.
-display billtoid.
-

Deleted: trunk/org.prorefactor.refactor/data/no-undo.expect.p
===================================================================
--- trunk/org.prorefactor.refactor/data/no-undo.expect.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/no-undo.expect.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,70 +0,0 @@
-/* n o - u n d o . p
- * This file contains tests for our  N O - U N D O  refactoring.
- * IMPORTANT!! Comments containing "u n d o" (without the spaces)
- * have an impact on the refactoring's behaviour!
- */
-
-
-{&_proparse_ prolint-nowarn(noundo)}
-DEFINE VARIABLE myInt AS INTEGER.
-
-PROCEDURE myProc1:
-  DEFINE INPUT PARAMETER p1 AS LOGICAL NO-UNDO.
-END.
-
-PROCEDURE myProc2 EXTERNAL "whatever.dll":
-  DEFINE INPUT PARAMETER p2 AS LONG.
-END.
-
-
-/* Test for  U N D O  statement. */
-DEFINE VARIABLE myChar AS CHARACTER.
-DEFINE VARIABLE myChar2 AS CHARACTER NO-UNDO.
-DEFINE VARIABLE myChar3 AS CHARACTER NO-UNDO.
-DO:
-  myChar3 = "".
-  DO:
-    myChar = "".
-    UNDO, LEAVE.
-    myChar2 = "".
-  END.
-END.
-
-
-/* U N D O  statement tests for named block and OUTPUT val */
-DEFINE VARIABLE myChar10 AS CHARACTER.
-DEFINE VARIABLE myChar11 AS CHARACTER.
-my-block:
-DO:
-  RUN changeVal(OUTPUT myChar10).
-  DO:
-    RUN changeVal(OUTPUT myChar11).
-    UNDO my-block, LEAVE.
-  END.
-END.
-
-PROCEDURE changeVal:
-  DEFINE OUTPUT PARAMETER changed AS CHARACTER NO-UNDO.
-END.
-
-
-/* This should remain UNDO */
-DEFINE VARIABLE c1 AS CHARACTER.
-
-/* This var should be UNDO           */
-/* with this two line comment.       */
-DEFINE VARIABLE c2 AS CHARACTER.
-
-DEFINE /* UNDOable */ VARIABLE c3 AS CHARACTER.
-
-DEFINE VARIABLE c4 AS CHARACTER. /* not no-undo */
-
-/* This comment does not change UNDO for the next define,
-   because of the blank line between the comment and the statement.
-*/
-
-DEFINE VARIABLE c5 AS CHARACTER NO-UNDO.
-
-DEFINE VARIABLE c6 AS CHARACTER NO-UNDO.
-/* Comment on line after does not change UNDO for previous statement. */
-

Deleted: trunk/org.prorefactor.refactor/data/no-undo.p
===================================================================
--- trunk/org.prorefactor.refactor/data/no-undo.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/no-undo.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,70 +0,0 @@
-/* n o - u n d o . p
- * This file contains tests for our  N O - U N D O  refactoring.
- * IMPORTANT!! Comments containing "u n d o" (without the spaces)
- * have an impact on the refactoring's behaviour!
- */
-
-
-{&_proparse_ prolint-nowarn(noundo)}
-DEFINE VARIABLE myInt AS INTEGER.
-
-PROCEDURE myProc1:
-  DEFINE INPUT PARAMETER p1 AS LOGICAL.
-END.
-
-PROCEDURE myProc2 EXTERNAL "whatever.dll":
-  DEFINE INPUT PARAMETER p2 AS LONG.
-END.
-
-
-/* Test for  U N D O  statement. */
-DEFINE VARIABLE myChar AS CHARACTER.
-DEFINE VARIABLE myChar2 AS CHARACTER.
-DEFINE VARIABLE myChar3 AS CHARACTER.
-DO:
-  myChar3 = "".
-  DO:
-    myChar = "".
-    UNDO, LEAVE.
-    myChar2 = "".
-  END.
-END.
-
-
-/* U N D O  statement tests for named block and OUTPUT val */
-DEFINE VARIABLE myChar10 AS CHARACTER.
-DEFINE VARIABLE myChar11 AS CHARACTER.
-my-block:
-DO:
-  RUN changeVal(OUTPUT myChar10).
-  DO:
-    RUN changeVal(OUTPUT myChar11).
-    UNDO my-block, LEAVE.
-  END.
-END.
-
-PROCEDURE changeVal:
-  DEFINE OUTPUT PARAMETER changed AS CHARACTER.
-END.
-
-
-/* This should remain UNDO */
-DEFINE VARIABLE c1 AS CHARACTER.
-
-/* This var should be UNDO           */
-/* with this two line comment.       */
-DEFINE VARIABLE c2 AS CHARACTER.
-
-DEFINE /* UNDOable */ VARIABLE c3 AS CHARACTER.
-
-DEFINE VARIABLE c4 AS CHARACTER. /* not no-undo */
-
-/* This comment does not change UNDO for the next define,
-   because of the blank line between the comment and the statement.
-*/
-
-DEFINE VARIABLE c5 AS CHARACTER.
-
-DEFINE VARIABLE c6 AS CHARACTER.
-/* Comment on line after does not change UNDO for previous statement. */
-

Deleted: trunk/org.prorefactor.refactor/data/readme.txt
===================================================================
--- trunk/org.prorefactor.refactor/data/readme.txt	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/readme.txt	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,3 +0,0 @@
-This folder contains test data.
-Most of it is used from the unit
-tests found in the "unittest" package.

Deleted: trunk/org.prorefactor.refactor/data/substitute.mod.p
===================================================================
--- trunk/org.prorefactor.refactor/data/substitute.mod.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/substitute.mod.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,39 +0,0 @@
-DEFINE VARIABLE numWidgets AS INTEGER NO-UNDO INITIAL 42.
-DEFINE VARIABLE i-?bernahme AS INTEGER NO-UNDO INITIAL 12.
-
-&GLOBAL-DEFINE yahoo " widgets remaining"
-
-/* Preprocessing prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + {&yahoo}.
-
-
-
-/* Mixed string attributes prevents auto-refactor */
-DISPLAY "You have ":L + STRING(numWidgets) + " widgets remaining":R.
-
-
-
-/* Mixed quotation types prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + ' "widgets" remaining'.
-
-
-
-/* No need to refactor - less than two translatable strings */
-DISPLAY "You have " + STRING(numWidgets) + " widgets remaining":U.
-
-
-
-/* Auto-refactor OK - demonstrates mixed translatable/untranslatable */
-DISPLAY SUBSTITUTE("You have &1 &2 remaining", STRING(numWidgets), "widgets":U).
-
-
-
-/* Test umlaut (extended) characters like ? */
-DISPLAY SUBSTITUTE("?bernahme 1 &1 2 ?bernahme", STRING(i-?bernahme)).
-
-
-
-/* Auto-refactor OK - The simplest case */
-DISPLAY SUBSTITUTE("You have &1 widgets remaining", STRING(numWidgets)).
-
-

Deleted: trunk/org.prorefactor.refactor/data/substitute.orig.p
===================================================================
--- trunk/org.prorefactor.refactor/data/substitute.orig.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/substitute.orig.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,39 +0,0 @@
-DEFINE VARIABLE numWidgets AS INTEGER NO-UNDO INITIAL 42.
-DEFINE VARIABLE i-?bernahme AS INTEGER NO-UNDO INITIAL 12.
-
-&GLOBAL-DEFINE yahoo " widgets remaining"
-
-/* Preprocessing prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + {&yahoo}.
-
-
-
-/* Mixed string attributes prevents auto-refactor */
-DISPLAY "You have ":L + STRING(numWidgets) + " widgets remaining":R.
-
-
-
-/* Mixed quotation types prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + ' "widgets" remaining'.
-
-
-
-/* No need to refactor - less than two translatable strings */
-DISPLAY "You have " + STRING(numWidgets) + " widgets remaining":U.
-
-
-
-/* Auto-refactor OK - demonstrates mixed translatable/untranslatable */
-DISPLAY "You have " + STRING(numWidgets) + " " + "widgets":U + " remaining".
-
-
-
-/* Test umlaut (extended) characters like ? */
-DISPLAY "?bernahme 1 " + STRING(i-?bernahme) + " 2 ?bernahme".
-
-
-
-/* Auto-refactor OK - The simplest case */
-DISPLAY "You have " + STRING(numWidgets) + " widgets remaining".
-
-

Deleted: trunk/org.prorefactor.refactor/data/substitute.p
===================================================================
--- trunk/org.prorefactor.refactor/data/substitute.p	2006-03-15 22:13:26 UTC (rev 49)
+++ trunk/org.prorefactor.refactor/data/substitute.p	2006-03-16 18:49:16 UTC (rev 50)
@@ -1,39 +0,0 @@
-DEFINE VARIABLE numWidgets AS INTEGER NO-UNDO INITIAL 42.
-DEFINE VARIABLE i-?bernahme AS INTEGER NO-UNDO INITIAL 12.
-
-&GLOBAL-DEFINE yahoo " widgets remaining"
-
-/* Preprocessing prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + {&yahoo}.
-
-
-
-/* Mixed string attributes prevents auto-refactor */
-DISPLAY "You have ":L + STRING(numWidgets) + " widgets remaining":R.
-
-
-
-/* Mixed quotation types prevents auto-refactor */
-DISPLAY "You have " + STRING(numWidgets) + ' "widgets" remaining'.
-
-
-
-/* No need to refactor - less than two translatable strings */
-DISPLAY "You have " + STRING(numWidgets) + " widgets remaining":U.
-
-
-
-/* Auto-refactor OK - demonstrates mixed translatable/untranslatable */
-DISPLAY "You have " + STRING(numWidgets) + " " + "widgets":U + " remaining".
-
-
-
-/* Test umlaut (extended) characters like ? */
-DISPLAY "?bernahme 1 " + STRING(i-?bernahme) + " 2 ?bernahme".
-
-
-
-/* Auto-refactor OK - The simplest case */
-DISPLAY "You have " + STRING(numWidgets) + " widgets remaining".
-
-



From johnallengreen at berlios.de  Thu Mar 16 19:59:05 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 16 Mar 2006 19:59:05 +0100
Subject: [Prorefactor-svn] r51 - in trunk: org.prorefactor.core org.prorefactor.refactor
Message-ID: <200603161859.k2GIx58O019172@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-16 19:59:03 +0100 (Thu, 16 Mar 2006)
New Revision: 51

Added:
   trunk/org.prorefactor.core/prorefactor/
Removed:
   trunk/org.prorefactor.refactor/prorefactor/
Log:
WORK IN PROCESS. Merging "refactor" sub-project into "core" sub-project.
Want access to ProRefactor project features (especially PUB) files from the core treeparser/analysis services.

Copied: trunk/org.prorefactor.core/prorefactor (from rev 43, trunk/org.prorefactor.refactor/prorefactor)



From johnallengreen at berlios.de  Thu Mar 16 20:01:38 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 16 Mar 2006 20:01:38 +0100
Subject: [Prorefactor-svn] r52 - in trunk: org.prorefactor.core org.prorefactor.core/src org.prorefactor.refactor org.prorefactor.refactor/src
Message-ID: <200603161901.k2GJ1cpT020690@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-16 20:01:34 +0100 (Thu, 16 Mar 2006)
New Revision: 52

Added:
   trunk/org.prorefactor.core/src/icons/
   trunk/org.prorefactor.core/src/resources/
   trunk/org.prorefactor.core/tmp/
Removed:
   trunk/org.prorefactor.refactor/src/icons/
   trunk/org.prorefactor.refactor/src/resources/
   trunk/org.prorefactor.refactor/tmp/
Log:
WORK IN PROCESS. Merging "refactor" sub-project into "core" sub-project.
Want access to ProRefactor project features (especially PUB) files from the core treeparser/analysis services.

Copied: trunk/org.prorefactor.core/src/icons (from rev 43, trunk/org.prorefactor.refactor/src/icons)

Copied: trunk/org.prorefactor.core/src/resources (from rev 43, trunk/org.prorefactor.refactor/src/resources)

Copied: trunk/org.prorefactor.core/tmp (from rev 43, trunk/org.prorefactor.refactor/tmp)



From johnallengreen at berlios.de  Thu Mar 16 20:42:35 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 16 Mar 2006 20:42:35 +0100
Subject: [Prorefactor-svn] r54 - in trunk: . org.prolint.core/META-INF org.prorefactor.core org.prorefactor.core/META-INF org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/pub org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/rename/t01/orig org.prorefactor.eclipse/META-INF
Message-ID: <200603161942.k2GJgZaD011271@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-16 20:42:32 +0100 (Thu, 16 Mar 2006)
New Revision: 54

Removed:
   trunk/org.prorefactor.refactor/
Modified:
   trunk/org.prolint.core/META-INF/MANIFEST.MF
   trunk/org.prorefactor.core/META-INF/MANIFEST.MF
   trunk/org.prorefactor.core/build.properties
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/pub/test01.p.pub
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/rename/t01/orig/t01.p.pub
   trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF
Log:
Merged "refactor" sub-project into "core" sub-project.
Want access to ProRefactor project features (especially PUB files) from the core treeparser/analysis services.

Modified: trunk/org.prolint.core/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prolint.core/META-INF/MANIFEST.MF	2006-03-16 19:06:16 UTC (rev 53)
+++ trunk/org.prolint.core/META-INF/MANIFEST.MF	2006-03-16 19:42:32 UTC (rev 54)
@@ -12,7 +12,6 @@
  org.eclipse.core.runtime;visibility:=reexport,
  org.prorefactor.lib;visibility:=reexport,
  org.prorefactor.core;visibility:=reexport,
- org.prorefactor.refactor;visibility:=reexport,
  org.prorefactor.eclipse;visibility:=reexport
 Eclipse-AutoStart: true
 Export-Package: org.prolint.core,

Modified: trunk/org.prorefactor.core/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.core/META-INF/MANIFEST.MF	2006-03-16 19:06:16 UTC (rev 53)
+++ trunk/org.prorefactor.core/META-INF/MANIFEST.MF	2006-03-16 19:42:32 UTC (rev 54)
@@ -12,8 +12,26 @@
  org.prorefactor.core.schema,
  org.prorefactor.core.unittest,
  org.prorefactor.nodetypes,
+ org.prorefactor.refactor,
+ org.prorefactor.refactor.action,
+ org.prorefactor.refactor.appendprogram,
+ org.prorefactor.refactor.bubbledecs,
+ org.prorefactor.refactor.macrolevel,
+ org.prorefactor.refactor.messages,
+ org.prorefactor.refactor.noundo,
+ org.prorefactor.refactor.settings,
+ org.prorefactor.refactor.source,
+ org.prorefactor.refactor.substitute,
+ org.prorefactor.refactor.tfnames,
+ org.prorefactor.refactor.unittest,
+ org.prorefactor.refactor.util,
+ org.prorefactor.refactor.wrapproc,
  org.prorefactor.treeparser,
  org.prorefactor.treeparser01,
+ org.prorefactor.treeparser03,
  org.prorefactor.treeparserbase,
  org.prorefactor.widgettypes
-Require-Bundle: org.prorefactor.lib;visibility:=reexport
+Require-Bundle: org.prorefactor.lib;visibility:=reexport,
+ org.eclipse.swt,
+ org.eclipse.jface,
+ org.eclipse.jface.text

Modified: trunk/org.prorefactor.core/build.properties
===================================================================
--- trunk/org.prorefactor.core/build.properties	2006-03-16 19:06:16 UTC (rev 53)
+++ trunk/org.prorefactor.core/build.properties	2006-03-16 19:42:32 UTC (rev 54)
@@ -7,7 +7,9 @@
                *.zip,\
                *.html,\
                META-INF/,\
-               build.properties
+               build.properties,\
+               prorefactor/,\
+               tmp/
 source.core.jar = src/
 src.includes = proparse_jni.dll,\
                proparse.schema,\
@@ -17,5 +19,7 @@
                about.html,\
                META-INF/,\
                build.properties,\
-               src/
+               src/,\
+               prorefactor/,\
+               tmp/
 jars.compile.order = 

Modified: trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/pub/test01.p.pub
===================================================================
(Binary files differ)

Modified: trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/rename/t01/orig/t01.p.pub
===================================================================
(Binary files differ)

Modified: trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF	2006-03-16 19:06:16 UTC (rev 53)
+++ trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF	2006-03-16 19:42:32 UTC (rev 54)
@@ -19,8 +19,7 @@
  org.eclipse.ui.workbench;visibility:=reexport,
  org.eclipse.ui.console;visibility:=reexport,
  org.eclipse.ui.ide;visibility:=reexport,
- org.prorefactor.core;visibility:=reexport,
- org.prorefactor.refactor;visibility:=reexport
+ org.prorefactor.core;visibility:=reexport
 Eclipse-AutoStart: true
 Export-Package: org.prorefactor.eclipse,
  org.prorefactor.eclipse.actions,



From johnallengreen at berlios.de  Thu Mar 16 23:27:05 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 16 Mar 2006 23:27:05 +0100
Subject: [Prorefactor-svn] r55 - in trunk: org.prorefactor.core/src/org/prorefactor/core/unittest org.prorefactor.doc
Message-ID: <200603162227.k2GMR5QC018392@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-16 23:27:05 +0100 (Thu, 16 Mar 2006)
New Revision: 55

Added:
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/AllProRefactorTests.java
Modified:
   trunk/org.prorefactor.doc/manual.xml
Log:
Was able to combine all core and refactor tests into a single test suite.

Added: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/AllProRefactorTests.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/AllProRefactorTests.java	2006-03-16 19:42:32 UTC (rev 54)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/AllProRefactorTests.java	2006-03-16 22:27:05 UTC (rev 55)
@@ -0,0 +1,35 @@
+/**
+ * AllProRefactorTests.java
+ * @author John Green
+ * 16-Mar-2006
+ * www.joanju.com
+ * 
+ * Copyright (c) 2006 Joanju Software.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ */
+
+package org.prorefactor.core.unittest;
+
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+import org.prorefactor.refactor.unittest.AllRefactorTests;
+
+
+public class AllProRefactorTests {
+
+
+	public static Test suite() {
+		TestSuite suite = new TestSuite("All ProRefactor core and refactoring tests");
+		//$JUnit-BEGIN$
+		suite.addTest(AllPRCoreTests.suite());
+		suite.addTest(AllRefactorTests.suite());
+		//$JUnit-END$
+		return suite;
+	}
+
+}

Modified: trunk/org.prorefactor.doc/manual.xml
===================================================================
--- trunk/org.prorefactor.doc/manual.xml	2006-03-16 19:42:32 UTC (rev 54)
+++ trunk/org.prorefactor.doc/manual.xml	2006-03-16 22:27:05 UTC (rev 55)
@@ -1090,16 +1090,12 @@
       <title>Unit Tests and Run-time Workbench</title>
 
       <para>Now you can run the unit tests. You can navigate to the following
-      two source files, and run them as JUnit tests:</para>
+      source file, and run it as a JUnit test:</para>
 
       <itemizedlist>
         <listitem>
-          <para><filename>org.prorefactor.core.unittest.AllPRCoreTests.java</filename></para>
+          <para><filename>org.prorefactor.core.unittest.AllProRefactorTests.java</filename></para>
         </listitem>
-
-        <listitem>
-          <para><filename>org.prorefactor.refactor.unittest.AllRefactorTests.java</filename></para>
-        </listitem>
       </itemizedlist>
 
       <para>To launch the Run-time Workbench, choose <guimenuitem>Run &gt; Run



From johnallengreen at berlios.de  Fri Mar 24 22:26:22 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Fri, 24 Mar 2006 22:26:22 +0100
Subject: [Prorefactor-svn] r57 - trunk/org.prorefactor.core/src/org/prorefactor/refactor
Message-ID: <200603242126.k2OLQMnm005367@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-24 22:26:21 +0100 (Fri, 24 Mar 2006)
New Revision: 57

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
Log:
Updated to use Java 5 generics.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-24 19:29:03 UTC (rev 56)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-24 21:26:21 UTC (rev 57)
@@ -4,7 +4,7 @@
  * Sep 1, 2004
  * www.joanju.com
  *
- * Copyright (C) 2004-2005 Joanju Limited.
+ * Copyright (C) 2004-2006 Joanju Software.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -89,9 +89,9 @@
 	/** Scratch JPNode attributes for storing string index. */
 	private static final int NODECOMMENTS = 49002;
 
-	private ArrayList exportList;
-	private ArrayList fileList;
-	private ArrayList importList;
+	private ArrayList<SymbolRef> exportList;
+	private ArrayList<String> fileList;
+	private ArrayList<SymbolRef> importList;
 	private DualHashBidiMap stringTable;
 	private File cuFile;
 	private File pubFile;
@@ -99,7 +99,7 @@
 	private ProparseLdr parser = ProparseLdr.getInstance();
 	private RefactorSession refpack = RefactorSession.getInstance();
 	private String [] stringArray;
-	private TreeMap tableMap;
+	private TreeMap<String, TableRef> tableMap;
 
 	/** A record of symbol type and name, for import/export tables. */
 	public class SymbolRef {
@@ -116,7 +116,7 @@
 	private class TableRef {
 		TableRef(String name) { this.name = name; }
 		String name;
-		TreeMap fieldMap = new TreeMap();
+		TreeMap<String, String> fieldMap = new TreeMap<String, String>();
 	}
 
 	
@@ -125,10 +125,10 @@
 	 * This method clears out old lists in preparation for reloading or rebuilding.
 	 */
 	private void _refresh() {
-		exportList = new ArrayList();
-		fileList = new ArrayList();
-		importList = new ArrayList();
-		tableMap = new TreeMap();
+		exportList = new ArrayList<SymbolRef>();
+		fileList = new ArrayList<String>();
+		importList = new ArrayList<SymbolRef>();
+		tableMap = new TreeMap<String, TableRef>();
 		stringTable = new DualHashBidiMap();
 		/* String index zero is not used.
 		 * This allows us to use 0 from JPNode.attrGet() to indicate "no string value present".
@@ -174,6 +174,7 @@
 	 * to look up the table objects.
 	 * @param c
 	 */
+	@SuppressWarnings("unchecked")
 	public void copySchemaTableLowercaseNamesInto(Collection c) {
 		c.addAll(tableMap.keySet());
 	}
@@ -188,11 +189,11 @@
 	 * @param fromTableName Your table name. Case insenstitive. Must be of the format
 	 * "database.table".
 	 */
+	@SuppressWarnings("unchecked")
 	public void copySchemaFieldLowercaseNamesInto(Collection c, String fromTableName) {
-		TableRef tableRef = (TableRef) tableMap.get(fromTableName.toLowerCase());
+		TableRef tableRef = tableMap.get(fromTableName.toLowerCase());
 		if (tableRef==null) return;
-		for (Iterator it = tableRef.fieldMap.keySet().iterator(); it.hasNext();) {
-			String fieldName = (String) it.next();
+		for (String fieldName : tableRef.fieldMap.keySet()) {
 			c.add(fieldName);
 		}
 	}
@@ -409,8 +410,7 @@
 	
 	private boolean testTimeStamps() {
 		long pubTime = pubFile.lastModified();
-		for (Iterator it = fileList.iterator(); it.hasNext();) {
-			String filename = (String) it.next();
+		for (String filename : fileList) {
 			if (filename==null || filename.length()==0) continue;
 			File file = FileStuff.findFile(filename);
 			if (file==null) return false;
@@ -524,11 +524,9 @@
 				tableRef.fieldMap.put(field.getName().toLowerCase(), field.getName());
 			}
 		}
-		for (Iterator it = tableMap.values().iterator(); it.hasNext();) {
-			TableRef tableRef = (TableRef) it.next();
+		for (TableRef tableRef : tableMap.values()) {
 			out.writeUTF(tableRef.name);
-			for (Iterator it2 = tableRef.fieldMap.values().iterator(); it2.hasNext();) {
-				String fieldName = (String) it2.next();
+			for (String fieldName : tableRef.fieldMap.values()) {
 				out.writeUTF(fieldName);
 			}
 			out.writeUTF(""); // terminate the list of fields in the table
@@ -538,7 +536,7 @@
 	private TableRef writeSchema_addTable(Table table) {
 		String name = table.getDatabase().getName() + "." + table.getName();
 		String lowerName = name.toLowerCase();
-		TableRef tableRef = (TableRef) tableMap.get(lowerName);
+		TableRef tableRef = tableMap.get(lowerName);
 		if (tableRef != null) return tableRef;
 		tableRef = new TableRef(name);
 		tableMap.put(lowerName, tableRef);



From johnallengreen at berlios.de  Sat Mar 25 02:00:38 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Sat, 25 Mar 2006 02:00:38 +0100
Subject: [Prorefactor-svn] r58 - in trunk/org.prorefactor.core: prorefactor/projects/sports2000/pubs/data/pub prorefactor/projects/sports2000/pubs/data/rename/t01/orig src/org/prorefactor/refactor src/org/prorefactor/treeparser src/org/prorefactor/treeparser01
Message-ID: <200603250100.k2P10cYa022935@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-25 01:59:51 +0100 (Sat, 25 Mar 2006)
New Revision: 58

Modified:
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/pub/test01.p.pub
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/rename/t01/orig/t01.p.pub
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolI.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
Log:
Adding more information to the PUB files in preparation for using those for class inheritance information.

Modified: trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/pub/test01.p.pub
===================================================================
(Binary files differ)

Modified: trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/data/rename/t01/orig/t01.p.pub
===================================================================
(Binary files differ)

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-24 21:26:21 UTC (rev 57)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-25 00:59:51 UTC (rev 58)
@@ -39,7 +39,11 @@
 import org.prorefactor.nodetypes.ProparseDirectiveNode;
 import org.prorefactor.refactor.source.CompileUnit;
 import org.prorefactor.treeparser.FieldBuffer;
+import org.prorefactor.treeparser.Primative;
 import org.prorefactor.treeparser.Symbol;
+import org.prorefactor.treeparser.SymbolI;
+import org.prorefactor.treeparser.SymbolScopeRoot;
+import org.prorefactor.treeparser.SymbolScopeSuper;
 import org.prorefactor.treeparser.TableBuffer;
 
 import com.joanju.ProparseLdr;
@@ -60,30 +64,47 @@
 		pubFile = new File(refpack.getProRefactorProjectDir() + "/pubs/" + relPath + ".pub");
 	}
 	
-	public static final int LAYOUT_VERSION = 4;
+	public static final int LAYOUT_VERSION = 5;
 
+
 	/** loadTo(PUBFILE_TIMESTAMP) - just check if the binary exists and
 	 * check that it is newer than the compile unit file. Does not read anything
 	 * from the binary.
 	 */
 	public static final int PUBFILE_TIMESTAMP = 5;
+
 	/** loadTo(FILES) - the index of include files referenced by this parse unit. */
 	public static final int FILES = 10;
-	/** loadTo(HEADER) - the segments necessary for checking if the binary is up to date or not. */
+
+	/** loadTo(HEADER)
+	 * Gets all the segments necessary for checking if the binary is up to date or not.
+	 * Also for classes, gets class name and the name of the inherited class if any.
+	 */
 	public static final int HEADER = 15;
+
 	/** loadTo(SCHEMA) - the schema tables and fields referenced by this parse unit. */
 	public static final int SCHEMA = 20;
-	/** loadTo(IMPORTS) - the references to external procedures, funtions, and shared vars */
+
+	/** loadTo(IMPORTS)
+	 * @see SymbolI#isImported()
+	 */
 	public static final int IMPORTS = 30;
-	/** loadTo(EXPORTS) - new shared vars and public functions and procedures */
+
+	/** loadTo(EXPORTS)
+	 * @see SymbolI#isExported()
+	 */
 	public static final int EXPORTS = 40;
+
 	/** loadTo(AST) - just loads the node types - you almost certainly need STRINGS as well. */
 	public static final int AST = 50;
+
 	/** loadTo(STRINGS) - load the strings into the syntax tree. */
 	public static final int STRINGS = 60;
+
 	/** loadTo(END) - all binary file segments will be loaded. */
 	public static final int END = 100;
 	
+
 	/** Scratch JPNode attributes for storing string index. */
 	private static final int NODETEXT = 49001;
 	/** Scratch JPNode attributes for storing string index. */
@@ -98,6 +119,8 @@
 	private JPNode tree;
 	private ProparseLdr parser = ProparseLdr.getInstance();
 	private RefactorSession refpack = RefactorSession.getInstance();
+	private String className;
+	private String superClassName;
 	private String [] stringArray;
 	private TreeMap<String, TableRef> tableMap;
 
@@ -111,6 +134,8 @@
 		public int progressType;
 		/** The symbol name (Symbol.fullName), with caseAsDefined. */
 		public String symbolName;
+		/** If is a CLASS object ref, then the class name, null otherwise. */
+		public String className;
 	}
 	
 	private class TableRef {
@@ -154,10 +179,11 @@
 		ObjectOutputStream out = new ObjectOutputStream(fileOut);
 		writeVersion(out);
 		writeFileIndex(out);
-		ArrayList allSymbols = cu.getRootScope().getAllSymbols();
-		writeSchemaSegment(out, allSymbols);
-		writeImportSegment(out, allSymbols);
-		writeExportSegment(out, allSymbols);
+		writeHeader(out, cu.getRootScope());
+		ArrayList rootSymbols = cu.getRootScope().getAllSymbols();
+		writeSchemaSegment(out, rootSymbols);
+		writeImportSegment(out, rootSymbols);
+		writeExportSegment(out, rootSymbols);
 		tree = cu.getTopNode();
 		writeTree(out, tree);
 		writeStrings(out);
@@ -198,8 +224,12 @@
 		}
 	}
 	
+
 	
+	public String getClassName() { return className; }
 	
+	
+	
 	/** Get the array of exported symbols, in no particular order.
 	 * Currently just for DEF NEW [GLOBAL] SHARED symbols.
 	 */
@@ -248,6 +278,10 @@
 	
 	
 	
+	public String getSuperClassName() { return superClassName; }
+	
+	
+	
 	/** Return the JPNode syntax tree that was loaded with load() */
 	public JPNode getTree() { return tree; }
 	
@@ -275,6 +309,7 @@
 			readFileIndex(inStream);
 			if (! testTimeStamps()) return false;
 			if (lastSegmentToLoad==PUB.FILES) return true;
+			readHeader(inStream);
 			if (lastSegmentToLoad==PUB.HEADER) return true;
 			readSchema(inStream);
 			if (lastSegmentToLoad==PUB.SCHEMA) return true;
@@ -298,8 +333,8 @@
 	
 	private void readExportSegment(ObjectInputStream in) throws IOException {
 		for (;;) {
-			SymbolRef symbolRef = new SymbolRef(in.readInt(), in.readUTF());
-			if (symbolRef.progressType == -1) break;
+			SymbolRef symbolRef = readSymbol(in);
+			if (symbolRef==null) break;
 			exportList.add(symbolRef);
 		}
 	}
@@ -319,10 +354,17 @@
 	
 	
 	
+	private void readHeader(ObjectInputStream in) throws IOException {
+		className = in.readUTF(); if (className.length()==0) className = null;
+		superClassName = in.readUTF(); if (superClassName.length()==0) superClassName = null;
+	}
+	
+	
+	
 	private void readImportSegment(ObjectInputStream in) throws IOException {
 		for (;;) {
-			SymbolRef symbolRef = new SymbolRef(in.readInt(), in.readUTF());
-			if (symbolRef.progressType == -1) break;
+			SymbolRef symbolRef = readSymbol(in);
+			if (symbolRef==null) break;
 			importList.add(symbolRef);
 		}
 	}
@@ -355,6 +397,15 @@
 	
 	
 	
+	private SymbolRef readSymbol(ObjectInputStream in) throws IOException {
+		SymbolRef symbolRef = new SymbolRef(in.readInt(), in.readUTF());
+		if (symbolRef.progressType == -1) return null;
+		if (symbolRef.progressType == TokenTypes.CLASS) symbolRef.className = in.readUTF();
+		return symbolRef;
+	}
+	
+	
+	
 	private JPNode readTree(ObjectInputStream in) throws IOException {
 		int nodeClass = in.readInt();
 		if (nodeClass == -1) return null;
@@ -421,13 +472,10 @@
 	
 	
 	
-	private void writeExportSegment(ObjectOutputStream out, List allSymbols) throws IOException {
-		for (Iterator it = allSymbols.iterator(); it.hasNext();) {
+	private void writeExportSegment(ObjectOutputStream out, List rootSymbols) throws IOException {
+		for (Iterator it = rootSymbols.iterator(); it.hasNext();) {
 			Symbol symbol = (Symbol) it.next();
-			if (symbol.isExported()) {
-				out.writeInt(symbol.getProgressType());
-				out.writeUTF(symbol.fullName()); // We write caseAsDefined
-			}
+			if (symbol.isExported()) writeSymbol(out, symbol); 
 		}
 		out.writeInt(-1);
 		out.writeUTF("");
@@ -447,13 +495,19 @@
 	
 	
 	
-	private void writeImportSegment(ObjectOutputStream out, List allSymbols) throws IOException {
-		for (Iterator it = allSymbols.iterator(); it.hasNext();) {
+	private void writeHeader(ObjectOutputStream out, SymbolScopeRoot unitScope) throws IOException {
+		String s = unitScope.getClassName();
+		if (s!=null) out.writeUTF(s); else out.writeUTF("");
+		SymbolScopeSuper superScope = (SymbolScopeSuper) unitScope.getParentScope();
+		if (superScope!=null) out.writeUTF(superScope.getClassName()); else out.writeUTF("");
+	}
+	
+	
+	
+	private void writeImportSegment(ObjectOutputStream out, List rootSymbols) throws IOException {
+		for (Iterator it = rootSymbols.iterator(); it.hasNext();) {
 			Symbol symbol = (Symbol) it.next();
-			if (symbol.isImported()) {
-				out.writeInt(symbol.getProgressType());
-				out.writeUTF(symbol.fullName()); // We write caseAsDefined
-			}
+			if (symbol.isImported()) writeSymbol(out, symbol);
 		}
 		out.writeInt(-1);
 		out.writeUTF("");
@@ -461,6 +515,15 @@
 	
 	
 	
+	private void writeSymbol(ObjectOutputStream out, Symbol symbol) throws IOException {
+		int progressType = symbol.getProgressType();
+		out.writeInt(progressType);
+		out.writeUTF(symbol.fullName()); // We write caseAsDefined
+		if (progressType==TokenTypes.CLASS) out.writeUTF(((Primative)symbol).getClassName());
+	}
+	
+	
+	
 	private void writeTree(ObjectOutputStream out, JPNode node) throws IOException {
 		out.writeInt(node.getSubtypeIndex());
 		out.writeInt(node.getType());
@@ -507,8 +570,8 @@
 	
 	
 	
-	private void writeSchemaSegment(ObjectOutputStream out, List allSymbols) throws IOException {
-		for (Iterator it = allSymbols.iterator(); it.hasNext();) {
+	private void writeSchemaSegment(ObjectOutputStream out, List rootSymbols) throws IOException {
+		for (Iterator it = rootSymbols.iterator(); it.hasNext();) {
 			Object obj = it.next();
 			if (obj instanceof TableBuffer) {
 				Table table = ((TableBuffer)obj).getTable();

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java	2006-03-24 21:26:21 UTC (rev 57)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java	2006-03-25 00:59:51 UTC (rev 58)
@@ -85,7 +85,7 @@
 	 * @see org.prorefactor.treeparser.SymbolI#getDefineNode()
 	 */
 	public JPNode getDefineNode() {
-		if (defNode!=null && defNode.getType()==TokenTypes.DEFINE) return defNode;
+		if (defNode!=null && defNode.getType()!=TokenTypes.ID) return defNode;
 		return null;
 	}
 	
@@ -125,23 +125,32 @@
 	public SymbolScope getScope() { return scope; }
 
 	
-	/* (non-Javadoc)
-	 * @see org.prorefactor.treeparser.SymbolI#isExported()
-	 */
+	/* @see SymbolI#isExported() */
 	public boolean isExported() {
-		// If there is no DEFINE node (inline var def), then it is not NEW..SHARED.
-		if (	defNode == null
-			||	defNode.getType() != TokenTypes.DEFINE
-			) return false;
-		if (defNode.firstChild().getType() == TokenTypes.NEW) return true;
+		SymbolScopeRoot unitScope = scope.getRootScope();
+		// If this is not at the unit (root) scope, then it cannot be visible.
+		if (scope!=unitScope) return false;
+		if (unitScope.getClassName()!=null) {
+			// For class members, only elements declared PUBLIC|PROTECTED are visible.
+			return	(	defNode.findDirectChild(TokenTypes.PUBLIC)!=null
+					||	defNode.findDirectChild(TokenTypes.PROTECTED)!=null
+					);
+		}
+		// If there is no DEFINE node (inline var def), then it is not visible.
+		if (defNode == null) return false;
+		switch (defNode.getType()) {
+			case TokenTypes.DEFINE:
+				return defNode.firstChild().getType() == TokenTypes.NEW;
+			case TokenTypes.FUNCTION:
+			case TokenTypes.PROCEDURE:
+				return defNode.findDirectChild(TokenTypes.PRIVATE) == null;
+		}
 		return false;
 	}
 
 	
 	
-	/* (non-Javadoc)
-	 * @see org.prorefactor.treeparser.SymbolI#isImported()
-	 */
+	/* @see SymbolI#isImported() */
 	public boolean isImported() { 
 		// If there is no DEFINE node (inline var def), then it is not SHARED.
 		if (	defNode == null

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolI.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolI.java	2006-03-24 21:26:21 UTC (rev 57)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolI.java	2006-03-25 00:59:51 UTC (rev 58)
@@ -57,7 +57,9 @@
 
 	public abstract SymbolScope getScope();
 
-	/** Defined as NEW [GLOBAL] SHARED? */
+	/** Is the symbol newly defined here and visible to other compile units?
+	 * This includes PROTECTED members visible to subclasses.
+	 */
 	public abstract boolean isExported();
 
 	/** Defined as SHARED? */
@@ -69,7 +71,7 @@
 	/** @see #getAsNode() */
 	public abstract void setAsNode(JPNode asNode);
 
-	/** We store the DEFINE node if available and sensible.
+	/** We store the DEFINE|FUNCTION|METHOD|PROCEDURE node if available and sensible.
 	 * If defined in a syntax where there is no DEFINE node briefly
 	 * preceeding the ID node, then we store the ID node.
 	 */

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2006-03-24 21:26:21 UTC (rev 57)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2006-03-25 00:59:51 UTC (rev 58)
@@ -518,9 +518,11 @@
 	}
 	
 	private Routine funcSymbolCreate(AST idAST) {
+		JPNode idNode = (JPNode) idAST;
 		SymbolScope definingScope = currentScope.getParentScope();
 		Routine r = new Routine(idAST.getText(), definingScope, currentScope);
 		r.setProgressType(TokenTypes.FUNCTION);
+		r.setDefOrIdNode(idNode.parent());
 		definingScope.add(r);
 		return r;
 	}
@@ -542,9 +544,11 @@
 
 
 	protected void methodDef(AST idAST) {
+		JPNode idNode = (JPNode) idAST;
 		SymbolScope definingScope = currentScope.getParentScope();
 		Routine r = new Routine(idAST.getText(), definingScope, currentScope);
 		r.setProgressType(TokenTypes.METHOD);
+		r.setDefOrIdNode(idNode.parent());
 		definingScope.add(r);
 	}
 
@@ -555,11 +559,12 @@
 	}
 
 
-	protected void procedureBegin(AST procNode, AST idNode){
+	protected void procedureBegin(AST procAST, AST idAST){
 		SymbolScope definingScope = currentScope;
-		scopeAdd(procNode);
-		Routine r = new Routine(idNode.getText(), definingScope, currentScope);
+		scopeAdd(procAST);
+		Routine r = new Routine(idAST.getText(), definingScope, currentScope);
 		r.setProgressType(TokenTypes.PROCEDURE);
+		r.setDefOrIdNode((JPNode)procAST);
 		definingScope.add(r);
 	}
 	



From johnallengreen at berlios.de  Thu Mar 30 01:44:55 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 01:44:55 +0200
Subject: [Prorefactor-svn] r59 - trunk/org.prorefactor.core/prorefactor/projects/sports2000
Message-ID: <200603292344.k2TNit2T022487@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 01:44:19 +0200 (Thu, 30 Mar 2006)
New Revision: 59

Removed:
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/pubs/
Log:




From johnallengreen at berlios.de  Thu Mar 30 02:22:49 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 02:22:49 +0200
Subject: [Prorefactor-svn] r60 - trunk/org.prorefactor.core/prorefactor/projects/sports2000
Message-ID: <200603300022.k2U0Mn4g001164@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 02:22:41 +0200 (Thu, 30 Mar 2006)
New Revision: 60

Modified:
   trunk/org.prorefactor.core/prorefactor/projects/sports2000/
Log:



Property changes on: trunk/org.prorefactor.core/prorefactor/projects/sports2000
___________________________________________________________________
Name: svn:ignore
   + pubs




From johnallengreen at berlios.de  Thu Mar 30 02:34:15 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 02:34:15 +0200
Subject: [Prorefactor-svn] r61 - in trunk: org.prorefactor.core org.prorefactor.core/prorefactor/projects org.prorefactor.core/src/org/prorefactor/core org.prorefactor.core/src/org/prorefactor/core/schema org.prorefactor.core/src/org/prorefactor/core/unittest org.prorefactor.core/src/org/prorefactor/nodetypes org.prorefactor.core/src/org/prorefactor/refactor org.prorefactor.core/src/org/prorefactor/refactor/action org.prorefactor.core/src/org/prorefactor/refactor/source org.prorefactor.core/src/org/prorefactor/treeparser org.prorefactor.core/src/org/prorefactor/treeparser01 org.prorefactor.core/src/org/prorefactor/widgettypes org.prorefactor.eclipse/src/org/prorefactor/eclipse org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions
Message-ID: <200603300034.k2U0YFeK004636@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 02:33:40 +0200 (Thu, 30 Mar 2006)
New Revision: 61

Added:
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDE.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDEDefault.java
   trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/ProRefactorIDEGateway.java
Modified:
   trunk/org.prorefactor.core/proparse.dll
   trunk/org.prorefactor.core/prorefactor/projects/
   trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Field.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Table.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java
   trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/ProparseDirectiveNode.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/FileStuff.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/RefactorSession.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/action/RenameSchema.java
   trunk/org.prorefactor.core/src/org/prorefactor/refactor/source/CompileUnit.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Dataset.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Datasource.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldBuffer.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Query.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Stream.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeRoot.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeSuper.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TableBuffer.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Variable.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Frame.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Menu.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/MenuItem.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java
   trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Submenu.java
   trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/Plugin.java
   trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java
Log:
Finished adding support for class inheritance.

Modified: trunk/org.prorefactor.core/proparse.dll
===================================================================
(Binary files differ)


Property changes on: trunk/org.prorefactor.core/prorefactor/projects
___________________________________________________________________
Name: svn:ignore
   + null
unittest


Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/IConstants.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -75,7 +75,16 @@
 	/** See Proparse documentation, "Node Attributes Reference". */
 	public int INLINE_VAR_DEF = 2000;
 
+	
+	
+	//
+	// From version 1.3
+	//
+	
+	/** See Proparse documentation, "Node Attributes Reference". */
+	public int SUPER_CLASS_HANDLE = 2100;
 
+	
 
 	//
 	// From TreeParser01

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Field.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Field.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Field.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -86,7 +86,20 @@
 	}
 
 	
+	/** Copy the bare minimum attributes to a new Field object.
+	 * @param table The table that the field is being added to.
+	 * @return The newly created Field, though you may not need
+	 * it for anything since it has already been added to the Table.
+	 */
+	public Field copyBare(Table table) {
+		Field f = new Field(this.name, table);
+		f.dataType = this.dataType;
+		f.className = this.className;
+		return f;
+	}
+	
 
+
 	/** Comparator for sorting by name. */
 	static final Comparator<Field> NAME_ORDER = new Comparator<Field>() {
 		public int compare(Field f1, Field f2) {

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Table.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Table.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/schema/Table.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -18,6 +18,7 @@
 import java.util.TreeSet;
 
 import org.prorefactor.core.IConstants;
+import org.prorefactor.treeparser.SymbolScopeRoot;
 
 
 
@@ -89,6 +90,25 @@
 			return t1.name.compareToIgnoreCase(t2.name);
 		}
 	};
+	
+	
+	
+	/** Create a bare minimum copy of a Table definition.
+	 * No-op if the table already exists in the requested scope.
+	 * Copies all of the field definitions as well.
+	 * @param scope The scope that this table is to be added to.
+	 * @return The newly created table, or the existing one from the scope if
+	 * it has previously been defined.
+	 */
+	public Table copyBare(SymbolScopeRoot scope) {
+		Table t = scope.lookupTableDefinition(this.name);
+		if (t!=null) return t;
+		t = new Table(this.name, this.storetype);
+		for (Field field : this.fieldSet) {
+			field.copyBare(t);
+		}
+		return t;
+	}
 
 
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,13 +10,14 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
+import junit.framework.TestCase;
+
 import org.prorefactor.core.JPNode;
 import org.prorefactor.treeparser.Call;
 import org.prorefactor.treeparser01.TP01ProcessAction;
 import org.prorefactor.treeparser01.TP01Support;
 import org.prorefactor.treeparser01.TreeParser01;
 
-import junit.framework.TestCase;
 import antlr.RecognitionException;
 
 import com.joanju.ProparseLdr;
@@ -26,7 +27,6 @@
  *
  */
 public class TP01ProcessActionTest extends TestCase {
-	private Config config = null;
 	private ProparseLdr parser = null;
 	private TP01Support symbolAction;
 	private TP01ProcessAction processAction;
@@ -49,7 +49,6 @@
 	}
 	
 	public void setUp(){
-		config = Config.getInstance();
 		parser = ProparseLdr.getInstance();
 		symbolAction = new TP01Support();
 		processAction = new TP01ProcessAction(symbolAction.getRootScope());
@@ -68,10 +67,10 @@
 			
 			JPNode ast = getTree();
 			
-			treeWalker.setTpSupport(symbolAction);
+			treeWalker.setActionObject(symbolAction);
 			treeWalker.program(ast);
 
-			treeWalker.setTpSupport(processAction);
+			treeWalker.setActionObject(processAction);
 			treeWalker.program(ast);
 			
 
@@ -136,10 +135,10 @@
 			
 			JPNode ast = getTree();
 
-			treeWalker.setTpSupport(symbolAction);
+			treeWalker.setActionObject(symbolAction);
 			treeWalker.program(ast);
 
-			treeWalker.setTpSupport(processAction);
+			treeWalker.setActionObject(processAction);
 			treeWalker.program(ast);
 
 			assertTrue(processAction.getErrorList().size() == 0);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -46,7 +46,7 @@
 		parser = ProparseLdr.getInstance();
 		walkAction = new TP01Support();
 		walker = new TreeParser01();
-		walker.setTpSupport(walkAction);
+		walker.setActionObject(walkAction);
 	}
 
 //	/**

Modified: trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/ProparseDirectiveNode.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/ProparseDirectiveNode.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/nodetypes/ProparseDirectiveNode.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -28,7 +28,7 @@
 	/** Get the directive text. Might return empty, but should not return null. */
 	public String getDirectiveText() {
 		if (getHandle()!=0)
-			return ProparseLdr.getInstance().attrGetS(getHandle(), "PROPARSEDIRECTIVE");
+			return ProparseLdr.getInstance().attrGetS(getHandle(), "proparsedirective");
 		else
 			return directiveText;
 	}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/FileStuff.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/FileStuff.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/FileStuff.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,8 +10,6 @@
  */
 package org.prorefactor.refactor;
 
-import com.joanju.ProparseLdr;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
@@ -20,7 +18,9 @@
 
 import org.prorefactor.refactor.messages.Message;
 
+import com.joanju.ProparseLdr;
 
+
 /**
  * Various file and directory related utilities for the refactoring toolkit.
  */
@@ -62,6 +62,15 @@
 		}
 		return null;
 	} // findFile
+	
+	
+	
+	/** Find a class file on Proparse's propath, from the "package.classname".
+	 * @return null if not found.
+	 */
+	public static File findFileForClassName(String className) {
+		return findFile(className.replace('.', '/') + ".cls");
+	}
 
 
 

Added: trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDE.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDE.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDE.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -0,0 +1,38 @@
+/* Created on Mar 26, 2006
+ * John Green
+ *
+ * Copyright (C) 2006 Joanju Software
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.prorefactor.refactor;
+
+import java.io.File;
+
+
+/** An interface to the IDE from ProRefactor.
+ * Other than the user interface, ProRefactor is independent
+ * of Eclipse. However, there are a few services that any IDE
+ * (even one other than Eclipse) should provide. An IDEDefault
+ * is provided within ProRefactor for testing and for simple
+ * environments. ProRefactor's Eclipse component also provides
+ * one of these, so that some Eclipse services can be visible
+ * without ProRefactor becoming dependent on Eclipse.
+ * 
+ * If ProRefactor is ever used as a component to another IDE,
+ * then that IDE should implement and provide this IDE
+ * interface.
+ */
+public interface IDE {
+
+	/** Find the project name and the project relative path for a File object.
+	 * The return is an array of two strings. The first entry is the project
+	 * name, ex: "projectName". The second entry is the relative path, ex:
+	 * "src/com/joanju/Example.cls".
+	 * @return null if the IDE does not find the file.
+	 */
+	String [] getProjectRelativePath(File file);
+	
+}

Added: trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDEDefault.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDEDefault.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/IDEDefault.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -0,0 +1,34 @@
+/* Created on Mar 26, 2006
+ * John Green
+ *
+ * Copyright (C) 2006 Joanju Software
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.prorefactor.refactor;
+
+import java.io.File;
+
+
+public class IDEDefault implements IDE {
+
+	public IDEDefault(RefactorSession refpack) {
+		this.refpack = refpack;
+	}
+
+	RefactorSession refpack;
+	
+	/** @see IDE#getProjectRelativePath(File)
+	 * This implementation returns the current project name from RefactorSession,
+	 * and getPath() from the input file.
+	 */
+	public String [] getProjectRelativePath(File file) {
+		String [] ret = new String[2];
+		ret[0] = refpack.getProjectName();
+		ret[1] = file.getPath();
+		return ret;
+	}
+
+}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/PUB.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -39,32 +39,66 @@
 import org.prorefactor.nodetypes.ProparseDirectiveNode;
 import org.prorefactor.refactor.source.CompileUnit;
 import org.prorefactor.treeparser.FieldBuffer;
+import org.prorefactor.treeparser.ParseUnit;
 import org.prorefactor.treeparser.Primative;
 import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolI;
 import org.prorefactor.treeparser.SymbolScopeRoot;
 import org.prorefactor.treeparser.SymbolScopeSuper;
 import org.prorefactor.treeparser.TableBuffer;
+import org.prorefactor.treeparser01.TP01Support;
 
 import com.joanju.ProparseLdr;
 
 /** The API for "Parse Unit Binary" files, which contain import and export
  * tables as well as a minimal AST for a parse unit.
+ * <p>
+ * Regarding PUBs for compile units from projects other than the current project:
+ * This is a concern when a compile unit in the current project inherits from a
+ * compile unit from a foreign project. Because Proparse parses the super class,
+ * ProRefactor must behave the same. In other words, we don't consider ProRefactor
+ * and PUBs to work like we might expect .r code to work. The .r code generated by
+ * the foreign project might be different due to different include files on the foreign
+ * project's propath. Think of Proparse and ProRefactor as if there were no .r code
+ * generated by the foreign project, and more importantly, we ignore any .PUB file that
+ * might have been generated by the foreign project.
+ * <p>
+ * The potential for name conflicts does exist. A foreign super .cls might be found on the
+ * propath before a local .cls, yet the local .cls may also be selected and need a .pub file
+ * generated for it.
+ * To avoid name conflicts, PUBs for the current project are stored in
+ * the project/pubs (in the ProRefactor working directory), PUBs for foreign
+ * projects are stored in project/foreign_pubs. There's only one propath, so we don't
+ * need a different pub directory for each foreign project.
  */
 public class PUB {
 
-	/** Create a PUB file for a compile unit file path/name relative to the project directory.
+	/** Create a PUB for a compile unit path/name relative to the current project's directory.
 	 * RefactorSession must be configured for the project (schema loaded, project name set, etc)
 	 * before working with PUB files.
 	 * @param relPath The path/file name relative to the project directory.
 	 * @param fullPath The fully qualified path to the compile unit's source file.
 	 */
 	public PUB(String relPath, String fullPath) {
+		init(null, relPath, fullPath);
+	}
+
+	/** Work with a PUB for any compile unit from any project.
+	 * @see PUB(String, String)
+	 */
+	public PUB(String project, String relPath, String fullPath) {
+		init(project, relPath, fullPath);
+	}
+	
+	private void init(String project, String relPath, String fullPath) {
+		String subdir;
+		if (project==null || project.equalsIgnoreCase(refpack.getProjectName())) subdir = "/pubs/";
+		else subdir = "/foreign_pubs/";
 		cuFile = new File(fullPath);
-		pubFile = new File(refpack.getProRefactorProjectDir() + "/pubs/" + relPath + ".pub");
+		pubFile = new File(refpack.getProRefactorProjectDir() + subdir + relPath + ".pub");
 	}
 	
-	public static final int LAYOUT_VERSION = 5;
+	public static final int LAYOUT_VERSION = 6;
 
 
 	/** loadTo(PUBFILE_TIMESTAMP) - just check if the binary exists and
@@ -110,6 +144,8 @@
 	/** Scratch JPNode attributes for storing string index. */
 	private static final int NODECOMMENTS = 49002;
 
+	private boolean checked = false;
+	private boolean current = false;
 	private ArrayList<SymbolRef> exportList;
 	private ArrayList<String> fileList;
 	private ArrayList<SymbolRef> importList;
@@ -120,6 +156,7 @@
 	private ProparseLdr parser = ProparseLdr.getInstance();
 	private RefactorSession refpack = RefactorSession.getInstance();
 	private String className;
+	
 	private String superClassName;
 	private String [] stringArray;
 	private TreeMap<String, TableRef> tableMap;
@@ -132,10 +169,14 @@
 		}
 		/** The TokenType, ex: TokenTypes.VARIABLE */
 		public int progressType;
+		/** For Primative symbols (fields and variables) the data type, like CHARACTER or CLASS.
+		 * Zero if this is not a primative.
+		 */
+		public int dataType = 0;
 		/** The symbol name (Symbol.fullName), with caseAsDefined. */
 		public String symbolName;
 		/** If is a CLASS object ref, then the class name, null otherwise. */
-		public String className;
+		public String className = null;
 	}
 	
 	private class TableRef {
@@ -163,32 +204,42 @@
 
 
 	
-	/** Force a fresh build. 
+	/** Update the PUB.
 	 * You would normally call load() first, to check whether
 	 * a fresh build is really necessary. Once a build() has been done,
 	 * then all of the values for the PUB are available - it is not necessary
 	 * for you to call load() or loadTo().
+	 * This takes care of creating the ParseUnit and running treeParser01.
 	 * @throws RefactorException
 	 */
-	public CompileUnit build() throws IOException, RefactorException {
+	public ParseUnit build() throws IOException, RefactorException {
+		ParseUnit pu = new ParseUnit(cuFile);
+		pu.setPUB(this);
+		pu.treeParser01(); // This calls build(TP01Support)
+		return pu;
+	}
+	
+
+	/** This is called by TreeParser01, and should not be called directly. */
+	public void build(TP01Support support) throws IOException, RefactorException {
+		ParseUnit pu = support.getParseUnit();
+		// treeParser01 needs to have been run already.
+		assert pu.getRootScope()!=null;
 		_refresh();
-		CompileUnit cu = new CompileUnit(cuFile, null, CompileUnit.DEFAULT);
-		cu.treeParser01();
 		pubFile.getParentFile().mkdirs();
 		OutputStream fileOut = new BufferedOutputStream(new FileOutputStream(pubFile));
 		ObjectOutputStream out = new ObjectOutputStream(fileOut);
 		writeVersion(out);
 		writeFileIndex(out);
-		writeHeader(out, cu.getRootScope());
-		ArrayList rootSymbols = cu.getRootScope().getAllSymbols();
+		writeHeader(out, pu.getRootScope());
+		ArrayList rootSymbols = pu.getRootScope().getAllSymbols();
 		writeSchemaSegment(out, rootSymbols);
 		writeImportSegment(out, rootSymbols);
 		writeExportSegment(out, rootSymbols);
-		tree = cu.getTopNode();
+		tree = pu.getTopNode();
 		writeTree(out, tree);
 		writeStrings(out);
 		out.close();
-		return cu;
 	}
 	
 	
@@ -281,12 +332,24 @@
 	public String getSuperClassName() { return superClassName; }
 	
 	
-	
 	/** Return the JPNode syntax tree that was loaded with load() */
 	public JPNode getTree() { return tree; }
 	
 	
+	/** Has the PUB been checked to see if it's current?
+	 * i.e. Has it been loaded at least to HEADER?
+	 */
+	public boolean isChecked() { return checked; }
+	
 
+	/** Is the PUB current?
+	 * You should have used isChecked() or loaded the PUB to HEADER before checking isCurrent().
+	 * @see PUB#isChecked()
+	 */
+	public boolean isCurrent() { return current; }
+	
+	
+
 	/** Same as loadTo(PUB.END) */
 	public boolean load() { return loadTo(END); }
 
@@ -299,6 +362,7 @@
 	 */
 	public boolean loadTo(int lastSegmentToLoad) {
 		_refresh();
+		if (lastSegmentToLoad >= HEADER) checked = true;
 		if (! pubFile.exists()) return false;
 		if (cuFile.lastModified() > pubFile.lastModified()) return false;
 		if (lastSegmentToLoad==PUBFILE_TIMESTAMP) return true;
@@ -308,6 +372,7 @@
 			if (! readVersion(inStream)) return false;
 			readFileIndex(inStream);
 			if (! testTimeStamps()) return false;
+			current = true;
 			if (lastSegmentToLoad==PUB.FILES) return true;
 			readHeader(inStream);
 			if (lastSegmentToLoad==PUB.HEADER) return true;
@@ -400,7 +465,8 @@
 	private SymbolRef readSymbol(ObjectInputStream in) throws IOException {
 		SymbolRef symbolRef = new SymbolRef(in.readInt(), in.readUTF());
 		if (symbolRef.progressType == -1) return null;
-		if (symbolRef.progressType == TokenTypes.CLASS) symbolRef.className = in.readUTF();
+		symbolRef.dataType = in.readInt();
+		if (symbolRef.dataType==TokenTypes.CLASS) symbolRef.className = in.readUTF();
 		return symbolRef;
 	}
 	
@@ -516,10 +582,15 @@
 	
 	
 	private void writeSymbol(ObjectOutputStream out, Symbol symbol) throws IOException {
-		int progressType = symbol.getProgressType();
-		out.writeInt(progressType);
+		out.writeInt(symbol.getProgressType());
 		out.writeUTF(symbol.fullName()); // We write caseAsDefined
-		if (progressType==TokenTypes.CLASS) out.writeUTF(((Primative)symbol).getClassName());
+		if (symbol instanceof Primative) {
+			Primative primative = (Primative) symbol;
+			int dataType = primative.getDataType().getTokenType();
+			out.writeInt(dataType);
+			if (dataType==TokenTypes.CLASS) out.writeUTF(primative.getClassName());
+		}
+		else out.writeInt(0);
 	}
 	
 	

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/RefactorSession.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/RefactorSession.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/RefactorSession.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -2,7 +2,7 @@
  * Created on Sep 30, 2003
  * John Green
  *
- * Copyright (C) 2003 Joanju Limited
+ * Copyright (C) 2003,2006 Joanju Software
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -30,6 +30,7 @@
 
 	private long timeStamp;
 	private ApplicationSettings appSettings = null;
+	private IDE ide = new IDEDefault(this);
 	private String projectName = null;
 	private ProgressProjectSettings progressSettings = null;
 	private ProparseLdr parser = null;
@@ -57,6 +58,7 @@
 
 	public static final String LISTING_FILE = "prorefactor/temp/listingfile.txt";
 	public static final String MESSAGES_FILE = "prorefactor/refactor.messages";
+	private static final String PROJECTS_DIR = "prorefactor/projects/";
 	public static final String ROLLBACK_DIR = "prorefactor/rollback";
 
 	private File rollbackDir = new File(ROLLBACK_DIR);
@@ -107,6 +109,8 @@
 	public static String getAppSettingsFilename() {
 		return "prorefactor/settings/application.properties";
 	}
+	
+	public IDE getIDE() { return ide; }
 
 	/** Get a string for the indent for the current project.
 	 * Returns a tab or some number of spaces (ex: "   ").
@@ -128,7 +132,7 @@
 	}
 
 	public static String getProgressSettingsFilename(String projectName) {
-		return "prorefactor/projects/" + projectName + "/progress.properties";
+		return PROJECTS_DIR + projectName + "/progress.properties";
 	}
 
 	/** Returns the name of the currently loaded project */
@@ -142,12 +146,11 @@
 	}
 
 	public static String getProparseSettingsFilename(String projectName) {
-		return "prorefactor/projects/" + projectName + "/proparse.properties";
+		return PROJECTS_DIR + projectName + "/proparse.properties";
 	}
 
-	public String getProRefactorProjectDir() {
-		return "prorefactor/projects/" + projectName;
-	}
+	public String getProRefactorProjectDir() {return PROJECTS_DIR + projectName;}
+	public String getProRefactorProjectDir(String inputProjectName) {return PROJECTS_DIR + inputProjectName;}
 
 	public File getRollbackDir() { return rollbackDir; }
 
@@ -197,6 +200,9 @@
 		if (! schemaFile.exists()) return true; // scratch projects might have no schema
 		return (schemaFile.lastModified() < timeStamp);
 	}
+	
+	
+	public RefactorSession setIDE(IDE ide) { this.ide = ide; return this; }
 
 
-} // class
+}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/action/RenameSchema.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/action/RenameSchema.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/action/RenameSchema.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -31,8 +31,8 @@
 import org.prorefactor.refactor.RefactorException;
 import org.prorefactor.refactor.RefactorTarget;
 import org.prorefactor.refactor.TempDirWrap;
-import org.prorefactor.refactor.source.CompileUnit;
 import org.prorefactor.treeparser.FieldBuffer;
+import org.prorefactor.treeparser.ParseUnit;
 import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.TableBuffer;
 
@@ -164,8 +164,8 @@
 		// of checking the PUB file for matching tables. Change this once the xref
 		// index is available.
 		PUB pub = new PUB(relPath, compileFile.getCanonicalPath());
-		CompileUnit cu = null;
-		if (! pub.loadTo(PUB.SCHEMA)) cu = pub.build();
+		ParseUnit pu = null;
+		if (! pub.loadTo(PUB.SCHEMA)) pu = pub.build();
 		boolean containsChanges = false;
 		ArrayList tableNames = new ArrayList();
 		pub.copySchemaTableLowercaseNamesInto(tableNames);
@@ -180,7 +180,7 @@
 		}
 		Object [] ret = new Object[2];
 		ret[0] = new Boolean(containsChanges);
-		ret[1] = cu;
+		ret[1] = pu;
 		return ret;
 	}
 
@@ -223,12 +223,12 @@
 		Object [] pubRet = checkPUB(relPath, compileFile);
 		Boolean requiresChanges = (Boolean) pubRet[0];
 		if (! requiresChanges.booleanValue()) return 0;
-		CompileUnit cu = (CompileUnit) pubRet[1];
-		if (cu==null) {
-			cu = new CompileUnit(compileFile, null, CompileUnit.DEFAULT);
-			cu.treeParser01();
+		ParseUnit pu = (ParseUnit) pubRet[1];
+		if (pu==null) {
+			pu = new ParseUnit(compileFile);
+			pu.treeParser01();
 		}
-		walkTree(cu.getTopNode());
+		walkTree(pu.getTopNode());
 		if (targetSet.size()==0) return 0;
 		TempDirWrap wrapper = new TempDirWrap(outDir);
 		wrapper.run(targetSet, changer);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/refactor/source/CompileUnit.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/refactor/source/CompileUnit.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/refactor/source/CompileUnit.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -2,7 +2,7 @@
  * Created on Jan 15, 2004
  * John Green
  *
- * Copyright (C) 2004 Joanju Limited
+ * Copyright (C) 2004,2006 Joanju Software
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,24 +10,18 @@
  */
 package org.prorefactor.refactor.source;
 
-import com.joanju.ProparseLdr;
 
 import java.io.File;
 import java.io.IOException;
 
-import org.prorefactor.core.JPNode;
-import org.prorefactor.core.PRCException;
 import org.prorefactor.refactor.RefactorException;
 import org.prorefactor.refactor.RefactorSession;
 import org.prorefactor.refactor.macrolevel.ListingParser;
-import org.prorefactor.treeparser.IJPTreeParser;
 import org.prorefactor.treeparser.ParseUnit;
-import org.prorefactor.treeparser.TreeParserWrapper;
-import org.prorefactor.treeparser01.TP01Support;
 import org.prorefactor.treeparser01.TreeParser01;
 
 
-/** A single point of reference for an AST, a macro tree, symbol tables, etc.
+/** A ParseUnit subclass, extended with source file features like the ListingParser.
  */
 public class CompileUnit extends ParseUnit {
 	
@@ -35,9 +29,7 @@
 	 * @param file The compile unit's source file - usually a ".p" or ".w".
 	 */
 	public CompileUnit(File file) {
-		this.file = file;
-		this.style = CompileUnit.DEFAULT;
-		this.sourceFilePool = new SourceFilePool();
+		super(file);
 	}
 
 	/** Constructor with specified SourceFilePool and connection style.
@@ -46,35 +38,18 @@
 	 * @param style A bitset, use bitwise OR to combine flags. ex: CompileUnit.DEFAULT
 	 */
 	public CompileUnit(File file, SourceFilePool pool, int style) {
+		super(file);
 		this.style = style;
-		if (pool==null) this.sourceFilePool = new SourceFilePool();
-		else this.sourceFilePool = pool;
+		if (pool!=null) this.sourceFilePool = pool;
 		this.file = file;
 	}
 
-	/** The JPNode tree is "connected" to Proparse, by default */
-	public static final int CONNECTED = 0;
-
-	/** The JPNode tree is "connected" to Proparse, by default */
-	public static final int DEFAULT = 0;
-
-	/** Working with JPNode in disconnected mode may not yet be fully supported.
-	 * See JPNode docs.
-	 */
-	public static final int DISCONNECTED = 1 << 1;
-
-	private int style;
-	private File file;
 	private IncludeExpansion tokenTree = null;
 	private ListingParser listingParser;
-	private RefactorSession refpack = RefactorSession.getInstance();
-	private String [] filenames;
+	protected SourceFilePool sourceFilePool = new SourceFilePool();
 
-	private ProparseLdr parser = ProparseLdr.getInstance();
-	protected SourceFilePool sourceFilePool;
 
 
-
 	/** Load everything.
 	 * Parse into an AST, load the macro tree (macrolevel),
 	 * call TreeParser01,
@@ -88,11 +63,11 @@
 			parse();
 			treeParser(new TreeParser01());
 			loadMacroTree();
-			// TODO generateTokenTree();
+			// If the TokenTree implementation was complete, then we'd call it here.
 		} finally {
 			parser.configSet("listing-file", prevListingSetting);
 		}
-	} // fullMonty
+	}
 
 
 
@@ -127,49 +102,4 @@
 
 
 
-	public void parse() throws RefactorException {
-		parser.parse(file.getPath());
-		if (parser.errorGetStatus() < 0) throw new RefactorException(parser.errorGetText());
-		filenames = parser.getFilenameArray();
-		int topHandle = parser.getHandle();
-		parser.nodeTop(topHandle);
-		if ((style & DISCONNECTED) == 0) {
-			super.setTopNode(JPNode.getTree(topHandle));
-		}
-		else {
-			JPNode.TreeConfig config = new JPNode.TreeConfig();
-			config.makeDisconnected(filenames);
-			super.setTopNode(JPNode.getTree(topHandle, config));
-		}
-		assert parser.errorGetStatus()==0 : parser.errorGetText();
-	}
-
-
-
-	/** Run any IJPTreeParser against the AST.
-	 * This will call parse() if the JPNode AST has not already been built.
-	 */
-	public void treeParser(IJPTreeParser tp) throws RefactorException {
-		if (super.getTopNode()==null) parse();
-		try {
-			TreeParserWrapper.run2(tp, super.getTopNode());
-		} catch (PRCException e) {
-			throw new RefactorException(e.getMessage(), e);
-		}
-	}
-
-	
-	
-	/** Run TreeParser01. This takes care of calling parse() first, if that
-	 * has not already been done.
-	 */
-	public void treeParser01() throws RefactorException {
-		if (super.getTopNode()==null) parse();
-		TreeParser01 tp = new TreeParser01();
-		((TP01Support)tp.getTpSupport()).setParseUnit(this);
-		treeParser(tp);
-	}
-
-
-
-} // class
+}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Dataset.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Dataset.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Dataset.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -21,6 +21,11 @@
 		setName(name);
 	}
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Dataset(getName(), scope);
+	}
+
 	/** For this subclass of Symbol, fullName() returns the same value as getName(). */
 	public String fullName() { return getName(); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Datasource.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Datasource.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Datasource.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -21,6 +21,11 @@
 		setName(name);
 	}
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Datasource(getName(), scope);
+	}
+
 	/** For this subclass of Symbol, fullName() returns the same value as getName(). */
 	public String fullName() { return getName(); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldBuffer.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldBuffer.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/FieldBuffer.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -65,7 +65,19 @@
 		return true;
 	}
 	
-	
+
+	/** @deprecated
+	 * INVALID. Do not use. There is never any reason to copy a FieldBuffer,
+	 * since they are created by the tree parser on the fly. They are not
+	 * defined formally in the syntax.
+	 */
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		assert false;
+		return null;
+	}
+
+
 	/** Get "database.buffer.field" for schema fields, or
 	 * "buffer.field" for temp/work table fields.
 	 */

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -4,7 +4,7 @@
  * Aug 12, 2004
  * www.joanju.com
  *
- * Copyright (C) 2004 Joanju Limited.
+ * Copyright (C) 2004,2006 Joanju Software.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,33 +12,136 @@
  */
 package org.prorefactor.treeparser;
 
+import java.io.File;
+
 import org.prorefactor.core.JPNode;
+import org.prorefactor.core.PRCException;
+import org.prorefactor.refactor.FileStuff;
+import org.prorefactor.refactor.PUB;
+import org.prorefactor.refactor.RefactorException;
+import org.prorefactor.refactor.RefactorSession;
+import org.prorefactor.treeparser01.TreeParser01;
 
+import com.joanju.ProparseLdr;
 
+
 /** Provides parse unit information, such as the symbol table and a reference to the AST.
  * TreeParser01 calls symbolUsage() in this class in order to build the symbol table.
  */
 public class ParseUnit {
 
-	public ParseUnit() {}
-	public ParseUnit(JPNode topNode) {
-		this.topNode = topNode;
+	public ParseUnit(File file) {
+		this.file = file;
 	}
 
+	/** The JPNode tree is "connected" to Proparse, by default */
+	public static final int CONNECTED = 0;
+
+	/** The JPNode tree is "connected" to Proparse, by default */
+	public static final int DEFAULT = 0;
+
+	/** Working with JPNode in disconnected mode may not yet be fully supported.
+	 * See JPNode docs.
+	 */
+	public static final int DISCONNECTED = 1 << 1;
+
+
+	protected int style = DEFAULT;
+	protected File file;
 	private JPNode topNode;
+	protected ProparseLdr parser = ProparseLdr.getInstance();
+	protected PUB pub = null;
+	protected RefactorSession refpack = RefactorSession.getInstance();
+	private String [] filenames = null;
 	private SymbolScopeRoot rootScope;
 
 	
 	
+	public File getFile() {
+		if (file==null) {
+			// A lot of old code starts with a string filename, sends that to Proparse, gets the top node
+			// handle, builds JPNode, and then runs TreeParser01 from that. (All the stuff ParseUnit does
+			// now.) In those cases, this ParseUnit might have been created as an empty shell by TreeParser01
+			// itself, and "file" would not be set. In that case, we attempt to find the File from Proparse's
+			// files index.
+			if (filenames==null) filenames = parser.getFilenameArray();
+			if (filenames==null) return null;
+			file = new File(filenames[0]);
+		}
+		return file;
+	}
+	
+	
+	/** Get or create a PUB */
+	public PUB getPUB() {
+		if (pub==null) {
+			// Note that we might be parsing a super class from another project, because it was
+			// found on the propath. We have to tell the PUB which project the file was found in.
+			RefactorSession refpack = RefactorSession.getInstance();
+			String [] projFile = refpack.getIDE().getProjectRelativePath(getFile());
+			pub = new PUB(projFile[0], projFile[1], FileStuff.fullpath(file));
+		}
+		return pub;
+	}
+	
+	
+	public SymbolScopeRoot getRootScope() { return rootScope; }
+
+
 	/** Get the syntax tree top (Program_root) node */
 	public JPNode getTopNode() { return topNode; }
 
-	public SymbolScopeRoot getRootScope() { return rootScope; }
 
+	public void parse() throws RefactorException {
+		parser.parse(file.getPath());
+		if (parser.errorGetStatus() < 0) throw new RefactorException(parser.errorGetText());
+		filenames = parser.getFilenameArray();
+		int topHandle = parser.getHandle();
+		parser.nodeTop(topHandle);
+		if ((style & DISCONNECTED) == 0) {
+			this.setTopNode(JPNode.getTree(topHandle));
+		}
+		else {
+			JPNode.TreeConfig config = new JPNode.TreeConfig();
+			config.makeDisconnected(filenames);
+			this.setTopNode(JPNode.getTree(topHandle, config));
+		}
+		assert parser.errorGetStatus()==0 : parser.errorGetText();
+	}
+	
+	
+	public ParseUnit setPUB(PUB pub) { this.pub = pub; return this; }
+
+	
+	public void setRootScope(SymbolScopeRoot rootScope) { this.rootScope = rootScope; }
+
+	
 	/** Set the syntax tree top (Program_root) node */
 	public void setTopNode(JPNode topNode) { this.topNode = topNode; }
 
-	public void setRootScope(SymbolScopeRoot rootScope) { this.rootScope = rootScope; }
 
+	/** Run any IJPTreeParser against the AST.
+	 * This will call parse() if the JPNode AST has not already been built.
+	 */
+	public void treeParser(IJPTreeParser tp) throws RefactorException {
+		if (this.getTopNode()==null) parse();
+		try {
+			TreeParserWrapper.run2(tp, this.getTopNode());
+		} catch (PRCException e) {
+			throw new RefactorException(e.getMessage(), e);
+		}
+	}
+
 	
+	/** Run TreeParser01. This takes care of calling parse() first, if that
+	 * has not already been done.
+	 */
+	public void treeParser01() throws RefactorException {
+		if (this.getTopNode()==null) parse();
+		TreeParser01 tp = new TreeParser01();
+		tp.getActionObject().setParseUnit(this);
+		treeParser(tp);
+	}
+
+	
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Query.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Query.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Query.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -21,6 +21,11 @@
 		setName(name);
 	}
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Query(getName(), scope);
+	}
+
 	/** For this subclass of Symbol, fullName() returns the same value as getName(). */
 	public String fullName() { return getName(); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -28,6 +28,12 @@
 		this.routineScope = routineScope;
 	}
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		Routine ret = new Routine(getName(), scope, scope);
+		ret.progressType = this.progressType;
+		return ret;
+	}
 
 	/** @see org.prorefactor.treeparser.Symbol#fullName() */
 	public String fullName() { return getName(); }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Stream.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Stream.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Stream.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -23,6 +23,11 @@
 		setName(name);
 	}
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Stream(getName(), scope);
+	}
+
 	/** For this subclass of Symbol, fullName() returns the same value as getName(). */
 	public String fullName() { return getName(); }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Symbol.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -49,7 +49,14 @@
 
 	/** Stores the full name, original (mixed) case as in definition. */	
 	private String name;
+
 	
+	/** Generate a bare-bones copy of this symbol.
+	 * Requires the scope to attach it to as the argument.
+	 */
+	public abstract Symbol copyBare(SymbolScope scope);
+
+
 	/* (non-Javadoc)
 	 * @see org.prorefactor.treeparser.SymbolI#fullName()
 	 */
@@ -127,11 +134,18 @@
 	
 	/* @see SymbolI#isExported() */
 	public boolean isExported() {
+		// If the symbol belongs to a SymbolScopeSuper, then not only has it already
+		// been determined that the symbol is exported, but also the rest of this
+		// method would just not work because there is never any AST linked to any
+		// of the symbols in a SymbolScopeSuper.
+		if (this.scope instanceof SymbolScopeSuper) return true;
 		SymbolScopeRoot unitScope = scope.getRootScope();
 		// If this is not at the unit (root) scope, then it cannot be visible.
 		if (scope!=unitScope) return false;
 		if (unitScope.getClassName()!=null) {
 			// For class members, only elements declared PUBLIC|PROTECTED are visible.
+			// Unnamed buffers don't have a DEFINE node.
+			if (defNode==null) return false;
 			return	(	defNode.findDirectChild(TokenTypes.PUBLIC)!=null
 					||	defNode.findDirectChild(TokenTypes.PROTECTED)!=null
 					);

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeRoot.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeRoot.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeRoot.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -14,9 +14,8 @@
 
 package org.prorefactor.treeparser;
 
-import java.util.HashSet;
+import java.util.HashMap;
 import java.util.Map;
-import java.util.Set;
 
 import org.prorefactor.core.IConstants;
 import org.prorefactor.core.schema.Field;
@@ -39,7 +38,7 @@
 	
 	private String className = null;
 
-	private Set<Table> tableSet = new HashSet<Table>();
+	private Map<String, Table> tableMap = new HashMap<String, Table>();
 
 	
 	
@@ -57,7 +56,7 @@
 	 */
 	public TableBuffer defineTable(String name, int type) {
 		Table table = new Table(name, type);
-		tableSet.add(table);
+		tableMap.put(name.toLowerCase(), table);
 		// Pass empty string for name for default buffer.
 		TableBuffer bufferSymbol = new TableBuffer("", this, table);
 		// The default buffer for a temp/work table is not "unnamed" the way
@@ -76,6 +75,12 @@
 		FieldBuffer fieldBuff = new FieldBuffer(this, buffer, field);
 		return fieldBuff;
 	}
+	
+	
+	/** Generate "bare" symbols and SymbolScopeSuper from this scope's PUBLIC|PROTECTED members. */
+	public SymbolScopeSuper generateSymbolScopeSuper() {
+		return new SymbolScopeSuper(this);
+	}
 
 
 	/** Valid only if the parse unit is a CLASS.
@@ -88,6 +93,18 @@
 		assert table.getStoretype() != IConstants.ST_DBTABLE;
 		return (TableBuffer) bufferMap.get(table.getName().toLowerCase());
 	}
+	
+	
+	
+	/** Lookup a temp or work table definition in this scope.
+	 * Unlike most other lookup functions, this one has nothing to do with
+	 * 4gl semantics, buffers, scopes, etc. This just looks up the raw Table
+	 * definition for a temp or work table.
+	 * @return null if not found
+	 */
+	public Table lookupTableDefinition(String name) {
+		return tableMap.get(name.toLowerCase());
+	}
 
 
 
@@ -99,7 +116,7 @@
 	 */
 	protected Field lookupUnqualifiedField(String name) {
 		Field field;
-		for (Table table : tableSet) {
+		for (Table table : tableMap.values()) {
 			field = table.lookupField(name);
 			if (field!=null) return field;
 		}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeSuper.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeSuper.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScopeSuper.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -20,12 +20,24 @@
 /** Contains skeleton symbols for purposes of inheritance.
  * Since these are cached indefinately, they never have references
  * to syntax tree nodes or child scopes.
+ * Is always generated either from a SymbolScopeRoot, or else from
+ * another SymbolScopeSuper when a copy is being made.
  */
 public class SymbolScopeSuper extends SymbolScopeRoot {
 
-	public SymbolScopeSuper(String className) {
+	/** Constructor is "package" visibility.
+	 * Should only be called from the SymbolScopeRoot, or from another
+	 * SymbolScopeSuper in the case where a copy is being made.
+	 */
+	SymbolScopeSuper(SymbolScopeRoot fromScope) {
 		super();
-		setClassName(className);
+		setClassName(fromScope.getClassName());
+		gatherInheritableMembers(fromScope);
+		if (fromScope.parentScope!=null) {
+			// Logic error if not instanceof SymbolScopeSuper
+			SymbolScopeSuper fromSuper = (SymbolScopeSuper) fromScope.parentScope;
+			this.parentScope = fromSuper.generateSymbolScopeSuper();
+		}
 	}
 	
 	/** TreeParser01 stores and looks up SymbolScopeSuper objects in this cache, which
@@ -49,4 +61,19 @@
 	}
 	
 	
+	
+	private void gatherInheritableMembers(SymbolScopeRoot fromScope) {
+		for (Symbol symbol : fromScope.getAllSymbols()) {
+			// FieldBuffers are not part of the language syntax, and they are not copied.
+			// They are created on the fly as needed by the tree parser.
+			if (symbol instanceof FieldBuffer) continue;
+			if (symbol.isExported()) {
+				Symbol copy = symbol.copyBare(this);
+				add(copy);
+			}
+		}
+	}
+
+	
+	
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TableBuffer.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TableBuffer.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/TableBuffer.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -52,6 +52,24 @@
 	
 	
 	
+	/** For temp/work table, also adds Table definition to the scope if it doesn't already exist. */
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		Table t;
+		if (this.table.getStoretype()==IConstants.ST_DBTABLE) {
+			t = this.table;
+		} else {
+			// Make sure temp/work table definition exists in target root scope.
+			SymbolScopeRoot rootScope = scope.getRootScope();
+			t = rootScope.lookupTableDefinition(table.getName());
+			if (t==null) t = table.copyBare(rootScope);
+		}
+		String useName = this.isDefault ? "" : super.getName();
+		return new TableBuffer(useName, scope, t);
+	}
+
+
+
 	/** Get the "database.buffer" name for schema buffers,
 	 * get "buffer" for temp/work table buffers.
 	 */
@@ -115,4 +133,4 @@
 
 
 
-} // class
+}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Variable.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Variable.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Variable.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -30,6 +30,13 @@
 	private String className = null;
 
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		Variable v = new Variable(getName(), scope);
+		v.className = this.className;
+		v.dataType = this.dataType;
+		return v;
+	}
 
 	/** Return the name of the variable. For this subclass of
 	 * Symbol, fullName() returns the same value as getName().

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Action.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -13,6 +13,7 @@
 package org.prorefactor.treeparser01;
 
 
+import org.prorefactor.treeparser.ParseUnit;
 import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.Variable;
 import org.prorefactor.widgettypes.Browse;
@@ -26,8 +27,11 @@
  * TP01Support is the default implementation.
  */
 public class TP01Action {
+
+	protected ParseUnit parseUnit = new ParseUnit(null);
+
 	
-	
+
 	/** Called by the tree parser at the end of a DEFINE statement, passing
 	 * in the new Variable object which is expected now to be added to the current scope.
 	 */
@@ -171,6 +175,8 @@
 	 */
 	protected void funcForward(AST idAST) {}
 	
+	public ParseUnit getParseUnit() { return parseUnit; }
+
 	/** Called by the tree parser at METHOD statement, after method's scope has been created. */
 	protected void methodDef(AST idAST) {}
 
@@ -184,11 +190,15 @@
 	 */
 	protected void procedureEnd(AST p){}
 	
-
+	
 	/** Called by the tree parser right off the bat, at the Program_root node */
 	protected void programRoot(AST rootAST) {}
 	
 	
+	/** Called by the tree parser at the end of the program, after Program_tail. */
+	protected void programTail() {}
+	
+
 	/** Action to take at RECORD_NAME nodes. */
 	protected void recordNameNode(AST anode, int contextQualifier) {}
 
@@ -225,6 +235,14 @@
 	protected void scopeClose(AST scopeRootNode) {}
 	
 	
+	/** It would be unusual to already have a ParseUnit before calling
+	 * TP01, since TP01 is usually the first tree parser and it (by default)
+	 * creates its own ParseUnit. However, after instantiating TP01, you can
+	 * assign your own ParseUnit before executing the tree parse.
+	 */
+	public void setParseUnit(ParseUnit parseUnit) { this.parseUnit = parseUnit; }
+
+	
 	/** Create a "strong" buffer scope.
 	 * This is called within a DO FOR or REPEAT FOR statement.
 	 * @param anode Is the RECORD_NAME node. It must already have
@@ -232,6 +250,7 @@
 	 */
 	protected void strongScope(AST anode) {}
 	
+
 	/** Called with the VIEW statement head, after the VIEW branch has been traversed. */
 	protected void viewState(AST headAST) {}
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01Support.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -14,6 +14,7 @@
 package org.prorefactor.treeparser01;
 
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -27,6 +28,10 @@
 import org.prorefactor.nodetypes.BlockNode;
 import org.prorefactor.nodetypes.FieldRefNode;
 import org.prorefactor.nodetypes.RecordNameNode;
+import org.prorefactor.refactor.FileStuff;
+import org.prorefactor.refactor.PUB;
+import org.prorefactor.refactor.RefactorException;
+import org.prorefactor.refactor.RefactorSession;
 import org.prorefactor.treeparser.Block;
 import org.prorefactor.treeparser.BufferScope;
 import org.prorefactor.treeparser.CQ;
@@ -40,15 +45,18 @@
 import org.prorefactor.treeparser.SymbolFactory;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.SymbolScopeRoot;
+import org.prorefactor.treeparser.SymbolScopeSuper;
 import org.prorefactor.treeparser.TableBuffer;
 import org.prorefactor.treeparser.Variable;
 import org.prorefactor.widgettypes.Browse;
 
 import antlr.collections.AST;
 
+import com.joanju.ProparseLdr;
 
 
 
+
 /**
  * Provides all functions called by TreeParser01.
  * TreeParser01 does not, itself, define any actions.
@@ -73,7 +81,6 @@
 	private Block currentBlock;
 	private FrameStack frameStack = new FrameStack();
 	private HashMap<String, SymbolScope> funcForwards = new HashMap<String, SymbolScope>();
-	private ParseUnit parseUnit = new ParseUnit();
 	private Schema schema = Schema.getInstance();
 
 	/** The symbol last, or currently being, defined.
@@ -182,7 +189,60 @@
 		JPNode classNode = (JPNode) classAST;
 		JPNode idNode = classNode.firstChild();
 		rootScope.setClassName(idNode.getText());
+		if (idNode.nextSibling().getType()==TokenTypes.INHERITS)
+			classStateInherits(classNode, idNode.nextSibling().firstChild());
 	}
+	private void classStateInherits(JPNode classNode, JPNode inheritsTypeNode) {
+		String className = inheritsTypeNode.getText();
+		SymbolScopeSuper cachedCopy = SymbolScopeSuper.cache.get(className.toLowerCase());
+		if (cachedCopy==null) cachedCopy = classStateSuper(classNode, className);
+		// Whether we got it from the cache or created it new, we put it back in the cache.
+		// Putting a cached copy back into the cache just moves it up in the MRU list.
+		SymbolScopeSuper.cache.put(className.toLowerCase(), cachedCopy);
+		// We take a copy of the cached superScope, because the tree parser messes with
+		// the attributes of the symbols, and we don't want to mess with the symbols that
+		// are in the super scopes in the cache.
+		rootScope.assignSuper(cachedCopy.generateSymbolScopeSuper());
+	}
+	private SymbolScopeSuper classStateSuper(JPNode classNode, String className) {
+		// Notes: It's possible we might want to change the logic here some day.
+		// If the PUB file ever stores enough symbol information that we could get
+		// the inheritance information straight from the PUB, then we might want to
+		// go straight to that (if up to date), ignoring what's in Proparse.
+		// I don't know if there would be any performance or memory advantage one
+		// way or the other, since reading from disk is slower, but building the
+		// whole JPNode tree takes more memory.
+		File file = FileStuff.findFileForClassName(className);
+		if (! file.exists()) throw new Error("Could not find source on PROPATH for class: " + className);
+		RefactorSession refpack = RefactorSession.getInstance();
+		String [] projFile = refpack.getIDE().getProjectRelativePath(file);
+		if (projFile==null) throw new Error("Could not find IDE project/file for class: " + className);
+		PUB pub = new PUB(projFile[0], projFile[1], FileStuff.fullpath(file));
+		boolean pubIsCurrent = pub.loadTo(PUB.HEADER);
+		ParseUnit pu = new ParseUnit(file);
+		pu.setPUB(pub);
+		int superClassHandle = classNode.attrGet(IConstants.SUPER_CLASS_HANDLE);
+		try {
+			if (superClassHandle > 0) {
+				classStateSuperProparse(pu, superClassHandle);
+			} else {
+				if (!pubIsCurrent) throw new Error("Internal error: No tree from PUB or Proparse, for class: " + className);
+				pub.load();
+				pu.setTopNode(pub.getTree());
+				pu.treeParser01();
+			}
+		} catch (Exception e) { throw new Error(e); }
+		return pu.getRootScope().generateSymbolScopeSuper();
+	}
+	private void classStateSuperProparse(ParseUnit pu, int superClassHandle) throws RefactorException {
+		assert superClassHandle > 0;
+		ProparseLdr parser = ProparseLdr.getInstance();
+		int superRootHandle = parser.getHandle();
+		parser.nodeParent(superClassHandle, superRootHandle);
+		assert parser.getNodeTypeI(superRootHandle) == TokenTypes.Program_root;
+		pu.setTopNode(JPNode.getTree(superRootHandle));
+		pu.treeParser01();
+	}
 
 
 	
@@ -531,8 +591,6 @@
 	
 	public SymbolScope getCurrentScope(){ return currentScope; }
 
-	public ParseUnit getParseUnit() { return parseUnit; }
-
 	public SymbolScopeRoot getRootScope(){ return rootScope; }
 	
 	
@@ -581,6 +639,19 @@
 		parseUnit.setTopNode(blockNode);
 		parseUnit.setRootScope(rootScope);
 	}
+	
+	
+	
+	protected void programTail() {
+		// Because the tree parser depends on PUB files for getting inheritance information
+		// from super classes, the tree parser is responsible for keeping the PUB files up
+		// to date.
+		try {
+			PUB pub = parseUnit.getPUB();
+			if (! pub.isChecked()) pub.loadTo(PUB.HEADER);
+			if (! pub.isCurrent()) pub.build(this);
+		} catch (Exception e) { throw new Error(e); }
+	}
 
 
 
@@ -704,15 +775,6 @@
 
 
 
-	/** It would be unusual to already have a ParseUnit before calling
-	 * TP01, since TP01 is usually the first tree parser and it (by default)
-	 * creates its own ParseUnit. However, after instantiating TP01, you can
-	 * assign your own ParseUnit before executing the tree parse.
-	 */
-	public void setParseUnit(ParseUnit parseUnit) { this.parseUnit = parseUnit; }
-
-	
-	
 	/** Create a "strong" buffer scope.
 	 * This is called within a DO FOR or REPEAT FOR statement.
 	 * @param anode Is the RECORD_NAME node. It must already have

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -57,10 +57,6 @@
 		if (action==null) action = new TP01Support();
 	}
 
-	/** Get the action object. getActionObject and getTpSupport are identical.
-	 * @deprecated
-	 */
-	public TP01Action getTpSupport() { return action; }
 	/** Get the action object. getActionObject and getTpSupport are identical. */
 	public TP01Action getActionObject() { return action; }
 
@@ -68,14 +64,7 @@
 	 * By default, the support object is a new TP01Support,
 	 * but you can configure this to be any TP01Action object.
 	 * setTpSupport and setActionObject are identical.
-	 * @deprecated
 	 */
-	public void setTpSupport(TP01Action action) { this.action = action; }
-	/** Set the action object.
-	 * By default, the support object is a new TP01Support,
-	 * but you can configure this to be any TP01Action object.
-	 * setTpSupport and setActionObject are identical.
-	 */
 	public void setActionObject(TP01Action action) { this.action = action; }
 
 
@@ -122,6 +111,9 @@
 		AST tmp1_AST_in = (AST)_t;
 		match(_t,Program_tail);
 		_t = _t.getNextSibling();
+		if ( inputState.guessing==0 ) {
+			action.programTail();
+		}
 		_t = __t2;
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -260,7 +252,7 @@
 		}
 		case Expr_statement:
 		{
-			AST __t1373 = _t;
+			AST __t1384 = _t;
 			AST tmp2_AST_in = (AST)_t;
 			match(_t,Expr_statement);
 			_t = _t.getFirstChild();
@@ -289,7 +281,7 @@
 			}
 			state_end(_t);
 			_t = _retTree;
-			_t = __t1373;
+			_t = __t1384;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -316,12 +308,12 @@
 		}
 		case ANNOTATION:
 		{
-			AST __t1375 = _t;
+			AST __t1386 = _t;
 			AST tmp7_AST_in = (AST)_t;
 			match(_t,ANNOTATION);
 			_t = _t.getFirstChild();
 			{
-			_loop1377:
+			_loop1388:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if (((_t.getType() >= LEXDATE && _t.getType() <= SYMMETRICENCRYPTIONALGORITHM))) {
@@ -330,12 +322,12 @@
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop1377;
+					break _loop1388;
 				}
 				
 			} while (true);
 			}
-			_t = __t1375;
+			_t = __t1386;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -695,7 +687,7 @@
 		switch ( _t.getType()) {
 		case OR:
 		{
-			AST __t1557 = _t;
+			AST __t1568 = _t;
 			AST tmp24_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
@@ -703,13 +695,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1557;
+			_t = __t1568;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AND:
 		{
-			AST __t1558 = _t;
+			AST __t1569 = _t;
 			AST tmp25_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getFirstChild();
@@ -717,25 +709,25 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1558;
+			_t = __t1569;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOT:
 		{
-			AST __t1559 = _t;
+			AST __t1570 = _t;
 			AST tmp26_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1559;
+			_t = __t1570;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MATCHES:
 		{
-			AST __t1560 = _t;
+			AST __t1571 = _t;
 			AST tmp27_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getFirstChild();
@@ -743,13 +735,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1560;
+			_t = __t1571;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BEGINS:
 		{
-			AST __t1561 = _t;
+			AST __t1572 = _t;
 			AST tmp28_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getFirstChild();
@@ -757,13 +749,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1561;
+			_t = __t1572;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTAINS:
 		{
-			AST __t1562 = _t;
+			AST __t1573 = _t;
 			AST tmp29_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getFirstChild();
@@ -771,13 +763,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1562;
+			_t = __t1573;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EQ:
 		{
-			AST __t1563 = _t;
+			AST __t1574 = _t;
 			AST tmp30_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getFirstChild();
@@ -785,13 +777,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1563;
+			_t = __t1574;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NE:
 		{
-			AST __t1564 = _t;
+			AST __t1575 = _t;
 			AST tmp31_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getFirstChild();
@@ -799,13 +791,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1564;
+			_t = __t1575;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GTHAN:
 		{
-			AST __t1565 = _t;
+			AST __t1576 = _t;
 			AST tmp32_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getFirstChild();
@@ -813,13 +805,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1565;
+			_t = __t1576;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GE:
 		{
-			AST __t1566 = _t;
+			AST __t1577 = _t;
 			AST tmp33_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getFirstChild();
@@ -827,13 +819,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1566;
+			_t = __t1577;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LTHAN:
 		{
-			AST __t1567 = _t;
+			AST __t1578 = _t;
 			AST tmp34_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getFirstChild();
@@ -841,13 +833,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1567;
+			_t = __t1578;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LE:
 		{
-			AST __t1568 = _t;
+			AST __t1579 = _t;
 			AST tmp35_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getFirstChild();
@@ -855,13 +847,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1568;
+			_t = __t1579;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PLUS:
 		{
-			AST __t1569 = _t;
+			AST __t1580 = _t;
 			AST tmp36_AST_in = (AST)_t;
 			match(_t,PLUS);
 			_t = _t.getFirstChild();
@@ -869,13 +861,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1569;
+			_t = __t1580;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINUS:
 		{
-			AST __t1570 = _t;
+			AST __t1581 = _t;
 			AST tmp37_AST_in = (AST)_t;
 			match(_t,MINUS);
 			_t = _t.getFirstChild();
@@ -883,13 +875,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1570;
+			_t = __t1581;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MULTIPLY:
 		{
-			AST __t1571 = _t;
+			AST __t1582 = _t;
 			AST tmp38_AST_in = (AST)_t;
 			match(_t,MULTIPLY);
 			_t = _t.getFirstChild();
@@ -897,13 +889,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1571;
+			_t = __t1582;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIVIDE:
 		{
-			AST __t1572 = _t;
+			AST __t1583 = _t;
 			AST tmp39_AST_in = (AST)_t;
 			match(_t,DIVIDE);
 			_t = _t.getFirstChild();
@@ -911,13 +903,13 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1572;
+			_t = __t1583;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MODULO:
 		{
-			AST __t1573 = _t;
+			AST __t1584 = _t;
 			AST tmp40_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getFirstChild();
@@ -925,31 +917,31 @@
 			_t = _retTree;
 			expression(_t);
 			_t = _retTree;
-			_t = __t1573;
+			_t = __t1584;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNARY_MINUS:
 		{
-			AST __t1574 = _t;
+			AST __t1585 = _t;
 			AST tmp41_AST_in = (AST)_t;
 			match(_t,UNARY_MINUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
 			_t = _retTree;
-			_t = __t1574;
+			_t = __t1585;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNARY_PLUS:
 		{
-			AST __t1575 = _t;
+			AST __t1586 = _t;
 			AST tmp42_AST_in = (AST)_t;
 			match(_t,UNARY_PLUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
 			_t = _retTree;
-			_t = __t1575;
+			_t = __t1586;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -1788,18 +1780,18 @@
 		
 		AST framephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t821 = _t;
+		AST __t832 = _t;
 		AST tmp133_AST_in = (AST)_t;
 		match(_t,WITH);
 		_t = _t.getFirstChild();
 		{
-		_loop850:
+		_loop861:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ACCUMULATE:
 			{
-				AST __t823 = _t;
+				AST __t834 = _t;
 				AST tmp134_AST_in = (AST)_t;
 				match(_t,ACCUMULATE);
 				_t = _t.getFirstChild();
@@ -1816,7 +1808,7 @@
 				}
 				
 				}
-				_t = __t823;
+				_t = __t834;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -1836,13 +1828,13 @@
 			}
 			case CANCELBUTTON:
 			{
-				AST __t825 = _t;
+				AST __t836 = _t;
 				AST tmp137_AST_in = (AST)_t;
 				match(_t,CANCELBUTTON);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t825;
+				_t = __t836;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -1855,13 +1847,13 @@
 			}
 			case COLUMN:
 			{
-				AST __t826 = _t;
+				AST __t837 = _t;
 				AST tmp139_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t826;
+				_t = __t837;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -1883,13 +1875,13 @@
 			}
 			case DEFAULTBUTTON:
 			{
-				AST __t827 = _t;
+				AST __t838 = _t;
 				AST tmp142_AST_in = (AST)_t;
 				match(_t,DEFAULTBUTTON);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t827;
+				_t = __t838;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -1909,13 +1901,13 @@
 			}
 			case FONT:
 			{
-				AST __t828 = _t;
+				AST __t839 = _t;
 				AST tmp145_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t828;
+				_t = __t839;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -1934,49 +1926,49 @@
 			}
 			case LABELFONT:
 			{
-				AST __t829 = _t;
+				AST __t840 = _t;
 				AST tmp147_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t829;
+				_t = __t840;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELDCOLOR:
 			{
-				AST __t830 = _t;
+				AST __t841 = _t;
 				AST tmp148_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t830;
+				_t = __t841;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFGCOLOR:
 			{
-				AST __t831 = _t;
+				AST __t842 = _t;
 				AST tmp149_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t831;
+				_t = __t842;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELBGCOLOR:
 			{
-				AST __t832 = _t;
+				AST __t843 = _t;
 				AST tmp150_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t832;
+				_t = __t843;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2038,25 +2030,25 @@
 			}
 			case ROWHEIGHTCHARS:
 			{
-				AST __t833 = _t;
+				AST __t844 = _t;
 				AST tmp159_AST_in = (AST)_t;
 				match(_t,ROWHEIGHTCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t833;
+				_t = __t844;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROWHEIGHTPIXELS:
 			{
-				AST __t834 = _t;
+				AST __t845 = _t;
 				AST tmp160_AST_in = (AST)_t;
 				match(_t,ROWHEIGHTPIXELS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t834;
+				_t = __t845;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2181,25 +2173,25 @@
 			}
 			case RETAIN:
 			{
-				AST __t835 = _t;
+				AST __t846 = _t;
 				AST tmp178_AST_in = (AST)_t;
 				match(_t,RETAIN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t835;
+				_t = __t846;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ROW:
 			{
-				AST __t836 = _t;
+				AST __t847 = _t;
 				AST tmp179_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t836;
+				_t = __t847;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2219,13 +2211,13 @@
 			}
 			case SCROLL:
 			{
-				AST __t837 = _t;
+				AST __t848 = _t;
 				AST tmp182_AST_in = (AST)_t;
 				match(_t,SCROLL);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t837;
+				_t = __t848;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2299,7 +2291,7 @@
 			}
 			case VIEWAS:
 			{
-				AST __t838 = _t;
+				AST __t849 = _t;
 				AST tmp191_AST_in = (AST)_t;
 				match(_t,VIEWAS);
 				_t = _t.getFirstChild();
@@ -2308,7 +2300,7 @@
 				switch ( _t.getType()) {
 				case DIALOGBOX:
 				{
-					AST __t840 = _t;
+					AST __t851 = _t;
 					AST tmp192_AST_in = (AST)_t;
 					match(_t,DIALOGBOX);
 					_t = _t.getFirstChild();
@@ -2345,7 +2337,7 @@
 					}
 					}
 					}
-					_t = __t840;
+					_t = __t851;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -2365,7 +2357,7 @@
 				}
 				case TOOLBAR:
 				{
-					AST __t843 = _t;
+					AST __t854 = _t;
 					AST tmp196_AST_in = (AST)_t;
 					match(_t,TOOLBAR);
 					_t = _t.getFirstChild();
@@ -2426,7 +2418,7 @@
 					}
 					}
 					}
-					_t = __t843;
+					_t = __t854;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -2436,25 +2428,25 @@
 				}
 				}
 				}
-				_t = __t838;
+				_t = __t849;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTH:
 			{
-				AST __t846 = _t;
+				AST __t857 = _t;
 				AST tmp202_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t846;
+				_t = __t857;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t847 = _t;
+				AST __t858 = _t;
 				AST tmp203_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
@@ -2463,7 +2455,7 @@
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t847;
+				_t = __t858;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2499,7 +2491,7 @@
 			}
 			case With_columns:
 			{
-				AST __t848 = _t;
+				AST __t859 = _t;
 				AST tmp205_AST_in = (AST)_t;
 				match(_t,With_columns);
 				_t = _t.getFirstChild();
@@ -2508,13 +2500,13 @@
 				AST tmp206_AST_in = (AST)_t;
 				match(_t,COLUMNS);
 				_t = _t.getNextSibling();
-				_t = __t848;
+				_t = __t859;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case With_down:
 			{
-				AST __t849 = _t;
+				AST __t860 = _t;
 				AST tmp207_AST_in = (AST)_t;
 				match(_t,With_down);
 				_t = _t.getFirstChild();
@@ -2523,7 +2515,7 @@
 				AST tmp208_AST_in = (AST)_t;
 				match(_t,DOWN);
 				_t = _t.getNextSibling();
-				_t = __t849;
+				_t = __t860;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -2549,12 +2541,12 @@
 			}
 			default:
 			{
-				break _loop850;
+				break _loop861;
 			}
 			}
 		} while (true);
 		}
-		_t = __t821;
+		_t = __t832;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -2641,7 +2633,7 @@
 		}
 		}
 		}
-		AST __t772 = _t;
+		AST __t783 = _t;
 		rp1 = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -2650,10 +2642,10 @@
 		}
 		recordphrase(_t);
 		_t = _retTree;
-		_t = __t772;
+		_t = __t783;
 		_t = _t.getNextSibling();
 		{
-		_loop776:
+		_loop787:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
@@ -2684,7 +2676,7 @@
 				}
 				}
 				}
-				AST __t775 = _t;
+				AST __t786 = _t;
 				rp2 = _t==ASTNULL ? null :(AST)_t;
 				match(_t,RECORD_NAME);
 				_t = _t.getFirstChild();
@@ -2693,11 +2685,11 @@
 				}
 				recordphrase(_t);
 				_t = _retTree;
-				_t = __t775;
+				_t = __t786;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop776;
+				break _loop787;
 			}
 			
 		} while (true);
@@ -3902,7 +3894,7 @@
 		
 		AST field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1580 = _t;
+		AST __t1591 = _t;
 		AST tmp303_AST_in = (AST)_t;
 		match(_t,Field_ref);
 		_t = _t.getFirstChild();
@@ -3933,27 +3925,27 @@
 		switch ( _t.getType()) {
 		case FRAME:
 		{
-			AST __t1583 = _t;
+			AST __t1594 = _t;
 			AST tmp305_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getFirstChild();
 			AST tmp306_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t1583;
+			_t = __t1594;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST __t1584 = _t;
+			AST __t1595 = _t;
 			AST tmp307_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getFirstChild();
 			AST tmp308_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t1584;
+			_t = __t1595;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -3989,7 +3981,7 @@
 		}
 		}
 		}
-		_t = __t1580;
+		_t = __t1591;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4158,7 +4150,7 @@
 		expression(_t);
 		_t = _retTree;
 		{
-		_loop1548:
+		_loop1559:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
@@ -4169,7 +4161,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1548;
+				break _loop1559;
 			}
 			
 		} while (true);
@@ -4184,7 +4176,7 @@
 		
 		AST ldbnamefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t918 = _t;
+		AST __t929 = _t;
 		AST tmp327_AST_in = (AST)_t;
 		match(_t,LDBNAME);
 		_t = _t.getFirstChild();
@@ -4194,13 +4186,13 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==BUFFER)) {
-			AST __t920 = _t;
+			AST __t931 = _t;
 			AST tmp329_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			tbl(_t,CQ.BUFFERSYMBOL);
 			_t = _retTree;
-			_t = __t920;
+			_t = __t931;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_3.member(_t.getType()))) {
@@ -4215,7 +4207,7 @@
 		AST tmp330_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t918;
+		_t = __t929;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4309,13 +4301,13 @@
 		
 		AST parameterlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1537 = _t;
+		AST __t1548 = _t;
 		AST tmp340_AST_in = (AST)_t;
 		match(_t,Parameter_list);
 		_t = _t.getFirstChild();
 		parameterlist_noroot(_t);
 		_t = _retTree;
-		_t = __t1537;
+		_t = __t1548;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -4328,37 +4320,37 @@
 		switch ( _t.getType()) {
 		case AVG:
 		{
-			AST __t1358 = _t;
+			AST __t1369 = _t;
 			AST tmp341_AST_in = (AST)_t;
 			match(_t,AVG);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t1358;
+			_t = __t1369;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNT:
 		{
-			AST __t1359 = _t;
+			AST __t1370 = _t;
 			AST tmp342_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t1359;
+			_t = __t1370;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUM:
 		{
-			AST __t1360 = _t;
+			AST __t1371 = _t;
 			AST tmp343_AST_in = (AST)_t;
 			match(_t,SUM);
 			_t = _t.getFirstChild();
 			sqlaggregatefunc_arg(_t);
 			_t = _retTree;
-			_t = __t1360;
+			_t = __t1371;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -4378,1429 +4370,1429 @@
 		switch ( _t.getType()) {
 		case AACBIT:
 		{
-			AST __t1400 = _t;
+			AST __t1411 = _t;
 			AST tmp344_AST_in = (AST)_t;
 			match(_t,AACBIT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1400;
+			_t = __t1411;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAMSG:
 		{
-			AST __t1401 = _t;
+			AST __t1412 = _t;
 			AST tmp345_AST_in = (AST)_t;
 			match(_t,AAMSG);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1401;
+			_t = __t1412;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ABSOLUTE:
 		{
-			AST __t1402 = _t;
+			AST __t1413 = _t;
 			AST tmp346_AST_in = (AST)_t;
 			match(_t,ABSOLUTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1402;
+			_t = __t1413;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALIAS:
 		{
-			AST __t1403 = _t;
+			AST __t1414 = _t;
 			AST tmp347_AST_in = (AST)_t;
 			match(_t,ALIAS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1403;
+			_t = __t1414;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ASC:
 		{
-			AST __t1404 = _t;
+			AST __t1415 = _t;
 			AST tmp348_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1404;
+			_t = __t1415;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64DECODE:
 		{
-			AST __t1405 = _t;
+			AST __t1416 = _t;
 			AST tmp349_AST_in = (AST)_t;
 			match(_t,BASE64DECODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1405;
+			_t = __t1416;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BASE64ENCODE:
 		{
-			AST __t1406 = _t;
+			AST __t1417 = _t;
 			AST tmp350_AST_in = (AST)_t;
 			match(_t,BASE64ENCODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1406;
+			_t = __t1417;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANDO:
 		{
-			AST __t1407 = _t;
+			AST __t1418 = _t;
 			AST tmp351_AST_in = (AST)_t;
 			match(_t,CANDO);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1407;
+			_t = __t1418;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANQUERY:
 		{
-			AST __t1408 = _t;
+			AST __t1419 = _t;
 			AST tmp352_AST_in = (AST)_t;
 			match(_t,CANQUERY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1408;
+			_t = __t1419;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CANSET:
 		{
-			AST __t1409 = _t;
+			AST __t1420 = _t;
 			AST tmp353_AST_in = (AST)_t;
 			match(_t,CANSET);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1409;
+			_t = __t1420;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CAPS:
 		{
-			AST __t1410 = _t;
+			AST __t1421 = _t;
 			AST tmp354_AST_in = (AST)_t;
 			match(_t,CAPS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1410;
+			_t = __t1421;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CHR:
 		{
-			AST __t1411 = _t;
+			AST __t1422 = _t;
 			AST tmp355_AST_in = (AST)_t;
 			match(_t,CHR);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1411;
+			_t = __t1422;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEPAGECONVERT:
 		{
-			AST __t1412 = _t;
+			AST __t1423 = _t;
 			AST tmp356_AST_in = (AST)_t;
 			match(_t,CODEPAGECONVERT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1412;
+			_t = __t1423;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLLATE:
 		{
-			AST __t1413 = _t;
+			AST __t1424 = _t;
 			AST tmp357_AST_in = (AST)_t;
 			match(_t,COLLATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1413;
+			_t = __t1424;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPARE:
 		{
-			AST __t1414 = _t;
+			AST __t1425 = _t;
 			AST tmp358_AST_in = (AST)_t;
 			match(_t,COMPARE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1414;
+			_t = __t1425;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONNECTED:
 		{
-			AST __t1415 = _t;
+			AST __t1426 = _t;
 			AST tmp359_AST_in = (AST)_t;
 			match(_t,CONNECTED);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1415;
+			_t = __t1426;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COUNTOF:
 		{
-			AST __t1416 = _t;
+			AST __t1427 = _t;
 			AST tmp360_AST_in = (AST)_t;
 			match(_t,COUNTOF);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1416;
+			_t = __t1427;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTRESULTROW:
 		{
-			AST __t1417 = _t;
+			AST __t1428 = _t;
 			AST tmp361_AST_in = (AST)_t;
 			match(_t,CURRENTRESULTROW);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1417;
+			_t = __t1428;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST __t1418 = _t;
+			AST __t1429 = _t;
 			AST tmp362_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1418;
+			_t = __t1429;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST __t1419 = _t;
+			AST __t1430 = _t;
 			AST tmp363_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1419;
+			_t = __t1430;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST __t1420 = _t;
+			AST __t1431 = _t;
 			AST tmp364_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1420;
+			_t = __t1431;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DAY:
 		{
-			AST __t1421 = _t;
+			AST __t1432 = _t;
 			AST tmp365_AST_in = (AST)_t;
 			match(_t,DAY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1421;
+			_t = __t1432;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBCODEPAGE:
 		{
-			AST __t1422 = _t;
+			AST __t1433 = _t;
 			AST tmp366_AST_in = (AST)_t;
 			match(_t,DBCODEPAGE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1422;
+			_t = __t1433;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBCOLLATION:
 		{
-			AST __t1423 = _t;
+			AST __t1434 = _t;
 			AST tmp367_AST_in = (AST)_t;
 			match(_t,DBCOLLATION);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1423;
+			_t = __t1434;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBPARAM:
 		{
-			AST __t1424 = _t;
+			AST __t1435 = _t;
 			AST tmp368_AST_in = (AST)_t;
 			match(_t,DBPARAM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1424;
+			_t = __t1435;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBRESTRICTIONS:
 		{
-			AST __t1425 = _t;
+			AST __t1436 = _t;
 			AST tmp369_AST_in = (AST)_t;
 			match(_t,DBRESTRICTIONS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1425;
+			_t = __t1436;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBTASKID:
 		{
-			AST __t1426 = _t;
+			AST __t1437 = _t;
 			AST tmp370_AST_in = (AST)_t;
 			match(_t,DBTASKID);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1426;
+			_t = __t1437;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBTYPE:
 		{
-			AST __t1427 = _t;
+			AST __t1438 = _t;
 			AST tmp371_AST_in = (AST)_t;
 			match(_t,DBTYPE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1427;
+			_t = __t1438;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBVERSION:
 		{
-			AST __t1428 = _t;
+			AST __t1439 = _t;
 			AST tmp372_AST_in = (AST)_t;
 			match(_t,DBVERSION);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1428;
+			_t = __t1439;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST __t1429 = _t;
+			AST __t1440 = _t;
 			AST tmp373_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1429;
+			_t = __t1440;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECRYPT:
 		{
-			AST __t1430 = _t;
+			AST __t1441 = _t;
 			AST tmp374_AST_in = (AST)_t;
 			match(_t,DECRYPT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1430;
+			_t = __t1441;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DYNAMICNEXTVALUE:
 		{
-			AST __t1431 = _t;
+			AST __t1442 = _t;
 			AST tmp375_AST_in = (AST)_t;
 			match(_t,DYNAMICNEXTVALUE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1431;
+			_t = __t1442;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCODE:
 		{
-			AST __t1432 = _t;
+			AST __t1443 = _t;
 			AST tmp376_AST_in = (AST)_t;
 			match(_t,ENCODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1432;
+			_t = __t1443;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ENCRYPT:
 		{
-			AST __t1433 = _t;
+			AST __t1444 = _t;
 			AST tmp377_AST_in = (AST)_t;
 			match(_t,ENCRYPT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1433;
+			_t = __t1444;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXP:
 		{
-			AST __t1434 = _t;
+			AST __t1445 = _t;
 			AST tmp378_AST_in = (AST)_t;
 			match(_t,EXP);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1434;
+			_t = __t1445;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILL:
 		{
-			AST __t1435 = _t;
+			AST __t1446 = _t;
 			AST tmp379_AST_in = (AST)_t;
 			match(_t,FILL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1435;
+			_t = __t1446;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRST:
 		{
-			AST __t1436 = _t;
+			AST __t1447 = _t;
 			AST tmp380_AST_in = (AST)_t;
 			match(_t,FIRST);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1436;
+			_t = __t1447;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRSTOF:
 		{
-			AST __t1437 = _t;
+			AST __t1448 = _t;
 			AST tmp381_AST_in = (AST)_t;
 			match(_t,FIRSTOF);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1437;
+			_t = __t1448;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GENERATEPBEKEY:
 		{
-			AST __t1438 = _t;
+			AST __t1449 = _t;
 			AST tmp382_AST_in = (AST)_t;
 			match(_t,GENERATEPBEKEY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1438;
+			_t = __t1449;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBITS:
 		{
-			AST __t1439 = _t;
+			AST __t1450 = _t;
 			AST tmp383_AST_in = (AST)_t;
 			match(_t,GETBITS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1439;
+			_t = __t1450;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTE:
 		{
-			AST __t1440 = _t;
+			AST __t1451 = _t;
 			AST tmp384_AST_in = (AST)_t;
 			match(_t,GETBYTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1440;
+			_t = __t1451;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTEORDER:
 		{
-			AST __t1441 = _t;
+			AST __t1452 = _t;
 			AST tmp385_AST_in = (AST)_t;
 			match(_t,GETBYTEORDER);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1441;
+			_t = __t1452;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETBYTES:
 		{
-			AST __t1442 = _t;
+			AST __t1453 = _t;
 			AST tmp386_AST_in = (AST)_t;
 			match(_t,GETBYTES);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1442;
+			_t = __t1453;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCOLLATIONS:
 		{
-			AST __t1443 = _t;
+			AST __t1454 = _t;
 			AST tmp387_AST_in = (AST)_t;
 			match(_t,GETCOLLATIONS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1443;
+			_t = __t1454;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETDOUBLE:
 		{
-			AST __t1444 = _t;
+			AST __t1455 = _t;
 			AST tmp388_AST_in = (AST)_t;
 			match(_t,GETDOUBLE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1444;
+			_t = __t1455;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETFLOAT:
 		{
-			AST __t1445 = _t;
+			AST __t1456 = _t;
 			AST tmp389_AST_in = (AST)_t;
 			match(_t,GETFLOAT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1445;
+			_t = __t1456;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLICENSE:
 		{
-			AST __t1446 = _t;
+			AST __t1457 = _t;
 			AST tmp390_AST_in = (AST)_t;
 			match(_t,GETLICENSE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1446;
+			_t = __t1457;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETLONG:
 		{
-			AST __t1447 = _t;
+			AST __t1458 = _t;
 			AST tmp391_AST_in = (AST)_t;
 			match(_t,GETLONG);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1447;
+			_t = __t1458;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETPOINTERVALUE:
 		{
-			AST __t1448 = _t;
+			AST __t1459 = _t;
 			AST tmp392_AST_in = (AST)_t;
 			match(_t,GETPOINTERVALUE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1448;
+			_t = __t1459;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSHORT:
 		{
-			AST __t1449 = _t;
+			AST __t1460 = _t;
 			AST tmp393_AST_in = (AST)_t;
 			match(_t,GETSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1449;
+			_t = __t1460;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSIZE:
 		{
-			AST __t1450 = _t;
+			AST __t1461 = _t;
 			AST tmp394_AST_in = (AST)_t;
 			match(_t,GETSIZE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1450;
+			_t = __t1461;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETSTRING:
 		{
-			AST __t1451 = _t;
+			AST __t1462 = _t;
 			AST tmp395_AST_in = (AST)_t;
 			match(_t,GETSTRING);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1451;
+			_t = __t1462;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETUNSIGNEDSHORT:
 		{
-			AST __t1452 = _t;
+			AST __t1463 = _t;
 			AST tmp396_AST_in = (AST)_t;
 			match(_t,GETUNSIGNEDSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1452;
+			_t = __t1463;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HEXDECODE:
 		{
-			AST __t1453 = _t;
+			AST __t1464 = _t;
 			AST tmp397_AST_in = (AST)_t;
 			match(_t,HEXDECODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1453;
+			_t = __t1464;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HEXENCODE:
 		{
-			AST __t1454 = _t;
+			AST __t1465 = _t;
 			AST tmp398_AST_in = (AST)_t;
 			match(_t,HEXENCODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1454;
+			_t = __t1465;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INDEX:
 		{
-			AST __t1455 = _t;
+			AST __t1466 = _t;
 			AST tmp399_AST_in = (AST)_t;
 			match(_t,INDEX);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1455;
+			_t = __t1466;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST __t1456 = _t;
+			AST __t1467 = _t;
 			AST tmp400_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1456;
+			_t = __t1467;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTERVAL:
 		{
-			AST __t1457 = _t;
+			AST __t1468 = _t;
 			AST tmp401_AST_in = (AST)_t;
 			match(_t,INTERVAL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1457;
+			_t = __t1468;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCODEPAGEFIXED:
 		{
-			AST __t1458 = _t;
+			AST __t1469 = _t;
 			AST tmp402_AST_in = (AST)_t;
 			match(_t,ISCODEPAGEFIXED);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1458;
+			_t = __t1469;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISCOLUMNCODEPAGE:
 		{
-			AST __t1459 = _t;
+			AST __t1470 = _t;
 			AST tmp403_AST_in = (AST)_t;
 			match(_t,ISCOLUMNCODEPAGE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1459;
+			_t = __t1470;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISLEADBYTE:
 		{
-			AST __t1460 = _t;
+			AST __t1471 = _t;
 			AST tmp404_AST_in = (AST)_t;
 			match(_t,ISLEADBYTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1460;
+			_t = __t1471;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISODATE:
 		{
-			AST __t1461 = _t;
+			AST __t1472 = _t;
 			AST tmp405_AST_in = (AST)_t;
 			match(_t,ISODATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1461;
+			_t = __t1472;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KBLABEL:
 		{
-			AST __t1462 = _t;
+			AST __t1473 = _t;
 			AST tmp406_AST_in = (AST)_t;
 			match(_t,KBLABEL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1462;
+			_t = __t1473;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYCODE:
 		{
-			AST __t1463 = _t;
+			AST __t1474 = _t;
 			AST tmp407_AST_in = (AST)_t;
 			match(_t,KEYCODE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1463;
+			_t = __t1474;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYFUNCTION:
 		{
-			AST __t1464 = _t;
+			AST __t1475 = _t;
 			AST tmp408_AST_in = (AST)_t;
 			match(_t,KEYFUNCTION);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1464;
+			_t = __t1475;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYLABEL:
 		{
-			AST __t1465 = _t;
+			AST __t1476 = _t;
 			AST tmp409_AST_in = (AST)_t;
 			match(_t,KEYLABEL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1465;
+			_t = __t1476;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYWORD:
 		{
-			AST __t1466 = _t;
+			AST __t1477 = _t;
 			AST tmp410_AST_in = (AST)_t;
 			match(_t,KEYWORD);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1466;
+			_t = __t1477;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case KEYWORDALL:
 		{
-			AST __t1467 = _t;
+			AST __t1478 = _t;
 			AST tmp411_AST_in = (AST)_t;
 			match(_t,KEYWORDALL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1467;
+			_t = __t1478;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LAST:
 		{
-			AST __t1468 = _t;
+			AST __t1479 = _t;
 			AST tmp412_AST_in = (AST)_t;
 			match(_t,LAST);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1468;
+			_t = __t1479;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTOF:
 		{
-			AST __t1469 = _t;
+			AST __t1480 = _t;
 			AST tmp413_AST_in = (AST)_t;
 			match(_t,LASTOF);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1469;
+			_t = __t1480;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LC:
 		{
-			AST __t1470 = _t;
+			AST __t1481 = _t;
 			AST tmp414_AST_in = (AST)_t;
 			match(_t,LC);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1470;
+			_t = __t1481;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTTRIM:
 		{
-			AST __t1471 = _t;
+			AST __t1482 = _t;
 			AST tmp415_AST_in = (AST)_t;
 			match(_t,LEFTTRIM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1471;
+			_t = __t1482;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LIBRARY:
 		{
-			AST __t1472 = _t;
+			AST __t1483 = _t;
 			AST tmp416_AST_in = (AST)_t;
 			match(_t,LIBRARY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1472;
+			_t = __t1483;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTEVENTS:
 		{
-			AST __t1473 = _t;
+			AST __t1484 = _t;
 			AST tmp417_AST_in = (AST)_t;
 			match(_t,LISTEVENTS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1473;
+			_t = __t1484;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTQUERYATTRS:
 		{
-			AST __t1474 = _t;
+			AST __t1485 = _t;
 			AST tmp418_AST_in = (AST)_t;
 			match(_t,LISTQUERYATTRS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1474;
+			_t = __t1485;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTSETATTRS:
 		{
-			AST __t1475 = _t;
+			AST __t1486 = _t;
 			AST tmp419_AST_in = (AST)_t;
 			match(_t,LISTSETATTRS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1475;
+			_t = __t1486;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LISTWIDGETS:
 		{
-			AST __t1476 = _t;
+			AST __t1487 = _t;
 			AST tmp420_AST_in = (AST)_t;
 			match(_t,LISTWIDGETS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1476;
+			_t = __t1487;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOADPICTURE:
 		{
-			AST __t1477 = _t;
+			AST __t1488 = _t;
 			AST tmp421_AST_in = (AST)_t;
 			match(_t,LOADPICTURE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1477;
+			_t = __t1488;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOG:
 		{
-			AST __t1478 = _t;
+			AST __t1489 = _t;
 			AST tmp422_AST_in = (AST)_t;
 			match(_t,LOG);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1478;
+			_t = __t1489;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST __t1479 = _t;
+			AST __t1490 = _t;
 			AST tmp423_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1479;
+			_t = __t1490;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOOKUP:
 		{
-			AST __t1480 = _t;
+			AST __t1491 = _t;
 			AST tmp424_AST_in = (AST)_t;
 			match(_t,LOOKUP);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1480;
+			_t = __t1491;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MAXIMUM:
 		{
-			AST __t1481 = _t;
+			AST __t1492 = _t;
 			AST tmp425_AST_in = (AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1481;
+			_t = __t1492;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MD5DIGEST:
 		{
-			AST __t1482 = _t;
+			AST __t1493 = _t;
 			AST tmp426_AST_in = (AST)_t;
 			match(_t,MD5DIGEST);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1482;
+			_t = __t1493;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMBER:
 		{
-			AST __t1483 = _t;
+			AST __t1494 = _t;
 			AST tmp427_AST_in = (AST)_t;
 			match(_t,MEMBER);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1483;
+			_t = __t1494;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MINIMUM:
 		{
-			AST __t1484 = _t;
+			AST __t1495 = _t;
 			AST tmp428_AST_in = (AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1484;
+			_t = __t1495;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MONTH:
 		{
-			AST __t1485 = _t;
+			AST __t1496 = _t;
 			AST tmp429_AST_in = (AST)_t;
 			match(_t,MONTH);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1485;
+			_t = __t1496;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NORMALIZE:
 		{
-			AST __t1486 = _t;
+			AST __t1497 = _t;
 			AST tmp430_AST_in = (AST)_t;
 			match(_t,NORMALIZE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1486;
+			_t = __t1497;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMENTRIES:
 		{
-			AST __t1487 = _t;
+			AST __t1498 = _t;
 			AST tmp431_AST_in = (AST)_t;
 			match(_t,NUMENTRIES);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1487;
+			_t = __t1498;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMRESULTS:
 		{
-			AST __t1488 = _t;
+			AST __t1499 = _t;
 			AST tmp432_AST_in = (AST)_t;
 			match(_t,NUMRESULTS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1488;
+			_t = __t1499;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSGETENV:
 		{
-			AST __t1489 = _t;
+			AST __t1500 = _t;
 			AST tmp433_AST_in = (AST)_t;
 			match(_t,OSGETENV);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1489;
+			_t = __t1500;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PDBNAME:
 		{
-			AST __t1490 = _t;
+			AST __t1501 = _t;
 			AST tmp434_AST_in = (AST)_t;
 			match(_t,PDBNAME);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1490;
+			_t = __t1501;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROGRAMNAME:
 		{
-			AST __t1491 = _t;
+			AST __t1502 = _t;
 			AST tmp435_AST_in = (AST)_t;
 			match(_t,PROGRAMNAME);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1491;
+			_t = __t1502;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERYOFFEND:
 		{
-			AST __t1492 = _t;
+			AST __t1503 = _t;
 			AST tmp436_AST_in = (AST)_t;
 			match(_t,QUERYOFFEND);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1492;
+			_t = __t1503;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUOTER:
 		{
-			AST __t1493 = _t;
+			AST __t1504 = _t;
 			AST tmp437_AST_in = (AST)_t;
 			match(_t,QUOTER);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1493;
+			_t = __t1504;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RINDEX:
 		{
-			AST __t1494 = _t;
+			AST __t1505 = _t;
 			AST tmp438_AST_in = (AST)_t;
 			match(_t,RINDEX);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1494;
+			_t = __t1505;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RANDOM:
 		{
-			AST __t1495 = _t;
+			AST __t1506 = _t;
 			AST tmp439_AST_in = (AST)_t;
 			match(_t,RANDOM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1495;
+			_t = __t1506;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REPLACE:
 		{
-			AST __t1496 = _t;
+			AST __t1507 = _t;
 			AST tmp440_AST_in = (AST)_t;
 			match(_t,REPLACE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1496;
+			_t = __t1507;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RGBVALUE:
 		{
-			AST __t1497 = _t;
+			AST __t1508 = _t;
 			AST tmp441_AST_in = (AST)_t;
 			match(_t,RGBVALUE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1497;
+			_t = __t1508;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTTRIM:
 		{
-			AST __t1498 = _t;
+			AST __t1509 = _t;
 			AST tmp442_AST_in = (AST)_t;
 			match(_t,RIGHTTRIM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1498;
+			_t = __t1509;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROUND:
 		{
-			AST __t1499 = _t;
+			AST __t1510 = _t;
 			AST tmp443_AST_in = (AST)_t;
 			match(_t,ROUND);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1499;
+			_t = __t1510;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SDBNAME:
 		{
-			AST __t1500 = _t;
+			AST __t1511 = _t;
 			AST tmp444_AST_in = (AST)_t;
 			match(_t,SDBNAME);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1500;
+			_t = __t1511;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SEARCH:
 		{
-			AST __t1501 = _t;
+			AST __t1512 = _t;
 			AST tmp445_AST_in = (AST)_t;
 			match(_t,SEARCH);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1501;
+			_t = __t1512;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETDBCLIENT:
 		{
-			AST __t1502 = _t;
+			AST __t1513 = _t;
 			AST tmp446_AST_in = (AST)_t;
 			match(_t,SETDBCLIENT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1502;
+			_t = __t1513;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETUSERID:
 		{
-			AST __t1503 = _t;
+			AST __t1514 = _t;
 			AST tmp447_AST_in = (AST)_t;
 			match(_t,SETUSERID);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1503;
+			_t = __t1514;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHA1DIGEST:
 		{
-			AST __t1504 = _t;
+			AST __t1515 = _t;
 			AST tmp448_AST_in = (AST)_t;
 			match(_t,SHA1DIGEST);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1504;
+			_t = __t1515;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SQRT:
 		{
-			AST __t1505 = _t;
+			AST __t1516 = _t;
 			AST tmp449_AST_in = (AST)_t;
 			match(_t,SQRT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1505;
+			_t = __t1516;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SSLSERVERNAME:
 		{
-			AST __t1506 = _t;
+			AST __t1517 = _t;
 			AST tmp450_AST_in = (AST)_t;
 			match(_t,SSLSERVERNAME);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1506;
+			_t = __t1517;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STRING:
 		{
-			AST __t1507 = _t;
+			AST __t1518 = _t;
 			AST tmp451_AST_in = (AST)_t;
 			match(_t,STRING);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1507;
+			_t = __t1518;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBSTITUTE:
 		{
-			AST __t1508 = _t;
+			AST __t1519 = _t;
 			AST tmp452_AST_in = (AST)_t;
 			match(_t,SUBSTITUTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1508;
+			_t = __t1519;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOROWID:
 		{
-			AST __t1509 = _t;
+			AST __t1520 = _t;
 			AST tmp453_AST_in = (AST)_t;
 			match(_t,TOROWID);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1509;
+			_t = __t1520;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRIM:
 		{
-			AST __t1510 = _t;
+			AST __t1521 = _t;
 			AST tmp454_AST_in = (AST)_t;
 			match(_t,TRIM);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1510;
+			_t = __t1521;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRUNCATE:
 		{
-			AST __t1511 = _t;
+			AST __t1522 = _t;
 			AST tmp455_AST_in = (AST)_t;
 			match(_t,TRUNCATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1511;
+			_t = __t1522;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TYPEOF:
 		{
-			AST __t1512 = _t;
+			AST __t1523 = _t;
 			AST tmp456_AST_in = (AST)_t;
 			match(_t,TYPEOF);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1512;
+			_t = __t1523;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDEVENT:
 		{
-			AST __t1513 = _t;
+			AST __t1524 = _t;
 			AST tmp457_AST_in = (AST)_t;
 			match(_t,VALIDEVENT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1513;
+			_t = __t1524;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDHANDLE:
 		{
-			AST __t1514 = _t;
+			AST __t1525 = _t;
 			AST tmp458_AST_in = (AST)_t;
 			match(_t,VALIDHANDLE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1514;
+			_t = __t1525;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case VALIDOBJECT:
 		{
-			AST __t1515 = _t;
+			AST __t1526 = _t;
 			AST tmp459_AST_in = (AST)_t;
 			match(_t,VALIDOBJECT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1515;
+			_t = __t1526;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEEKDAY:
 		{
-			AST __t1516 = _t;
+			AST __t1527 = _t;
 			AST tmp460_AST_in = (AST)_t;
 			match(_t,WEEKDAY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1516;
+			_t = __t1527;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST __t1517 = _t;
+			AST __t1528 = _t;
 			AST tmp461_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1517;
+			_t = __t1528;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YEAR:
 		{
-			AST __t1518 = _t;
+			AST __t1529 = _t;
 			AST tmp462_AST_in = (AST)_t;
 			match(_t,YEAR);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1518;
+			_t = __t1529;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -6121,145 +6113,145 @@
 		switch ( _t.getType()) {
 		case AMBIGUOUS:
 		{
-			AST __t1520 = _t;
+			AST __t1531 = _t;
 			AST tmp504_AST_in = (AST)_t;
 			match(_t,AMBIGUOUS);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1520;
+			_t = __t1531;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AVAILABLE:
 		{
-			AST __t1521 = _t;
+			AST __t1532 = _t;
 			AST tmp505_AST_in = (AST)_t;
 			match(_t,AVAILABLE);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1521;
+			_t = __t1532;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTCHANGED:
 		{
-			AST __t1522 = _t;
+			AST __t1533 = _t;
 			AST tmp506_AST_in = (AST)_t;
 			match(_t,CURRENTCHANGED);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1522;
+			_t = __t1533;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCEMODIFIED:
 		{
-			AST __t1523 = _t;
+			AST __t1534 = _t;
 			AST tmp507_AST_in = (AST)_t;
 			match(_t,DATASOURCEMODIFIED);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1523;
+			_t = __t1534;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERROR:
 		{
-			AST __t1524 = _t;
+			AST __t1535 = _t;
 			AST tmp508_AST_in = (AST)_t;
 			match(_t,ERROR);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1524;
+			_t = __t1535;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOCKED:
 		{
-			AST __t1525 = _t;
+			AST __t1536 = _t;
 			AST tmp509_AST_in = (AST)_t;
 			match(_t,LOCKED);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1525;
+			_t = __t1536;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEW:
 		{
-			AST __t1526 = _t;
+			AST __t1537 = _t;
 			AST tmp510_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1526;
+			_t = __t1537;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECID:
 		{
-			AST __t1527 = _t;
+			AST __t1538 = _t;
 			AST tmp511_AST_in = (AST)_t;
 			match(_t,RECID);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1527;
+			_t = __t1538;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECORDLENGTH:
 		{
-			AST __t1528 = _t;
+			AST __t1539 = _t;
 			AST tmp512_AST_in = (AST)_t;
 			match(_t,RECORDLENGTH);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1528;
+			_t = __t1539;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case REJECTED:
 		{
-			AST __t1529 = _t;
+			AST __t1540 = _t;
 			AST tmp513_AST_in = (AST)_t;
 			match(_t,REJECTED);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1529;
+			_t = __t1540;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST __t1530 = _t;
+			AST __t1541 = _t;
 			AST tmp514_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1530;
+			_t = __t1541;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWSTATE:
 		{
-			AST __t1531 = _t;
+			AST __t1542 = _t;
 			AST tmp515_AST_in = (AST)_t;
 			match(_t,ROWSTATE);
 			_t = _t.getFirstChild();
 			recordfunargs(_t);
 			_t = _retTree;
-			_t = __t1531;
+			_t = __t1542;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -7236,7 +7228,7 @@
 		}
 		}
 		{
-		_loop1541:
+		_loop1552:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
@@ -7247,7 +7239,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1541;
+				break _loop1552;
 			}
 			
 		} while (true);
@@ -7583,7 +7575,7 @@
 		
 		AST array_subscript_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1587 = _t;
+		AST __t1598 = _t;
 		AST tmp614_AST_in = (AST)_t;
 		match(_t,Array_subscript);
 		_t = _t.getFirstChild();
@@ -7617,7 +7609,7 @@
 		AST tmp617_AST_in = (AST)_t;
 		match(_t,RIGHTBRACE);
 		_t = _t.getNextSibling();
-		_t = __t1587;
+		_t = __t1598;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7626,7 +7618,7 @@
 		
 		AST method_param_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1590 = _t;
+		AST __t1601 = _t;
 		AST tmp618_AST_in = (AST)_t;
 		match(_t,Method_param_list);
 		_t = _t.getFirstChild();
@@ -7658,7 +7650,7 @@
 		}
 		}
 		{
-		_loop1594:
+		_loop1605:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
@@ -7691,7 +7683,7 @@
 				}
 			}
 			else {
-				break _loop1594;
+				break _loop1605;
 			}
 			
 		} while (true);
@@ -7699,7 +7691,7 @@
 		AST tmp621_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1590;
+		_t = __t1601;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -7937,14 +7929,14 @@
 		AST frame_ref_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST f = null;
 		
-		AST __t819 = _t;
+		AST __t830 = _t;
 		AST tmp648_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getFirstChild();
 		f = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		_t = __t819;
+		_t = __t830;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.frameRef(f);
@@ -8848,169 +8840,169 @@
 		switch ( _t.getType()) {
 		case FIXCODEPAGE:
 		{
-			AST __t1385 = _t;
+			AST __t1396 = _t;
 			AST tmp661_AST_in = (AST)_t;
 			match(_t,FIXCODEPAGE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1385;
+			_t = __t1396;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OVERLAY:
 		{
-			AST __t1386 = _t;
+			AST __t1397 = _t;
 			AST tmp662_AST_in = (AST)_t;
 			match(_t,OVERLAY);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1386;
+			_t = __t1397;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBITS:
 		{
-			AST __t1387 = _t;
+			AST __t1398 = _t;
 			AST tmp663_AST_in = (AST)_t;
 			match(_t,PUTBITS);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1387;
+			_t = __t1398;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBYTE:
 		{
-			AST __t1388 = _t;
+			AST __t1399 = _t;
 			AST tmp664_AST_in = (AST)_t;
 			match(_t,PUTBYTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1388;
+			_t = __t1399;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTBYTES:
 		{
-			AST __t1389 = _t;
+			AST __t1400 = _t;
 			AST tmp665_AST_in = (AST)_t;
 			match(_t,PUTBYTES);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1389;
+			_t = __t1400;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTDOUBLE:
 		{
-			AST __t1390 = _t;
+			AST __t1401 = _t;
 			AST tmp666_AST_in = (AST)_t;
 			match(_t,PUTDOUBLE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1390;
+			_t = __t1401;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTFLOAT:
 		{
-			AST __t1391 = _t;
+			AST __t1402 = _t;
 			AST tmp667_AST_in = (AST)_t;
 			match(_t,PUTFLOAT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1391;
+			_t = __t1402;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTLONG:
 		{
-			AST __t1392 = _t;
+			AST __t1403 = _t;
 			AST tmp668_AST_in = (AST)_t;
 			match(_t,PUTLONG);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1392;
+			_t = __t1403;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSHORT:
 		{
-			AST __t1393 = _t;
+			AST __t1404 = _t;
 			AST tmp669_AST_in = (AST)_t;
 			match(_t,PUTSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1393;
+			_t = __t1404;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTSTRING:
 		{
-			AST __t1394 = _t;
+			AST __t1405 = _t;
 			AST tmp670_AST_in = (AST)_t;
 			match(_t,PUTSTRING);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1394;
+			_t = __t1405;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUTUNSIGNEDSHORT:
 		{
-			AST __t1395 = _t;
+			AST __t1406 = _t;
 			AST tmp671_AST_in = (AST)_t;
 			match(_t,PUTUNSIGNEDSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1395;
+			_t = __t1406;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETBYTEORDER:
 		{
-			AST __t1396 = _t;
+			AST __t1407 = _t;
 			AST tmp672_AST_in = (AST)_t;
 			match(_t,SETBYTEORDER);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1396;
+			_t = __t1407;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETPOINTERVALUE:
 		{
-			AST __t1397 = _t;
+			AST __t1408 = _t;
 			AST tmp673_AST_in = (AST)_t;
 			match(_t,SETPOINTERVALUE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1397;
+			_t = __t1408;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SETSIZE:
 		{
-			AST __t1398 = _t;
+			AST __t1409 = _t;
 			AST tmp674_AST_in = (AST)_t;
 			match(_t,SETSIZE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t1398;
+			_t = __t1409;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10164,20 +10156,20 @@
 		
 		}
 		{
-		_loop1060:
+		_loop1071:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LEFT:
 			{
-				AST __t1052 = _t;
+				AST __t1063 = _t;
 				AST tmp762_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
 				AST tmp763_AST_in = (AST)_t;
 				match(_t,OUTERJOIN);
 				_t = _t.getNextSibling();
-				_t = __t1052;
+				_t = __t1063;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10190,19 +10182,19 @@
 			}
 			case OF:
 			{
-				AST __t1053 = _t;
+				AST __t1064 = _t;
 				AST tmp765_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.REF);
 				_t = _retTree;
-				_t = __t1053;
+				_t = __t1064;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WHERE:
 			{
-				AST __t1054 = _t;
+				AST __t1065 = _t;
 				AST tmp766_AST_in = (AST)_t;
 				match(_t,WHERE);
 				_t = _t.getFirstChild();
@@ -10219,33 +10211,33 @@
 				}
 				
 				}
-				_t = __t1054;
+				_t = __t1065;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEINDEX:
 			{
-				AST __t1056 = _t;
+				AST __t1067 = _t;
 				AST tmp767_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
 				AST tmp768_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				_t = __t1056;
+				_t = __t1067;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USING:
 			{
-				AST __t1057 = _t;
+				AST __t1068 = _t;
 				AST tmp769_AST_in = (AST)_t;
 				match(_t,USING);
 				_t = _t.getFirstChild();
 				fld1(_t,CQ.SYMBOL);
 				_t = _retTree;
 				{
-				_loop1059:
+				_loop1070:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==AND)) {
@@ -10256,12 +10248,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1059;
+						break _loop1070;
 					}
 					
 				} while (true);
 				}
-				_t = __t1057;
+				_t = __t1068;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10296,7 +10288,7 @@
 			}
 			default:
 			{
-				break _loop1060;
+				break _loop1071;
 			}
 			}
 		} while (true);
@@ -10496,7 +10488,7 @@
 		switch ( _t.getType()) {
 		case VALUE:
 		{
-			AST __t1550 = _t;
+			AST __t1561 = _t;
 			AST tmp782_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
@@ -10508,7 +10500,7 @@
 			AST tmp784_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1550;
+			_t = __t1561;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10576,12 +10568,187 @@
 		_retTree = _t;
 	}
 	
+	public final void classstate(AST _t) throws RecognitionException {
+		
+		AST classstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		AST c = null;
+		
+		AST __t229 = _t;
+		c = _t==ASTNULL ? null :(AST)_t;
+		match(_t,CLASS);
+		_t = _t.getFirstChild();
+		if ( inputState.guessing==0 ) {
+			action.classState(c);
+		}
+		AST tmp790_AST_in = (AST)_t;
+		match(_t,TYPE_NAME);
+		_t = _t.getNextSibling();
+		{
+		if (_t==null) _t=ASTNULL;
+		switch ( _t.getType()) {
+		case INHERITS:
+		{
+			AST __t231 = _t;
+			AST tmp791_AST_in = (AST)_t;
+			match(_t,INHERITS);
+			_t = _t.getFirstChild();
+			AST tmp792_AST_in = (AST)_t;
+			match(_t,TYPE_NAME);
+			_t = _t.getNextSibling();
+			_t = __t231;
+			_t = _t.getNextSibling();
+			break;
+		}
+		case PERIOD:
+		case LEXCOLON:
+		case FINAL:
+		case IMPLEMENTS:
+		{
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(_t);
+		}
+		}
+		}
+		{
+		if (_t==null) _t=ASTNULL;
+		switch ( _t.getType()) {
+		case IMPLEMENTS:
+		{
+			AST __t233 = _t;
+			AST tmp793_AST_in = (AST)_t;
+			match(_t,IMPLEMENTS);
+			_t = _t.getFirstChild();
+			AST tmp794_AST_in = (AST)_t;
+			match(_t,TYPE_NAME);
+			_t = _t.getNextSibling();
+			{
+			_loop235:
+			do {
+				if (_t==null) _t=ASTNULL;
+				if ((_t.getType()==COMMA)) {
+					AST tmp795_AST_in = (AST)_t;
+					match(_t,COMMA);
+					_t = _t.getNextSibling();
+					AST tmp796_AST_in = (AST)_t;
+					match(_t,TYPE_NAME);
+					_t = _t.getNextSibling();
+				}
+				else {
+					break _loop235;
+				}
+				
+			} while (true);
+			}
+			_t = __t233;
+			_t = _t.getNextSibling();
+			break;
+		}
+		case PERIOD:
+		case LEXCOLON:
+		case FINAL:
+		{
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(_t);
+		}
+		}
+		}
+		{
+		if (_t==null) _t=ASTNULL;
+		switch ( _t.getType()) {
+		case FINAL:
+		{
+			AST tmp797_AST_in = (AST)_t;
+			match(_t,FINAL);
+			_t = _t.getNextSibling();
+			break;
+		}
+		case PERIOD:
+		case LEXCOLON:
+		{
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(_t);
+		}
+		}
+		}
+		block_colon(_t);
+		_t = _retTree;
+		code_block(_t);
+		_t = _retTree;
+		AST __t237 = _t;
+		AST tmp798_AST_in = (AST)_t;
+		match(_t,END);
+		_t = _t.getFirstChild();
+		{
+		if (_t==null) _t=ASTNULL;
+		switch ( _t.getType()) {
+		case CLASS:
+		{
+			AST tmp799_AST_in = (AST)_t;
+			match(_t,CLASS);
+			_t = _t.getNextSibling();
+			break;
+		}
+		case 3:
+		{
+			break;
+		}
+		default:
+		{
+			throw new NoViableAltException(_t);
+		}
+		}
+		}
+		_t = __t237;
+		_t = _t.getNextSibling();
+		state_end(_t);
+		_t = _retTree;
+		_t = __t229;
+		_t = _t.getNextSibling();
+		_retTree = _t;
+	}
+	
+	public final void code_block(AST _t) throws RecognitionException {
+		
+		AST code_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
+		
+		AST __t1379 = _t;
+		AST tmp800_AST_in = (AST)_t;
+		match(_t,Code_block);
+		_t = _t.getFirstChild();
+		{
+		_loop1381:
+		do {
+			if (_t==null) _t=ASTNULL;
+			if ((_tokenSet_0.member(_t.getType()))) {
+				blockorstate(_t);
+				_t = _retTree;
+			}
+			else {
+				break _loop1381;
+			}
+			
+		} while (true);
+		}
+		_t = __t1379;
+		_t = _t.getNextSibling();
+		_retTree = _t;
+	}
+	
 	public final void clearstate(AST _t) throws RecognitionException {
 		
 		AST clearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST c = null;
 		
-		AST __t229 = _t;
+		AST __t240 = _t;
 		c = _t==ASTNULL ? null :(AST)_t;
 		match(_t,CLEAR);
 		_t = _t.getFirstChild();
@@ -10612,7 +10779,7 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp790_AST_in = (AST)_t;
+			AST tmp801_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
@@ -10634,7 +10801,7 @@
 		switch ( _t.getType()) {
 		case NOPAUSE:
 		{
-			AST tmp791_AST_in = (AST)_t;
+			AST tmp802_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
@@ -10655,7 +10822,7 @@
 		if ( inputState.guessing==0 ) {
 			action.clearState(c);
 		}
-		_t = __t229;
+		_t = __t240;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10664,14 +10831,14 @@
 		
 		AST closestoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t234 = _t;
-		AST tmp792_AST_in = (AST)_t;
+		AST __t245 = _t;
+		AST tmp803_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp793_AST_in = (AST)_t;
+		AST tmp804_AST_in = (AST)_t;
 		match(_t,STOREDPROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp794_AST_in = (AST)_t;
+		AST tmp805_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -10679,16 +10846,16 @@
 		switch ( _t.getType()) {
 		case EQUAL:
 		{
-			AST __t236 = _t;
-			AST tmp795_AST_in = (AST)_t;
+			AST __t247 = _t;
+			AST tmp806_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp796_AST_in = (AST)_t;
+			AST tmp807_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
-			_t = __t236;
+			_t = __t247;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10709,19 +10876,19 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t238 = _t;
-			AST tmp797_AST_in = (AST)_t;
+			AST __t249 = _t;
+			AST tmp808_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
-			AST tmp798_AST_in = (AST)_t;
+			AST tmp809_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp799_AST_in = (AST)_t;
+			AST tmp810_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.REF);
 			_t = _retTree;
-			_t = __t238;
+			_t = __t249;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -10738,7 +10905,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t234;
+		_t = __t245;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10749,7 +10916,7 @@
 		AST head = null;
 		AST fi = null;
 		
-		AST __t240 = _t;
+		AST __t251 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,COLOR);
 		_t = _t.getFirstChild();
@@ -10767,25 +10934,25 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST __t243 = _t;
-				AST tmp800_AST_in = (AST)_t;
+				AST __t254 = _t;
+				AST tmp811_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t243;
+				_t = __t254;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROMPT:
 			{
-				AST __t244 = _t;
-				AST tmp801_AST_in = (AST)_t;
+				AST __t255 = _t;
+				AST tmp812_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t244;
+				_t = __t255;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10800,25 +10967,25 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST __t246 = _t;
-				AST tmp802_AST_in = (AST)_t;
+				AST __t257 = _t;
+				AST tmp813_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t246;
+				_t = __t257;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROMPT:
 			{
-				AST __t247 = _t;
-				AST tmp803_AST_in = (AST)_t;
+				AST __t258 = _t;
+				AST tmp814_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
 				_t = _retTree;
-				_t = __t247;
+				_t = __t258;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10851,11 +11018,11 @@
 		}
 		}
 		{
-		_loop251:
+		_loop262:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t249 = _t;
+				AST __t260 = _t;
 				fi = _t==ASTNULL ? null :(AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
@@ -10883,11 +11050,11 @@
 				}
 				}
 				}
-				_t = __t249;
+				_t = __t260;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop251;
+				break _loop262;
 			}
 			
 		} while (true);
@@ -10917,7 +11084,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t240;
+		_t = __t251;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -10926,25 +11093,25 @@
 		
 		AST formatphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t803 = _t;
-		AST tmp804_AST_in = (AST)_t;
+		AST __t814 = _t;
+		AST tmp815_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
-		int _cnt817=0;
-		_loop817:
+		int _cnt828=0;
+		_loop828:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case AS:
 			{
-				AST __t805 = _t;
-				AST tmp805_AST_in = (AST)_t;
+				AST __t816 = _t;
+				AST tmp816_AST_in = (AST)_t;
 				match(_t,AS);
 				_t = _t.getFirstChild();
 				datatype_var(_t);
 				_t = _retTree;
-				_t = __t805;
+				_t = __t816;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -10956,21 +11123,21 @@
 			}
 			case ATTRSPACE:
 			{
-				AST tmp806_AST_in = (AST)_t;
+				AST tmp817_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp807_AST_in = (AST)_t;
+				AST tmp818_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTORETURN:
 			{
-				AST tmp808_AST_in = (AST)_t;
+				AST tmp819_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -10986,94 +11153,94 @@
 			}
 			case CONTEXTHELPID:
 			{
-				AST __t806 = _t;
-				AST tmp809_AST_in = (AST)_t;
+				AST __t817 = _t;
+				AST tmp820_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t806;
+				_t = __t817;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BLANK:
 			{
-				AST tmp810_AST_in = (AST)_t;
+				AST tmp821_AST_in = (AST)_t;
 				match(_t,BLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLON:
 			{
-				AST __t807 = _t;
-				AST tmp811_AST_in = (AST)_t;
+				AST __t818 = _t;
+				AST tmp822_AST_in = (AST)_t;
 				match(_t,COLON);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t807;
+				_t = __t818;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TO:
 			{
-				AST __t808 = _t;
-				AST tmp812_AST_in = (AST)_t;
+				AST __t819 = _t;
+				AST tmp823_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t808;
+				_t = __t819;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEBLANK:
 			{
-				AST tmp813_AST_in = (AST)_t;
+				AST tmp824_AST_in = (AST)_t;
 				match(_t,DEBLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DISABLEAUTOZAP:
 			{
-				AST tmp814_AST_in = (AST)_t;
+				AST tmp825_AST_in = (AST)_t;
 				match(_t,DISABLEAUTOZAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t809 = _t;
-				AST tmp815_AST_in = (AST)_t;
+				AST __t820 = _t;
+				AST tmp826_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t809;
+				_t = __t820;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FORMAT:
 			{
-				AST __t810 = _t;
-				AST tmp816_AST_in = (AST)_t;
+				AST __t821 = _t;
+				AST tmp827_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t810;
+				_t = __t821;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case HELP:
 			{
-				AST __t811 = _t;
-				AST tmp817_AST_in = (AST)_t;
+				AST __t822 = _t;
+				AST tmp828_AST_in = (AST)_t;
 				match(_t,HELP);
 				_t = _t.getFirstChild();
 				constant(_t);
 				_t = _retTree;
-				_t = __t811;
+				_t = __t822;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -11086,8 +11253,8 @@
 			}
 			case LEXAT:
 			{
-				AST __t812 = _t;
-				AST tmp818_AST_in = (AST)_t;
+				AST __t823 = _t;
+				AST tmp829_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11111,57 +11278,57 @@
 				}
 				}
 				}
-				_t = __t812;
+				_t = __t823;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t814 = _t;
-				AST tmp819_AST_in = (AST)_t;
+				AST __t825 = _t;
+				AST tmp830_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
-				_t = __t814;
+				_t = __t825;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOLABELS:
 			{
-				AST tmp820_AST_in = (AST)_t;
+				AST tmp831_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOTABSTOP:
 			{
-				AST tmp821_AST_in = (AST)_t;
+				AST tmp832_AST_in = (AST)_t;
 				match(_t,NOTABSTOP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case VALIDATE:
 			{
-				AST __t815 = _t;
-				AST tmp822_AST_in = (AST)_t;
+				AST __t826 = _t;
+				AST tmp833_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getFirstChild();
 				funargs(_t);
 				_t = _retTree;
-				_t = __t815;
+				_t = __t826;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WHEN:
 			{
-				AST __t816 = _t;
-				AST tmp823_AST_in = (AST)_t;
+				AST __t827 = _t;
+				AST tmp834_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t816;
+				_t = __t827;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -11173,13 +11340,13 @@
 			}
 			default:
 			{
-				if ( _cnt817>=1 ) { break _loop817; } else {throw new NoViableAltException(_t);}
+				if ( _cnt828>=1 ) { break _loop828; } else {throw new NoViableAltException(_t);}
 			}
 			}
-			_cnt817++;
+			_cnt828++;
 		} while (true);
 		}
-		_t = __t803;
+		_t = __t814;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11188,25 +11355,25 @@
 		
 		AST columnformat_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t254 = _t;
-		AST tmp824_AST_in = (AST)_t;
+		AST __t265 = _t;
+		AST tmp835_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
-		int _cnt271=0;
-		_loop271:
+		int _cnt282=0;
+		_loop282:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case FORMAT:
 			{
-				AST __t256 = _t;
-				AST tmp825_AST_in = (AST)_t;
+				AST __t267 = _t;
+				AST tmp836_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t256;
+				_t = __t267;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -11219,123 +11386,123 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp826_AST_in = (AST)_t;
+				AST tmp837_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNFONT:
 			{
-				AST __t257 = _t;
-				AST tmp827_AST_in = (AST)_t;
+				AST __t268 = _t;
+				AST tmp838_AST_in = (AST)_t;
 				match(_t,COLUMNFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t257;
+				_t = __t268;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNDCOLOR:
 			{
-				AST __t258 = _t;
-				AST tmp828_AST_in = (AST)_t;
+				AST __t269 = _t;
+				AST tmp839_AST_in = (AST)_t;
 				match(_t,COLUMNDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t258;
+				_t = __t269;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNBGCOLOR:
 			{
-				AST __t259 = _t;
-				AST tmp829_AST_in = (AST)_t;
+				AST __t270 = _t;
+				AST tmp840_AST_in = (AST)_t;
 				match(_t,COLUMNBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t259;
+				_t = __t270;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNFGCOLOR:
 			{
-				AST __t260 = _t;
-				AST tmp830_AST_in = (AST)_t;
+				AST __t271 = _t;
+				AST tmp841_AST_in = (AST)_t;
 				match(_t,COLUMNFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t260;
+				_t = __t271;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLUMNPFCOLOR:
 			{
-				AST __t261 = _t;
-				AST tmp831_AST_in = (AST)_t;
+				AST __t272 = _t;
+				AST tmp842_AST_in = (AST)_t;
 				match(_t,COLUMNPFCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t261;
+				_t = __t272;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFONT:
 			{
-				AST __t262 = _t;
-				AST tmp832_AST_in = (AST)_t;
+				AST __t273 = _t;
+				AST tmp843_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t262;
+				_t = __t273;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELDCOLOR:
 			{
-				AST __t263 = _t;
-				AST tmp833_AST_in = (AST)_t;
+				AST __t274 = _t;
+				AST tmp844_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t263;
+				_t = __t274;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELBGCOLOR:
 			{
-				AST __t264 = _t;
-				AST tmp834_AST_in = (AST)_t;
+				AST __t275 = _t;
+				AST tmp845_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t264;
+				_t = __t275;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LABELFGCOLOR:
 			{
-				AST __t265 = _t;
-				AST tmp835_AST_in = (AST)_t;
+				AST __t276 = _t;
+				AST tmp846_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t265;
+				_t = __t276;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LEXAT:
 			{
-				AST __t266 = _t;
-				AST tmp836_AST_in = (AST)_t;
+				AST __t277 = _t;
+				AST tmp847_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11359,58 +11526,58 @@
 				}
 				}
 				}
-				_t = __t266;
+				_t = __t277;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTH:
 			{
-				AST __t268 = _t;
-				AST tmp837_AST_in = (AST)_t;
+				AST __t279 = _t;
+				AST tmp848_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
-				AST tmp838_AST_in = (AST)_t;
+				AST tmp849_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t268;
+				_t = __t279;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTHPIXELS:
 			{
-				AST __t269 = _t;
-				AST tmp839_AST_in = (AST)_t;
+				AST __t280 = _t;
+				AST tmp850_AST_in = (AST)_t;
 				match(_t,WIDTHPIXELS);
 				_t = _t.getFirstChild();
-				AST tmp840_AST_in = (AST)_t;
+				AST tmp851_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t269;
+				_t = __t280;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case WIDTHCHARS:
 			{
-				AST __t270 = _t;
-				AST tmp841_AST_in = (AST)_t;
+				AST __t281 = _t;
+				AST tmp852_AST_in = (AST)_t;
 				match(_t,WIDTHCHARS);
 				_t = _t.getFirstChild();
-				AST tmp842_AST_in = (AST)_t;
+				AST tmp853_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
-				_t = __t270;
+				_t = __t281;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				if ( _cnt271>=1 ) { break _loop271; } else {throw new NoViableAltException(_t);}
+				if ( _cnt282>=1 ) { break _loop282; } else {throw new NoViableAltException(_t);}
 			}
 			}
-			_cnt271++;
+			_cnt282++;
 		} while (true);
 		}
-		_t = __t254;
+		_t = __t265;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11420,7 +11587,7 @@
 		AST constructorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST c = null;
 		
-		AST __t273 = _t;
+		AST __t284 = _t;
 		c = _t==ASTNULL ? null :(AST)_t;
 		match(_t,CONSTRUCTOR);
 		_t = _t.getFirstChild();
@@ -11432,14 +11599,14 @@
 		switch ( _t.getType()) {
 		case PUBLIC:
 		{
-			AST tmp843_AST_in = (AST)_t;
+			AST tmp854_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROTECTED:
 		{
-			AST tmp844_AST_in = (AST)_t;
+			AST tmp855_AST_in = (AST)_t;
 			match(_t,PROTECTED);
 			_t = _t.getNextSibling();
 			break;
@@ -11450,7 +11617,7 @@
 		}
 		}
 		}
-		AST tmp845_AST_in = (AST)_t;
+		AST tmp856_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
 		function_params(_t);
@@ -11459,8 +11626,8 @@
 		_t = _retTree;
 		code_block(_t);
 		_t = _retTree;
-		AST __t275 = _t;
-		AST tmp846_AST_in = (AST)_t;
+		AST __t286 = _t;
+		AST tmp857_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -11468,7 +11635,7 @@
 		switch ( _t.getType()) {
 		case CONSTRUCTOR:
 		{
-			AST tmp847_AST_in = (AST)_t;
+			AST tmp858_AST_in = (AST)_t;
 			match(_t,CONSTRUCTOR);
 			_t = _t.getNextSibling();
 			break;
@@ -11483,14 +11650,14 @@
 		}
 		}
 		}
-		_t = __t275;
+		_t = __t286;
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
 		if ( inputState.guessing==0 ) {
 			action.scopeClose(c);
 		}
-		_t = __t273;
+		_t = __t284;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11500,10 +11667,10 @@
 		AST function_params_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1924 = _t;
-		AST tmp848_AST_in = (AST)_t;
+		AST tmp859_AST_in = (AST)_t;
 		match(_t,Parameter_list);
 		_t = _t.getFirstChild();
-		AST tmp849_AST_in = (AST)_t;
+		AST tmp860_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -11534,7 +11701,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp850_AST_in = (AST)_t;
+				AST tmp861_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				function_param(_t);
@@ -11546,7 +11713,7 @@
 			
 		} while (true);
 		}
-		AST tmp851_AST_in = (AST)_t;
+		AST tmp862_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1924;
@@ -11554,39 +11721,12 @@
 		_retTree = _t;
 	}
 	
-	public final void code_block(AST _t) throws RecognitionException {
-		
-		AST code_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
-		
-		AST __t1368 = _t;
-		AST tmp852_AST_in = (AST)_t;
-		match(_t,Code_block);
-		_t = _t.getFirstChild();
-		{
-		_loop1370:
-		do {
-			if (_t==null) _t=ASTNULL;
-			if ((_tokenSet_0.member(_t.getType()))) {
-				blockorstate(_t);
-				_t = _retTree;
-			}
-			else {
-				break _loop1370;
-			}
-			
-		} while (true);
-		}
-		_t = __t1368;
-		_t = _t.getNextSibling();
-		_retTree = _t;
-	}
-	
 	public final void createstate(AST _t) throws RecognitionException {
 		
 		AST createstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t278 = _t;
-		AST tmp853_AST_in = (AST)_t;
+		AST __t289 = _t;
+		AST tmp863_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -11596,8 +11736,8 @@
 		switch ( _t.getType()) {
 		case USING:
 		{
-			AST __t280 = _t;
-			AST tmp854_AST_in = (AST)_t;
+			AST __t291 = _t;
+			AST tmp864_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -11605,14 +11745,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp855_AST_in = (AST)_t;
+				AST tmp865_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp856_AST_in = (AST)_t;
+				AST tmp866_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -11625,7 +11765,7 @@
 			}
 			expression(_t);
 			_t = _retTree;
-			_t = __t280;
+			_t = __t291;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11646,7 +11786,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp857_AST_in = (AST)_t;
+			AST tmp867_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11664,7 +11804,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t278;
+		_t = __t289;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11680,16 +11820,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t285 = _t;
-			AST tmp858_AST_in = (AST)_t;
+			AST __t296 = _t;
+			AST tmp868_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp859_AST_in = (AST)_t;
+			AST tmp869_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t285;
+			_t = __t296;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11710,7 +11850,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp860_AST_in = (AST)_t;
+			AST tmp870_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11733,11 +11873,11 @@
 		
 		AST createautomationobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t288 = _t;
-		AST tmp861_AST_in = (AST)_t;
+		AST __t299 = _t;
+		AST tmp871_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp862_AST_in = (AST)_t;
+		AST tmp872_AST_in = (AST)_t;
 		match(_t,QSTRING);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -11747,8 +11887,8 @@
 		switch ( _t.getType()) {
 		case CONNECT:
 		{
-			AST __t290 = _t;
-			AST tmp863_AST_in = (AST)_t;
+			AST __t301 = _t;
+			AST tmp873_AST_in = (AST)_t;
 			match(_t,CONNECT);
 			_t = _t.getFirstChild();
 			{
@@ -11756,13 +11896,13 @@
 			switch ( _t.getType()) {
 			case TO:
 			{
-				AST __t292 = _t;
-				AST tmp864_AST_in = (AST)_t;
+				AST __t303 = _t;
+				AST tmp874_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t292;
+				_t = __t303;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -11776,7 +11916,7 @@
 			}
 			}
 			}
-			_t = __t290;
+			_t = __t301;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11797,7 +11937,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp865_AST_in = (AST)_t;
+			AST tmp875_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11815,7 +11955,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t288;
+		_t = __t299;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11824,11 +11964,11 @@
 		
 		AST createbrowsestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t295 = _t;
-		AST tmp866_AST_in = (AST)_t;
+		AST __t306 = _t;
+		AST tmp876_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp867_AST_in = (AST)_t;
+		AST tmp877_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -11838,16 +11978,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t297 = _t;
-			AST tmp868_AST_in = (AST)_t;
+			AST __t308 = _t;
+			AST tmp878_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp869_AST_in = (AST)_t;
+			AST tmp879_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t297;
+			_t = __t308;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -11870,7 +12010,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp870_AST_in = (AST)_t;
+			AST tmp880_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11931,7 +12071,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t295;
+		_t = __t306;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11940,36 +12080,36 @@
 		
 		AST assign_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1629 = _t;
-		AST tmp871_AST_in = (AST)_t;
+		AST __t1640 = _t;
+		AST tmp881_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		{
-		int _cnt1632=0;
-		_loop1632:
+		int _cnt1643=0;
+		_loop1643:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==EQUAL)) {
-				AST __t1631 = _t;
-				AST tmp872_AST_in = (AST)_t;
+				AST __t1642 = _t;
+				AST tmp882_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
-				AST tmp873_AST_in = (AST)_t;
+				AST tmp883_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1631;
+				_t = __t1642;
 				_t = _t.getNextSibling();
 			}
 			else {
-				if ( _cnt1632>=1 ) { break _loop1632; } else {throw new NoViableAltException(_t);}
+				if ( _cnt1643>=1 ) { break _loop1643; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt1632++;
+			_cnt1643++;
 		} while (true);
 		}
-		_t = __t1629;
+		_t = __t1640;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -11979,22 +12119,22 @@
 		AST triggerphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST on = null;
 		
-		AST __t1161 = _t;
-		AST tmp874_AST_in = (AST)_t;
+		AST __t1172 = _t;
+		AST tmp884_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getFirstChild();
 		block_colon(_t);
 		_t = _retTree;
-		AST __t1162 = _t;
-		AST tmp875_AST_in = (AST)_t;
+		AST __t1173 = _t;
+		AST tmp885_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
-		_loop1167:
+		_loop1178:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==ON)) {
-				AST __t1164 = _t;
+				AST __t1175 = _t;
 				on = _t==ASTNULL ? null :(AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
@@ -12008,7 +12148,7 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp876_AST_in = (AST)_t;
+					AST tmp886_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
@@ -12147,7 +12287,7 @@
 				switch ( _t.getType()) {
 				case PERSISTENT:
 				{
-					AST tmp877_AST_in = (AST)_t;
+					AST tmp887_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					runstate(_t);
@@ -12287,19 +12427,19 @@
 				if ( inputState.guessing==0 ) {
 					action.scopeClose(on);
 				}
-				_t = __t1164;
+				_t = __t1175;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1167;
+				break _loop1178;
 			}
 			
 		} while (true);
 		}
-		_t = __t1162;
+		_t = __t1173;
 		_t = _t.getNextSibling();
-		AST __t1168 = _t;
-		AST tmp878_AST_in = (AST)_t;
+		AST __t1179 = _t;
+		AST tmp888_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -12307,7 +12447,7 @@
 		switch ( _t.getType()) {
 		case TRIGGERS:
 		{
-			AST tmp879_AST_in = (AST)_t;
+			AST tmp889_AST_in = (AST)_t;
 			match(_t,TRIGGERS);
 			_t = _t.getNextSibling();
 			break;
@@ -12322,9 +12462,9 @@
 		}
 		}
 		}
-		_t = __t1168;
+		_t = __t1179;
 		_t = _t.getNextSibling();
-		_t = __t1161;
+		_t = __t1172;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12333,19 +12473,19 @@
 		
 		AST createbufferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t302 = _t;
-		AST tmp880_AST_in = (AST)_t;
+		AST __t313 = _t;
+		AST tmp890_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp881_AST_in = (AST)_t;
+		AST tmp891_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp882_AST_in = (AST)_t;
+		AST tmp892_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp883_AST_in = (AST)_t;
+		AST tmp893_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -12355,13 +12495,13 @@
 		switch ( _t.getType()) {
 		case BUFFERNAME:
 		{
-			AST __t304 = _t;
-			AST tmp884_AST_in = (AST)_t;
+			AST __t315 = _t;
+			AST tmp894_AST_in = (AST)_t;
 			match(_t,BUFFERNAME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t304;
+			_t = __t315;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -12383,16 +12523,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t306 = _t;
-			AST tmp885_AST_in = (AST)_t;
+			AST __t317 = _t;
+			AST tmp895_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp886_AST_in = (AST)_t;
+			AST tmp896_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t306;
+			_t = __t317;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -12413,7 +12553,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp887_AST_in = (AST)_t;
+			AST tmp897_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12431,7 +12571,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t302;
+		_t = __t313;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12440,11 +12580,11 @@
 		
 		AST createserverstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t309 = _t;
-		AST tmp888_AST_in = (AST)_t;
+		AST __t320 = _t;
+		AST tmp898_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp889_AST_in = (AST)_t;
+		AST tmp899_AST_in = (AST)_t;
 		match(_t,SERVER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12471,7 +12611,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t309;
+		_t = __t320;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12480,11 +12620,11 @@
 		
 		AST createserversocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t312 = _t;
-		AST tmp890_AST_in = (AST)_t;
+		AST __t323 = _t;
+		AST tmp900_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp891_AST_in = (AST)_t;
+		AST tmp901_AST_in = (AST)_t;
 		match(_t,SERVERSOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12494,7 +12634,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp892_AST_in = (AST)_t;
+			AST tmp902_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12512,7 +12652,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t312;
+		_t = __t323;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12521,11 +12661,11 @@
 		
 		AST createsocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t315 = _t;
-		AST tmp893_AST_in = (AST)_t;
+		AST __t326 = _t;
+		AST tmp903_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp894_AST_in = (AST)_t;
+		AST tmp904_AST_in = (AST)_t;
 		match(_t,SOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12535,7 +12675,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp895_AST_in = (AST)_t;
+			AST tmp905_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12553,7 +12693,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t315;
+		_t = __t326;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12562,11 +12702,11 @@
 		
 		AST createtemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t318 = _t;
-		AST tmp896_AST_in = (AST)_t;
+		AST __t329 = _t;
+		AST tmp906_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp897_AST_in = (AST)_t;
+		AST tmp907_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12576,16 +12716,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t320 = _t;
-			AST tmp898_AST_in = (AST)_t;
+			AST __t331 = _t;
+			AST tmp908_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp899_AST_in = (AST)_t;
+			AST tmp909_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t320;
+			_t = __t331;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -12606,7 +12746,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp900_AST_in = (AST)_t;
+			AST tmp910_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12624,7 +12764,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t318;
+		_t = __t329;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12633,8 +12773,8 @@
 		
 		AST createwidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t323 = _t;
-		AST tmp901_AST_in = (AST)_t;
+		AST __t334 = _t;
+		AST tmp911_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -12648,126 +12788,126 @@
 		}
 		case BUTTON:
 		{
-			AST tmp902_AST_in = (AST)_t;
+			AST tmp912_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp903_AST_in = (AST)_t;
+			AST tmp913_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp904_AST_in = (AST)_t;
+			AST tmp914_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp905_AST_in = (AST)_t;
+			AST tmp915_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp906_AST_in = (AST)_t;
+			AST tmp916_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp907_AST_in = (AST)_t;
+			AST tmp917_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp908_AST_in = (AST)_t;
+			AST tmp918_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp909_AST_in = (AST)_t;
+			AST tmp919_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp910_AST_in = (AST)_t;
+			AST tmp920_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp911_AST_in = (AST)_t;
+			AST tmp921_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp912_AST_in = (AST)_t;
+			AST tmp922_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECTANGLE:
 		{
-			AST tmp913_AST_in = (AST)_t;
+			AST tmp923_AST_in = (AST)_t;
 			match(_t,RECTANGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp914_AST_in = (AST)_t;
+			AST tmp924_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp915_AST_in = (AST)_t;
+			AST tmp925_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp916_AST_in = (AST)_t;
+			AST tmp926_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXT:
 		{
-			AST tmp917_AST_in = (AST)_t;
+			AST tmp927_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp918_AST_in = (AST)_t;
+			AST tmp928_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOW:
 		{
-			AST tmp919_AST_in = (AST)_t;
+			AST tmp929_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			break;
@@ -12785,16 +12925,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t326 = _t;
-			AST tmp920_AST_in = (AST)_t;
+			AST __t337 = _t;
+			AST tmp930_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp921_AST_in = (AST)_t;
+			AST tmp931_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t326;
+			_t = __t337;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -12817,7 +12957,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp922_AST_in = (AST)_t;
+			AST tmp932_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12878,7 +13018,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t323;
+		_t = __t334;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12887,19 +13027,19 @@
 		
 		AST valueexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1552 = _t;
-		AST tmp923_AST_in = (AST)_t;
+		AST __t1563 = _t;
+		AST tmp933_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getFirstChild();
-		AST tmp924_AST_in = (AST)_t;
+		AST tmp934_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp925_AST_in = (AST)_t;
+		AST tmp935_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1552;
+		_t = __t1563;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12908,21 +13048,21 @@
 		
 		AST ddegetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t331 = _t;
-		AST tmp926_AST_in = (AST)_t;
+		AST __t342 = _t;
+		AST tmp936_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp927_AST_in = (AST)_t;
+		AST tmp937_AST_in = (AST)_t;
 		match(_t,GET);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp928_AST_in = (AST)_t;
+		AST tmp938_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp929_AST_in = (AST)_t;
+		AST tmp939_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -12932,13 +13072,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t333 = _t;
-			AST tmp930_AST_in = (AST)_t;
+			AST __t344 = _t;
+			AST tmp940_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t333;
+			_t = __t344;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -12959,7 +13099,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp931_AST_in = (AST)_t;
+			AST tmp941_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12977,7 +13117,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t331;
+		_t = __t342;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -12986,26 +13126,26 @@
 		
 		AST ddeinitiatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t336 = _t;
-		AST tmp932_AST_in = (AST)_t;
+		AST __t347 = _t;
+		AST tmp942_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp933_AST_in = (AST)_t;
+		AST tmp943_AST_in = (AST)_t;
 		match(_t,INITIATE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp934_AST_in = (AST)_t;
+		AST tmp944_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp935_AST_in = (AST)_t;
+		AST tmp945_AST_in = (AST)_t;
 		match(_t,APPLICATION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp936_AST_in = (AST)_t;
+		AST tmp946_AST_in = (AST)_t;
 		match(_t,TOPIC);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -13015,7 +13155,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp937_AST_in = (AST)_t;
+			AST tmp947_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13033,7 +13173,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t336;
+		_t = __t347;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13042,21 +13182,21 @@
 		
 		AST dderequeststate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t339 = _t;
-		AST tmp938_AST_in = (AST)_t;
+		AST __t350 = _t;
+		AST tmp948_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp939_AST_in = (AST)_t;
+		AST tmp949_AST_in = (AST)_t;
 		match(_t,REQUEST);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp940_AST_in = (AST)_t;
+		AST tmp950_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp941_AST_in = (AST)_t;
+		AST tmp951_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -13066,13 +13206,13 @@
 		switch ( _t.getType()) {
 		case TIME:
 		{
-			AST __t341 = _t;
-			AST tmp942_AST_in = (AST)_t;
+			AST __t352 = _t;
+			AST tmp952_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t341;
+			_t = __t352;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -13093,7 +13233,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp943_AST_in = (AST)_t;
+			AST tmp953_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13111,7 +13251,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t339;
+		_t = __t350;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13124,7 +13264,7 @@
 		AST fi1 = null;
 		AST fi2 = null;
 		
-		AST __t344 = _t;
+		AST __t355 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13172,7 +13312,7 @@
 		}
 		}
 		}
-		AST tmp944_AST_in = (AST)_t;
+		AST tmp954_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13186,14 +13326,14 @@
 		switch ( _t.getType()) {
 		case QUERY:
 		{
-			AST __t348 = _t;
-			AST tmp945_AST_in = (AST)_t;
+			AST __t359 = _t;
+			AST tmp955_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp946_AST_in = (AST)_t;
+			AST tmp956_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t348;
+			_t = __t359;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -13217,7 +13357,7 @@
 		}
 		}
 		{
-		_loop350:
+		_loop361:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -13231,14 +13371,14 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp947_AST_in = (AST)_t;
+				AST tmp957_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop350;
+				break _loop361;
 			}
 			}
 		} while (true);
@@ -13248,25 +13388,25 @@
 		switch ( _t.getType()) {
 		case DISPLAY:
 		{
-			AST __t352 = _t;
-			AST tmp948_AST_in = (AST)_t;
+			AST __t363 = _t;
+			AST tmp958_AST_in = (AST)_t;
 			match(_t,DISPLAY);
 			_t = _t.getFirstChild();
 			{
-			_loop359:
+			_loop370:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
-					AST __t354 = _t;
+					AST __t365 = _t;
 					fi1 = _t==ASTNULL ? null :(AST)_t;
 					match(_t,Form_item);
 					_t = _t.getFirstChild();
 					{
-					boolean synPredMatched357 = false;
+					boolean synPredMatched368 = false;
 					if (_t==null) _t=ASTNULL;
 					if (((_t.getType()==RECORD_NAME))) {
-						AST __t357 = _t;
-						synPredMatched357 = true;
+						AST __t368 = _t;
+						synPredMatched368 = true;
 						inputState.guessing++;
 						try {
 							{
@@ -13275,12 +13415,12 @@
 							}
 						}
 						catch (RecognitionException pe) {
-							synPredMatched357 = false;
+							synPredMatched368 = false;
 						}
-						_t = __t357;
+						_t = __t368;
 inputState.guessing--;
 					}
-					if ( synPredMatched357 ) {
+					if ( synPredMatched368 ) {
 						tbl(_t,CQ.INIT);
 						_t = _retTree;
 					}
@@ -13319,11 +13459,11 @@
 					if ( inputState.guessing==0 ) {
 						action.formItem(fi1);
 					}
-					_t = __t354;
+					_t = __t365;
 					_t = _t.getNextSibling();
 				}
 				else {
-					break _loop359;
+					break _loop370;
 				}
 				
 			} while (true);
@@ -13333,12 +13473,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t361 = _t;
-				AST tmp949_AST_in = (AST)_t;
+				AST __t372 = _t;
+				AST tmp959_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop363:
+				_loop374:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -13346,12 +13486,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop363;
+						break _loop374;
 					}
 					
 				} while (true);
 				}
-				_t = __t361;
+				_t = __t372;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -13365,15 +13505,15 @@
 			}
 			}
 			}
-			_t = __t352;
+			_t = __t363;
 			_t = _t.getNextSibling();
 			{
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ENABLE:
 			{
-				AST __t365 = _t;
-				AST tmp950_AST_in = (AST)_t;
+				AST __t376 = _t;
+				AST tmp960_AST_in = (AST)_t;
 				match(_t,ENABLE);
 				_t = _t.getFirstChild();
 				{
@@ -13381,8 +13521,8 @@
 				switch ( _t.getType()) {
 				case ALL:
 				{
-					AST __t367 = _t;
-					AST tmp951_AST_in = (AST)_t;
+					AST __t378 = _t;
+					AST tmp961_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getFirstChild();
 					{
@@ -13390,12 +13530,12 @@
 					switch ( _t.getType()) {
 					case EXCEPT:
 					{
-						AST __t369 = _t;
-						AST tmp952_AST_in = (AST)_t;
+						AST __t380 = _t;
+						AST tmp962_AST_in = (AST)_t;
 						match(_t,EXCEPT);
 						_t = _t.getFirstChild();
 						{
-						_loop371:
+						_loop382:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==Field_ref)) {
@@ -13403,12 +13543,12 @@
 								_t = _retTree;
 							}
 							else {
-								break _loop371;
+								break _loop382;
 							}
 							
 						} while (true);
 						}
-						_t = __t369;
+						_t = __t380;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -13422,7 +13562,7 @@
 					}
 					}
 					}
-					_t = __t367;
+					_t = __t378;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -13430,11 +13570,11 @@
 				case Form_item:
 				{
 					{
-					_loop378:
+					_loop389:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==Form_item)) {
-							AST __t373 = _t;
+							AST __t384 = _t;
 							fi2 = _t==ASTNULL ? null :(AST)_t;
 							match(_t,Form_item);
 							_t = _t.getFirstChild();
@@ -13444,60 +13584,60 @@
 								action.formItem(fi2);
 							}
 							{
-							_loop377:
+							_loop388:
 							do {
 								if (_t==null) _t=ASTNULL;
 								switch ( _t.getType()) {
 								case HELP:
 								{
-									AST __t375 = _t;
-									AST tmp953_AST_in = (AST)_t;
+									AST __t386 = _t;
+									AST tmp963_AST_in = (AST)_t;
 									match(_t,HELP);
 									_t = _t.getFirstChild();
 									constant(_t);
 									_t = _retTree;
-									_t = __t375;
+									_t = __t386;
 									_t = _t.getNextSibling();
 									break;
 								}
 								case VALIDATE:
 								{
-									AST __t376 = _t;
-									AST tmp954_AST_in = (AST)_t;
+									AST __t387 = _t;
+									AST tmp964_AST_in = (AST)_t;
 									match(_t,VALIDATE);
 									_t = _t.getFirstChild();
 									funargs(_t);
 									_t = _retTree;
-									_t = __t376;
+									_t = __t387;
 									_t = _t.getNextSibling();
 									break;
 								}
 								case AUTORETURN:
 								{
-									AST tmp955_AST_in = (AST)_t;
+									AST tmp965_AST_in = (AST)_t;
 									match(_t,AUTORETURN);
 									_t = _t.getNextSibling();
 									break;
 								}
 								case DISABLEAUTOZAP:
 								{
-									AST tmp956_AST_in = (AST)_t;
+									AST tmp966_AST_in = (AST)_t;
 									match(_t,DISABLEAUTOZAP);
 									_t = _t.getNextSibling();
 									break;
 								}
 								default:
 								{
-									break _loop377;
+									break _loop388;
 								}
 								}
 							} while (true);
 							}
-							_t = __t373;
+							_t = __t384;
 							_t = _t.getNextSibling();
 						}
 						else {
-							break _loop378;
+							break _loop389;
 						}
 						
 					} while (true);
@@ -13510,7 +13650,7 @@
 				}
 				}
 				}
-				_t = __t365;
+				_t = __t376;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -13545,7 +13685,7 @@
 		}
 		}
 		{
-		_loop380:
+		_loop391:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WITH)) {
@@ -13553,7 +13693,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop380;
+				break _loop391;
 			}
 			
 		} while (true);
@@ -13584,13 +13724,13 @@
 		switch ( _t.getType()) {
 		case CONTEXTHELPID:
 		{
-			AST __t383 = _t;
-			AST tmp957_AST_in = (AST)_t;
+			AST __t394 = _t;
+			AST tmp967_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t383;
+			_t = __t394;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -13610,7 +13750,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t344;
+		_t = __t355;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -13623,7 +13763,7 @@
 		switch ( _t.getType()) {
 		case SHARED:
 		{
-			AST tmp958_AST_in = (AST)_t;
+			AST tmp968_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13631,7 +13771,7 @@
 		case NEW:
 		{
 			AST __t1870 = _t;
-			AST tmp959_AST_in = (AST)_t;
+			AST tmp969_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13639,7 +13779,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp960_AST_in = (AST)_t;
+				AST tmp970_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13654,7 +13794,7 @@
 			}
 			}
 			}
-			AST tmp961_AST_in = (AST)_t;
+			AST tmp971_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			_t = __t1870;
@@ -13678,21 +13818,21 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp962_AST_in = (AST)_t;
+			AST tmp972_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROTECTED:
 		{
-			AST tmp963_AST_in = (AST)_t;
+			AST tmp973_AST_in = (AST)_t;
 			match(_t,PROTECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLIC:
 		{
-			AST tmp964_AST_in = (AST)_t;
+			AST tmp974_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
@@ -13714,21 +13854,21 @@
 		switch ( _t.getType()) {
 		case SHARELOCK:
 		{
-			AST tmp965_AST_in = (AST)_t;
+			AST tmp975_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp966_AST_in = (AST)_t;
+			AST tmp976_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp967_AST_in = (AST)_t;
+			AST tmp977_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
@@ -13746,7 +13886,7 @@
 		AST spacephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2285 = _t;
-		AST tmp968_AST_in = (AST)_t;
+		AST tmp978_AST_in = (AST)_t;
 		match(_t,SPACE);
 		_t = _t.getFirstChild();
 		{
@@ -13786,13 +13926,13 @@
 			try {
 				{
 				AST __t1895 = _t;
-				AST tmp969_AST_in = (AST)_t;
+				AST tmp979_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp970_AST_in = (AST)_t;
+				AST tmp980_AST_in = (AST)_t;
 				match(_t,BROWSE);
 				_t = _t.getNextSibling();
-				AST tmp971_AST_in = (AST)_t;
+				AST tmp981_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				_t = __t1895;
@@ -13807,13 +13947,13 @@
 		}
 		if ( synPredMatched1896 ) {
 			AST __t1897 = _t;
-			AST tmp972_AST_in = (AST)_t;
+			AST tmp982_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getFirstChild();
-			AST tmp973_AST_in = (AST)_t;
+			AST tmp983_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp974_AST_in = (AST)_t;
+			AST tmp984_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t1897;
@@ -13835,7 +13975,7 @@
 		AST tooltip_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2345 = _t;
-		AST tmp975_AST_in = (AST)_t;
+		AST tmp985_AST_in = (AST)_t;
 		match(_t,TOOLTIP);
 		_t = _t.getFirstChild();
 		{
@@ -13912,7 +14052,7 @@
 		AST id = null;
 		AST rec = null;
 		
-		AST __t385 = _t;
+		AST __t396 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -13960,13 +14100,13 @@
 		}
 		}
 		}
-		AST tmp976_AST_in = (AST)_t;
+		AST tmp986_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp977_AST_in = (AST)_t;
+		AST tmp987_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -13974,7 +14114,7 @@
 		switch ( _t.getType()) {
 		case TEMPTABLE:
 		{
-			AST tmp978_AST_in = (AST)_t;
+			AST tmp988_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
@@ -14000,7 +14140,7 @@
 		switch ( _t.getType()) {
 		case PRESELECT:
 		{
-			AST tmp979_AST_in = (AST)_t;
+			AST tmp989_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -14093,12 +14233,12 @@
 		switch ( _t.getType()) {
 		case FIELDS:
 		{
-			AST __t394 = _t;
-			AST tmp980_AST_in = (AST)_t;
+			AST __t405 = _t;
+			AST tmp990_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
-			_loop396:
+			_loop407:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -14106,12 +14246,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop396;
+					break _loop407;
 				}
 				
 			} while (true);
 			}
-			_t = __t394;
+			_t = __t405;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -14128,7 +14268,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t385;
+		_t = __t396;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14138,7 +14278,7 @@
 		AST namespace_uri_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2036 = _t;
-		AST tmp981_AST_in = (AST)_t;
+		AST tmp991_AST_in = (AST)_t;
 		match(_t,NAMESPACEURI);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -14153,7 +14293,7 @@
 		AST namespace_prefix_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2034 = _t;
-		AST tmp982_AST_in = (AST)_t;
+		AST tmp992_AST_in = (AST)_t;
 		match(_t,NAMESPACEPREFIX);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -14169,7 +14309,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t398 = _t;
+		AST __t409 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -14217,7 +14357,7 @@
 		}
 		}
 		}
-		AST tmp983_AST_in = (AST)_t;
+		AST tmp993_AST_in = (AST)_t;
 		match(_t,BUTTON);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -14227,27 +14367,27 @@
 			push(action.defineSymbol(BUTTON, def, id));
 		}
 		{
-		_loop422:
+		_loop433:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case AUTOGO:
 			{
-				AST tmp984_AST_in = (AST)_t;
+				AST tmp994_AST_in = (AST)_t;
 				match(_t,AUTOGO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTOENDKEY:
 			{
-				AST tmp985_AST_in = (AST)_t;
+				AST tmp995_AST_in = (AST)_t;
 				match(_t,AUTOENDKEY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULT:
 			{
-				AST tmp986_AST_in = (AST)_t;
+				AST tmp996_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getNextSibling();
 				break;
@@ -14263,44 +14403,44 @@
 			}
 			case CONTEXTHELPID:
 			{
-				AST __t402 = _t;
-				AST tmp987_AST_in = (AST)_t;
+				AST __t413 = _t;
+				AST tmp997_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t402;
+				_t = __t413;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPTARGET:
 			{
-				AST tmp988_AST_in = (AST)_t;
+				AST tmp998_AST_in = (AST)_t;
 				match(_t,DROPTARGET);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST __t403 = _t;
-				AST tmp989_AST_in = (AST)_t;
+				AST __t414 = _t;
+				AST tmp999_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t403;
+				_t = __t414;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEDOWN:
 			{
-				AST __t404 = _t;
-				AST tmp990_AST_in = (AST)_t;
+				AST __t415 = _t;
+				AST tmp1000_AST_in = (AST)_t;
 				match(_t,IMAGEDOWN);
 				_t = _t.getFirstChild();
 				{
-				int _cnt406=0;
-				_loop406:
+				int _cnt417=0;
+				_loop417:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_10.member(_t.getType()))) {
@@ -14308,25 +14448,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt406>=1 ) { break _loop406; } else {throw new NoViableAltException(_t);}
+						if ( _cnt417>=1 ) { break _loop417; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt406++;
+					_cnt417++;
 				} while (true);
 				}
-				_t = __t404;
+				_t = __t415;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGE:
 			{
-				AST __t407 = _t;
-				AST tmp991_AST_in = (AST)_t;
+				AST __t418 = _t;
+				AST tmp1001_AST_in = (AST)_t;
 				match(_t,IMAGE);
 				_t = _t.getFirstChild();
 				{
-				int _cnt409=0;
-				_loop409:
+				int _cnt420=0;
+				_loop420:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_10.member(_t.getType()))) {
@@ -14334,25 +14474,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt409>=1 ) { break _loop409; } else {throw new NoViableAltException(_t);}
+						if ( _cnt420>=1 ) { break _loop420; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt409++;
+					_cnt420++;
 				} while (true);
 				}
-				_t = __t407;
+				_t = __t418;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEUP:
 			{
-				AST __t410 = _t;
-				AST tmp992_AST_in = (AST)_t;
+				AST __t421 = _t;
+				AST tmp1002_AST_in = (AST)_t;
 				match(_t,IMAGEUP);
 				_t = _t.getFirstChild();
 				{
-				int _cnt412=0;
-				_loop412:
+				int _cnt423=0;
+				_loop423:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_10.member(_t.getType()))) {
@@ -14360,25 +14500,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt412>=1 ) { break _loop412; } else {throw new NoViableAltException(_t);}
+						if ( _cnt423>=1 ) { break _loop423; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt412++;
+					_cnt423++;
 				} while (true);
 				}
-				_t = __t410;
+				_t = __t421;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IMAGEINSENSITIVE:
 			{
-				AST __t413 = _t;
-				AST tmp993_AST_in = (AST)_t;
+				AST __t424 = _t;
+				AST tmp1003_AST_in = (AST)_t;
 				match(_t,IMAGEINSENSITIVE);
 				_t = _t.getFirstChild();
 				{
-				int _cnt415=0;
-				_loop415:
+				int _cnt426=0;
+				_loop426:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_10.member(_t.getType()))) {
@@ -14386,25 +14526,25 @@
 						_t = _retTree;
 					}
 					else {
-						if ( _cnt415>=1 ) { break _loop415; } else {throw new NoViableAltException(_t);}
+						if ( _cnt426>=1 ) { break _loop426; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt415++;
+					_cnt426++;
 				} while (true);
 				}
-				_t = __t413;
+				_t = __t424;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MOUSEPOINTER:
 			{
-				AST __t416 = _t;
-				AST tmp994_AST_in = (AST)_t;
+				AST __t427 = _t;
+				AST tmp1004_AST_in = (AST)_t;
 				match(_t,MOUSEPOINTER);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t416;
+				_t = __t427;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -14417,8 +14557,8 @@
 			}
 			case LIKE:
 			{
-				AST __t417 = _t;
-				AST tmp995_AST_in = (AST)_t;
+				AST __t428 = _t;
+				AST tmp1005_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -14428,7 +14568,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp996_AST_in = (AST)_t;
+					AST tmp1006_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -14443,21 +14583,21 @@
 				}
 				}
 				}
-				_t = __t417;
+				_t = __t428;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FLATBUTTON:
 			{
-				AST tmp997_AST_in = (AST)_t;
+				AST tmp1007_AST_in = (AST)_t;
 				match(_t,FLATBUTTON);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOFOCUS:
 			{
-				AST __t419 = _t;
-				AST tmp998_AST_in = (AST)_t;
+				AST __t430 = _t;
+				AST tmp1008_AST_in = (AST)_t;
 				match(_t,NOFOCUS);
 				_t = _t.getFirstChild();
 				{
@@ -14465,7 +14605,7 @@
 				switch ( _t.getType()) {
 				case FLATBUTTON:
 				{
-					AST tmp999_AST_in = (AST)_t;
+					AST tmp1009_AST_in = (AST)_t;
 					match(_t,FLATBUTTON);
 					_t = _t.getNextSibling();
 					break;
@@ -14480,13 +14620,13 @@
 				}
 				}
 				}
-				_t = __t419;
+				_t = __t430;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONVERT3DCOLORS:
 			{
-				AST tmp1000_AST_in = (AST)_t;
+				AST tmp1010_AST_in = (AST)_t;
 				match(_t,NOCONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -14508,7 +14648,7 @@
 				switch ( _t.getType()) {
 				case MARGINEXTRA:
 				{
-					AST tmp1001_AST_in = (AST)_t;
+					AST tmp1011_AST_in = (AST)_t;
 					match(_t,MARGINEXTRA);
 					_t = _t.getNextSibling();
 					break;
@@ -14554,7 +14694,7 @@
 			}
 			default:
 			{
-				break _loop422;
+				break _loop433;
 			}
 			}
 		} while (true);
@@ -14584,7 +14724,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t398;
+		_t = __t409;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -14598,7 +14738,7 @@
 		case BGCOLOR:
 		{
 			AST __t1691 = _t;
-			AST tmp1002_AST_in = (AST)_t;
+			AST tmp1012_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14610,7 +14750,7 @@
 		case DCOLOR:
 		{
 			AST __t1692 = _t;
-			AST tmp1003_AST_in = (AST)_t;
+			AST tmp1013_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14622,7 +14762,7 @@
 		case FGCOLOR:
 		{
 			AST __t1693 = _t;
-			AST tmp1004_AST_in = (AST)_t;
+			AST tmp1014_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14634,7 +14774,7 @@
 		case PFCOLOR:
 		{
 			AST __t1694 = _t;
-			AST tmp1005_AST_in = (AST)_t;
+			AST tmp1015_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14660,7 +14800,7 @@
 		case FILE:
 		{
 			AST __t1958 = _t;
-			AST tmp1006_AST_in = (AST)_t;
+			AST tmp1016_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14672,12 +14812,12 @@
 		case IMAGESIZE:
 		{
 			AST __t1959 = _t;
-			AST tmp1007_AST_in = (AST)_t;
+			AST tmp1017_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1008_AST_in = (AST)_t;
+			AST tmp1018_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14689,12 +14829,12 @@
 		case IMAGESIZECHARS:
 		{
 			AST __t1960 = _t;
-			AST tmp1009_AST_in = (AST)_t;
+			AST tmp1019_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1010_AST_in = (AST)_t;
+			AST tmp1020_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14706,12 +14846,12 @@
 		case IMAGESIZEPIXELS:
 		{
 			AST __t1961 = _t;
-			AST tmp1011_AST_in = (AST)_t;
+			AST tmp1021_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1012_AST_in = (AST)_t;
+			AST tmp1022_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14723,7 +14863,7 @@
 		case FROM:
 		{
 			AST __t1962 = _t;
-			AST tmp1013_AST_in = (AST)_t;
+			AST tmp1023_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -14731,7 +14871,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp1014_AST_in = (AST)_t;
+				AST tmp1024_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14740,7 +14880,7 @@
 			}
 			case Y:
 			{
-				AST tmp1015_AST_in = (AST)_t;
+				AST tmp1025_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14749,7 +14889,7 @@
 			}
 			case ROW:
 			{
-				AST tmp1016_AST_in = (AST)_t;
+				AST tmp1026_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14758,7 +14898,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp1017_AST_in = (AST)_t;
+				AST tmp1027_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14776,7 +14916,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp1018_AST_in = (AST)_t;
+				AST tmp1028_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14785,7 +14925,7 @@
 			}
 			case Y:
 			{
-				AST tmp1019_AST_in = (AST)_t;
+				AST tmp1029_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14794,7 +14934,7 @@
 			}
 			case ROW:
 			{
-				AST tmp1020_AST_in = (AST)_t;
+				AST tmp1030_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14803,7 +14943,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp1021_AST_in = (AST)_t;
+				AST tmp1031_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14837,12 +14977,12 @@
 		case SIZE:
 		{
 			AST __t2268 = _t;
-			AST tmp1022_AST_in = (AST)_t;
+			AST tmp1032_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1023_AST_in = (AST)_t;
+			AST tmp1033_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14854,12 +14994,12 @@
 		case SIZECHARS:
 		{
 			AST __t2269 = _t;
-			AST tmp1024_AST_in = (AST)_t;
+			AST tmp1034_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1025_AST_in = (AST)_t;
+			AST tmp1035_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14871,12 +15011,12 @@
 		case SIZEPIXELS:
 		{
 			AST __t2270 = _t;
-			AST tmp1026_AST_in = (AST)_t;
+			AST tmp1036_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1027_AST_in = (AST)_t;
+			AST tmp1037_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14899,7 +15039,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t425 = _t;
+		AST __t436 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -14947,7 +15087,7 @@
 		}
 		}
 		}
-		AST tmp1028_AST_in = (AST)_t;
+		AST tmp1038_AST_in = (AST)_t;
 		match(_t,DATASET);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15002,7 +15142,7 @@
 		switch ( _t.getType()) {
 		case REFERENCEONLY:
 		{
-			AST tmp1029_AST_in = (AST)_t;
+			AST tmp1039_AST_in = (AST)_t;
 			match(_t,REFERENCEONLY);
 			_t = _t.getNextSibling();
 			break;
@@ -15017,24 +15157,24 @@
 		}
 		}
 		}
-		AST tmp1030_AST_in = (AST)_t;
+		AST tmp1040_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
 		_t = _retTree;
 		{
-		_loop432:
+		_loop443:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1031_AST_in = (AST)_t;
+				AST tmp1041_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
 				_t = _retTree;
 			}
 			else {
-				break _loop432;
+				break _loop443;
 			}
 			
 		} while (true);
@@ -15047,7 +15187,7 @@
 			data_relation(_t);
 			_t = _retTree;
 			{
-			_loop436:
+			_loop447:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA||_t.getType()==DATARELATION)) {
@@ -15056,7 +15196,7 @@
 					switch ( _t.getType()) {
 					case COMMA:
 					{
-						AST tmp1032_AST_in = (AST)_t;
+						AST tmp1042_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						break;
@@ -15075,7 +15215,7 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop436;
+					break _loop447;
 				}
 				
 			} while (true);
@@ -15098,7 +15238,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t425;
+		_t = __t436;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15107,8 +15247,8 @@
 		
 		AST data_relation_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t438 = _t;
-		AST tmp1033_AST_in = (AST)_t;
+		AST __t449 = _t;
+		AST tmp1043_AST_in = (AST)_t;
 		match(_t,DATARELATION);
 		_t = _t.getFirstChild();
 		{
@@ -15116,7 +15256,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1034_AST_in = (AST)_t;
+			AST tmp1044_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -15131,12 +15271,12 @@
 		}
 		}
 		}
-		AST tmp1035_AST_in = (AST)_t;
+		AST tmp1045_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
 		_t = _retTree;
-		AST tmp1036_AST_in = (AST)_t;
+		AST tmp1046_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -15166,7 +15306,7 @@
 		switch ( _t.getType()) {
 		case REPOSITION:
 		{
-			AST tmp1037_AST_in = (AST)_t;
+			AST tmp1047_AST_in = (AST)_t;
 			match(_t,REPOSITION);
 			_t = _t.getNextSibling();
 			break;
@@ -15181,7 +15321,7 @@
 		}
 		}
 		}
-		_t = __t438;
+		_t = __t449;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15190,46 +15330,46 @@
 		
 		AST field_mapping_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t443 = _t;
-		AST tmp1038_AST_in = (AST)_t;
+		AST __t454 = _t;
+		AST tmp1048_AST_in = (AST)_t;
 		match(_t,RELATIONFIELDS);
 		_t = _t.getFirstChild();
-		AST tmp1039_AST_in = (AST)_t;
+		AST tmp1049_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld2(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp1040_AST_in = (AST)_t;
+		AST tmp1050_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		fld1(_t,CQ.SYMBOL);
 		_t = _retTree;
 		{
-		_loop445:
+		_loop456:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1041_AST_in = (AST)_t;
+				AST tmp1051_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld2(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp1042_AST_in = (AST)_t;
+				AST tmp1052_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld1(_t,CQ.SYMBOL);
 				_t = _retTree;
 			}
 			else {
-				break _loop445;
+				break _loop456;
 			}
 			
 		} while (true);
 		}
-		AST tmp1043_AST_in = (AST)_t;
+		AST tmp1053_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t443;
+		_t = __t454;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15240,7 +15380,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t447 = _t;
+		AST __t458 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -15288,7 +15428,7 @@
 		}
 		}
 		}
-		AST tmp1044_AST_in = (AST)_t;
+		AST tmp1054_AST_in = (AST)_t;
 		match(_t,DATASOURCE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15297,7 +15437,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(DATASOURCE, def, id));
 		}
-		AST tmp1045_AST_in = (AST)_t;
+		AST tmp1055_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -15305,14 +15445,14 @@
 		switch ( _t.getType()) {
 		case QUERY:
 		{
-			AST __t451 = _t;
-			AST tmp1046_AST_in = (AST)_t;
+			AST __t462 = _t;
+			AST tmp1056_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp1047_AST_in = (AST)_t;
+			AST tmp1057_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			_t = __t451;
+			_t = __t462;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15351,18 +15491,18 @@
 		}
 		}
 		{
-		_loop454:
+		_loop465:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1048_AST_in = (AST)_t;
+				AST tmp1058_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				source_buffer_phrase(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop454;
+				break _loop465;
 			}
 			
 		} while (true);
@@ -15372,7 +15512,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t447;
+		_t = __t458;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15382,7 +15522,7 @@
 		AST source_buffer_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t456 = _t;
+		AST __t467 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -15394,10 +15534,10 @@
 		switch ( _t.getType()) {
 		case KEYS:
 		{
-			AST tmp1049_AST_in = (AST)_t;
+			AST tmp1059_AST_in = (AST)_t;
 			match(_t,KEYS);
 			_t = _t.getNextSibling();
-			AST tmp1050_AST_in = (AST)_t;
+			AST tmp1060_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -15405,7 +15545,7 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1051_AST_in = (AST)_t;
+				AST tmp1061_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
@@ -15415,18 +15555,18 @@
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
 				{
-				_loop460:
+				_loop471:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1052_AST_in = (AST)_t;
+						AST tmp1062_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.SYMBOL);
 						_t = _retTree;
 					}
 					else {
-						break _loop460;
+						break _loop471;
 					}
 					
 				} while (true);
@@ -15439,7 +15579,7 @@
 			}
 			}
 			}
-			AST tmp1053_AST_in = (AST)_t;
+			AST tmp1063_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -15454,7 +15594,7 @@
 		}
 		}
 		}
-		_t = __t456;
+		_t = __t467;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15465,7 +15605,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t462 = _t;
+		AST __t473 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -15481,8 +15621,6 @@
 		}
 		case FRAME:
 		case PRIVATE:
-		case PUBLIC:
-		case PROTECTED:
 		{
 			break;
 		}
@@ -15496,11 +15634,10 @@
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
 		case PRIVATE:
-		case PUBLIC:
-		case PROTECTED:
 		{
-			def_visib(_t);
-			_t = _retTree;
+			AST tmp1064_AST_in = (AST)_t;
+			match(_t,PRIVATE);
+			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
@@ -15513,7 +15650,7 @@
 		}
 		}
 		}
-		AST tmp1054_AST_in = (AST)_t;
+		AST tmp1065_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15523,7 +15660,7 @@
 			action.frameDef(def, id);
 		}
 		{
-		_loop466:
+		_loop477:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -15531,7 +15668,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop466;
+				break _loop477;
 			}
 			
 		} while (true);
@@ -15541,13 +15678,13 @@
 		switch ( _t.getType()) {
 		case HEADER:
 		{
-			AST __t468 = _t;
-			AST tmp1055_AST_in = (AST)_t;
+			AST __t479 = _t;
+			AST tmp1066_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
-			int _cnt470=0;
-			_loop470:
+			int _cnt481=0;
+			_loop481:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15555,25 +15692,25 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt470>=1 ) { break _loop470; } else {throw new NoViableAltException(_t);}
+					if ( _cnt481>=1 ) { break _loop481; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt470++;
+				_cnt481++;
 			} while (true);
 			}
-			_t = __t468;
+			_t = __t479;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKGROUND:
 		{
-			AST __t471 = _t;
-			AST tmp1056_AST_in = (AST)_t;
+			AST __t482 = _t;
+			AST tmp1067_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
-			int _cnt473=0;
-			_loop473:
+			int _cnt484=0;
+			_loop484:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15581,13 +15718,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt473>=1 ) { break _loop473; } else {throw new NoViableAltException(_t);}
+					if ( _cnt484>=1 ) { break _loop484; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt473++;
+				_cnt484++;
 			} while (true);
 			}
-			_t = __t471;
+			_t = __t482;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15609,12 +15746,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t475 = _t;
-			AST tmp1057_AST_in = (AST)_t;
+			AST __t486 = _t;
+			AST tmp1068_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop477:
+			_loop488:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -15622,12 +15759,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop477;
+					break _loop488;
 				}
 				
 			} while (true);
 			}
-			_t = __t475;
+			_t = __t486;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15668,7 +15805,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t462;
+		_t = __t473;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15683,7 +15820,7 @@
 			if (contextQualifier==CQ.SYMBOL) tblQualifier = CQ.BUFFERSYMBOL;
 		
 		
-		AST __t778 = _t;
+		AST __t789 = _t;
 		fi = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
@@ -15701,15 +15838,15 @@
 		}
 		case TEXT:
 		{
-			AST __t780 = _t;
-			AST tmp1058_AST_in = (AST)_t;
+			AST __t791 = _t;
+			AST tmp1069_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getFirstChild();
-			AST tmp1059_AST_in = (AST)_t;
+			AST tmp1070_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
-			_loop782:
+			_loop793:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -15717,15 +15854,15 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop782;
+					break _loop793;
 				}
 				
 			} while (true);
 			}
-			AST tmp1060_AST_in = (AST)_t;
+			AST tmp1071_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t780;
+			_t = __t791;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -15815,7 +15952,7 @@
 		}
 		case CARET:
 		{
-			AST tmp1061_AST_in = (AST)_t;
+			AST tmp1072_AST_in = (AST)_t;
 			match(_t,CARET);
 			_t = _t.getNextSibling();
 			break;
@@ -15828,7 +15965,7 @@
 				action.formItem(fi);
 			}
 			{
-			_loop785:
+			_loop796:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -15846,7 +15983,7 @@
 				}
 				default:
 				{
-					break _loop785;
+					break _loop796;
 				}
 				}
 			} while (true);
@@ -15865,7 +16002,7 @@
 		}
 		}
 		}
-		_t = __t778;
+		_t = __t789;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15875,7 +16012,7 @@
 		AST display_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST fi = null;
 		
-		AST __t698 = _t;
+		AST __t709 = _t;
 		fi = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
@@ -15904,7 +16041,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1062_AST_in = (AST)_t;
+					AST tmp1073_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -15917,7 +16054,7 @@
 					action.formItem(fi);
 				}
 				{
-				_loop702:
+				_loop713:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
@@ -15935,7 +16072,7 @@
 					}
 					default:
 					{
-						break _loop702;
+						break _loop713;
 					}
 					}
 				} while (true);
@@ -15946,7 +16083,7 @@
 		}
 		}
 		}
-		_t = __t698;
+		_t = __t709;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -15957,7 +16094,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t480 = _t;
+		AST __t491 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -16005,7 +16142,7 @@
 		}
 		}
 		}
-		AST tmp1063_AST_in = (AST)_t;
+		AST tmp1074_AST_in = (AST)_t;
 		match(_t,IMAGE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -16015,14 +16152,14 @@
 			push(action.defineSymbol(IMAGE, def, id));
 		}
 		{
-		_loop488:
+		_loop499:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case LIKE:
 			{
-				AST __t484 = _t;
-				AST tmp1064_AST_in = (AST)_t;
+				AST __t495 = _t;
+				AST tmp1075_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -16032,7 +16169,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1065_AST_in = (AST)_t;
+					AST tmp1076_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -16047,7 +16184,7 @@
 				}
 				}
 				}
-				_t = __t484;
+				_t = __t495;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -16080,7 +16217,7 @@
 			}
 			case CONVERT3DCOLORS:
 			{
-				AST tmp1066_AST_in = (AST)_t;
+				AST tmp1077_AST_in = (AST)_t;
 				match(_t,CONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -16093,8 +16230,8 @@
 			}
 			case STRETCHTOFIT:
 			{
-				AST __t486 = _t;
-				AST tmp1067_AST_in = (AST)_t;
+				AST __t497 = _t;
+				AST tmp1078_AST_in = (AST)_t;
 				match(_t,STRETCHTOFIT);
 				_t = _t.getFirstChild();
 				{
@@ -16102,7 +16239,7 @@
 				switch ( _t.getType()) {
 				case RETAINSHAPE:
 				{
-					AST tmp1068_AST_in = (AST)_t;
+					AST tmp1079_AST_in = (AST)_t;
 					match(_t,RETAINSHAPE);
 					_t = _t.getNextSibling();
 					break;
@@ -16117,20 +16254,20 @@
 				}
 				}
 				}
-				_t = __t486;
+				_t = __t497;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TRANSPARENT:
 			{
-				AST tmp1069_AST_in = (AST)_t;
+				AST tmp1080_AST_in = (AST)_t;
 				match(_t,TRANSPARENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop488;
+				break _loop499;
 			}
 			}
 		} while (true);
@@ -16160,7 +16297,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t480;
+		_t = __t491;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16171,7 +16308,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t491 = _t;
+		AST __t502 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -16219,7 +16356,7 @@
 		}
 		}
 		}
-		AST tmp1070_AST_in = (AST)_t;
+		AST tmp1081_AST_in = (AST)_t;
 		match(_t,MENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -16229,7 +16366,7 @@
 			push(action.defineSymbol(MENU, def, id));
 		}
 		{
-		_loop495:
+		_loop506:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_12.member(_t.getType()))) {
@@ -16237,13 +16374,13 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop495;
+				break _loop506;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop497:
+		_loop508:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_13.member(_t.getType()))) {
@@ -16251,7 +16388,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop497;
+				break _loop508;
 			}
 			
 		} while (true);
@@ -16261,7 +16398,7 @@
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
 		}
-		_t = __t491;
+		_t = __t502;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -16283,20 +16420,20 @@
 		}
 		case FONT:
 		{
-			AST __t499 = _t;
-			AST tmp1071_AST_in = (AST)_t;
+			AST __t510 = _t;
+			AST tmp1082_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t499;
+			_t = __t510;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LIKE:
 		{
-			AST __t500 = _t;
-			AST tmp1072_AST_in = (AST)_t;
+			AST __t511 = _t;
+			AST tmp1083_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.SYMBOL);
@@ -16306,7 +16443,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp1073_AST_in = (AST)_t;
+				AST tmp1084_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -16321,39 +16458,39 @@
 			}
 			}
 			}
-			_t = __t500;
+			_t = __t511;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TITLE:
 		{
-			AST __t502 = _t;
-			AST tmp1074_AST_in = (AST)_t;
+			AST __t513 = _t;
+			AST tmp1085_AST_in = (AST)_t;
 			match(_t,TITLE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t502;
+			_t = __t513;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUBAR:
 		{
-			AST tmp1075_AST_in = (AST)_t;
+			AST tmp1086_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp1076_AST_in = (AST)_t;
+			AST tmp1087_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp1077_AST_in = (AST)_t;
+			AST tmp1088_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
@@ -16377,8 +16514,8 @@
 		switch ( _t.getType()) {
 		case MENUITEM:
 		{
-			AST __t505 = _t;
-			AST tmp1078_AST_in = (AST)_t;
+			AST __t516 = _t;
+			AST tmp1089_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getFirstChild();
 			id = (AST)_t;
@@ -16388,19 +16525,19 @@
 				push(action.defineSymbol(MENUITEM, id, id));
 			}
 			{
-			_loop509:
+			_loop520:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case ACCELERATOR:
 				{
-					AST __t507 = _t;
-					AST tmp1079_AST_in = (AST)_t;
+					AST __t518 = _t;
+					AST tmp1090_AST_in = (AST)_t;
 					match(_t,ACCELERATOR);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t507;
+					_t = __t518;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -16415,20 +16552,20 @@
 				}
 				case DISABLED:
 				{
-					AST tmp1080_AST_in = (AST)_t;
+					AST tmp1091_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FONT:
 				{
-					AST __t508 = _t;
-					AST tmp1081_AST_in = (AST)_t;
+					AST __t519 = _t;
+					AST tmp1092_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t508;
+					_t = __t519;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -16441,21 +16578,21 @@
 				}
 				case READONLY:
 				{
-					AST tmp1082_AST_in = (AST)_t;
+					AST tmp1093_AST_in = (AST)_t;
 					match(_t,READONLY);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOGGLEBOX:
 				{
-					AST tmp1083_AST_in = (AST)_t;
+					AST tmp1094_AST_in = (AST)_t;
 					match(_t,TOGGLEBOX);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop509;
+					break _loop520;
 				}
 				}
 			} while (true);
@@ -16482,14 +16619,14 @@
 			if ( inputState.guessing==0 ) {
 				action.addToSymbolScope(pop());
 			}
-			_t = __t505;
+			_t = __t516;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST __t511 = _t;
-			AST tmp1084_AST_in = (AST)_t;
+			AST __t522 = _t;
+			AST tmp1095_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getFirstChild();
 			id2 = (AST)_t;
@@ -16499,13 +16636,13 @@
 				push(action.defineSymbol(SUBMENU, id2, id2));
 			}
 			{
-			_loop514:
+			_loop525:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case DISABLED:
 				{
-					AST tmp1085_AST_in = (AST)_t;
+					AST tmp1096_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -16519,13 +16656,13 @@
 				}
 				case FONT:
 				{
-					AST __t513 = _t;
-					AST tmp1086_AST_in = (AST)_t;
+					AST __t524 = _t;
+					AST tmp1097_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t513;
+					_t = __t524;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -16540,7 +16677,7 @@
 				}
 				default:
 				{
-					break _loop514;
+					break _loop525;
 				}
 				}
 			} while (true);
@@ -16548,30 +16685,30 @@
 			if ( inputState.guessing==0 ) {
 				action.addToSymbolScope(pop());
 			}
-			_t = __t511;
+			_t = __t522;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RULE:
 		{
-			AST __t515 = _t;
-			AST tmp1087_AST_in = (AST)_t;
+			AST __t526 = _t;
+			AST tmp1098_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getFirstChild();
 			{
-			_loop518:
+			_loop529:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case FONT:
 				{
-					AST __t517 = _t;
-					AST tmp1088_AST_in = (AST)_t;
+					AST __t528 = _t;
+					AST tmp1099_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t517;
+					_t = __t528;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -16586,18 +16723,18 @@
 				}
 				default:
 				{
-					break _loop518;
+					break _loop529;
 				}
 				}
 			} while (true);
 			}
-			_t = __t515;
+			_t = __t526;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SKIP:
 		{
-			AST tmp1089_AST_in = (AST)_t;
+			AST tmp1100_AST_in = (AST)_t;
 			match(_t,SKIP);
 			_t = _t.getNextSibling();
 			break;
@@ -16609,15 +16746,15 @@
 		}
 		}
 		{
-		boolean synPredMatched522 = false;
+		boolean synPredMatched533 = false;
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==PERIOD))) {
-			AST __t522 = _t;
-			synPredMatched522 = true;
+			AST __t533 = _t;
+			synPredMatched533 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST tmp1090_AST_in = (AST)_t;
+				AST tmp1101_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				{
@@ -16625,28 +16762,28 @@
 				switch ( _t.getType()) {
 				case RULE:
 				{
-					AST tmp1091_AST_in = (AST)_t;
+					AST tmp1102_AST_in = (AST)_t;
 					match(_t,RULE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SKIP:
 				{
-					AST tmp1092_AST_in = (AST)_t;
+					AST tmp1103_AST_in = (AST)_t;
 					match(_t,SKIP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SUBMENU:
 				{
-					AST tmp1093_AST_in = (AST)_t;
+					AST tmp1104_AST_in = (AST)_t;
 					match(_t,SUBMENU);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case MENUITEM:
 				{
-					AST tmp1094_AST_in = (AST)_t;
+					AST tmp1105_AST_in = (AST)_t;
 					match(_t,MENUITEM);
 					_t = _t.getNextSibling();
 					break;
@@ -16660,13 +16797,13 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched522 = false;
+				synPredMatched533 = false;
 			}
-			_t = __t522;
+			_t = __t533;
 inputState.guessing--;
 		}
-		if ( synPredMatched522 ) {
-			AST tmp1095_AST_in = (AST)_t;
+		if ( synPredMatched533 ) {
+			AST tmp1106_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 		}
@@ -16691,7 +16828,7 @@
 		AST id3 = null;
 		AST id2 = null;
 		
-		AST __t524 = _t;
+		AST __t535 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -16752,16 +16889,16 @@
 		switch ( _t.getType()) {
 		case PARAMETER:
 		{
-			AST tmp1096_AST_in = (AST)_t;
+			AST tmp1107_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
-			AST tmp1097_AST_in = (AST)_t;
+			AST tmp1108_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			bid = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1098_AST_in = (AST)_t;
+			AST tmp1109_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			brec = _t==ASTNULL ? null : (AST)_t;
@@ -16775,7 +16912,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp1099_AST_in = (AST)_t;
+				AST tmp1110_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -16821,12 +16958,12 @@
 			switch ( _t.getType()) {
 			case FIELDS:
 			{
-				AST __t531 = _t;
-				AST tmp1100_AST_in = (AST)_t;
+				AST __t542 = _t;
+				AST tmp1111_AST_in = (AST)_t;
 				match(_t,FIELDS);
 				_t = _t.getFirstChild();
 				{
-				_loop533:
+				_loop544:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -16834,12 +16971,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop533;
+						break _loop544;
 					}
 					
 				} while (true);
 				}
-				_t = __t531;
+				_t = __t542;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -16866,28 +17003,28 @@
 			switch ( _t.getType()) {
 			case INPUT:
 			{
-				AST tmp1101_AST_in = (AST)_t;
+				AST tmp1112_AST_in = (AST)_t;
 				match(_t,INPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OUTPUT:
 			{
-				AST tmp1102_AST_in = (AST)_t;
+				AST tmp1113_AST_in = (AST)_t;
 				match(_t,OUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INPUTOUTPUT:
 			{
-				AST tmp1103_AST_in = (AST)_t;
+				AST tmp1114_AST_in = (AST)_t;
 				match(_t,INPUTOUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURN:
 			{
-				AST tmp1104_AST_in = (AST)_t;
+				AST tmp1115_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -16898,7 +17035,7 @@
 			}
 			}
 			}
-			AST tmp1105_AST_in = (AST)_t;
+			AST tmp1116_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
 			{
@@ -16906,36 +17043,36 @@
 			switch ( _t.getType()) {
 			case TABLE:
 			{
-				AST tmp1106_AST_in = (AST)_t;
+				AST tmp1117_AST_in = (AST)_t;
 				match(_t,TABLE);
 				_t = _t.getNextSibling();
-				AST tmp1107_AST_in = (AST)_t;
+				AST tmp1118_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.TEMPTABLESYMBOL);
 				_t = _retTree;
 				{
-				_loop537:
+				_loop548:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1108_AST_in = (AST)_t;
+						AST tmp1119_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1109_AST_in = (AST)_t;
+						AST tmp1120_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop537;
+						break _loop548;
 					}
 					}
 				} while (true);
@@ -16944,7 +17081,7 @@
 			}
 			case TABLEHANDLE:
 			{
-				AST tmp1110_AST_in = (AST)_t;
+				AST tmp1121_AST_in = (AST)_t;
 				match(_t,TABLEHANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -16952,7 +17089,7 @@
 				switch ( _t.getType()) {
 				case FOR:
 				{
-					AST tmp1111_AST_in = (AST)_t;
+					AST tmp1122_AST_in = (AST)_t;
 					match(_t,FOR);
 					_t = _t.getNextSibling();
 					break;
@@ -16971,27 +17108,27 @@
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop540:
+				_loop551:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1112_AST_in = (AST)_t;
+						AST tmp1123_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1113_AST_in = (AST)_t;
+						AST tmp1124_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop540;
+						break _loop551;
 					}
 					}
 				} while (true);
@@ -17003,44 +17140,44 @@
 			}
 			case DATASET:
 			{
-				AST tmp1114_AST_in = (AST)_t;
+				AST tmp1125_AST_in = (AST)_t;
 				match(_t,DATASET);
 				_t = _t.getNextSibling();
-				AST tmp1115_AST_in = (AST)_t;
+				AST tmp1126_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				ds = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop542:
+				_loop553:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1116_AST_in = (AST)_t;
+						AST tmp1127_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BYVALUE:
 					{
-						AST tmp1117_AST_in = (AST)_t;
+						AST tmp1128_AST_in = (AST)_t;
 						match(_t,BYVALUE);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1118_AST_in = (AST)_t;
+						AST tmp1129_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop542;
+						break _loop553;
 					}
 					}
 				} while (true);
@@ -17052,41 +17189,41 @@
 			}
 			case DATASETHANDLE:
 			{
-				AST tmp1119_AST_in = (AST)_t;
+				AST tmp1130_AST_in = (AST)_t;
 				match(_t,DATASETHANDLE);
 				_t = _t.getNextSibling();
 				id3 = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop544:
+				_loop555:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1120_AST_in = (AST)_t;
+						AST tmp1131_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BYVALUE:
 					{
-						AST tmp1121_AST_in = (AST)_t;
+						AST tmp1132_AST_in = (AST)_t;
 						match(_t,BYVALUE);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1122_AST_in = (AST)_t;
+						AST tmp1133_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					default:
 					{
-						break _loop544;
+						break _loop555;
 					}
 					}
 				} while (true);
@@ -17147,7 +17284,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t524;
+		_t = __t535;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -17161,20 +17298,20 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==AS)) {
-			AST __t548 = _t;
+			AST __t559 = _t;
 			as = _t==ASTNULL ? null :(AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
 			{
-			boolean synPredMatched552 = false;
+			boolean synPredMatched563 = false;
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType()==HANDLE))) {
-				AST __t552 = _t;
-				synPredMatched552 = true;
+				AST __t563 = _t;
+				synPredMatched563 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1123_AST_in = (AST)_t;
+					AST tmp1134_AST_in = (AST)_t;
 					match(_t,HANDLE);
 					_t = _t.getNextSibling();
 					{
@@ -17182,7 +17319,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp1124_AST_in = (AST)_t;
+						AST tmp1135_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -17208,13 +17345,13 @@
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched552 = false;
+					synPredMatched563 = false;
 				}
-				_t = __t552;
+				_t = __t563;
 inputState.guessing--;
 			}
-			if ( synPredMatched552 ) {
-				AST tmp1125_AST_in = (AST)_t;
+			if ( synPredMatched563 ) {
+				AST tmp1136_AST_in = (AST)_t;
 				match(_t,HANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -17222,7 +17359,7 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp1126_AST_in = (AST)_t;
+					AST tmp1137_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
@@ -17247,10 +17384,10 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CLASS)) {
-				AST tmp1127_AST_in = (AST)_t;
+				AST tmp1138_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1128_AST_in = (AST)_t;
+				AST tmp1139_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 			}
@@ -17263,7 +17400,7 @@
 			}
 			
 			}
-			_t = __t548;
+			_t = __t559;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defAs(as);
@@ -17277,7 +17414,7 @@
 		
 		}
 		{
-		_loop559:
+		_loop570:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -17290,19 +17427,19 @@
 			}
 			case DECIMALS:
 			{
-				AST __t556 = _t;
-				AST tmp1129_AST_in = (AST)_t;
+				AST __t567 = _t;
+				AST tmp1140_AST_in = (AST)_t;
 				match(_t,DECIMALS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t556;
+				_t = __t567;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t557 = _t;
+				AST __t568 = _t;
 				li = _t==ASTNULL ? null :(AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
@@ -17313,7 +17450,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1130_AST_in = (AST)_t;
+					AST tmp1141_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -17328,7 +17465,7 @@
 				}
 				}
 				}
-				_t = __t557;
+				_t = __t568;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.defLike(li);
@@ -17350,7 +17487,7 @@
 			}
 			case NOUNDO:
 			{
-				AST tmp1131_AST_in = (AST)_t;
+				AST tmp1142_AST_in = (AST)_t;
 				match(_t,NOUNDO);
 				_t = _t.getNextSibling();
 				break;
@@ -17364,17 +17501,17 @@
 			default:
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==FORMAT)) {
-					AST __t555 = _t;
-					AST tmp1132_AST_in = (AST)_t;
+					AST __t566 = _t;
+					AST tmp1143_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t555;
+					_t = __t566;
 					_t = _t.getNextSibling();
 				}
 			else {
-				break _loop559;
+				break _loop570;
 			}
 			}
 		} while (true);
@@ -17390,7 +17527,7 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp1133_AST_in = (AST)_t;
+			AST tmp1144_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
@@ -17468,23 +17605,23 @@
 		switch ( _t.getType()) {
 		case Not_casesens:
 		{
-			AST __t1656 = _t;
-			AST tmp1134_AST_in = (AST)_t;
+			AST __t1667 = _t;
+			AST tmp1145_AST_in = (AST)_t;
 			match(_t,Not_casesens);
 			_t = _t.getFirstChild();
-			AST tmp1135_AST_in = (AST)_t;
+			AST tmp1146_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp1136_AST_in = (AST)_t;
+			AST tmp1147_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
-			_t = __t1656;
+			_t = __t1667;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CASESENSITIVE:
 		{
-			AST tmp1137_AST_in = (AST)_t;
+			AST tmp1148_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -17502,7 +17639,7 @@
 		AST initial_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1966 = _t;
-		AST tmp1138_AST_in = (AST)_t;
+		AST tmp1149_AST_in = (AST)_t;
 		match(_t,INITIAL);
 		_t = _t.getFirstChild();
 		{
@@ -17510,7 +17647,7 @@
 		switch ( _t.getType()) {
 		case LEFTBRACE:
 		{
-			AST tmp1139_AST_in = (AST)_t;
+			AST tmp1150_AST_in = (AST)_t;
 			match(_t,LEFTBRACE);
 			_t = _t.getNextSibling();
 			{
@@ -17518,7 +17655,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp1140_AST_in = (AST)_t;
+				AST tmp1151_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -17581,7 +17718,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1141_AST_in = (AST)_t;
+					AST tmp1152_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					{
@@ -17589,7 +17726,7 @@
 					switch ( _t.getType()) {
 					case TODAY:
 					{
-						AST tmp1142_AST_in = (AST)_t;
+						AST tmp1153_AST_in = (AST)_t;
 						match(_t,TODAY);
 						_t = _t.getNextSibling();
 						break;
@@ -17654,7 +17791,7 @@
 				
 			} while (true);
 			}
-			AST tmp1143_AST_in = (AST)_t;
+			AST tmp1154_AST_in = (AST)_t;
 			match(_t,RIGHTBRACE);
 			_t = _t.getNextSibling();
 			break;
@@ -17708,7 +17845,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp1144_AST_in = (AST)_t;
+				AST tmp1155_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -17784,7 +17921,7 @@
 		AST extentphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1917 = _t;
-		AST tmp1145_AST_in = (AST)_t;
+		AST tmp1156_AST_in = (AST)_t;
 		match(_t,EXTENT);
 		_t = _t.getFirstChild();
 		{
@@ -17811,7 +17948,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t561 = _t;
+		AST __t572 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -17859,7 +17996,7 @@
 		}
 		}
 		}
-		AST tmp1146_AST_in = (AST)_t;
+		AST tmp1157_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -17868,7 +18005,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(QUERY, def, id));
 		}
-		AST tmp1147_AST_in = (AST)_t;
+		AST tmp1158_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -17899,11 +18036,11 @@
 		}
 		}
 		{
-		_loop567:
+		_loop578:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1148_AST_in = (AST)_t;
+				AST tmp1159_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
@@ -17935,52 +18072,52 @@
 				}
 			}
 			else {
-				break _loop567;
+				break _loop578;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop570:
+		_loop581:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case CACHE:
 			{
-				AST __t569 = _t;
-				AST tmp1149_AST_in = (AST)_t;
+				AST __t580 = _t;
+				AST tmp1160_AST_in = (AST)_t;
 				match(_t,CACHE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t569;
+				_t = __t580;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLING:
 			{
-				AST tmp1150_AST_in = (AST)_t;
+				AST tmp1161_AST_in = (AST)_t;
 				match(_t,SCROLLING);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RCODEINFORMATION:
 			{
-				AST tmp1151_AST_in = (AST)_t;
+				AST tmp1162_AST_in = (AST)_t;
 				match(_t,RCODEINFORMATION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop570;
+				break _loop581;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t561;
+		_t = __t572;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
@@ -17996,8 +18133,8 @@
 		switch ( _t.getType()) {
 		case FIELDS:
 		{
-			AST __t1036 = _t;
-			AST tmp1152_AST_in = (AST)_t;
+			AST __t1047 = _t;
+			AST tmp1163_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
@@ -18005,11 +18142,11 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1153_AST_in = (AST)_t;
+				AST tmp1164_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
-				_loop1041:
+				_loop1052:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -18020,13 +18157,13 @@
 						switch ( _t.getType()) {
 						case WHEN:
 						{
-							AST __t1040 = _t;
-							AST tmp1154_AST_in = (AST)_t;
+							AST __t1051 = _t;
+							AST tmp1165_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1040;
+							_t = __t1051;
 							_t = _t.getNextSibling();
 							break;
 						}
@@ -18043,12 +18180,12 @@
 						}
 					}
 					else {
-						break _loop1041;
+						break _loop1052;
 					}
 					
 				} while (true);
 				}
-				AST tmp1155_AST_in = (AST)_t;
+				AST tmp1166_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -18063,14 +18200,14 @@
 			}
 			}
 			}
-			_t = __t1036;
+			_t = __t1047;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCEPT:
 		{
-			AST __t1042 = _t;
-			AST tmp1156_AST_in = (AST)_t;
+			AST __t1053 = _t;
+			AST tmp1167_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -18078,11 +18215,11 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1157_AST_in = (AST)_t;
+				AST tmp1168_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
-				_loop1047:
+				_loop1058:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -18093,13 +18230,13 @@
 						switch ( _t.getType()) {
 						case WHEN:
 						{
-							AST __t1046 = _t;
-							AST tmp1158_AST_in = (AST)_t;
+							AST __t1057 = _t;
+							AST tmp1169_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
 							_t = _retTree;
-							_t = __t1046;
+							_t = __t1057;
 							_t = _t.getNextSibling();
 							break;
 						}
@@ -18116,12 +18253,12 @@
 						}
 					}
 					else {
-						break _loop1047;
+						break _loop1058;
 					}
 					
 				} while (true);
 				}
-				AST tmp1159_AST_in = (AST)_t;
+				AST tmp1170_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -18136,7 +18273,7 @@
 			}
 			}
 			}
-			_t = __t1042;
+			_t = __t1053;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -18154,7 +18291,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t572 = _t;
+		AST __t583 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -18202,7 +18339,7 @@
 		}
 		}
 		}
-		AST tmp1160_AST_in = (AST)_t;
+		AST tmp1171_AST_in = (AST)_t;
 		match(_t,RECTANGLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18212,38 +18349,38 @@
 			push(action.defineSymbol(RECTANGLE, def, id));
 		}
 		{
-		_loop580:
+		_loop591:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOFILL:
 			{
-				AST tmp1161_AST_in = (AST)_t;
+				AST tmp1172_AST_in = (AST)_t;
 				match(_t,NOFILL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EDGECHARS:
 			{
-				AST __t576 = _t;
-				AST tmp1162_AST_in = (AST)_t;
+				AST __t587 = _t;
+				AST tmp1173_AST_in = (AST)_t;
 				match(_t,EDGECHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t576;
+				_t = __t587;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EDGEPIXELS:
 			{
-				AST __t577 = _t;
-				AST tmp1163_AST_in = (AST)_t;
+				AST __t588 = _t;
+				AST tmp1174_AST_in = (AST)_t;
 				match(_t,EDGEPIXELS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t577;
+				_t = __t588;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -18258,15 +18395,15 @@
 			}
 			case GRAPHICEDGE:
 			{
-				AST tmp1164_AST_in = (AST)_t;
+				AST tmp1175_AST_in = (AST)_t;
 				match(_t,GRAPHICEDGE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LIKE:
 			{
-				AST __t578 = _t;
-				AST tmp1165_AST_in = (AST)_t;
+				AST __t589 = _t;
+				AST tmp1176_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -18276,7 +18413,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1166_AST_in = (AST)_t;
+					AST tmp1177_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -18291,7 +18428,7 @@
 				}
 				}
 				}
-				_t = __t578;
+				_t = __t589;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -18311,7 +18448,7 @@
 			}
 			default:
 			{
-				break _loop580;
+				break _loop591;
 			}
 			}
 		} while (true);
@@ -18338,7 +18475,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t572;
+		_t = __t583;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
@@ -18352,7 +18489,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t583 = _t;
+		AST __t594 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -18400,7 +18537,7 @@
 		}
 		}
 		}
-		AST tmp1167_AST_in = (AST)_t;
+		AST tmp1178_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18408,7 +18545,7 @@
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t583;
+		_t = __t594;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(action.defineSymbol(STREAM, def, id));
@@ -18422,7 +18559,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t587 = _t;
+		AST __t598 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -18470,7 +18607,7 @@
 		}
 		}
 		}
-		AST tmp1168_AST_in = (AST)_t;
+		AST tmp1179_AST_in = (AST)_t;
 		match(_t,SUBMENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18480,7 +18617,7 @@
 			push(action.defineSymbol(SUBMENU, def, id));
 		}
 		{
-		_loop591:
+		_loop602:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_12.member(_t.getType()))) {
@@ -18488,13 +18625,13 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop591;
+				break _loop602;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop593:
+		_loop604:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_13.member(_t.getType()))) {
@@ -18502,14 +18639,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop593;
+				break _loop604;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t587;
+		_t = __t598;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
@@ -18524,7 +18661,7 @@
 		AST id = null;
 		AST bt = null;
 		
-		AST __t595 = _t;
+		AST __t606 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -18572,7 +18709,7 @@
 		}
 		}
 		}
-		AST tmp1169_AST_in = (AST)_t;
+		AST tmp1180_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18586,14 +18723,14 @@
 		switch ( _t.getType()) {
 		case UNDO:
 		{
-			AST tmp1170_AST_in = (AST)_t;
+			AST tmp1181_AST_in = (AST)_t;
 			match(_t,UNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp1171_AST_in = (AST)_t;
+			AST tmp1182_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -18681,7 +18818,7 @@
 		switch ( _t.getType()) {
 		case REFERENCEONLY:
 		{
-			AST tmp1172_AST_in = (AST)_t;
+			AST tmp1183_AST_in = (AST)_t;
 			match(_t,REFERENCEONLY);
 			_t = _t.getNextSibling();
 			break;
@@ -18760,8 +18897,8 @@
 		switch ( _t.getType()) {
 		case BEFORETABLE:
 		{
-			AST __t605 = _t;
-			AST tmp1173_AST_in = (AST)_t;
+			AST __t616 = _t;
+			AST tmp1184_AST_in = (AST)_t;
 			match(_t,BEFORETABLE);
 			_t = _t.getFirstChild();
 			bt = (AST)_t;
@@ -18770,7 +18907,7 @@
 			if ( inputState.guessing==0 ) {
 					action.defineBuffer(bt, bt, id, false);
 			}
-			_t = __t605;
+			_t = __t616;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -18793,7 +18930,7 @@
 		switch ( _t.getType()) {
 		case RCODEINFORMATION:
 		{
-			AST tmp1174_AST_in = (AST)_t;
+			AST tmp1185_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
@@ -18812,7 +18949,7 @@
 		}
 		}
 		{
-		_loop608:
+		_loop619:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==FIELD)) {
@@ -18820,25 +18957,25 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop608;
+				break _loop619;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop619:
+		_loop630:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==INDEX)) {
-				AST __t610 = _t;
-				AST tmp1175_AST_in = (AST)_t;
+				AST __t621 = _t;
+				AST tmp1186_AST_in = (AST)_t;
 				match(_t,INDEX);
 				_t = _t.getFirstChild();
-				AST tmp1176_AST_in = (AST)_t;
+				AST tmp1187_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
-				_loop614:
+				_loop625:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_tokenSet_17.member(_t.getType()))) {
@@ -18847,14 +18984,14 @@
 						switch ( _t.getType()) {
 						case AS:
 						{
-							AST tmp1177_AST_in = (AST)_t;
+							AST tmp1188_AST_in = (AST)_t;
 							match(_t,AS);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case IS:
 						{
-							AST tmp1178_AST_in = (AST)_t;
+							AST tmp1189_AST_in = (AST)_t;
 							match(_t,IS);
 							_t = _t.getNextSibling();
 							break;
@@ -18876,21 +19013,21 @@
 						switch ( _t.getType()) {
 						case UNIQUE:
 						{
-							AST tmp1179_AST_in = (AST)_t;
+							AST tmp1190_AST_in = (AST)_t;
 							match(_t,UNIQUE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case PRIMARY:
 						{
-							AST tmp1180_AST_in = (AST)_t;
+							AST tmp1191_AST_in = (AST)_t;
 							match(_t,PRIMARY);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case WORDINDEX:
 						{
-							AST tmp1181_AST_in = (AST)_t;
+							AST tmp1192_AST_in = (AST)_t;
 							match(_t,WORDINDEX);
 							_t = _t.getNextSibling();
 							break;
@@ -18903,73 +19040,73 @@
 						}
 					}
 					else {
-						break _loop614;
+						break _loop625;
 					}
 					
 				} while (true);
 				}
 				{
-				int _cnt618=0;
-				_loop618:
+				int _cnt629=0;
+				_loop629:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==ID)) {
-						AST tmp1182_AST_in = (AST)_t;
+						AST tmp1193_AST_in = (AST)_t;
 						match(_t,ID);
 						_t = _t.getNextSibling();
 						{
-						_loop617:
+						_loop628:
 						do {
 							if (_t==null) _t=ASTNULL;
 							switch ( _t.getType()) {
 							case ASCENDING:
 							{
-								AST tmp1183_AST_in = (AST)_t;
+								AST tmp1194_AST_in = (AST)_t;
 								match(_t,ASCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case DESCENDING:
 							{
-								AST tmp1184_AST_in = (AST)_t;
+								AST tmp1195_AST_in = (AST)_t;
 								match(_t,DESCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case CASESENSITIVE:
 							{
-								AST tmp1185_AST_in = (AST)_t;
+								AST tmp1196_AST_in = (AST)_t;
 								match(_t,CASESENSITIVE);
 								_t = _t.getNextSibling();
 								break;
 							}
 							default:
 							{
-								break _loop617;
+								break _loop628;
 							}
 							}
 						} while (true);
 						}
 					}
 					else {
-						if ( _cnt618>=1 ) { break _loop618; } else {throw new NoViableAltException(_t);}
+						if ( _cnt629>=1 ) { break _loop629; } else {throw new NoViableAltException(_t);}
 					}
 					
-					_cnt618++;
+					_cnt629++;
 				} while (true);
 				}
-				_t = __t610;
+				_t = __t621;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop619;
+				break _loop630;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t595;
+		_t = __t606;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -18979,8 +19116,8 @@
 		AST def_table_like_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST rec = null;
 		
-		AST __t621 = _t;
-		AST tmp1186_AST_in = (AST)_t;
+		AST __t632 = _t;
+		AST tmp1197_AST_in = (AST)_t;
 		match(_t,LIKE);
 		_t = _t.getFirstChild();
 		rec = _t==ASTNULL ? null : (AST)_t;
@@ -18991,7 +19128,7 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST tmp1187_AST_in = (AST)_t;
+			AST tmp1198_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
@@ -19008,15 +19145,15 @@
 		}
 		}
 		{
-		_loop627:
+		_loop638:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==USEINDEX)) {
-				AST __t624 = _t;
-				AST tmp1188_AST_in = (AST)_t;
+				AST __t635 = _t;
+				AST tmp1199_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp1189_AST_in = (AST)_t;
+				AST tmp1200_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
@@ -19030,14 +19167,14 @@
 					switch ( _t.getType()) {
 					case AS:
 					{
-						AST tmp1190_AST_in = (AST)_t;
+						AST tmp1201_AST_in = (AST)_t;
 						match(_t,AS);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case IS:
 					{
-						AST tmp1191_AST_in = (AST)_t;
+						AST tmp1202_AST_in = (AST)_t;
 						match(_t,IS);
 						_t = _t.getNextSibling();
 						break;
@@ -19048,7 +19185,7 @@
 					}
 					}
 					}
-					AST tmp1192_AST_in = (AST)_t;
+					AST tmp1203_AST_in = (AST)_t;
 					match(_t,PRIMARY);
 					_t = _t.getNextSibling();
 					break;
@@ -19063,16 +19200,16 @@
 				}
 				}
 				}
-				_t = __t624;
+				_t = __t635;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop627;
+				break _loop638;
 			}
 			
 		} while (true);
 		}
-		_t = __t621;
+		_t = __t632;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.defineTableLike(rec);
@@ -19085,8 +19222,8 @@
 		AST def_table_field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST id = null;
 		
-		AST __t629 = _t;
-		AST tmp1193_AST_in = (AST)_t;
+		AST __t640 = _t;
+		AST tmp1204_AST_in = (AST)_t;
 		match(_t,FIELD);
 		_t = _t.getFirstChild();
 		id = (AST)_t;
@@ -19096,7 +19233,7 @@
 			action.defineTableField(id);
 		}
 		{
-		_loop631:
+		_loop642:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_18.member(_t.getType()))) {
@@ -19104,12 +19241,12 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop631;
+				break _loop642;
 			}
 			
 		} while (true);
 		}
-		_t = __t629;
+		_t = __t640;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19124,7 +19261,7 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST __t747 = _t;
+			AST __t758 = _t;
 			as = _t==ASTNULL ? null :(AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
@@ -19133,10 +19270,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp1194_AST_in = (AST)_t;
+				AST tmp1205_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1195_AST_in = (AST)_t;
+				AST tmp1206_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -19170,7 +19307,7 @@
 			}
 			}
 			}
-			_t = __t747;
+			_t = __t758;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defAs(as);
@@ -19195,43 +19332,43 @@
 		}
 		case COLUMNCODEPAGE:
 		{
-			AST __t749 = _t;
-			AST tmp1196_AST_in = (AST)_t;
+			AST __t760 = _t;
+			AST tmp1207_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t749;
+			_t = __t760;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTEXTHELPID:
 		{
-			AST __t750 = _t;
-			AST tmp1197_AST_in = (AST)_t;
+			AST __t761 = _t;
+			AST tmp1208_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t750;
+			_t = __t761;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMALS:
 		{
-			AST __t751 = _t;
-			AST tmp1198_AST_in = (AST)_t;
+			AST __t762 = _t;
+			AST tmp1209_AST_in = (AST)_t;
 			match(_t,DECIMALS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t751;
+			_t = __t762;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DROPTARGET:
 		{
-			AST tmp1199_AST_in = (AST)_t;
+			AST tmp1210_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
@@ -19244,37 +19381,37 @@
 		}
 		case FONT:
 		{
-			AST __t752 = _t;
-			AST tmp1200_AST_in = (AST)_t;
+			AST __t763 = _t;
+			AST tmp1211_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t752;
+			_t = __t763;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FORMAT:
 		{
-			AST __t753 = _t;
-			AST tmp1201_AST_in = (AST)_t;
+			AST __t764 = _t;
+			AST tmp1212_AST_in = (AST)_t;
 			match(_t,FORMAT);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t753;
+			_t = __t764;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELP:
 		{
-			AST __t754 = _t;
-			AST tmp1202_AST_in = (AST)_t;
+			AST __t765 = _t;
+			AST tmp1213_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t754;
+			_t = __t765;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -19293,7 +19430,7 @@
 		}
 		case LIKE:
 		{
-			AST __t755 = _t;
+			AST __t766 = _t;
 			li = _t==ASTNULL ? null :(AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
@@ -19304,7 +19441,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp1203_AST_in = (AST)_t;
+				AST tmp1214_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -19319,7 +19456,7 @@
 			}
 			}
 			}
-			_t = __t755;
+			_t = __t766;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defLike(li);
@@ -19328,19 +19465,19 @@
 		}
 		case MOUSEPOINTER:
 		{
-			AST __t757 = _t;
-			AST tmp1204_AST_in = (AST)_t;
+			AST __t768 = _t;
+			AST tmp1215_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t757;
+			_t = __t768;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp1205_AST_in = (AST)_t;
+			AST tmp1216_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -19353,7 +19490,7 @@
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp1206_AST_in = (AST)_t;
+			AST tmp1217_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
@@ -19384,7 +19521,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t633 = _t;
+		AST __t644 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -19432,7 +19569,7 @@
 		}
 		}
 		}
-		AST tmp1207_AST_in = (AST)_t;
+		AST tmp1218_AST_in = (AST)_t;
 		match(_t,WORKTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -19446,7 +19583,7 @@
 		switch ( _t.getType()) {
 		case NOUNDO:
 		{
-			AST tmp1208_AST_in = (AST)_t;
+			AST tmp1219_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -19512,7 +19649,7 @@
 		}
 		}
 		{
-		_loop640:
+		_loop651:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==FIELD)) {
@@ -19520,14 +19657,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop640;
+				break _loop651;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t633;
+		_t = __t644;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19538,7 +19675,7 @@
 		AST def = null;
 		AST id = null;
 		
-		AST __t642 = _t;
+		AST __t653 = _t;
 		def = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DEFINE);
 		_t = _t.getFirstChild();
@@ -19586,7 +19723,7 @@
 		}
 		}
 		}
-		AST tmp1209_AST_in = (AST)_t;
+		AST tmp1220_AST_in = (AST)_t;
 		match(_t,VARIABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -19596,7 +19733,7 @@
 			push(action.defineVariable(def, id));
 		}
 		{
-		_loop646:
+		_loop657:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_18.member(_t.getType()))) {
@@ -19604,7 +19741,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop646;
+				break _loop657;
 			}
 			
 		} while (true);
@@ -19631,7 +19768,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t642;
+		_t = __t653;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 			action.addToSymbolScope(pop());
@@ -19643,8 +19780,8 @@
 		
 		AST deletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t649 = _t;
-		AST tmp1210_AST_in = (AST)_t;
+		AST __t660 = _t;
+		AST tmp1221_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -19654,13 +19791,13 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST __t651 = _t;
-			AST tmp1211_AST_in = (AST)_t;
+			AST __t662 = _t;
+			AST tmp1222_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
 			_t = _retTree;
-			_t = __t651;
+			_t = __t662;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -19681,7 +19818,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1212_AST_in = (AST)_t;
+			AST tmp1223_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -19699,7 +19836,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t649;
+		_t = __t660;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19709,31 +19846,31 @@
 		AST destructorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST d = null;
 		
-		AST __t654 = _t;
+		AST __t665 = _t;
 		d = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DESTRUCTOR);
 		_t = _t.getFirstChild();
 		if ( inputState.guessing==0 ) {
 			action.scopeAdd(d);
 		}
-		AST tmp1213_AST_in = (AST)_t;
+		AST tmp1224_AST_in = (AST)_t;
 		match(_t,PUBLIC);
 		_t = _t.getNextSibling();
-		AST tmp1214_AST_in = (AST)_t;
+		AST tmp1225_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
-		AST tmp1215_AST_in = (AST)_t;
+		AST tmp1226_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
-		AST tmp1216_AST_in = (AST)_t;
+		AST tmp1227_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		block_colon(_t);
 		_t = _retTree;
 		code_block(_t);
 		_t = _retTree;
-		AST __t655 = _t;
-		AST tmp1217_AST_in = (AST)_t;
+		AST __t666 = _t;
+		AST tmp1228_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -19741,7 +19878,7 @@
 		switch ( _t.getType()) {
 		case DESTRUCTOR:
 		{
-			AST tmp1218_AST_in = (AST)_t;
+			AST tmp1229_AST_in = (AST)_t;
 			match(_t,DESTRUCTOR);
 			_t = _t.getNextSibling();
 			break;
@@ -19756,14 +19893,14 @@
 		}
 		}
 		}
-		_t = __t655;
+		_t = __t666;
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
 		if ( inputState.guessing==0 ) {
 			action.scopeClose(d);
 		}
-		_t = __t654;
+		_t = __t665;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19773,7 +19910,7 @@
 		AST disablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t658 = _t;
+		AST __t669 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DISABLE);
 		_t = _t.getFirstChild();
@@ -19785,7 +19922,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1219_AST_in = (AST)_t;
+			AST tmp1230_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -19809,8 +19946,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t661 = _t;
-			AST tmp1220_AST_in = (AST)_t;
+			AST __t672 = _t;
+			AST tmp1231_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -19818,12 +19955,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t663 = _t;
-				AST tmp1221_AST_in = (AST)_t;
+				AST __t674 = _t;
+				AST tmp1232_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop665:
+				_loop676:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -19831,12 +19968,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop665;
+						break _loop676;
 					}
 					
 				} while (true);
 				}
-				_t = __t663;
+				_t = __t674;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -19850,15 +19987,15 @@
 			}
 			}
 			}
-			_t = __t661;
+			_t = __t672;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Form_item:
 		{
 			{
-			int _cnt667=0;
-			_loop667:
+			int _cnt678=0;
+			_loop678:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -19866,10 +20003,10 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt667>=1 ) { break _loop667; } else {throw new NoViableAltException(_t);}
+					if ( _cnt678>=1 ) { break _loop678; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt667++;
+				_cnt678++;
 			} while (true);
 			}
 			break;
@@ -19911,7 +20048,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t658;
+		_t = __t669;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19920,14 +20057,14 @@
 		
 		AST disabletriggersstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t670 = _t;
-		AST tmp1222_AST_in = (AST)_t;
+		AST __t681 = _t;
+		AST tmp1233_AST_in = (AST)_t;
 		match(_t,DISABLE);
 		_t = _t.getFirstChild();
-		AST tmp1223_AST_in = (AST)_t;
+		AST tmp1234_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getNextSibling();
-		AST tmp1224_AST_in = (AST)_t;
+		AST tmp1235_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -19935,14 +20072,14 @@
 		switch ( _t.getType()) {
 		case DUMP:
 		{
-			AST tmp1225_AST_in = (AST)_t;
+			AST tmp1236_AST_in = (AST)_t;
 			match(_t,DUMP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOAD:
 		{
-			AST tmp1226_AST_in = (AST)_t;
+			AST tmp1237_AST_in = (AST)_t;
 			match(_t,LOAD);
 			_t = _t.getNextSibling();
 			break;
@@ -19953,7 +20090,7 @@
 		}
 		}
 		}
-		AST tmp1227_AST_in = (AST)_t;
+		AST tmp1238_AST_in = (AST)_t;
 		match(_t,OF);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SYMBOL);
@@ -19963,7 +20100,7 @@
 		switch ( _t.getType()) {
 		case ALLOWREPLICATION:
 		{
-			AST tmp1228_AST_in = (AST)_t;
+			AST tmp1239_AST_in = (AST)_t;
 			match(_t,ALLOWREPLICATION);
 			_t = _t.getNextSibling();
 			break;
@@ -19981,7 +20118,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t670;
+		_t = __t681;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -19990,8 +20127,8 @@
 		
 		AST disconnectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t674 = _t;
-		AST tmp1229_AST_in = (AST)_t;
+		AST __t685 = _t;
+		AST tmp1240_AST_in = (AST)_t;
 		match(_t,DISCONNECT);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -20001,7 +20138,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1230_AST_in = (AST)_t;
+			AST tmp1241_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20019,7 +20156,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t674;
+		_t = __t685;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20029,7 +20166,7 @@
 		AST displaystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t677 = _t;
+		AST __t688 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DISPLAY);
 		_t = _t.getFirstChild();
@@ -20067,7 +20204,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1231_AST_in = (AST)_t;
+			AST tmp1242_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -20089,7 +20226,7 @@
 		}
 		}
 		{
-		_loop681:
+		_loop692:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -20097,7 +20234,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop681;
+				break _loop692;
 			}
 			
 		} while (true);
@@ -20107,12 +20244,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t683 = _t;
-			AST tmp1232_AST_in = (AST)_t;
+			AST __t694 = _t;
+			AST tmp1243_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop685:
+			_loop696:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -20120,12 +20257,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop685;
+					break _loop696;
 				}
 				
 			} while (true);
 			}
-			_t = __t683;
+			_t = __t694;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -20148,16 +20285,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t687 = _t;
-			AST tmp1233_AST_in = (AST)_t;
+			AST __t698 = _t;
+			AST tmp1244_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1234_AST_in = (AST)_t;
+			AST tmp1245_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t687;
+			_t = __t698;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -20175,7 +20312,7 @@
 		}
 		}
 		{
-		_loop689:
+		_loop700:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WITH)) {
@@ -20183,7 +20320,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop689;
+				break _loop700;
 			}
 			
 		} while (true);
@@ -20193,7 +20330,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1235_AST_in = (AST)_t;
+			AST tmp1246_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20214,7 +20351,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t677;
+		_t = __t688;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20224,10 +20361,10 @@
 		AST stream_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2300 = _t;
-		AST tmp1236_AST_in = (AST)_t;
+		AST tmp1247_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getFirstChild();
-		AST tmp1237_AST_in = (AST)_t;
+		AST tmp1248_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		_t = __t2300;
@@ -20240,7 +20377,7 @@
 		AST displaystate_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST fi = null;
 		
-		AST __t692 = _t;
+		AST __t703 = _t;
 		fi = _t==ASTNULL ? null :(AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
@@ -20269,7 +20406,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1238_AST_in = (AST)_t;
+					AST tmp1249_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -20279,7 +20416,7 @@
 				
 				}
 				{
-				_loop696:
+				_loop707:
 				do {
 					if (_t==null) _t=ASTNULL;
 					switch ( _t.getType()) {
@@ -20297,7 +20434,7 @@
 					}
 					default:
 					{
-						break _loop696;
+						break _loop707;
 					}
 					}
 				} while (true);
@@ -20311,7 +20448,7 @@
 		}
 		}
 		}
-		_t = __t692;
+		_t = __t703;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20321,7 +20458,7 @@
 		AST skipphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2272 = _t;
-		AST tmp1239_AST_in = (AST)_t;
+		AST tmp1250_AST_in = (AST)_t;
 		match(_t,SKIP);
 		_t = _t.getFirstChild();
 		{
@@ -20352,16 +20489,16 @@
 		
 		AST aggregatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1611 = _t;
-		AST tmp1240_AST_in = (AST)_t;
+		AST __t1622 = _t;
+		AST tmp1251_AST_in = (AST)_t;
 		match(_t,Aggregate_phrase);
 		_t = _t.getFirstChild();
-		AST tmp1241_AST_in = (AST)_t;
+		AST tmp1252_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
-		int _cnt1613=0;
-		_loop1613:
+		int _cnt1624=0;
+		_loop1624:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_19.member(_t.getType()))) {
@@ -20369,19 +20506,19 @@
 				_t = _retTree;
 			}
 			else {
-				if ( _cnt1613>=1 ) { break _loop1613; } else {throw new NoViableAltException(_t);}
+				if ( _cnt1624>=1 ) { break _loop1624; } else {throw new NoViableAltException(_t);}
 			}
 			
-			_cnt1613++;
+			_cnt1624++;
 		} while (true);
 		}
 		{
-		_loop1617:
+		_loop1628:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==BY)) {
-				AST __t1615 = _t;
-				AST tmp1242_AST_in = (AST)_t;
+				AST __t1626 = _t;
+				AST tmp1253_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -20391,7 +20528,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1243_AST_in = (AST)_t;
+					AST tmp1254_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -20406,19 +20543,19 @@
 				}
 				}
 				}
-				_t = __t1615;
+				_t = __t1626;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1617;
+				break _loop1628;
 			}
 			
 		} while (true);
 		}
-		AST tmp1244_AST_in = (AST)_t;
+		AST tmp1255_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1611;
+		_t = __t1622;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20428,7 +20565,7 @@
 		AST dostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST d = null;
 		
-		AST __t704 = _t;
+		AST __t715 = _t;
 		d = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DO);
 		_t = _t.getFirstChild();
@@ -20499,7 +20636,7 @@
 		}
 		}
 		{
-		_loop708:
+		_loop719:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_20.member(_t.getType()))) {
@@ -20507,7 +20644,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop708;
+				break _loop719;
 			}
 			
 		} while (true);
@@ -20524,7 +20661,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t704;
+		_t = __t715;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20537,14 +20674,14 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1245_AST_in = (AST)_t;
+			AST tmp1256_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST tmp1246_AST_in = (AST)_t;
+			AST tmp1257_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getNextSibling();
 			state_end(_t);
@@ -20564,7 +20701,7 @@
 		AST downstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t710 = _t;
+		AST __t721 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,DOWN);
 		_t = _t.getFirstChild();
@@ -20660,7 +20797,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t710;
+		_t = __t721;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20669,11 +20806,11 @@
 		
 		AST emptytemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t718 = _t;
-		AST tmp1247_AST_in = (AST)_t;
+		AST __t729 = _t;
+		AST tmp1258_AST_in = (AST)_t;
 		match(_t,EMPTY);
 		_t = _t.getFirstChild();
-		AST tmp1248_AST_in = (AST)_t;
+		AST tmp1259_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.TEMPTABLESYMBOL);
@@ -20683,7 +20820,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1249_AST_in = (AST)_t;
+			AST tmp1260_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20701,7 +20838,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t718;
+		_t = __t729;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20711,7 +20848,7 @@
 		AST enablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t721 = _t;
+		AST __t732 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,ENABLE);
 		_t = _t.getFirstChild();
@@ -20723,7 +20860,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1250_AST_in = (AST)_t;
+			AST tmp1261_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -20748,8 +20885,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t724 = _t;
-			AST tmp1251_AST_in = (AST)_t;
+			AST __t735 = _t;
+			AST tmp1262_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -20757,12 +20894,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t726 = _t;
-				AST tmp1252_AST_in = (AST)_t;
+				AST __t737 = _t;
+				AST tmp1263_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop728:
+				_loop739:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -20770,12 +20907,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop728;
+						break _loop739;
 					}
 					
 				} while (true);
 				}
-				_t = __t726;
+				_t = __t737;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -20789,15 +20926,15 @@
 			}
 			}
 			}
-			_t = __t724;
+			_t = __t735;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Form_item:
 		{
 			{
-			int _cnt730=0;
-			_loop730:
+			int _cnt741=0;
+			_loop741:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -20805,10 +20942,10 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt730>=1 ) { break _loop730; } else {throw new NoViableAltException(_t);}
+					if ( _cnt741>=1 ) { break _loop741; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt730++;
+				_cnt741++;
 			} while (true);
 			}
 			break;
@@ -20831,16 +20968,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t732 = _t;
-			AST tmp1253_AST_in = (AST)_t;
+			AST __t743 = _t;
+			AST tmp1264_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1254_AST_in = (AST)_t;
+			AST tmp1265_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t732;
+			_t = __t743;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -20881,7 +21018,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t721;
+		_t = __t732;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -20890,8 +21027,8 @@
 		
 		AST exportstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t735 = _t;
-		AST tmp1255_AST_in = (AST)_t;
+		AST __t746 = _t;
+		AST tmp1266_AST_in = (AST)_t;
 		match(_t,EXPORT);
 		_t = _t.getFirstChild();
 		{
@@ -20923,13 +21060,13 @@
 		switch ( _t.getType()) {
 		case DELIMITER:
 		{
-			AST __t738 = _t;
-			AST tmp1256_AST_in = (AST)_t;
+			AST __t749 = _t;
+			AST tmp1267_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t738;
+			_t = __t749;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -20948,7 +21085,7 @@
 		}
 		}
 		{
-		_loop740:
+		_loop751:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -20956,7 +21093,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop740;
+				break _loop751;
 			}
 			
 		} while (true);
@@ -20966,12 +21103,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t742 = _t;
-			AST tmp1257_AST_in = (AST)_t;
+			AST __t753 = _t;
+			AST tmp1268_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop744:
+			_loop755:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -20979,12 +21116,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop744;
+					break _loop755;
 				}
 				
 			} while (true);
 			}
-			_t = __t742;
+			_t = __t753;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21005,7 +21142,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp1258_AST_in = (AST)_t;
+			AST tmp1269_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -21023,7 +21160,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t735;
+		_t = __t746;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21036,14 +21173,14 @@
 		switch ( _t.getType()) {
 		case BLOB:
 		{
-			AST tmp1259_AST_in = (AST)_t;
+			AST tmp1270_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp1260_AST_in = (AST)_t;
+			AST tmp1271_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
@@ -21082,7 +21219,7 @@
 		AST viewasphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2378 = _t;
-		AST tmp1261_AST_in = (AST)_t;
+		AST tmp1272_AST_in = (AST)_t;
 		match(_t,VIEWAS);
 		_t = _t.getFirstChild();
 		{
@@ -21152,7 +21289,7 @@
 		AST xml_data_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2394 = _t;
-		AST tmp1262_AST_in = (AST)_t;
+		AST tmp1273_AST_in = (AST)_t;
 		match(_t,XMLDATATYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -21167,7 +21304,7 @@
 		AST xml_node_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2396 = _t;
-		AST tmp1263_AST_in = (AST)_t;
+		AST tmp1274_AST_in = (AST)_t;
 		match(_t,XMLNODETYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -21182,8 +21319,8 @@
 		AST findstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t759 = _t;
-		AST tmp1264_AST_in = (AST)_t;
+		AST __t770 = _t;
+		AST tmp1275_AST_in = (AST)_t;
 		match(_t,FIND);
 		_t = _t.getFirstChild();
 		{
@@ -21210,7 +21347,7 @@
 		}
 		}
 		}
-		AST __t761 = _t;
+		AST __t772 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
@@ -21219,44 +21356,44 @@
 		}
 		recordphrase(_t);
 		_t = _retTree;
-		_t = __t761;
+		_t = __t772;
 		_t = _t.getNextSibling();
 		{
-		_loop763:
+		_loop774:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOWAIT:
 			{
-				AST tmp1265_AST_in = (AST)_t;
+				AST tmp1276_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOPREFETCH:
 			{
-				AST tmp1266_AST_in = (AST)_t;
+				AST tmp1277_AST_in = (AST)_t;
 				match(_t,NOPREFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1267_AST_in = (AST)_t;
+				AST tmp1278_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop763;
+				break _loop774;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t759;
+		_t = __t770;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21265,19 +21402,19 @@
 		
 		AST fixcodepage_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t765 = _t;
-		AST tmp1268_AST_in = (AST)_t;
+		AST __t776 = _t;
+		AST tmp1279_AST_in = (AST)_t;
 		match(_t,FIXCODEPAGE);
 		_t = _t.getFirstChild();
-		AST tmp1269_AST_in = (AST)_t;
+		AST tmp1280_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp1270_AST_in = (AST)_t;
+		AST tmp1281_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t765;
+		_t = __t776;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21287,7 +21424,7 @@
 		AST forstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST f = null;
 		
-		AST __t767 = _t;
+		AST __t778 = _t;
 		f = _t==ASTNULL ? null :(AST)_t;
 		match(_t,FOR);
 		_t = _t.getFirstChild();
@@ -21299,7 +21436,7 @@
 		for_record_spec(_t,CQ.INITWEAK);
 		_t = _retTree;
 		{
-		_loop769:
+		_loop780:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_20.member(_t.getType()))) {
@@ -21307,7 +21444,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop769;
+				break _loop780;
 			}
 			
 		} while (true);
@@ -21324,7 +21461,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t767;
+		_t = __t778;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21334,7 +21471,7 @@
 		AST widget_id_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2392 = _t;
-		AST tmp1271_AST_in = (AST)_t;
+		AST tmp1282_AST_in = (AST)_t;
 		match(_t,WIDGETID);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -21349,7 +21486,7 @@
 		AST formstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t787 = _t;
+		AST __t798 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,FORMAT);
 		_t = _t.getFirstChild();
@@ -21357,7 +21494,7 @@
 			action.frameInitializingStatement(head);
 		}
 		{
-		_loop789:
+		_loop800:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -21365,7 +21502,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop789;
+				break _loop800;
 			}
 			
 		} while (true);
@@ -21375,13 +21512,13 @@
 		switch ( _t.getType()) {
 		case HEADER:
 		{
-			AST __t791 = _t;
-			AST tmp1272_AST_in = (AST)_t;
+			AST __t802 = _t;
+			AST tmp1283_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
-			int _cnt793=0;
-			_loop793:
+			int _cnt804=0;
+			_loop804:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -21389,25 +21526,25 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt793>=1 ) { break _loop793; } else {throw new NoViableAltException(_t);}
+					if ( _cnt804>=1 ) { break _loop804; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt793++;
+				_cnt804++;
 			} while (true);
 			}
-			_t = __t791;
+			_t = __t802;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BACKGROUND:
 		{
-			AST __t794 = _t;
-			AST tmp1273_AST_in = (AST)_t;
+			AST __t805 = _t;
+			AST tmp1284_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
-			int _cnt796=0;
-			_loop796:
+			int _cnt807=0;
+			_loop807:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Form_item)) {
@@ -21415,13 +21552,13 @@
 					_t = _retTree;
 				}
 				else {
-					if ( _cnt796>=1 ) { break _loop796; } else {throw new NoViableAltException(_t);}
+					if ( _cnt807>=1 ) { break _loop807; } else {throw new NoViableAltException(_t);}
 				}
 				
-				_cnt796++;
+				_cnt807++;
 			} while (true);
 			}
-			_t = __t794;
+			_t = __t805;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21443,12 +21580,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t798 = _t;
-			AST tmp1274_AST_in = (AST)_t;
+			AST __t809 = _t;
+			AST tmp1285_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop800:
+			_loop811:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -21456,12 +21593,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop800;
+					break _loop811;
 				}
 				
 			} while (true);
 			}
-			_t = __t798;
+			_t = __t809;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -21502,7 +21639,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t787;
+		_t = __t798;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21511,8 +21648,8 @@
 		
 		AST atphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1637 = _t;
-		AST tmp1275_AST_in = (AST)_t;
+		AST __t1648 = _t;
+		AST tmp1286_AST_in = (AST)_t;
 		match(_t,AT);
 		_t = _t.getFirstChild();
 		{
@@ -21537,21 +21674,21 @@
 		switch ( _t.getType()) {
 		case COLONALIGNED:
 		{
-			AST tmp1276_AST_in = (AST)_t;
+			AST tmp1287_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp1277_AST_in = (AST)_t;
+			AST tmp1288_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp1278_AST_in = (AST)_t;
+			AST tmp1289_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
@@ -21566,7 +21703,7 @@
 		}
 		}
 		}
-		_t = __t1637;
+		_t = __t1648;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -21603,7 +21740,7 @@
 		case COLOR:
 		{
 			AST __t1698 = _t;
-			AST tmp1279_AST_in = (AST)_t;
+			AST tmp1290_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			{
@@ -21611,7 +21748,7 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST tmp1280_AST_in = (AST)_t;
+				AST tmp1291_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getNextSibling();
 				break;
@@ -21635,7 +21772,7 @@
 			case PROMPT:
 			{
 				AST __t1701 = _t;
-				AST tmp1281_AST_in = (AST)_t;
+				AST tmp1292_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -21671,7 +21808,7 @@
 		AST titlephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2335 = _t;
-		AST tmp1282_AST_in = (AST)_t;
+		AST tmp1293_AST_in = (AST)_t;
 		match(_t,TITLE);
 		_t = _t.getFirstChild();
 		{
@@ -21691,7 +21828,7 @@
 			case COLOR:
 			{
 				AST __t2337 = _t;
-				AST tmp1283_AST_in = (AST)_t;
+				AST tmp1294_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -21703,7 +21840,7 @@
 			case FONT:
 			{
 				AST __t2338 = _t;
-				AST tmp1284_AST_in = (AST)_t;
+				AST tmp1295_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -21732,7 +21869,7 @@
 		AST f = null;
 		AST id = null;
 		
-		AST __t852 = _t;
+		AST __t863 = _t;
 		f = _t==ASTNULL ? null :(AST)_t;
 		match(_t,FUNCTION);
 		_t = _t.getFirstChild();
@@ -21747,14 +21884,14 @@
 		switch ( _t.getType()) {
 		case RETURNS:
 		{
-			AST tmp1285_AST_in = (AST)_t;
+			AST tmp1296_AST_in = (AST)_t;
 			match(_t,RETURNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURN:
 		{
-			AST tmp1286_AST_in = (AST)_t;
+			AST tmp1297_AST_in = (AST)_t;
 			match(_t,RETURN);
 			_t = _t.getNextSibling();
 			break;
@@ -21790,10 +21927,10 @@
 		switch ( _t.getType()) {
 		case CLASS:
 		{
-			AST tmp1287_AST_in = (AST)_t;
+			AST tmp1298_AST_in = (AST)_t;
 			match(_t,CLASS);
 			_t = _t.getNextSibling();
-			AST tmp1288_AST_in = (AST)_t;
+			AST tmp1299_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -21830,7 +21967,7 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp1289_AST_in = (AST)_t;
+			AST tmp1300_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
@@ -21878,7 +22015,7 @@
 		switch ( _t.getType()) {
 		case FORWARDS:
 		{
-			AST tmp1290_AST_in = (AST)_t;
+			AST tmp1301_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getNextSibling();
 			{
@@ -21886,21 +22023,21 @@
 			switch ( _t.getType()) {
 			case LEXCOLON:
 			{
-				AST tmp1291_AST_in = (AST)_t;
+				AST tmp1302_AST_in = (AST)_t;
 				match(_t,LEXCOLON);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PERIOD:
 			{
-				AST tmp1292_AST_in = (AST)_t;
+				AST tmp1303_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EOF:
 			{
-				AST tmp1293_AST_in = (AST)_t;
+				AST tmp1304_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
@@ -21931,15 +22068,15 @@
 			switch ( _t.getType()) {
 			case EOF:
 			{
-				AST tmp1294_AST_in = (AST)_t;
+				AST tmp1305_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case END:
 			{
-				AST __t866 = _t;
-				AST tmp1295_AST_in = (AST)_t;
+				AST __t877 = _t;
+				AST tmp1306_AST_in = (AST)_t;
 				match(_t,END);
 				_t = _t.getFirstChild();
 				{
@@ -21947,7 +22084,7 @@
 				switch ( _t.getType()) {
 				case FUNCTION:
 				{
-					AST tmp1296_AST_in = (AST)_t;
+					AST tmp1307_AST_in = (AST)_t;
 					match(_t,FUNCTION);
 					_t = _t.getNextSibling();
 					break;
@@ -21962,7 +22099,7 @@
 				}
 				}
 				}
-				_t = __t866;
+				_t = __t877;
 				_t = _t.getNextSibling();
 				state_end(_t);
 				_t = _retTree;
@@ -21977,33 +22114,33 @@
 			break;
 		}
 		default:
-			boolean synPredMatched860 = false;
+			boolean synPredMatched871 = false;
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType()==IN_KW))) {
-				AST __t860 = _t;
-				synPredMatched860 = true;
+				AST __t871 = _t;
+				synPredMatched871 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1297_AST_in = (AST)_t;
+					AST tmp1308_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getNextSibling();
-					AST tmp1298_AST_in = (AST)_t;
+					AST tmp1309_AST_in = (AST)_t;
 					match(_t,SUPER);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched860 = false;
+					synPredMatched871 = false;
 				}
-				_t = __t860;
+				_t = __t871;
 inputState.guessing--;
 			}
-			if ( synPredMatched860 ) {
-				AST tmp1299_AST_in = (AST)_t;
+			if ( synPredMatched871 ) {
+				AST tmp1310_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
-				AST tmp1300_AST_in = (AST)_t;
+				AST tmp1311_AST_in = (AST)_t;
 				match(_t,SUPER);
 				_t = _t.getNextSibling();
 				{
@@ -22011,21 +22148,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp1301_AST_in = (AST)_t;
+					AST tmp1312_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp1302_AST_in = (AST)_t;
+					AST tmp1313_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp1303_AST_in = (AST)_t;
+					AST tmp1314_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -22046,7 +22183,7 @@
 				switch ( _t.getType()) {
 				case MAP:
 				{
-					AST tmp1304_AST_in = (AST)_t;
+					AST tmp1315_AST_in = (AST)_t;
 					match(_t,MAP);
 					_t = _t.getNextSibling();
 					{
@@ -22054,7 +22191,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp1305_AST_in = (AST)_t;
+						AST tmp1316_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -22069,7 +22206,7 @@
 					}
 					}
 					}
-					AST tmp1306_AST_in = (AST)_t;
+					AST tmp1317_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					break;
@@ -22084,7 +22221,7 @@
 				}
 				}
 				}
-				AST tmp1307_AST_in = (AST)_t;
+				AST tmp1318_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -22094,21 +22231,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp1308_AST_in = (AST)_t;
+					AST tmp1319_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp1309_AST_in = (AST)_t;
+					AST tmp1320_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp1310_AST_in = (AST)_t;
+					AST tmp1321_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -22128,7 +22265,7 @@
 		}
 		}
 		}
-		_t = __t852;
+		_t = __t863;
 		_t = _t.getNextSibling();
 		if ( inputState.guessing==0 ) {
 				action.scopeClose(f);
@@ -22146,8 +22283,8 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST __t869 = _t;
-			AST tmp1311_AST_in = (AST)_t;
+			AST __t880 = _t;
+			AST tmp1322_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			{
@@ -22170,7 +22307,7 @@
 			}
 			}
 			}
-			AST tmp1312_AST_in = (AST)_t;
+			AST tmp1323_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -22181,7 +22318,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp1313_AST_in = (AST)_t;
+				AST tmp1324_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -22196,7 +22333,7 @@
 			}
 			}
 			}
-			_t = __t869;
+			_t = __t880;
 			_t = _t.getNextSibling();
 			if ( inputState.guessing==0 ) {
 				action.defineBuffer(id, id, rec, true);
@@ -22205,37 +22342,37 @@
 		}
 		case INPUT:
 		{
-			AST __t872 = _t;
-			AST tmp1314_AST_in = (AST)_t;
+			AST __t883 = _t;
+			AST tmp1325_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t872;
+			_t = __t883;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST __t873 = _t;
-			AST tmp1315_AST_in = (AST)_t;
+			AST __t884 = _t;
+			AST tmp1326_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t873;
+			_t = __t884;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INPUTOUTPUT:
 		{
-			AST __t874 = _t;
-			AST tmp1316_AST_in = (AST)_t;
+			AST __t885 = _t;
+			AST tmp1327_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
 			_t = _retTree;
-			_t = __t874;
+			_t = __t885;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -22260,7 +22397,7 @@
 		switch ( _t.getType()) {
 		case TABLE:
 		{
-			AST tmp1317_AST_in = (AST)_t;
+			AST tmp1328_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			{
@@ -22268,7 +22405,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp1318_AST_in = (AST)_t;
+				AST tmp1329_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -22290,7 +22427,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1319_AST_in = (AST)_t;
+				AST tmp1330_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22311,7 +22448,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1320_AST_in = (AST)_t;
+				AST tmp1331_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22330,7 +22467,7 @@
 		}
 		case TABLEHANDLE:
 		{
-			AST tmp1321_AST_in = (AST)_t;
+			AST tmp1332_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			{
@@ -22338,7 +22475,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp1322_AST_in = (AST)_t;
+				AST tmp1333_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -22361,7 +22498,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1323_AST_in = (AST)_t;
+				AST tmp1334_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22382,7 +22519,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1324_AST_in = (AST)_t;
+				AST tmp1335_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22404,7 +22541,7 @@
 		}
 		case DATASET:
 		{
-			AST tmp1325_AST_in = (AST)_t;
+			AST tmp1336_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
 			ds = (AST)_t;
@@ -22415,7 +22552,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1326_AST_in = (AST)_t;
+				AST tmp1337_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22436,7 +22573,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1327_AST_in = (AST)_t;
+				AST tmp1338_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22458,7 +22595,7 @@
 		}
 		case DATASETHANDLE:
 		{
-			AST tmp1328_AST_in = (AST)_t;
+			AST tmp1339_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
 			dsh = (AST)_t;
@@ -22469,7 +22606,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1329_AST_in = (AST)_t;
+				AST tmp1340_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22490,7 +22627,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1330_AST_in = (AST)_t;
+				AST tmp1341_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22573,10 +22710,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp1331_AST_in = (AST)_t;
+				AST tmp1342_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1332_AST_in = (AST)_t;
+				AST tmp1343_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -22648,22 +22785,22 @@
 		
 		AST getkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t890 = _t;
-		AST tmp1333_AST_in = (AST)_t;
+		AST __t901 = _t;
+		AST tmp1344_AST_in = (AST)_t;
 		match(_t,GETKEYVALUE);
 		_t = _t.getFirstChild();
-		AST tmp1334_AST_in = (AST)_t;
+		AST tmp1345_AST_in = (AST)_t;
 		match(_t,SECTION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1335_AST_in = (AST)_t;
+		AST tmp1346_AST_in = (AST)_t;
 		match(_t,KEY);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==DEFAULT)) {
-			AST tmp1336_AST_in = (AST)_t;
+			AST tmp1347_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getNextSibling();
 		}
@@ -22676,14 +22813,14 @@
 		}
 		
 		}
-		AST tmp1337_AST_in = (AST)_t;
+		AST tmp1348_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t890;
+		_t = __t901;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22692,8 +22829,8 @@
 		
 		AST importstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t893 = _t;
-		AST tmp1338_AST_in = (AST)_t;
+		AST __t904 = _t;
+		AST tmp1349_AST_in = (AST)_t;
 		match(_t,IMPORT);
 		_t = _t.getFirstChild();
 		{
@@ -22728,19 +22865,19 @@
 		switch ( _t.getType()) {
 		case DELIMITER:
 		{
-			AST __t896 = _t;
-			AST tmp1339_AST_in = (AST)_t;
+			AST __t907 = _t;
+			AST tmp1350_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
-			_t = __t896;
+			_t = __t907;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNFORMATTED:
 		{
-			AST tmp1340_AST_in = (AST)_t;
+			AST tmp1351_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
@@ -22773,12 +22910,12 @@
 			switch ( _t.getType()) {
 			case EXCEPT:
 			{
-				AST __t899 = _t;
-				AST tmp1341_AST_in = (AST)_t;
+				AST __t910 = _t;
+				AST tmp1352_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
-				_loop901:
+				_loop912:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==Field_ref)) {
@@ -22786,12 +22923,12 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop901;
+						break _loop912;
 					}
 					
 				} while (true);
 				}
-				_t = __t899;
+				_t = __t910;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -22814,8 +22951,8 @@
 		case Field_ref:
 		{
 			{
-			int _cnt903=0;
-			_loop903:
+			int _cnt914=0;
+			_loop914:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
@@ -22827,17 +22964,17 @@
 				}
 				case CARET:
 				{
-					AST tmp1342_AST_in = (AST)_t;
+					AST tmp1353_AST_in = (AST)_t;
 					match(_t,CARET);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					if ( _cnt903>=1 ) { break _loop903; } else {throw new NoViableAltException(_t);}
+					if ( _cnt914>=1 ) { break _loop914; } else {throw new NoViableAltException(_t);}
 				}
 				}
-				_cnt903++;
+				_cnt914++;
 			} while (true);
 			}
 			break;
@@ -22860,7 +22997,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp1343_AST_in = (AST)_t;
+			AST tmp1354_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -22882,7 +23019,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1344_AST_in = (AST)_t;
+			AST tmp1355_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -22900,7 +23037,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t893;
+		_t = __t904;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -22910,7 +23047,7 @@
 		AST insertstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t907 = _t;
+		AST __t918 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,INSERT);
 		_t = _t.getFirstChild();
@@ -22924,12 +23061,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t909 = _t;
-			AST tmp1345_AST_in = (AST)_t;
+			AST __t920 = _t;
+			AST tmp1356_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop911:
+			_loop922:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -22937,12 +23074,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop911;
+					break _loop922;
 				}
 				
 			} while (true);
 			}
-			_t = __t909;
+			_t = __t920;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -22965,8 +23102,8 @@
 		switch ( _t.getType()) {
 		case USING:
 		{
-			AST __t913 = _t;
-			AST tmp1346_AST_in = (AST)_t;
+			AST __t924 = _t;
+			AST tmp1357_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -22974,14 +23111,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1347_AST_in = (AST)_t;
+				AST tmp1358_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp1348_AST_in = (AST)_t;
+				AST tmp1359_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -22994,7 +23131,7 @@
 			}
 			expression(_t);
 			_t = _retTree;
-			_t = __t913;
+			_t = __t924;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23037,7 +23174,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1349_AST_in = (AST)_t;
+			AST tmp1360_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23058,7 +23195,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t907;
+		_t = __t918;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23067,8 +23204,8 @@
 		
 		AST messagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t922 = _t;
-		AST tmp1350_AST_in = (AST)_t;
+		AST __t933 = _t;
+		AST tmp1361_AST_in = (AST)_t;
 		match(_t,MESSAGE);
 		_t = _t.getFirstChild();
 		{
@@ -23076,13 +23213,13 @@
 		switch ( _t.getType()) {
 		case COLOR:
 		{
-			AST __t924 = _t;
-			AST tmp1351_AST_in = (AST)_t;
+			AST __t935 = _t;
+			AST tmp1362_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			anyorvalue(_t);
 			_t = _retTree;
-			_t = __t924;
+			_t = __t935;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23103,12 +23240,12 @@
 		}
 		}
 		{
-		_loop928:
+		_loop939:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t926 = _t;
-				AST tmp1352_AST_in = (AST)_t;
+				AST __t937 = _t;
+				AST tmp1363_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				{
@@ -23126,27 +23263,27 @@
 				}
 				
 				}
-				_t = __t926;
+				_t = __t937;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop928;
+				break _loop939;
 			}
 			
 		} while (true);
 		}
 		{
-		_loop940:
+		_loop951:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case VIEWAS:
 			{
-				AST __t930 = _t;
-				AST tmp1353_AST_in = (AST)_t;
+				AST __t941 = _t;
+				AST tmp1364_AST_in = (AST)_t;
 				match(_t,VIEWAS);
 				_t = _t.getFirstChild();
-				AST tmp1354_AST_in = (AST)_t;
+				AST tmp1365_AST_in = (AST)_t;
 				match(_t,ALERTBOX);
 				_t = _t.getNextSibling();
 				{
@@ -23154,35 +23291,35 @@
 				switch ( _t.getType()) {
 				case MESSAGE:
 				{
-					AST tmp1355_AST_in = (AST)_t;
+					AST tmp1366_AST_in = (AST)_t;
 					match(_t,MESSAGE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case QUESTION:
 				{
-					AST tmp1356_AST_in = (AST)_t;
+					AST tmp1367_AST_in = (AST)_t;
 					match(_t,QUESTION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INFORMATION:
 				{
-					AST tmp1357_AST_in = (AST)_t;
+					AST tmp1368_AST_in = (AST)_t;
 					match(_t,INFORMATION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ERROR:
 				{
-					AST tmp1358_AST_in = (AST)_t;
+					AST tmp1369_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WARNING:
 				{
-					AST tmp1359_AST_in = (AST)_t;
+					AST tmp1370_AST_in = (AST)_t;
 					match(_t,WARNING);
 					_t = _t.getNextSibling();
 					break;
@@ -23204,7 +23341,7 @@
 				switch ( _t.getType()) {
 				case BUTTONS:
 				{
-					AST tmp1360_AST_in = (AST)_t;
+					AST tmp1371_AST_in = (AST)_t;
 					match(_t,BUTTONS);
 					_t = _t.getNextSibling();
 					{
@@ -23212,35 +23349,35 @@
 					switch ( _t.getType()) {
 					case YESNO:
 					{
-						AST tmp1361_AST_in = (AST)_t;
+						AST tmp1372_AST_in = (AST)_t;
 						match(_t,YESNO);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case YESNOCANCEL:
 					{
-						AST tmp1362_AST_in = (AST)_t;
+						AST tmp1373_AST_in = (AST)_t;
 						match(_t,YESNOCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OK:
 					{
-						AST tmp1363_AST_in = (AST)_t;
+						AST tmp1374_AST_in = (AST)_t;
 						match(_t,OK);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OKCANCEL:
 					{
-						AST tmp1364_AST_in = (AST)_t;
+						AST tmp1375_AST_in = (AST)_t;
 						match(_t,OKCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case RETRYCANCEL:
 					{
-						AST tmp1365_AST_in = (AST)_t;
+						AST tmp1376_AST_in = (AST)_t;
 						match(_t,RETRYCANCEL);
 						_t = _t.getNextSibling();
 						break;
@@ -23269,13 +23406,13 @@
 				switch ( _t.getType()) {
 				case TITLE:
 				{
-					AST __t935 = _t;
-					AST tmp1366_AST_in = (AST)_t;
+					AST __t946 = _t;
+					AST tmp1377_AST_in = (AST)_t;
 					match(_t,TITLE);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t935;
+					_t = __t946;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -23289,14 +23426,14 @@
 				}
 				}
 				}
-				_t = __t930;
+				_t = __t941;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SET:
 			{
-				AST __t936 = _t;
-				AST tmp1367_AST_in = (AST)_t;
+				AST __t947 = _t;
+				AST tmp1378_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -23320,14 +23457,14 @@
 				}
 				}
 				}
-				_t = __t936;
+				_t = __t947;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t938 = _t;
-				AST tmp1368_AST_in = (AST)_t;
+				AST __t949 = _t;
+				AST tmp1379_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.REFUP);
@@ -23351,13 +23488,13 @@
 				}
 				}
 				}
-				_t = __t938;
+				_t = __t949;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop940;
+				break _loop951;
 			}
 			}
 		} while (true);
@@ -23367,16 +23504,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t942 = _t;
-			AST tmp1369_AST_in = (AST)_t;
+			AST __t953 = _t;
+			AST tmp1380_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1370_AST_in = (AST)_t;
+			AST tmp1381_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t942;
+			_t = __t953;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -23393,7 +23530,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t922;
+		_t = __t933;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23404,53 +23541,53 @@
 		AST m = null;
 		AST id = null;
 		
-		AST __t944 = _t;
+		AST __t955 = _t;
 		m = _t==ASTNULL ? null :(AST)_t;
 		match(_t,METHOD);
 		_t = _t.getFirstChild();
 		{
-		_loop946:
+		_loop957:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case PRIVATE:
 			{
-				AST tmp1371_AST_in = (AST)_t;
+				AST tmp1382_AST_in = (AST)_t;
 				match(_t,PRIVATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROTECTED:
 			{
-				AST tmp1372_AST_in = (AST)_t;
+				AST tmp1383_AST_in = (AST)_t;
 				match(_t,PROTECTED);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PUBLIC:
 			{
-				AST tmp1373_AST_in = (AST)_t;
+				AST tmp1384_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OVERRIDE:
 			{
-				AST tmp1374_AST_in = (AST)_t;
+				AST tmp1385_AST_in = (AST)_t;
 				match(_t,OVERRIDE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FINAL:
 			{
-				AST tmp1375_AST_in = (AST)_t;
+				AST tmp1386_AST_in = (AST)_t;
 				match(_t,FINAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop946;
+				break _loop957;
 			}
 			}
 		} while (true);
@@ -23460,17 +23597,17 @@
 		switch ( _t.getType()) {
 		case VOID:
 		{
-			AST tmp1376_AST_in = (AST)_t;
+			AST tmp1387_AST_in = (AST)_t;
 			match(_t,VOID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLASS:
 		{
-			AST tmp1377_AST_in = (AST)_t;
+			AST tmp1388_AST_in = (AST)_t;
 			match(_t,CLASS);
 			_t = _t.getNextSibling();
-			AST tmp1378_AST_in = (AST)_t;
+			AST tmp1389_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -23514,34 +23651,34 @@
 		function_params(_t);
 		_t = _retTree;
 		{
-		boolean synPredMatched950 = false;
+		boolean synPredMatched961 = false;
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==PERIOD||_t.getType()==LEXCOLON))) {
-			AST __t950 = _t;
-			synPredMatched950 = true;
+			AST __t961 = _t;
+			synPredMatched961 = true;
 			inputState.guessing++;
 			try {
 				{
 				block_colon(_t);
 				_t = _retTree;
-				AST tmp1379_AST_in = (AST)_t;
+				AST tmp1390_AST_in = (AST)_t;
 				match(_t,Code_block);
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched950 = false;
+				synPredMatched961 = false;
 			}
-			_t = __t950;
+			_t = __t961;
 inputState.guessing--;
 		}
-		if ( synPredMatched950 ) {
+		if ( synPredMatched961 ) {
 			block_colon(_t);
 			_t = _retTree;
 			code_block(_t);
 			_t = _retTree;
-			AST __t951 = _t;
-			AST tmp1380_AST_in = (AST)_t;
+			AST __t962 = _t;
+			AST tmp1391_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -23549,7 +23686,7 @@
 			switch ( _t.getType()) {
 			case METHOD:
 			{
-				AST tmp1381_AST_in = (AST)_t;
+				AST tmp1392_AST_in = (AST)_t;
 				match(_t,METHOD);
 				_t = _t.getNextSibling();
 				break;
@@ -23564,7 +23701,7 @@
 			}
 			}
 			}
-			_t = __t951;
+			_t = __t962;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -23581,7 +23718,7 @@
 		if ( inputState.guessing==0 ) {
 			action.scopeClose(m);
 		}
-		_t = __t944;
+		_t = __t955;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23590,8 +23727,8 @@
 		
 		AST nextpromptstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t954 = _t;
-		AST tmp1382_AST_in = (AST)_t;
+		AST __t965 = _t;
+		AST tmp1393_AST_in = (AST)_t;
 		match(_t,NEXTPROMPT);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.SYMBOL);
@@ -23618,7 +23755,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t954;
+		_t = __t965;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -23634,7 +23771,7 @@
 		AST fld = null;
 		AST id = null;
 		
-		AST __t957 = _t;
+		AST __t968 = _t;
 		onNode = _t==ASTNULL ? null :(AST)_t;
 		match(_t,ON);
 		_t = _t.getFirstChild();
@@ -23642,11 +23779,11 @@
 			action.scopeAdd(onNode);
 		}
 		{
-		boolean synPredMatched960 = false;
+		boolean synPredMatched971 = false;
 		if (_t==null) _t=ASTNULL;
 		if (((_tokenSet_23.member(_t.getType())))) {
-			AST __t960 = _t;
-			synPredMatched960 = true;
+			AST __t971 = _t;
+			synPredMatched971 = true;
 			inputState.guessing++;
 			try {
 				{
@@ -23654,35 +23791,35 @@
 				switch ( _t.getType()) {
 				case ASSIGN:
 				{
-					AST tmp1383_AST_in = (AST)_t;
+					AST tmp1394_AST_in = (AST)_t;
 					match(_t,ASSIGN);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case CREATE:
 				{
-					AST tmp1384_AST_in = (AST)_t;
+					AST tmp1395_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1385_AST_in = (AST)_t;
+					AST tmp1396_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1386_AST_in = (AST)_t;
+					AST tmp1397_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WRITE:
 				{
-					AST tmp1387_AST_in = (AST)_t;
+					AST tmp1398_AST_in = (AST)_t;
 					match(_t,WRITE);
 					_t = _t.getNextSibling();
 					break;
@@ -23695,12 +23832,12 @@
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched960 = false;
+				synPredMatched971 = false;
 			}
-			_t = __t960;
+			_t = __t971;
 inputState.guessing--;
 		}
-		if ( synPredMatched960 ) {
+		if ( synPredMatched971 ) {
 			{
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -23713,21 +23850,21 @@
 				switch ( _t.getType()) {
 				case CREATE:
 				{
-					AST tmp1388_AST_in = (AST)_t;
+					AST tmp1399_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1389_AST_in = (AST)_t;
+					AST tmp1400_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1390_AST_in = (AST)_t;
+					AST tmp1401_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
@@ -23738,7 +23875,7 @@
 				}
 				}
 				}
-				AST tmp1391_AST_in = (AST)_t;
+				AST tmp1402_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				t1 = _t==ASTNULL ? null : (AST)_t;
@@ -23892,10 +24029,10 @@
 			}
 			case WRITE:
 			{
-				AST tmp1392_AST_in = (AST)_t;
+				AST tmp1403_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
-				AST tmp1393_AST_in = (AST)_t;
+				AST tmp1404_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				rec = _t==ASTNULL ? null : (AST)_t;
@@ -24050,7 +24187,7 @@
 				case NEW:
 				{
 					{
-					AST tmp1394_AST_in = (AST)_t;
+					AST tmp1405_AST_in = (AST)_t;
 					match(_t,NEW);
 					_t = _t.getNextSibling();
 					{
@@ -24058,7 +24195,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1395_AST_in = (AST)_t;
+						AST tmp1406_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -24365,7 +24502,7 @@
 				case OLD:
 				{
 					{
-					AST tmp1396_AST_in = (AST)_t;
+					AST tmp1407_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -24373,7 +24510,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1397_AST_in = (AST)_t;
+						AST tmp1408_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -24673,10 +24810,10 @@
 			}
 			case ASSIGN:
 			{
-				AST tmp1398_AST_in = (AST)_t;
+				AST tmp1409_AST_in = (AST)_t;
 				match(_t,ASSIGN);
 				_t = _t.getNextSibling();
-				AST tmp1399_AST_in = (AST)_t;
+				AST tmp1410_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				fld = _t==ASTNULL ? null : (AST)_t;
@@ -24687,16 +24824,16 @@
 				switch ( _t.getType()) {
 				case TABLE:
 				{
-					AST __t974 = _t;
-					AST tmp1400_AST_in = (AST)_t;
+					AST __t985 = _t;
+					AST tmp1411_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1401_AST_in = (AST)_t;
+					AST tmp1412_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
-					_t = __t974;
+					_t = __t985;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -24837,7 +24974,7 @@
 				switch ( _t.getType()) {
 				case OLD:
 				{
-					AST tmp1402_AST_in = (AST)_t;
+					AST tmp1413_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -24845,7 +24982,7 @@
 					switch ( _t.getType()) {
 					case VALUE:
 					{
-						AST tmp1403_AST_in = (AST)_t;
+						AST tmp1414_AST_in = (AST)_t;
 						match(_t,VALUE);
 						_t = _t.getNextSibling();
 						break;
@@ -25028,7 +25165,7 @@
 			switch ( _t.getType()) {
 			case OVERRIDE:
 			{
-				AST tmp1404_AST_in = (AST)_t;
+				AST tmp1415_AST_in = (AST)_t;
 				match(_t,OVERRIDE);
 				_t = _t.getNextSibling();
 				break;
@@ -25168,7 +25305,7 @@
 			switch ( _t.getType()) {
 			case REVERT:
 			{
-				AST tmp1405_AST_in = (AST)_t;
+				AST tmp1416_AST_in = (AST)_t;
 				match(_t,REVERT);
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -25177,7 +25314,7 @@
 			}
 			case PERSISTENT:
 			{
-				AST tmp1406_AST_in = (AST)_t;
+				AST tmp1417_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getNextSibling();
 				runstate(_t);
@@ -25316,18 +25453,18 @@
 			}
 		}
 		else {
-			boolean synPredMatched981 = false;
+			boolean synPredMatched992 = false;
 			if (_t==null) _t=ASTNULL;
 			if ((((_t.getType() >= LEXDATE && _t.getType() <= SYMMETRICENCRYPTIONALGORITHM)))) {
-				AST __t981 = _t;
-				synPredMatched981 = true;
+				AST __t992 = _t;
+				synPredMatched992 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1407_AST_in = (AST)_t;
+					AST tmp1418_AST_in = (AST)_t;
 					if ( _t==null ) throw new MismatchedTokenException();
 					_t = _t.getNextSibling();
-					AST tmp1408_AST_in = (AST)_t;
+					AST tmp1419_AST_in = (AST)_t;
 					if ( _t==null ) throw new MismatchedTokenException();
 					_t = _t.getNextSibling();
 					state_end(_t);
@@ -25335,16 +25472,16 @@
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched981 = false;
+					synPredMatched992 = false;
 				}
-				_t = __t981;
+				_t = __t992;
 inputState.guessing--;
 			}
-			if ( synPredMatched981 ) {
-				AST tmp1409_AST_in = (AST)_t;
+			if ( synPredMatched992 ) {
+				AST tmp1420_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
-				AST tmp1410_AST_in = (AST)_t;
+				AST tmp1421_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -25358,36 +25495,36 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp1411_AST_in = (AST)_t;
+					AST tmp1422_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case OF:
 				{
-					AST tmp1412_AST_in = (AST)_t;
+					AST tmp1423_AST_in = (AST)_t;
 					match(_t,OF);
 					_t = _t.getNextSibling();
 					widgetlist(_t);
 					_t = _retTree;
 					{
-					_loop984:
+					_loop995:
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==OR)) {
-							AST tmp1413_AST_in = (AST)_t;
+							AST tmp1424_AST_in = (AST)_t;
 							match(_t,OR);
 							_t = _t.getNextSibling();
 							eventlist(_t);
 							_t = _retTree;
-							AST tmp1414_AST_in = (AST)_t;
+							AST tmp1425_AST_in = (AST)_t;
 							match(_t,OF);
 							_t = _t.getNextSibling();
 							widgetlist(_t);
 							_t = _retTree;
 						}
 						else {
-							break _loop984;
+							break _loop995;
 						}
 						
 					} while (true);
@@ -25397,7 +25534,7 @@
 					switch ( _t.getType()) {
 					case ANYWHERE:
 					{
-						AST tmp1415_AST_in = (AST)_t;
+						AST tmp1426_AST_in = (AST)_t;
 						match(_t,ANYWHERE);
 						_t = _t.getNextSibling();
 						break;
@@ -25545,7 +25682,7 @@
 				switch ( _t.getType()) {
 				case REVERT:
 				{
-					AST tmp1416_AST_in = (AST)_t;
+					AST tmp1427_AST_in = (AST)_t;
 					match(_t,REVERT);
 					_t = _t.getNextSibling();
 					state_end(_t);
@@ -25554,10 +25691,10 @@
 				}
 				case PERSISTENT:
 				{
-					AST tmp1417_AST_in = (AST)_t;
+					AST tmp1428_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
-					AST tmp1418_AST_in = (AST)_t;
+					AST tmp1429_AST_in = (AST)_t;
 					match(_t,RUN);
 					_t = _t.getNextSibling();
 					filenameorvalue(_t);
@@ -25567,13 +25704,13 @@
 					switch ( _t.getType()) {
 					case IN_KW:
 					{
-						AST __t988 = _t;
-						AST tmp1419_AST_in = (AST)_t;
+						AST __t999 = _t;
+						AST tmp1430_AST_in = (AST)_t;
 						match(_t,IN_KW);
 						_t = _t.getFirstChild();
 						expression(_t);
 						_t = _retTree;
-						_t = __t988;
+						_t = __t999;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -25594,17 +25731,17 @@
 					switch ( _t.getType()) {
 					case Parameter_list:
 					{
-						AST __t990 = _t;
-						AST tmp1420_AST_in = (AST)_t;
+						AST __t1001 = _t;
+						AST tmp1431_AST_in = (AST)_t;
 						match(_t,Parameter_list);
 						_t = _t.getFirstChild();
-						AST tmp1421_AST_in = (AST)_t;
+						AST tmp1432_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						{
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==INPUT)) {
-							AST tmp1422_AST_in = (AST)_t;
+							AST tmp1433_AST_in = (AST)_t;
 							match(_t,INPUT);
 							_t = _t.getNextSibling();
 						}
@@ -25618,17 +25755,17 @@
 						expression(_t);
 						_t = _retTree;
 						{
-						_loop994:
+						_loop1005:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp1423_AST_in = (AST)_t;
+								AST tmp1434_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								{
 								if (_t==null) _t=ASTNULL;
 								if ((_t.getType()==INPUT)) {
-									AST tmp1424_AST_in = (AST)_t;
+									AST tmp1435_AST_in = (AST)_t;
 									match(_t,INPUT);
 									_t = _t.getNextSibling();
 								}
@@ -25643,15 +25780,15 @@
 								_t = _retTree;
 							}
 							else {
-								break _loop994;
+								break _loop1005;
 							}
 							
 						} while (true);
 						}
-						AST tmp1425_AST_in = (AST)_t;
+						AST tmp1436_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
-						_t = __t990;
+						_t = __t1001;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -25809,7 +25946,7 @@
 			if ( inputState.guessing==0 ) {
 				action.scopeClose(onNode);
 			}
-			_t = __t957;
+			_t = __t968;
 			_t = _t.getNextSibling();
 			_retTree = _t;
 		}
@@ -25821,7 +25958,7 @@
 		AST hnd = null;
 		AST hexp = null;
 		
-		AST __t1071 = _t;
+		AST __t1082 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
@@ -25835,18 +25972,18 @@
 		switch ( _t.getType()) {
 		case LEFTANGLE:
 		{
-			AST tmp1426_AST_in = (AST)_t;
+			AST tmp1437_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1427_AST_in = (AST)_t;
+			AST tmp1438_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
 			filenameorvalue(_t);
 			_t = _retTree;
-			AST tmp1428_AST_in = (AST)_t;
+			AST tmp1439_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1429_AST_in = (AST)_t;
+			AST tmp1440_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
 			break;
@@ -25872,14 +26009,14 @@
 		}
 		}
 		{
-		_loop1093:
+		_loop1104:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case PERSISTENT:
 			{
-				AST __t1074 = _t;
-				AST tmp1430_AST_in = (AST)_t;
+				AST __t1085 = _t;
+				AST tmp1441_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getFirstChild();
 				{
@@ -25887,8 +26024,8 @@
 				switch ( _t.getType()) {
 				case SET:
 				{
-					AST __t1076 = _t;
-					AST tmp1431_AST_in = (AST)_t;
+					AST __t1087 = _t;
+					AST tmp1442_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -25914,7 +26051,7 @@
 					}
 					}
 					}
-					_t = __t1076;
+					_t = __t1087;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -25928,14 +26065,14 @@
 				}
 				}
 				}
-				_t = __t1074;
+				_t = __t1085;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SET:
 			{
-				AST __t1078 = _t;
-				AST tmp1432_AST_in = (AST)_t;
+				AST __t1089 = _t;
+				AST tmp1443_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				{
@@ -25957,20 +26094,20 @@
 				}
 				}
 				}
-				_t = __t1078;
+				_t = __t1089;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ON:
 			{
-				AST __t1080 = _t;
-				AST tmp1433_AST_in = (AST)_t;
+				AST __t1091 = _t;
+				AST tmp1444_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==SERVER)) {
-					AST tmp1434_AST_in = (AST)_t;
+					AST tmp1445_AST_in = (AST)_t;
 					match(_t,SERVER);
 					_t = _t.getNextSibling();
 				}
@@ -25988,7 +26125,7 @@
 				switch ( _t.getType()) {
 				case TRANSACTION:
 				{
-					AST tmp1435_AST_in = (AST)_t;
+					AST tmp1446_AST_in = (AST)_t;
 					match(_t,TRANSACTION);
 					_t = _t.getNextSibling();
 					{
@@ -25996,7 +26133,7 @@
 					switch ( _t.getType()) {
 					case DISTINCT:
 					{
-						AST tmp1436_AST_in = (AST)_t;
+						AST tmp1447_AST_in = (AST)_t;
 						match(_t,DISTINCT);
 						_t = _t.getNextSibling();
 						break;
@@ -26023,20 +26160,20 @@
 				}
 				}
 				}
-				_t = __t1080;
+				_t = __t1091;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1084 = _t;
-				AST tmp1437_AST_in = (AST)_t;
+				AST __t1095 = _t;
+				AST tmp1448_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
 				hexp = _t==ASTNULL ? null : (AST)_t;
 				expression(_t);
 				_t = _retTree;
-				_t = __t1084;
+				_t = __t1095;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.runInHandle(hexp);
@@ -26045,8 +26182,8 @@
 			}
 			case ASYNCHRONOUS:
 			{
-				AST __t1085 = _t;
-				AST tmp1438_AST_in = (AST)_t;
+				AST __t1096 = _t;
+				AST tmp1449_AST_in = (AST)_t;
 				match(_t,ASYNCHRONOUS);
 				_t = _t.getFirstChild();
 				{
@@ -26054,8 +26191,8 @@
 				switch ( _t.getType()) {
 				case SET:
 				{
-					AST __t1087 = _t;
-					AST tmp1439_AST_in = (AST)_t;
+					AST __t1098 = _t;
+					AST tmp1450_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -26077,7 +26214,7 @@
 					}
 					}
 					}
-					_t = __t1087;
+					_t = __t1098;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -26098,13 +26235,13 @@
 				switch ( _t.getType()) {
 				case EVENTPROCEDURE:
 				{
-					AST __t1090 = _t;
-					AST tmp1440_AST_in = (AST)_t;
+					AST __t1101 = _t;
+					AST tmp1451_AST_in = (AST)_t;
 					match(_t,EVENTPROCEDURE);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1090;
+					_t = __t1101;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -26124,13 +26261,13 @@
 				switch ( _t.getType()) {
 				case IN_KW:
 				{
-					AST __t1092 = _t;
-					AST tmp1441_AST_in = (AST)_t;
+					AST __t1103 = _t;
+					AST tmp1452_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1092;
+					_t = __t1103;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -26144,13 +26281,13 @@
 				}
 				}
 				}
-				_t = __t1085;
+				_t = __t1096;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1093;
+				break _loop1104;
 			}
 			}
 		} while (true);
@@ -26182,13 +26319,13 @@
 		}
 		}
 		{
-		_loop1096:
+		_loop1107:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp1442_AST_in = (AST)_t;
+				AST tmp1453_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -26202,14 +26339,14 @@
 			}
 			default:
 			{
-				break _loop1096;
+				break _loop1107;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1071;
+		_t = __t1082;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26218,32 +26355,32 @@
 		
 		AST eventlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1543 = _t;
-		AST tmp1443_AST_in = (AST)_t;
+		AST __t1554 = _t;
+		AST tmp1454_AST_in = (AST)_t;
 		match(_t,Event_list);
 		_t = _t.getFirstChild();
-		AST tmp1444_AST_in = (AST)_t;
+		AST tmp1455_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
-		_loop1545:
+		_loop1556:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1445_AST_in = (AST)_t;
+				AST tmp1456_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1446_AST_in = (AST)_t;
+				AST tmp1457_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1545;
+				break _loop1556;
 			}
 			
 		} while (true);
 		}
-		_t = __t1543;
+		_t = __t1554;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26255,18 +26392,18 @@
 		gwidget(_t);
 		_t = _retTree;
 		{
-		_loop1578:
+		_loop1589:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1447_AST_in = (AST)_t;
+				AST tmp1458_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				gwidget(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop1578;
+				break _loop1589;
 			}
 			
 		} while (true);
@@ -26278,14 +26415,14 @@
 		
 		AST openquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t996 = _t;
-		AST tmp1448_AST_in = (AST)_t;
+		AST __t1007 = _t;
+		AST tmp1459_AST_in = (AST)_t;
 		match(_t,OPEN);
 		_t = _t.getFirstChild();
-		AST tmp1449_AST_in = (AST)_t;
+		AST tmp1460_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
-		AST tmp1450_AST_in = (AST)_t;
+		AST tmp1461_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -26293,14 +26430,14 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp1451_AST_in = (AST)_t;
+			AST tmp1462_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRESELECT:
 		{
-			AST tmp1452_AST_in = (AST)_t;
+			AST tmp1463_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -26314,7 +26451,7 @@
 		for_record_spec(_t,CQ.INIT);
 		_t = _retTree;
 		{
-		_loop1002:
+		_loop1013:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
@@ -26326,8 +26463,8 @@
 			}
 			case BY:
 			{
-				AST __t999 = _t;
-				AST tmp1453_AST_in = (AST)_t;
+				AST __t1010 = _t;
+				AST tmp1464_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -26337,7 +26474,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1454_AST_in = (AST)_t;
+					AST tmp1465_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -26352,7 +26489,7 @@
 				}
 				}
 				}
-				_t = __t999;
+				_t = __t1010;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -26364,33 +26501,33 @@
 			}
 			case INDEXEDREPOSITION:
 			{
-				AST tmp1455_AST_in = (AST)_t;
+				AST tmp1466_AST_in = (AST)_t;
 				match(_t,INDEXEDREPOSITION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXROWS:
 			{
-				AST __t1001 = _t;
-				AST tmp1456_AST_in = (AST)_t;
+				AST __t1012 = _t;
+				AST tmp1467_AST_in = (AST)_t;
 				match(_t,MAXROWS);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1001;
+				_t = __t1012;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1002;
+				break _loop1013;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t996;
+		_t = __t1007;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26401,7 +26538,7 @@
 		AST p = null;
 		AST id = null;
 		
-		AST __t1004 = _t;
+		AST __t1015 = _t;
 		p = _t==ASTNULL ? null :(AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getFirstChild();
@@ -26416,81 +26553,81 @@
 		switch ( _t.getType()) {
 		case EXTERNAL:
 		{
-			AST __t1006 = _t;
-			AST tmp1457_AST_in = (AST)_t;
+			AST __t1017 = _t;
+			AST tmp1468_AST_in = (AST)_t;
 			match(_t,EXTERNAL);
 			_t = _t.getFirstChild();
 			constant(_t);
 			_t = _retTree;
 			{
-			_loop1009:
+			_loop1020:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case CDECL_KW:
 				{
-					AST tmp1458_AST_in = (AST)_t;
+					AST tmp1469_AST_in = (AST)_t;
 					match(_t,CDECL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PASCAL_KW:
 				{
-					AST tmp1459_AST_in = (AST)_t;
+					AST tmp1470_AST_in = (AST)_t;
 					match(_t,PASCAL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STDCALL_KW:
 				{
-					AST tmp1460_AST_in = (AST)_t;
+					AST tmp1471_AST_in = (AST)_t;
 					match(_t,STDCALL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ORDINAL:
 				{
-					AST __t1008 = _t;
-					AST tmp1461_AST_in = (AST)_t;
+					AST __t1019 = _t;
+					AST tmp1472_AST_in = (AST)_t;
 					match(_t,ORDINAL);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1008;
+					_t = __t1019;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERSISTENT:
 				{
-					AST tmp1462_AST_in = (AST)_t;
+					AST tmp1473_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					break _loop1009;
+					break _loop1020;
 				}
 				}
 			} while (true);
 			}
-			_t = __t1006;
+			_t = __t1017;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRIVATE:
 		{
-			AST tmp1463_AST_in = (AST)_t;
+			AST tmp1474_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IN_KW:
 		{
-			AST tmp1464_AST_in = (AST)_t;
+			AST tmp1475_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp1465_AST_in = (AST)_t;
+			AST tmp1476_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
@@ -26515,15 +26652,15 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1466_AST_in = (AST)_t;
+			AST tmp1477_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST __t1011 = _t;
-			AST tmp1467_AST_in = (AST)_t;
+			AST __t1022 = _t;
+			AST tmp1478_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -26531,7 +26668,7 @@
 			switch ( _t.getType()) {
 			case PROCEDURE:
 			{
-				AST tmp1468_AST_in = (AST)_t;
+				AST tmp1479_AST_in = (AST)_t;
 				match(_t,PROCEDURE);
 				_t = _t.getNextSibling();
 				break;
@@ -26546,7 +26683,7 @@
 			}
 			}
 			}
-			_t = __t1011;
+			_t = __t1022;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -26561,7 +26698,7 @@
 		if ( inputState.guessing==0 ) {
 				action.procedureEnd(p);
 		}
-		_t = __t1004;
+		_t = __t1015;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26571,7 +26708,7 @@
 		AST promptforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t1014 = _t;
+		AST __t1025 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,PROMPTFOR);
 		_t = _t.getFirstChild();
@@ -26610,7 +26747,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1469_AST_in = (AST)_t;
+			AST tmp1480_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -26633,7 +26770,7 @@
 		}
 		}
 		{
-		_loop1018:
+		_loop1029:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -26641,7 +26778,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1018;
+				break _loop1029;
 			}
 			
 		} while (true);
@@ -26675,12 +26812,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1021 = _t;
-			AST tmp1470_AST_in = (AST)_t;
+			AST __t1032 = _t;
+			AST tmp1481_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1023:
+			_loop1034:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -26688,12 +26825,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1023;
+					break _loop1034;
 				}
 				
 			} while (true);
 			}
-			_t = __t1021;
+			_t = __t1032;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -26716,16 +26853,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1025 = _t;
-			AST tmp1471_AST_in = (AST)_t;
+			AST __t1036 = _t;
+			AST tmp1482_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1472_AST_in = (AST)_t;
+			AST tmp1483_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1025;
+			_t = __t1036;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -26788,7 +26925,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1014;
+		_t = __t1025;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26798,7 +26935,7 @@
 		AST editingphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1910 = _t;
-		AST tmp1473_AST_in = (AST)_t;
+		AST tmp1484_AST_in = (AST)_t;
 		match(_t,Editing_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -26806,10 +26943,10 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1474_AST_in = (AST)_t;
+			AST tmp1485_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1475_AST_in = (AST)_t;
+			AST tmp1486_AST_in = (AST)_t;
 			match(_t,LEXCOLON);
 			_t = _t.getNextSibling();
 			break;
@@ -26824,7 +26961,7 @@
 		}
 		}
 		}
-		AST tmp1476_AST_in = (AST)_t;
+		AST tmp1487_AST_in = (AST)_t;
 		match(_t,EDITING);
 		_t = _t.getNextSibling();
 		block_colon(_t);
@@ -26843,7 +26980,7 @@
 			
 		} while (true);
 		}
-		AST tmp1477_AST_in = (AST)_t;
+		AST tmp1488_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getNextSibling();
 		_t = __t1910;
@@ -26855,8 +26992,8 @@
 		
 		AST rawtransferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1029 = _t;
-		AST tmp1478_AST_in = (AST)_t;
+		AST __t1040 = _t;
+		AST tmp1489_AST_in = (AST)_t;
 		match(_t,RAWTRANSFER);
 		_t = _t.getFirstChild();
 		{
@@ -26864,14 +27001,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1479_AST_in = (AST)_t;
+			AST tmp1490_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1480_AST_in = (AST)_t;
+			AST tmp1491_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -26908,7 +27045,7 @@
 		}
 		}
 		}
-		AST tmp1481_AST_in = (AST)_t;
+		AST tmp1492_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
@@ -26916,14 +27053,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1482_AST_in = (AST)_t;
+			AST tmp1493_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1483_AST_in = (AST)_t;
+			AST tmp1494_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -26965,7 +27102,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1484_AST_in = (AST)_t;
+			AST tmp1495_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -26983,7 +27120,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1029;
+		_t = __t1040;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -26992,8 +27129,8 @@
 		
 		AST releasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1062 = _t;
-		AST tmp1485_AST_in = (AST)_t;
+		AST __t1073 = _t;
+		AST tmp1496_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -27003,7 +27140,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1486_AST_in = (AST)_t;
+			AST tmp1497_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -27021,7 +27158,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1062;
+		_t = __t1073;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27031,7 +27168,7 @@
 		AST repeatstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST r = null;
 		
-		AST __t1065 = _t;
+		AST __t1076 = _t;
 		r = _t==ASTNULL ? null :(AST)_t;
 		match(_t,REPEAT);
 		_t = _t.getFirstChild();
@@ -27102,7 +27239,7 @@
 		}
 		}
 		{
-		_loop1069:
+		_loop1080:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_20.member(_t.getType()))) {
@@ -27110,7 +27247,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1069;
+				break _loop1080;
 			}
 			
 		} while (true);
@@ -27127,7 +27264,7 @@
 		if ( inputState.guessing==0 ) {
 			action.blockEnd();
 		}
-		_t = __t1065;
+		_t = __t1076;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27137,7 +27274,7 @@
 		AST scrollstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t1098 = _t;
+		AST __t1109 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,SCROLL);
 		_t = _t.getFirstChild();
@@ -27149,7 +27286,7 @@
 		switch ( _t.getType()) {
 		case FROMCURRENT:
 		{
-			AST tmp1487_AST_in = (AST)_t;
+			AST tmp1498_AST_in = (AST)_t;
 			match(_t,FROMCURRENT);
 			_t = _t.getNextSibling();
 			break;
@@ -27173,7 +27310,7 @@
 		switch ( _t.getType()) {
 		case UP:
 		{
-			AST tmp1488_AST_in = (AST)_t;
+			AST tmp1499_AST_in = (AST)_t;
 			match(_t,UP);
 			_t = _t.getNextSibling();
 			break;
@@ -27196,7 +27333,7 @@
 		switch ( _t.getType()) {
 		case DOWN:
 		{
-			AST tmp1489_AST_in = (AST)_t;
+			AST tmp1500_AST_in = (AST)_t;
 			match(_t,DOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -27238,7 +27375,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t1098;
+		_t = __t1109;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27248,7 +27385,7 @@
 		AST setstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t1104 = _t;
+		AST __t1115 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,SET);
 		_t = _t.getFirstChild();
@@ -27288,7 +27425,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1490_AST_in = (AST)_t;
+			AST tmp1501_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -27312,7 +27449,7 @@
 		}
 		}
 		{
-		_loop1108:
+		_loop1119:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -27320,7 +27457,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1108;
+				break _loop1119;
 			}
 			
 		} while (true);
@@ -27355,12 +27492,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1111 = _t;
-			AST tmp1491_AST_in = (AST)_t;
+			AST __t1122 = _t;
+			AST tmp1502_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1113:
+			_loop1124:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -27368,12 +27505,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1113;
+					break _loop1124;
 				}
 				
 			} while (true);
 			}
-			_t = __t1111;
+			_t = __t1122;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -27397,16 +27534,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1115 = _t;
-			AST tmp1492_AST_in = (AST)_t;
+			AST __t1126 = _t;
+			AST tmp1503_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1493_AST_in = (AST)_t;
+			AST tmp1504_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1115;
+			_t = __t1126;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -27475,7 +27612,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1494_AST_in = (AST)_t;
+			AST tmp1505_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -27493,7 +27630,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1104;
+		_t = __t1115;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27502,11 +27639,11 @@
 		
 		AST systemdialogcolorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1120 = _t;
-		AST tmp1495_AST_in = (AST)_t;
+		AST __t1131 = _t;
+		AST tmp1506_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1496_AST_in = (AST)_t;
+		AST tmp1507_AST_in = (AST)_t;
 		match(_t,COLOR);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -27516,13 +27653,13 @@
 		switch ( _t.getType()) {
 		case UPDATE:
 		{
-			AST __t1122 = _t;
-			AST tmp1497_AST_in = (AST)_t;
+			AST __t1133 = _t;
+			AST tmp1508_AST_in = (AST)_t;
 			match(_t,UPDATE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
-			_t = __t1122;
+			_t = __t1133;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -27543,16 +27680,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1124 = _t;
-			AST tmp1498_AST_in = (AST)_t;
+			AST __t1135 = _t;
+			AST tmp1509_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1499_AST_in = (AST)_t;
+			AST tmp1510_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1124;
+			_t = __t1135;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -27569,7 +27706,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1120;
+		_t = __t1131;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27578,95 +27715,95 @@
 		
 		AST systemdialogfontstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1126 = _t;
-		AST tmp1500_AST_in = (AST)_t;
+		AST __t1137 = _t;
+		AST tmp1511_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1501_AST_in = (AST)_t;
+		AST tmp1512_AST_in = (AST)_t;
 		match(_t,FONT);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
 		{
-		_loop1132:
+		_loop1143:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case ANSIONLY:
 			{
-				AST tmp1502_AST_in = (AST)_t;
+				AST tmp1513_AST_in = (AST)_t;
 				match(_t,ANSIONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIXEDONLY:
 			{
-				AST tmp1503_AST_in = (AST)_t;
+				AST tmp1514_AST_in = (AST)_t;
 				match(_t,FIXEDONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MAXSIZE:
 			{
-				AST __t1128 = _t;
-				AST tmp1504_AST_in = (AST)_t;
+				AST __t1139 = _t;
+				AST tmp1515_AST_in = (AST)_t;
 				match(_t,MAXSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1128;
+				_t = __t1139;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINSIZE:
 			{
-				AST __t1129 = _t;
-				AST tmp1505_AST_in = (AST)_t;
+				AST __t1140 = _t;
+				AST tmp1516_AST_in = (AST)_t;
 				match(_t,MINSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1129;
+				_t = __t1140;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t1130 = _t;
-				AST tmp1506_AST_in = (AST)_t;
+				AST __t1141 = _t;
+				AST tmp1517_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t1130;
+				_t = __t1141;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1131 = _t;
-				AST tmp1507_AST_in = (AST)_t;
+				AST __t1142 = _t;
+				AST tmp1518_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1508_AST_in = (AST)_t;
+				AST tmp1519_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1131;
+				_t = __t1142;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1132;
+				break _loop1143;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1126;
+		_t = __t1137;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27675,61 +27812,61 @@
 		
 		AST systemdialoggetdirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1134 = _t;
-		AST tmp1509_AST_in = (AST)_t;
+		AST __t1145 = _t;
+		AST tmp1520_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1510_AST_in = (AST)_t;
+		AST tmp1521_AST_in = (AST)_t;
 		match(_t,GETDIR);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
 		_t = _retTree;
 		{
-		_loop1138:
+		_loop1149:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case INITIALDIR:
 			{
-				AST __t1136 = _t;
-				AST tmp1511_AST_in = (AST)_t;
+				AST __t1147 = _t;
+				AST tmp1522_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1136;
+				_t = __t1147;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1512_AST_in = (AST)_t;
+				AST tmp1523_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TITLE:
 			{
-				AST __t1137 = _t;
-				AST tmp1513_AST_in = (AST)_t;
+				AST __t1148 = _t;
+				AST tmp1524_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1137;
+				_t = __t1148;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1138;
+				break _loop1149;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1134;
+		_t = __t1145;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27738,24 +27875,24 @@
 		
 		AST systemdialoggetfilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1140 = _t;
-		AST tmp1514_AST_in = (AST)_t;
+		AST __t1151 = _t;
+		AST tmp1525_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1515_AST_in = (AST)_t;
+		AST tmp1526_AST_in = (AST)_t;
 		match(_t,GETFILE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
 		_t = _retTree;
 		{
-		_loop1152:
+		_loop1163:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case FILTERS:
 			{
-				AST __t1142 = _t;
-				AST tmp1516_AST_in = (AST)_t;
+				AST __t1153 = _t;
+				AST tmp1527_AST_in = (AST)_t;
 				match(_t,FILTERS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27763,11 +27900,11 @@
 				expression(_t);
 				_t = _retTree;
 				{
-				_loop1144:
+				_loop1155:
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1517_AST_in = (AST)_t;
+						AST tmp1528_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						expression(_t);
@@ -27776,7 +27913,7 @@
 						_t = _retTree;
 					}
 					else {
-						break _loop1144;
+						break _loop1155;
 					}
 					
 				} while (true);
@@ -27786,13 +27923,13 @@
 				switch ( _t.getType()) {
 				case INITIALFILTER:
 				{
-					AST __t1146 = _t;
-					AST tmp1518_AST_in = (AST)_t;
+					AST __t1157 = _t;
+					AST tmp1529_AST_in = (AST)_t;
 					match(_t,INITIALFILTER);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1146;
+					_t = __t1157;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -27806,125 +27943,125 @@
 				}
 				}
 				}
-				_t = __t1142;
+				_t = __t1153;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ASKOVERWRITE:
 			{
-				AST tmp1519_AST_in = (AST)_t;
+				AST tmp1530_AST_in = (AST)_t;
 				match(_t,ASKOVERWRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CREATETESTFILE:
 			{
-				AST tmp1520_AST_in = (AST)_t;
+				AST tmp1531_AST_in = (AST)_t;
 				match(_t,CREATETESTFILE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULTEXTENSION:
 			{
-				AST __t1147 = _t;
-				AST tmp1521_AST_in = (AST)_t;
+				AST __t1158 = _t;
+				AST tmp1532_AST_in = (AST)_t;
 				match(_t,DEFAULTEXTENSION);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1147;
+				_t = __t1158;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INITIALDIR:
 			{
-				AST __t1148 = _t;
-				AST tmp1522_AST_in = (AST)_t;
+				AST __t1159 = _t;
+				AST tmp1533_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1148;
+				_t = __t1159;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MUSTEXIST:
 			{
-				AST tmp1523_AST_in = (AST)_t;
+				AST tmp1534_AST_in = (AST)_t;
 				match(_t,MUSTEXIST);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1524_AST_in = (AST)_t;
+				AST tmp1535_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SAVEAS:
 			{
-				AST tmp1525_AST_in = (AST)_t;
+				AST tmp1536_AST_in = (AST)_t;
 				match(_t,SAVEAS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case TITLE:
 			{
-				AST __t1149 = _t;
-				AST tmp1526_AST_in = (AST)_t;
+				AST __t1160 = _t;
+				AST tmp1537_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1149;
+				_t = __t1160;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case USEFILENAME:
 			{
-				AST tmp1527_AST_in = (AST)_t;
+				AST tmp1538_AST_in = (AST)_t;
 				match(_t,USEFILENAME);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t1150 = _t;
-				AST tmp1528_AST_in = (AST)_t;
+				AST __t1161 = _t;
+				AST tmp1539_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t1150;
+				_t = __t1161;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1151 = _t;
-				AST tmp1529_AST_in = (AST)_t;
+				AST __t1162 = _t;
+				AST tmp1540_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1530_AST_in = (AST)_t;
+				AST tmp1541_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1151;
+				_t = __t1162;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1152;
+				break _loop1163;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1140;
+		_t = __t1151;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -27933,81 +28070,81 @@
 		
 		AST systemdialogprintersetupstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1154 = _t;
-		AST tmp1531_AST_in = (AST)_t;
+		AST __t1165 = _t;
+		AST tmp1542_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1532_AST_in = (AST)_t;
+		AST tmp1543_AST_in = (AST)_t;
 		match(_t,PRINTERSETUP);
 		_t = _t.getNextSibling();
 		{
-		_loop1159:
+		_loop1170:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case NUMCOPIES:
 			{
-				AST __t1156 = _t;
-				AST tmp1533_AST_in = (AST)_t;
+				AST __t1167 = _t;
+				AST tmp1544_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1156;
+				_t = __t1167;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UPDATE:
 			{
-				AST __t1157 = _t;
-				AST tmp1534_AST_in = (AST)_t;
+				AST __t1168 = _t;
+				AST tmp1545_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
 				_t = _retTree;
-				_t = __t1157;
+				_t = __t1168;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANDSCAPE:
 			{
-				AST tmp1535_AST_in = (AST)_t;
+				AST tmp1546_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PORTRAIT:
 			{
-				AST tmp1536_AST_in = (AST)_t;
+				AST tmp1547_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case IN_KW:
 			{
-				AST __t1158 = _t;
-				AST tmp1537_AST_in = (AST)_t;
+				AST __t1169 = _t;
+				AST tmp1548_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1538_AST_in = (AST)_t;
+				AST tmp1549_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				_t = __t1158;
+				_t = __t1169;
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1159;
+				break _loop1170;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1154;
+		_t = __t1165;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28022,14 +28159,14 @@
 		AST id = null;
 		AST id2 = null;
 		
-		AST __t1171 = _t;
-		AST tmp1539_AST_in = (AST)_t;
+		AST __t1182 = _t;
+		AST tmp1550_AST_in = (AST)_t;
 		match(_t,TRIGGER);
 		_t = _t.getFirstChild();
-		AST tmp1540_AST_in = (AST)_t;
+		AST tmp1551_AST_in = (AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp1541_AST_in = (AST)_t;
+		AST tmp1552_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -28046,35 +28183,35 @@
 			switch ( _t.getType()) {
 			case CREATE:
 			{
-				AST tmp1542_AST_in = (AST)_t;
+				AST tmp1553_AST_in = (AST)_t;
 				match(_t,CREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DELETE_KW:
 			{
-				AST tmp1543_AST_in = (AST)_t;
+				AST tmp1554_AST_in = (AST)_t;
 				match(_t,DELETE_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIND:
 			{
-				AST tmp1544_AST_in = (AST)_t;
+				AST tmp1555_AST_in = (AST)_t;
 				match(_t,FIND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONCREATE:
 			{
-				AST tmp1545_AST_in = (AST)_t;
+				AST tmp1556_AST_in = (AST)_t;
 				match(_t,REPLICATIONCREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONDELETE:
 			{
-				AST tmp1546_AST_in = (AST)_t;
+				AST tmp1557_AST_in = (AST)_t;
 				match(_t,REPLICATIONDELETE);
 				_t = _t.getNextSibling();
 				break;
@@ -28085,7 +28222,7 @@
 			}
 			}
 			}
-			AST tmp1547_AST_in = (AST)_t;
+			AST tmp1558_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			t1 = _t==ASTNULL ? null : (AST)_t;
@@ -28125,14 +28262,14 @@
 			switch ( _t.getType()) {
 			case WRITE:
 			{
-				AST tmp1548_AST_in = (AST)_t;
+				AST tmp1559_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONWRITE:
 			{
-				AST tmp1549_AST_in = (AST)_t;
+				AST tmp1560_AST_in = (AST)_t;
 				match(_t,REPLICATIONWRITE);
 				_t = _t.getNextSibling();
 				break;
@@ -28143,7 +28280,7 @@
 			}
 			}
 			}
-			AST tmp1550_AST_in = (AST)_t;
+			AST tmp1561_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -28177,7 +28314,7 @@
 			switch ( _t.getType()) {
 			case NEW:
 			{
-				AST tmp1551_AST_in = (AST)_t;
+				AST tmp1562_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getNextSibling();
 				{
@@ -28185,7 +28322,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1552_AST_in = (AST)_t;
+					AST tmp1563_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -28250,7 +28387,7 @@
 			switch ( _t.getType()) {
 			case OLD:
 			{
-				AST tmp1553_AST_in = (AST)_t;
+				AST tmp1564_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getNextSibling();
 				{
@@ -28258,7 +28395,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1554_AST_in = (AST)_t;
+					AST tmp1565_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -28317,7 +28454,7 @@
 		}
 		case ASSIGN:
 		{
-			AST tmp1555_AST_in = (AST)_t;
+			AST tmp1566_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getNextSibling();
 			{
@@ -28325,8 +28462,8 @@
 			switch ( _t.getType()) {
 			case OF:
 			{
-				AST __t1184 = _t;
-				AST tmp1556_AST_in = (AST)_t;
+				AST __t1195 = _t;
+				AST tmp1567_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -28336,16 +28473,16 @@
 				switch ( _t.getType()) {
 				case TABLE:
 				{
-					AST __t1186 = _t;
-					AST tmp1557_AST_in = (AST)_t;
+					AST __t1197 = _t;
+					AST tmp1568_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1558_AST_in = (AST)_t;
+					AST tmp1569_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
 					_t = _retTree;
-					_t = __t1186;
+					_t = __t1197;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -28359,14 +28496,14 @@
 				}
 				}
 				}
-				_t = __t1184;
+				_t = __t1195;
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEW:
 			{
-				AST __t1187 = _t;
-				AST tmp1559_AST_in = (AST)_t;
+				AST __t1198 = _t;
+				AST tmp1570_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getFirstChild();
 				{
@@ -28374,7 +28511,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1560_AST_in = (AST)_t;
+					AST tmp1571_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -28400,7 +28537,7 @@
 				if ( inputState.guessing==0 ) {
 					action.addToSymbolScope(pop());
 				}
-				_t = __t1187;
+				_t = __t1198;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -28421,8 +28558,8 @@
 			switch ( _t.getType()) {
 			case OLD:
 			{
-				AST __t1190 = _t;
-				AST tmp1561_AST_in = (AST)_t;
+				AST __t1201 = _t;
+				AST tmp1572_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getFirstChild();
 				{
@@ -28430,7 +28567,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1562_AST_in = (AST)_t;
+					AST tmp1573_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -28453,7 +28590,7 @@
 				}
 				defineparam_var(_t);
 				_t = _retTree;
-				_t = __t1190;
+				_t = __t1201;
 				_t = _t.getNextSibling();
 				if ( inputState.guessing==0 ) {
 					action.addToSymbolScope(pop());
@@ -28481,7 +28618,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1171;
+		_t = __t1182;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28492,7 +28629,7 @@
 		AST head = null;
 		AST fi = null;
 		
-		AST __t1193 = _t;
+		AST __t1204 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,UNDERLINE);
 		_t = _t.getFirstChild();
@@ -28522,11 +28659,11 @@
 		}
 		}
 		{
-		_loop1198:
+		_loop1209:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
-				AST __t1196 = _t;
+				AST __t1207 = _t;
 				fi = _t==ASTNULL ? null :(AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
@@ -28554,11 +28691,11 @@
 				}
 				}
 				}
-				_t = __t1196;
+				_t = __t1207;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1198;
+				break _loop1209;
 			}
 			
 		} while (true);
@@ -28588,7 +28725,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t1193;
+		_t = __t1204;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28598,7 +28735,7 @@
 		AST upstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t1201 = _t;
+		AST __t1212 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,UP);
 		_t = _t.getFirstChild();
@@ -28677,7 +28814,7 @@
 		if ( inputState.guessing==0 ) {
 			action.frameStatementEnd();
 		}
-		_t = __t1201;
+		_t = __t1212;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28686,34 +28823,34 @@
 		
 		AST updatestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		boolean synPredMatched1209 = false;
+		boolean synPredMatched1220 = false;
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==UPDATE))) {
-			AST __t1209 = _t;
-			synPredMatched1209 = true;
+			AST __t1220 = _t;
+			synPredMatched1220 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST __t1208 = _t;
-				AST tmp1563_AST_in = (AST)_t;
+				AST __t1219 = _t;
+				AST tmp1574_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp1564_AST_in = (AST)_t;
+				AST tmp1575_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getNextSibling();
-				_t = __t1208;
+				_t = __t1219;
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1209 = false;
+				synPredMatched1220 = false;
 			}
-			_t = __t1209;
+			_t = __t1220;
 inputState.guessing--;
 		}
-		if ( synPredMatched1209 ) {
+		if ( synPredMatched1220 ) {
 			sqlupdatestate(_t);
 			_t = _retTree;
 		}
@@ -28732,30 +28869,30 @@
 		
 		AST sqlupdatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1348 = _t;
-		AST tmp1565_AST_in = (AST)_t;
+		AST __t1359 = _t;
+		AST tmp1576_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
-		AST tmp1566_AST_in = (AST)_t;
+		AST tmp1577_AST_in = (AST)_t;
 		match(_t,SET);
 		_t = _t.getNextSibling();
 		sqlupdate_equal(_t);
 		_t = _retTree;
 		{
-		_loop1350:
+		_loop1361:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1567_AST_in = (AST)_t;
+				AST tmp1578_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlupdate_equal(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop1350;
+				break _loop1361;
 			}
 			
 		} while (true);
@@ -28765,8 +28902,8 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t1352 = _t;
-			AST tmp1568_AST_in = (AST)_t;
+			AST __t1363 = _t;
+			AST tmp1579_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -28776,13 +28913,13 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CURRENT)) {
-				AST tmp1569_AST_in = (AST)_t;
+				AST tmp1580_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getNextSibling();
-				AST tmp1570_AST_in = (AST)_t;
+				AST tmp1581_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp1571_AST_in = (AST)_t;
+				AST tmp1582_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 			}
@@ -28791,7 +28928,7 @@
 			}
 			
 			}
-			_t = __t1352;
+			_t = __t1363;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -28808,7 +28945,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1348;
+		_t = __t1359;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -28818,7 +28955,7 @@
 		AST updatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST head = null;
 		
-		AST __t1211 = _t;
+		AST __t1222 = _t;
 		head = _t==ASTNULL ? null :(AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
@@ -28830,7 +28967,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1572_AST_in = (AST)_t;
+			AST tmp1583_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -28854,7 +28991,7 @@
 		}
 		}
 		{
-		_loop1214:
+		_loop1225:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -28862,7 +28999,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1214;
+				break _loop1225;
 			}
 			
 		} while (true);
@@ -28897,12 +29034,12 @@
 		switch ( _t.getType()) {
 		case EXCEPT:
 		{
-			AST __t1217 = _t;
-			AST tmp1573_AST_in = (AST)_t;
+			AST __t1228 = _t;
+			AST tmp1584_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
-			_loop1219:
+			_loop1230:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==Field_ref)) {
@@ -28910,12 +29047,12 @@
 					_t = _retTree;
 				}
 				else {
-					break _loop1219;
+					break _loop1230;
 				}
 				
 			} while (true);
 			}
-			_t = __t1217;
+			_t = __t1228;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -28939,16 +29076,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1221 = _t;
-			AST tmp1574_AST_in = (AST)_t;
+			AST __t1232 = _t;
+			AST tmp1585_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1575_AST_in = (AST)_t;
+			AST tmp1586_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1221;
+			_t = __t1232;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29017,7 +29154,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1576_AST_in = (AST)_t;
+			AST tmp1587_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -29035,7 +29172,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1211;
+		_t = __t1222;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29044,8 +29181,8 @@
 		
 		AST validatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1226 = _t;
-		AST tmp1577_AST_in = (AST)_t;
+		AST __t1237 = _t;
+		AST tmp1588_AST_in = (AST)_t;
 		match(_t,VALIDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -29055,7 +29192,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1578_AST_in = (AST)_t;
+			AST tmp1589_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -29073,7 +29210,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1226;
+		_t = __t1237;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29083,7 +29220,7 @@
 		AST viewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		AST v = null;
 		
-		AST __t1229 = _t;
+		AST __t1240 = _t;
 		v = _t==ASTNULL ? null :(AST)_t;
 		match(_t,VIEW);
 		_t = _t.getFirstChild();
@@ -29110,7 +29247,7 @@
 		}
 		}
 		{
-		_loop1232:
+		_loop1243:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Widget_ref)) {
@@ -29118,7 +29255,7 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1232;
+				break _loop1243;
 			}
 			
 		} while (true);
@@ -29128,16 +29265,16 @@
 		switch ( _t.getType()) {
 		case IN_KW:
 		{
-			AST __t1234 = _t;
-			AST tmp1579_AST_in = (AST)_t;
+			AST __t1245 = _t;
+			AST tmp1590_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1580_AST_in = (AST)_t;
+			AST tmp1591_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1234;
+			_t = __t1245;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29157,7 +29294,7 @@
 		if ( inputState.guessing==0 ) {
 			action.viewState(v);
 		}
-		_t = __t1229;
+		_t = __t1240;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29166,11 +29303,11 @@
 		
 		AST altertablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1236 = _t;
-		AST tmp1581_AST_in = (AST)_t;
+		AST __t1247 = _t;
+		AST tmp1592_AST_in = (AST)_t;
 		match(_t,ALTER);
 		_t = _t.getFirstChild();
-		AST tmp1582_AST_in = (AST)_t;
+		AST tmp1593_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -29180,10 +29317,10 @@
 		switch ( _t.getType()) {
 		case ADD:
 		{
-			AST tmp1583_AST_in = (AST)_t;
+			AST tmp1594_AST_in = (AST)_t;
 			match(_t,ADD);
 			_t = _t.getNextSibling();
-			AST tmp1584_AST_in = (AST)_t;
+			AST tmp1595_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			sql_col_def(_t);
@@ -29192,10 +29329,10 @@
 		}
 		case DROP:
 		{
-			AST tmp1585_AST_in = (AST)_t;
+			AST tmp1596_AST_in = (AST)_t;
 			match(_t,DROP);
 			_t = _t.getNextSibling();
-			AST tmp1586_AST_in = (AST)_t;
+			AST tmp1597_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
@@ -29204,28 +29341,28 @@
 		}
 		case ALTER:
 		{
-			AST tmp1587_AST_in = (AST)_t;
+			AST tmp1598_AST_in = (AST)_t;
 			match(_t,ALTER);
 			_t = _t.getNextSibling();
-			AST tmp1588_AST_in = (AST)_t;
+			AST tmp1599_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
 			_t = _retTree;
 			{
-			_loop1241:
+			_loop1252:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case FORMAT:
 				{
-					AST __t1239 = _t;
-					AST tmp1589_AST_in = (AST)_t;
+					AST __t1250 = _t;
+					AST tmp1600_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1239;
+					_t = __t1250;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -29238,13 +29375,13 @@
 				}
 				case DEFAULT:
 				{
-					AST __t1240 = _t;
-					AST tmp1590_AST_in = (AST)_t;
+					AST __t1251 = _t;
+					AST tmp1601_AST_in = (AST)_t;
 					match(_t,DEFAULT);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					_t = __t1240;
+					_t = __t1251;
 					_t = _t.getNextSibling();
 					break;
 				}
@@ -29257,7 +29394,7 @@
 				}
 				default:
 				{
-					break _loop1241;
+					break _loop1252;
 				}
 				}
 			} while (true);
@@ -29272,7 +29409,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1236;
+		_t = __t1247;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29282,10 +29419,10 @@
 		AST sql_col_def_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2451 = _t;
-		AST tmp1591_AST_in = (AST)_t;
+		AST tmp1602_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getFirstChild();
-		AST tmp1592_AST_in = (AST)_t;
+		AST tmp1603_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -29293,7 +29430,7 @@
 		switch ( _t.getType()) {
 		case PRECISION:
 		{
-			AST tmp1593_AST_in = (AST)_t;
+			AST tmp1604_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
@@ -29321,10 +29458,10 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1594_AST_in = (AST)_t;
+			AST tmp1605_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1595_AST_in = (AST)_t;
+			AST tmp1606_AST_in = (AST)_t;
 			match(_t,NUMBER);
 			_t = _t.getNextSibling();
 			{
@@ -29332,10 +29469,10 @@
 			switch ( _t.getType()) {
 			case COMMA:
 			{
-				AST tmp1596_AST_in = (AST)_t;
+				AST tmp1607_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1597_AST_in = (AST)_t;
+				AST tmp1608_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				break;
@@ -29350,7 +29487,7 @@
 			}
 			}
 			}
-			AST tmp1598_AST_in = (AST)_t;
+			AST tmp1609_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29378,13 +29515,13 @@
 		case Not_null:
 		{
 			AST __t2456 = _t;
-			AST tmp1599_AST_in = (AST)_t;
+			AST tmp1610_AST_in = (AST)_t;
 			match(_t,Not_null);
 			_t = _t.getFirstChild();
-			AST tmp1600_AST_in = (AST)_t;
+			AST tmp1611_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp1601_AST_in = (AST)_t;
+			AST tmp1612_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			{
@@ -29392,7 +29529,7 @@
 			switch ( _t.getType()) {
 			case UNIQUE:
 			{
-				AST tmp1602_AST_in = (AST)_t;
+				AST tmp1613_AST_in = (AST)_t;
 				match(_t,UNIQUE);
 				_t = _t.getNextSibling();
 				break;
@@ -29442,7 +29579,7 @@
 			case DEFAULT:
 			{
 				AST __t2459 = _t;
-				AST tmp1603_AST_in = (AST)_t;
+				AST tmp1614_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -29454,7 +29591,7 @@
 			case FORMAT:
 			{
 				AST __t2460 = _t;
-				AST tmp1604_AST_in = (AST)_t;
+				AST tmp1615_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -29486,8 +29623,8 @@
 		
 		AST createindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1243 = _t;
-		AST tmp1605_AST_in = (AST)_t;
+		AST __t1254 = _t;
+		AST tmp1616_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -29495,7 +29632,7 @@
 		switch ( _t.getType()) {
 		case UNIQUE:
 		{
-			AST tmp1606_AST_in = (AST)_t;
+			AST tmp1617_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getNextSibling();
 			break;
@@ -29510,51 +29647,51 @@
 		}
 		}
 		}
-		AST tmp1607_AST_in = (AST)_t;
+		AST tmp1618_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getNextSibling();
-		AST tmp1608_AST_in = (AST)_t;
+		AST tmp1619_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1609_AST_in = (AST)_t;
+		AST tmp1620_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
-		AST __t1245 = _t;
-		AST tmp1610_AST_in = (AST)_t;
+		AST __t1256 = _t;
+		AST tmp1621_AST_in = (AST)_t;
 		match(_t,Field_list);
 		_t = _t.getFirstChild();
-		AST tmp1611_AST_in = (AST)_t;
+		AST tmp1622_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
 		{
-		_loop1247:
+		_loop1258:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1612_AST_in = (AST)_t;
+				AST tmp1623_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.SYMBOL);
 				_t = _retTree;
 			}
 			else {
-				break _loop1247;
+				break _loop1258;
 			}
 			
 		} while (true);
 		}
-		AST tmp1613_AST_in = (AST)_t;
+		AST tmp1624_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
-		_t = __t1245;
+		_t = __t1256;
 		_t = _t.getNextSibling();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1243;
+		_t = __t1254;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29563,14 +29700,14 @@
 		
 		AST createviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1249 = _t;
-		AST tmp1614_AST_in = (AST)_t;
+		AST __t1260 = _t;
+		AST tmp1625_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1615_AST_in = (AST)_t;
+		AST tmp1626_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getNextSibling();
-		AST tmp1616_AST_in = (AST)_t;
+		AST tmp1627_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -29578,36 +29715,36 @@
 		switch ( _t.getType()) {
 		case Field_list:
 		{
-			AST __t1251 = _t;
-			AST tmp1617_AST_in = (AST)_t;
+			AST __t1262 = _t;
+			AST tmp1628_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp1618_AST_in = (AST)_t;
+			AST tmp1629_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
 			_t = _retTree;
 			{
-			_loop1253:
+			_loop1264:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1619_AST_in = (AST)_t;
+					AST tmp1630_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.SYMBOL);
 					_t = _retTree;
 				}
 				else {
-					break _loop1253;
+					break _loop1264;
 				}
 				
 			} while (true);
 			}
-			AST tmp1620_AST_in = (AST)_t;
+			AST tmp1631_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1251;
+			_t = __t1262;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29621,14 +29758,14 @@
 		}
 		}
 		}
-		AST tmp1621_AST_in = (AST)_t;
+		AST tmp1632_AST_in = (AST)_t;
 		match(_t,AS);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1249;
+		_t = __t1260;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -29637,8 +29774,8 @@
 		
 		AST selectstatea_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1303 = _t;
-		AST tmp1622_AST_in = (AST)_t;
+		AST __t1314 = _t;
+		AST tmp1633_AST_in = (AST)_t;
 		match(_t,SELECT);
 		_t = _t.getFirstChild();
 		{
@@ -29646,14 +29783,14 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp1623_AST_in = (AST)_t;
+			AST tmp1634_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISTINCT:
 		{
-			AST tmp1624_AST_in = (AST)_t;
+			AST tmp1635_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			break;
@@ -29674,39 +29811,39 @@
 		switch ( _t.getType()) {
 		case STAR:
 		{
-			AST tmp1625_AST_in = (AST)_t;
+			AST tmp1636_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Sql_select_what:
 		{
-			AST __t1306 = _t;
-			AST tmp1626_AST_in = (AST)_t;
+			AST __t1317 = _t;
+			AST tmp1637_AST_in = (AST)_t;
 			match(_t,Sql_select_what);
 			_t = _t.getFirstChild();
 			{
-			boolean synPredMatched1309 = false;
+			boolean synPredMatched1320 = false;
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType()==LEFTPAREN))) {
-				AST __t1309 = _t;
-				synPredMatched1309 = true;
+				AST __t1320 = _t;
+				synPredMatched1320 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1627_AST_in = (AST)_t;
+					AST tmp1638_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched1309 = false;
+					synPredMatched1320 = false;
 				}
-				_t = __t1309;
+				_t = __t1320;
 inputState.guessing--;
 			}
-			if ( synPredMatched1309 ) {
-				AST tmp1628_AST_in = (AST)_t;
+			if ( synPredMatched1320 ) {
+				AST tmp1639_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -29730,7 +29867,7 @@
 				}
 				}
 				}
-				AST tmp1629_AST_in = (AST)_t;
+				AST tmp1640_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -29784,11 +29921,11 @@
 			
 			}
 			{
-			_loop1315:
+			_loop1326:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1630_AST_in = (AST)_t;
+					AST tmp1641_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -29815,12 +29952,12 @@
 					}
 				}
 				else {
-					break _loop1315;
+					break _loop1326;
 				}
 				
 			} while (true);
 			}
-			_t = __t1306;
+			_t = __t1317;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29835,8 +29972,8 @@
 		switch ( _t.getType()) {
 		case INTO:
 		{
-			AST __t1317 = _t;
-			AST tmp1631_AST_in = (AST)_t;
+			AST __t1328 = _t;
+			AST tmp1642_AST_in = (AST)_t;
 			match(_t,INTO);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
@@ -29863,11 +30000,11 @@
 			}
 			}
 			{
-			_loop1321:
+			_loop1332:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1632_AST_in = (AST)_t;
+					AST tmp1643_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
@@ -29895,12 +30032,12 @@
 					}
 				}
 				else {
-					break _loop1321;
+					break _loop1332;
 				}
 				
 			} while (true);
 			}
-			_t = __t1317;
+			_t = __t1328;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29914,63 +30051,63 @@
 		}
 		}
 		}
-		AST __t1322 = _t;
-		AST tmp1633_AST_in = (AST)_t;
+		AST __t1333 = _t;
+		AST tmp1644_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getFirstChild();
 		select_from_spec(_t);
 		_t = _retTree;
 		{
-		_loop1324:
+		_loop1335:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1634_AST_in = (AST)_t;
+				AST tmp1645_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				select_from_spec(_t);
 				_t = _retTree;
 			}
 			else {
-				break _loop1324;
+				break _loop1335;
 			}
 			
 		} while (true);
 		}
-		_t = __t1322;
+		_t = __t1333;
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
 		case GROUP:
 		{
-			AST __t1326 = _t;
-			AST tmp1635_AST_in = (AST)_t;
+			AST __t1337 = _t;
+			AST tmp1646_AST_in = (AST)_t;
 			match(_t,GROUP);
 			_t = _t.getFirstChild();
-			AST tmp1636_AST_in = (AST)_t;
+			AST tmp1647_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
 			{
-			_loop1328:
+			_loop1339:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1637_AST_in = (AST)_t;
+					AST tmp1648_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					expression(_t);
 					_t = _retTree;
 				}
 				else {
-					break _loop1328;
+					break _loop1339;
 				}
 				
 			} while (true);
 			}
-			_t = __t1326;
+			_t = __t1337;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -29994,13 +30131,13 @@
 		switch ( _t.getType()) {
 		case HAVING:
 		{
-			AST __t1330 = _t;
-			AST tmp1638_AST_in = (AST)_t;
+			AST __t1341 = _t;
+			AST tmp1649_AST_in = (AST)_t;
 			match(_t,HAVING);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
 			_t = _retTree;
-			_t = __t1330;
+			_t = __t1341;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30023,28 +30160,28 @@
 		switch ( _t.getType()) {
 		case ORDER:
 		{
-			AST __t1332 = _t;
-			AST tmp1639_AST_in = (AST)_t;
+			AST __t1343 = _t;
+			AST tmp1650_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getFirstChild();
-			AST tmp1640_AST_in = (AST)_t;
+			AST tmp1651_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			select_order_expr(_t);
 			_t = _retTree;
-			_t = __t1332;
+			_t = __t1343;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BY:
 		{
-			AST __t1333 = _t;
-			AST tmp1641_AST_in = (AST)_t;
+			AST __t1344 = _t;
+			AST tmp1652_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getFirstChild();
 			select_order_expr(_t);
 			_t = _retTree;
-			_t = __t1333;
+			_t = __t1344;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30064,46 +30201,46 @@
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH))&&(_t != null)) {
 			{
-			boolean synPredMatched1338 = false;
+			boolean synPredMatched1349 = false;
 			if (_t==null) _t=ASTNULL;
 			if ((((_t.getType()==WITH))&&(_t != null))) {
-				AST __t1338 = _t;
-				synPredMatched1338 = true;
+				AST __t1349 = _t;
+				synPredMatched1349 = true;
 				inputState.guessing++;
 				try {
 					{
-					AST __t1337 = _t;
-					AST tmp1642_AST_in = (AST)_t;
+					AST __t1348 = _t;
+					AST tmp1653_AST_in = (AST)_t;
 					match(_t,WITH);
 					_t = _t.getFirstChild();
-					AST tmp1643_AST_in = (AST)_t;
+					AST tmp1654_AST_in = (AST)_t;
 					match(_t,CHECK);
 					_t = _t.getNextSibling();
-					AST tmp1644_AST_in = (AST)_t;
+					AST tmp1655_AST_in = (AST)_t;
 					match(_t,OPTION);
 					_t = _t.getNextSibling();
-					_t = __t1337;
+					_t = __t1348;
 					_t = _t.getNextSibling();
 					}
 				}
 				catch (RecognitionException pe) {
-					synPredMatched1338 = false;
+					synPredMatched1349 = false;
 				}
-				_t = __t1338;
+				_t = __t1349;
 inputState.guessing--;
 			}
-			if ( synPredMatched1338 ) {
-				AST __t1339 = _t;
-				AST tmp1645_AST_in = (AST)_t;
+			if ( synPredMatched1349 ) {
+				AST __t1350 = _t;
+				AST tmp1656_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp1646_AST_in = (AST)_t;
+				AST tmp1657_AST_in = (AST)_t;
 				match(_t,CHECK);
 				_t = _t.getNextSibling();
-				AST tmp1647_AST_in = (AST)_t;
+				AST tmp1658_AST_in = (AST)_t;
 				match(_t,OPTION);
 				_t = _t.getNextSibling();
-				_t = __t1339;
+				_t = __t1350;
 				_t = _t.getNextSibling();
 			}
 			else if ((_t.getType()==3||_t.getType()==UNION||_t.getType()==WITH)) {
@@ -30146,8 +30283,8 @@
 		switch ( _t.getType()) {
 		case UNION:
 		{
-			AST __t1342 = _t;
-			AST tmp1648_AST_in = (AST)_t;
+			AST __t1353 = _t;
+			AST tmp1659_AST_in = (AST)_t;
 			match(_t,UNION);
 			_t = _t.getFirstChild();
 			{
@@ -30155,7 +30292,7 @@
 			switch ( _t.getType()) {
 			case ALL:
 			{
-				AST tmp1649_AST_in = (AST)_t;
+				AST tmp1660_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
@@ -30172,7 +30309,7 @@
 			}
 			selectstatea(_t);
 			_t = _retTree;
-			_t = __t1342;
+			_t = __t1353;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30186,7 +30323,7 @@
 		}
 		}
 		}
-		_t = __t1303;
+		_t = __t1314;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30195,11 +30332,11 @@
 		
 		AST deletefromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1255 = _t;
-		AST tmp1650_AST_in = (AST)_t;
+		AST __t1266 = _t;
+		AST tmp1661_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1651_AST_in = (AST)_t;
+		AST tmp1662_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -30209,8 +30346,8 @@
 		switch ( _t.getType()) {
 		case WHERE:
 		{
-			AST __t1257 = _t;
-			AST tmp1652_AST_in = (AST)_t;
+			AST __t1268 = _t;
+			AST tmp1663_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -30218,17 +30355,17 @@
 			switch ( _t.getType()) {
 			case CURRENT:
 			{
-				AST __t1259 = _t;
-				AST tmp1653_AST_in = (AST)_t;
+				AST __t1270 = _t;
+				AST tmp1664_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getFirstChild();
-				AST tmp1654_AST_in = (AST)_t;
+				AST tmp1665_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp1655_AST_in = (AST)_t;
+				AST tmp1666_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				_t = __t1259;
+				_t = __t1270;
 				_t = _t.getNextSibling();
 				break;
 			}
@@ -30247,7 +30384,7 @@
 			}
 			}
 			}
-			_t = __t1257;
+			_t = __t1268;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -30264,7 +30401,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1255;
+		_t = __t1266;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30278,7 +30415,7 @@
 		case OR:
 		{
 			AST __t2463 = _t;
-			AST tmp1656_AST_in = (AST)_t;
+			AST tmp1667_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30292,7 +30429,7 @@
 		case AND:
 		{
 			AST __t2464 = _t;
-			AST tmp1657_AST_in = (AST)_t;
+			AST tmp1668_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30306,7 +30443,7 @@
 		case NOT:
 		{
 			AST __t2465 = _t;
-			AST tmp1658_AST_in = (AST)_t;
+			AST tmp1669_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30318,7 +30455,7 @@
 		case MATCHES:
 		{
 			AST __t2466 = _t;
-			AST tmp1659_AST_in = (AST)_t;
+			AST tmp1670_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30345,7 +30482,7 @@
 		case BEGINS:
 		{
 			AST __t2468 = _t;
-			AST tmp1660_AST_in = (AST)_t;
+			AST tmp1671_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30372,7 +30509,7 @@
 		case CONTAINS:
 		{
 			AST __t2470 = _t;
-			AST tmp1661_AST_in = (AST)_t;
+			AST tmp1672_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30399,7 +30536,7 @@
 		case EQ:
 		{
 			AST __t2472 = _t;
-			AST tmp1662_AST_in = (AST)_t;
+			AST tmp1673_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30426,7 +30563,7 @@
 		case NE:
 		{
 			AST __t2474 = _t;
-			AST tmp1663_AST_in = (AST)_t;
+			AST tmp1674_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30453,7 +30590,7 @@
 		case GTHAN:
 		{
 			AST __t2476 = _t;
-			AST tmp1664_AST_in = (AST)_t;
+			AST tmp1675_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30480,7 +30617,7 @@
 		case GE:
 		{
 			AST __t2478 = _t;
-			AST tmp1665_AST_in = (AST)_t;
+			AST tmp1676_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30507,7 +30644,7 @@
 		case LTHAN:
 		{
 			AST __t2480 = _t;
-			AST tmp1666_AST_in = (AST)_t;
+			AST tmp1677_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30534,7 +30671,7 @@
 		case LE:
 		{
 			AST __t2482 = _t;
-			AST tmp1667_AST_in = (AST)_t;
+			AST tmp1678_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30561,15 +30698,15 @@
 		case EXISTS:
 		{
 			AST __t2484 = _t;
-			AST tmp1668_AST_in = (AST)_t;
+			AST tmp1679_AST_in = (AST)_t;
 			match(_t,EXISTS);
 			_t = _t.getFirstChild();
-			AST tmp1669_AST_in = (AST)_t;
+			AST tmp1680_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			selectstatea(_t);
 			_t = _retTree;
-			AST tmp1670_AST_in = (AST)_t;
+			AST tmp1681_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2484;
@@ -30579,7 +30716,7 @@
 		case Sql_begins:
 		{
 			AST __t2485 = _t;
-			AST tmp1671_AST_in = (AST)_t;
+			AST tmp1682_AST_in = (AST)_t;
 			match(_t,Sql_begins);
 			_t = _t.getFirstChild();
 			{
@@ -30587,7 +30724,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1672_AST_in = (AST)_t;
+				AST tmp1683_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30602,7 +30739,7 @@
 			}
 			}
 			}
-			AST tmp1673_AST_in = (AST)_t;
+			AST tmp1684_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30614,7 +30751,7 @@
 		case Sql_between:
 		{
 			AST __t2487 = _t;
-			AST tmp1674_AST_in = (AST)_t;
+			AST tmp1685_AST_in = (AST)_t;
 			match(_t,Sql_between);
 			_t = _t.getFirstChild();
 			{
@@ -30622,7 +30759,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1675_AST_in = (AST)_t;
+				AST tmp1686_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30637,12 +30774,12 @@
 			}
 			}
 			}
-			AST tmp1676_AST_in = (AST)_t;
+			AST tmp1687_AST_in = (AST)_t;
 			match(_t,BETWEEN);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			AST tmp1677_AST_in = (AST)_t;
+			AST tmp1688_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30654,7 +30791,7 @@
 		case Sql_in:
 		{
 			AST __t2489 = _t;
-			AST tmp1678_AST_in = (AST)_t;
+			AST tmp1689_AST_in = (AST)_t;
 			match(_t,Sql_in);
 			_t = _t.getFirstChild();
 			{
@@ -30662,7 +30799,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1679_AST_in = (AST)_t;
+				AST tmp1690_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30677,10 +30814,10 @@
 			}
 			}
 			}
-			AST tmp1680_AST_in = (AST)_t;
+			AST tmp1691_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp1681_AST_in = (AST)_t;
+			AST tmp1692_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -30744,7 +30881,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1682_AST_in = (AST)_t;
+						AST tmp1693_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						sql_in_val(_t);
@@ -30764,7 +30901,7 @@
 			}
 			}
 			}
-			AST tmp1683_AST_in = (AST)_t;
+			AST tmp1694_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2489;
@@ -30774,7 +30911,7 @@
 		case Sql_like:
 		{
 			AST __t2494 = _t;
-			AST tmp1684_AST_in = (AST)_t;
+			AST tmp1695_AST_in = (AST)_t;
 			match(_t,Sql_like);
 			_t = _t.getFirstChild();
 			{
@@ -30782,7 +30919,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1685_AST_in = (AST)_t;
+				AST tmp1696_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30797,7 +30934,7 @@
 			}
 			}
 			}
-			AST tmp1686_AST_in = (AST)_t;
+			AST tmp1697_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30807,7 +30944,7 @@
 			switch ( _t.getType()) {
 			case ESCAPE:
 			{
-				AST tmp1687_AST_in = (AST)_t;
+				AST tmp1698_AST_in = (AST)_t;
 				match(_t,ESCAPE);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -30831,10 +30968,10 @@
 		case Sql_null_test:
 		{
 			AST __t2497 = _t;
-			AST tmp1688_AST_in = (AST)_t;
+			AST tmp1699_AST_in = (AST)_t;
 			match(_t,Sql_null_test);
 			_t = _t.getFirstChild();
-			AST tmp1689_AST_in = (AST)_t;
+			AST tmp1700_AST_in = (AST)_t;
 			match(_t,IS);
 			_t = _t.getNextSibling();
 			{
@@ -30842,7 +30979,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1690_AST_in = (AST)_t;
+				AST tmp1701_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30857,7 +30994,7 @@
 			}
 			}
 			}
-			AST tmp1691_AST_in = (AST)_t;
+			AST tmp1702_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			_t = __t2497;
@@ -30881,18 +31018,18 @@
 		
 		AST droptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1261 = _t;
-		AST tmp1692_AST_in = (AST)_t;
+		AST __t1272 = _t;
+		AST tmp1703_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp1693_AST_in = (AST)_t;
+		AST tmp1704_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1261;
+		_t = __t1272;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30901,14 +31038,14 @@
 		
 		AST fetchstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1263 = _t;
-		AST tmp1694_AST_in = (AST)_t;
+		AST __t1274 = _t;
+		AST tmp1705_AST_in = (AST)_t;
 		match(_t,FETCH);
 		_t = _t.getFirstChild();
-		AST tmp1695_AST_in = (AST)_t;
+		AST tmp1706_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1696_AST_in = (AST)_t;
+		AST tmp1707_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -30936,11 +31073,11 @@
 		}
 		}
 		{
-		_loop1267:
+		_loop1278:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1697_AST_in = (AST)_t;
+				AST tmp1708_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.UPDATING);
@@ -30969,14 +31106,14 @@
 				}
 			}
 			else {
-				break _loop1267;
+				break _loop1278;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1263;
+		_t = __t1274;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -30989,13 +31126,13 @@
 		switch ( _t.getType()) {
 		case INDICATOR:
 		{
-			AST __t1269 = _t;
-			AST tmp1698_AST_in = (AST)_t;
+			AST __t1280 = _t;
+			AST tmp1709_AST_in = (AST)_t;
 			match(_t,INDICATOR);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
-			_t = __t1269;
+			_t = __t1280;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -31017,15 +31154,15 @@
 		
 		AST grantstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1271 = _t;
-		AST tmp1699_AST_in = (AST)_t;
+		AST __t1282 = _t;
+		AST tmp1710_AST_in = (AST)_t;
 		match(_t,GRANT);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp1700_AST_in = (AST)_t;
+		AST tmp1711_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -31039,7 +31176,7 @@
 		}
 		case ID:
 		{
-			AST tmp1701_AST_in = (AST)_t;
+			AST tmp1712_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31057,13 +31194,13 @@
 		switch ( _t.getType()) {
 		case WITH:
 		{
-			AST tmp1702_AST_in = (AST)_t;
+			AST tmp1713_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getNextSibling();
-			AST tmp1703_AST_in = (AST)_t;
+			AST tmp1714_AST_in = (AST)_t;
 			match(_t,GRANT);
 			_t = _t.getNextSibling();
-			AST tmp1704_AST_in = (AST)_t;
+			AST tmp1715_AST_in = (AST)_t;
 			match(_t,OPTION);
 			_t = _t.getNextSibling();
 			break;
@@ -31081,7 +31218,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1271;
+		_t = __t1282;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -31094,8 +31231,8 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST __t1276 = _t;
-			AST tmp1705_AST_in = (AST)_t;
+			AST __t1287 = _t;
+			AST tmp1716_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -31103,7 +31240,7 @@
 			switch ( _t.getType()) {
 			case PRIVILEGES:
 			{
-				AST tmp1706_AST_in = (AST)_t;
+				AST tmp1717_AST_in = (AST)_t;
 				match(_t,PRIVILEGES);
 				_t = _t.getNextSibling();
 				break;
@@ -31118,7 +31255,7 @@
 			}
 			}
 			}
-			_t = __t1276;
+			_t = __t1287;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -31129,36 +31266,36 @@
 		case COMMA:
 		{
 			{
-			int _cnt1284=0;
-			_loop1284:
+			int _cnt1295=0;
+			_loop1295:
 			do {
 				if (_t==null) _t=ASTNULL;
 				switch ( _t.getType()) {
 				case SELECT:
 				{
-					AST tmp1707_AST_in = (AST)_t;
+					AST tmp1718_AST_in = (AST)_t;
 					match(_t,SELECT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INSERT:
 				{
-					AST tmp1708_AST_in = (AST)_t;
+					AST tmp1719_AST_in = (AST)_t;
 					match(_t,INSERT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1709_AST_in = (AST)_t;
+					AST tmp1720_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case UPDATE:
 				{
-					AST __t1279 = _t;
-					AST tmp1710_AST_in = (AST)_t;
+					AST __t1290 = _t;
+					AST tmp1721_AST_in = (AST)_t;
 					match(_t,UPDATE);
 					_t = _t.getFirstChild();
 					{
@@ -31166,36 +31303,36 @@
 					switch ( _t.getType()) {
 					case Field_list:
 					{
-						AST __t1281 = _t;
-						AST tmp1711_AST_in = (AST)_t;
+						AST __t1292 = _t;
+						AST tmp1722_AST_in = (AST)_t;
 						match(_t,Field_list);
 						_t = _t.getFirstChild();
-						AST tmp1712_AST_in = (AST)_t;
+						AST tmp1723_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.UPDATING);
 						_t = _retTree;
 						{
-						_loop1283:
+						_loop1294:
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp1713_AST_in = (AST)_t;
+								AST tmp1724_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								fld(_t,CQ.UPDATING);
 								_t = _retTree;
 							}
 							else {
-								break _loop1283;
+								break _loop1294;
 							}
 							
 						} while (true);
 						}
-						AST tmp1714_AST_in = (AST)_t;
+						AST tmp1725_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
-						_t = __t1281;
+						_t = __t1292;
 						_t = _t.getNextSibling();
 						break;
 					}
@@ -31209,23 +31346,23 @@
 					}
 					}
 					}
-					_t = __t1279;
+					_t = __t1290;
 					_t = _t.getNextSibling();
 					break;
 				}
 				case COMMA:
 				{
-					AST tmp1715_AST_in = (AST)_t;
+					AST tmp1726_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					break;
 				}
 				default:
 				{
-					if ( _cnt1284>=1 ) { break _loop1284; } else {throw new NoViableAltException(_t);}
+					if ( _cnt1295>=1 ) { break _loop1295; } else {throw new NoViableAltException(_t);}
 				}
 				}
-				_cnt1284++;
+				_cnt1295++;
 			} while (true);
 			}
 			break;
@@ -31247,7 +31384,7 @@
 		case TO:
 		{
 			AST __t2423 = _t;
-			AST tmp1716_AST_in = (AST)_t;
+			AST tmp1727_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -31255,14 +31392,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp1717_AST_in = (AST)_t;
+				AST tmp1728_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp1718_AST_in = (AST)_t;
+				AST tmp1729_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -31270,10 +31407,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1719_AST_in = (AST)_t;
+						AST tmp1730_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp1720_AST_in = (AST)_t;
+						AST tmp1731_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -31298,7 +31435,7 @@
 		case FROM:
 		{
 			AST __t2427 = _t;
-			AST tmp1721_AST_in = (AST)_t;
+			AST tmp1732_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -31306,14 +31443,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp1722_AST_in = (AST)_t;
+				AST tmp1733_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp1723_AST_in = (AST)_t;
+				AST tmp1734_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -31321,10 +31458,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1724_AST_in = (AST)_t;
+						AST tmp1735_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp1725_AST_in = (AST)_t;
+						AST tmp1736_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -31358,11 +31495,11 @@
 		
 		AST insertintostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1286 = _t;
-		AST tmp1726_AST_in = (AST)_t;
+		AST __t1297 = _t;
+		AST tmp1737_AST_in = (AST)_t;
 		match(_t,INSERT);
 		_t = _t.getFirstChild();
-		AST tmp1727_AST_in = (AST)_t;
+		AST tmp1738_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -31372,36 +31509,36 @@
 		switch ( _t.getType()) {
 		case Field_list:
 		{
-			AST __t1288 = _t;
-			AST tmp1728_AST_in = (AST)_t;
+			AST __t1299 = _t;
+			AST tmp1739_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp1729_AST_in = (AST)_t;
+			AST tmp1740_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.UPDATING);
 			_t = _retTree;
 			{
-			_loop1290:
+			_loop1301:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1730_AST_in = (AST)_t;
+					AST tmp1741_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
 					_t = _retTree;
 				}
 				else {
-					break _loop1290;
+					break _loop1301;
 				}
 				
 			} while (true);
 			}
-			AST tmp1731_AST_in = (AST)_t;
+			AST tmp1742_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1288;
+			_t = __t1299;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -31421,11 +31558,11 @@
 		switch ( _t.getType()) {
 		case VALUES:
 		{
-			AST __t1292 = _t;
-			AST tmp1732_AST_in = (AST)_t;
+			AST __t1303 = _t;
+			AST tmp1743_AST_in = (AST)_t;
 			match(_t,VALUES);
 			_t = _t.getFirstChild();
-			AST tmp1733_AST_in = (AST)_t;
+			AST tmp1744_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			sqlexpression(_t);
@@ -31452,11 +31589,11 @@
 			}
 			}
 			{
-			_loop1296:
+			_loop1307:
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1734_AST_in = (AST)_t;
+					AST tmp1745_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -31484,15 +31621,15 @@
 					}
 				}
 				else {
-					break _loop1296;
+					break _loop1307;
 				}
 				
 			} while (true);
 			}
-			AST tmp1735_AST_in = (AST)_t;
+			AST tmp1746_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
-			_t = __t1292;
+			_t = __t1303;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -31510,7 +31647,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1286;
+		_t = __t1297;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -31519,15 +31656,15 @@
 		
 		AST revokestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1298 = _t;
-		AST tmp1736_AST_in = (AST)_t;
+		AST __t1309 = _t;
+		AST tmp1747_AST_in = (AST)_t;
 		match(_t,REVOKE);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp1737_AST_in = (AST)_t;
+		AST tmp1748_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -31541,7 +31678,7 @@
 		}
 		case ID:
 		{
-			AST tmp1738_AST_in = (AST)_t;
+			AST tmp1749_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31556,7 +31693,7 @@
 		_t = _retTree;
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1298;
+		_t = __t1309;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -31592,7 +31729,7 @@
 			case LEFT:
 			{
 				AST __t2435 = _t;
-				AST tmp1739_AST_in = (AST)_t;
+				AST tmp1750_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
 				{
@@ -31600,7 +31737,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp1740_AST_in = (AST)_t;
+					AST tmp1751_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -31615,12 +31752,12 @@
 				}
 				}
 				}
-				AST tmp1741_AST_in = (AST)_t;
+				AST tmp1752_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1742_AST_in = (AST)_t;
+				AST tmp1753_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31632,7 +31769,7 @@
 			case RIGHT:
 			{
 				AST __t2437 = _t;
-				AST tmp1743_AST_in = (AST)_t;
+				AST tmp1754_AST_in = (AST)_t;
 				match(_t,RIGHT);
 				_t = _t.getFirstChild();
 				{
@@ -31640,7 +31777,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp1744_AST_in = (AST)_t;
+					AST tmp1755_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -31655,12 +31792,12 @@
 				}
 				}
 				}
-				AST tmp1745_AST_in = (AST)_t;
+				AST tmp1756_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1746_AST_in = (AST)_t;
+				AST tmp1757_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31672,15 +31809,15 @@
 			case INNER:
 			{
 				AST __t2439 = _t;
-				AST tmp1747_AST_in = (AST)_t;
+				AST tmp1758_AST_in = (AST)_t;
 				match(_t,INNER);
 				_t = _t.getFirstChild();
-				AST tmp1748_AST_in = (AST)_t;
+				AST tmp1759_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1749_AST_in = (AST)_t;
+				AST tmp1760_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31692,15 +31829,15 @@
 			case OUTER:
 			{
 				AST __t2440 = _t;
-				AST tmp1750_AST_in = (AST)_t;
+				AST tmp1761_AST_in = (AST)_t;
 				match(_t,OUTER);
 				_t = _t.getFirstChild();
-				AST tmp1751_AST_in = (AST)_t;
+				AST tmp1762_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1752_AST_in = (AST)_t;
+				AST tmp1763_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31712,12 +31849,12 @@
 			case JOIN:
 			{
 				AST __t2441 = _t;
-				AST tmp1753_AST_in = (AST)_t;
+				AST tmp1764_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getFirstChild();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1754_AST_in = (AST)_t;
+				AST tmp1765_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31739,7 +31876,7 @@
 		case WHERE:
 		{
 			AST __t2444 = _t;
-			AST tmp1755_AST_in = (AST)_t;
+			AST tmp1766_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -31773,14 +31910,14 @@
 		switch ( _t.getType()) {
 		case ASC:
 		{
-			AST tmp1756_AST_in = (AST)_t;
+			AST tmp1767_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESCENDING:
 		{
-			AST tmp1757_AST_in = (AST)_t;
+			AST tmp1768_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
@@ -31801,7 +31938,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1758_AST_in = (AST)_t;
+				AST tmp1769_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -31811,14 +31948,14 @@
 				switch ( _t.getType()) {
 				case ASC:
 				{
-					AST tmp1759_AST_in = (AST)_t;
+					AST tmp1770_AST_in = (AST)_t;
 					match(_t,ASC);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DESCENDING:
 				{
-					AST tmp1760_AST_in = (AST)_t;
+					AST tmp1771_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -31859,7 +31996,7 @@
 		}
 		case ID:
 		{
-			AST tmp1761_AST_in = (AST)_t;
+			AST tmp1772_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31875,7 +32012,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1762_AST_in = (AST)_t;
+			AST tmp1773_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31905,8 +32042,8 @@
 		
 		AST sqlupdate_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1355 = _t;
-		AST tmp1763_AST_in = (AST)_t;
+		AST __t1366 = _t;
+		AST tmp1774_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.REF);
@@ -31933,7 +32070,7 @@
 		}
 		}
 		}
-		_t = __t1355;
+		_t = __t1366;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -31942,7 +32079,7 @@
 		
 		AST sqlaggregatefunc_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1764_AST_in = (AST)_t;
+		AST tmp1775_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -31950,7 +32087,7 @@
 		switch ( _t.getType()) {
 		case DISTINCT:
 		{
-			AST tmp1765_AST_in = (AST)_t;
+			AST tmp1776_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			{
@@ -31958,12 +32095,12 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1766_AST_in = (AST)_t;
+				AST tmp1777_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.REF);
 				_t = _retTree;
-				AST tmp1767_AST_in = (AST)_t;
+				AST tmp1778_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -31984,7 +32121,7 @@
 		}
 		case STAR:
 		{
-			AST tmp1768_AST_in = (AST)_t;
+			AST tmp1779_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -31995,7 +32132,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ALL)) {
-					AST tmp1769_AST_in = (AST)_t;
+					AST tmp1780_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 				}
@@ -32014,7 +32151,7 @@
 		}
 		}
 		}
-		AST tmp1770_AST_in = (AST)_t;
+		AST tmp1781_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -32029,7 +32166,7 @@
 		case PLUS:
 		{
 			AST __t2503 = _t;
-			AST tmp1771_AST_in = (AST)_t;
+			AST tmp1782_AST_in = (AST)_t;
 			match(_t,PLUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32043,7 +32180,7 @@
 		case MINUS:
 		{
 			AST __t2504 = _t;
-			AST tmp1772_AST_in = (AST)_t;
+			AST tmp1783_AST_in = (AST)_t;
 			match(_t,MINUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32057,7 +32194,7 @@
 		case MULTIPLY:
 		{
 			AST __t2505 = _t;
-			AST tmp1773_AST_in = (AST)_t;
+			AST tmp1784_AST_in = (AST)_t;
 			match(_t,MULTIPLY);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32071,7 +32208,7 @@
 		case DIVIDE:
 		{
 			AST __t2506 = _t;
-			AST tmp1774_AST_in = (AST)_t;
+			AST tmp1785_AST_in = (AST)_t;
 			match(_t,DIVIDE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32085,7 +32222,7 @@
 		case MODULO:
 		{
 			AST __t2507 = _t;
-			AST tmp1775_AST_in = (AST)_t;
+			AST tmp1786_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32099,7 +32236,7 @@
 		case UNARY_PLUS:
 		{
 			AST __t2508 = _t;
-			AST tmp1776_AST_in = (AST)_t;
+			AST tmp1787_AST_in = (AST)_t;
 			match(_t,UNARY_PLUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -32111,7 +32248,7 @@
 		case UNARY_MINUS:
 		{
 			AST __t2509 = _t;
-			AST tmp1777_AST_in = (AST)_t;
+			AST tmp1788_AST_in = (AST)_t;
 			match(_t,UNARY_MINUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -32129,7 +32266,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1778_AST_in = (AST)_t;
+					AST tmp1789_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
@@ -32142,12 +32279,12 @@
 			}
 			if ( synPredMatched2511 ) {
 				AST __t2512 = _t;
-				AST tmp1779_AST_in = (AST)_t;
+				AST tmp1790_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getFirstChild();
 				sqlexpression(_t);
 				_t = _retTree;
-				AST tmp1780_AST_in = (AST)_t;
+				AST tmp1791_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t2512;
@@ -32246,7 +32383,7 @@
 		}
 		case USERID:
 		{
-			AST tmp1781_AST_in = (AST)_t;
+			AST tmp1792_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;
@@ -32263,11 +32400,11 @@
 		
 		AST labeled_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1379 = _t;
-		AST tmp1782_AST_in = (AST)_t;
+		AST __t1390 = _t;
+		AST tmp1793_AST_in = (AST)_t;
 		match(_t,BLOCK_LABEL);
 		_t = _t.getFirstChild();
-		AST tmp1783_AST_in = (AST)_t;
+		AST tmp1794_AST_in = (AST)_t;
 		match(_t,LEXCOLON);
 		_t = _t.getNextSibling();
 		{
@@ -32297,7 +32434,7 @@
 		}
 		}
 		}
-		_t = __t1379;
+		_t = __t1390;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33232,8 +33369,8 @@
 		
 		AST aatracestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1598 = _t;
-		AST tmp1784_AST_in = (AST)_t;
+		AST __t1609 = _t;
+		AST tmp1795_AST_in = (AST)_t;
 		match(_t,AATRACE);
 		_t = _t.getFirstChild();
 		{
@@ -33241,7 +33378,7 @@
 		switch ( _t.getType()) {
 		case OFF:
 		{
-			AST tmp1785_AST_in = (AST)_t;
+			AST tmp1796_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			state_end(_t);
@@ -33250,8 +33387,8 @@
 		}
 		case ON:
 		{
-			AST __t1600 = _t;
-			AST tmp1786_AST_in = (AST)_t;
+			AST __t1611 = _t;
+			AST tmp1797_AST_in = (AST)_t;
 			match(_t,ON);
 			_t = _t.getFirstChild();
 			{
@@ -33259,7 +33396,7 @@
 			switch ( _t.getType()) {
 			case AALIST:
 			{
-				AST tmp1787_AST_in = (AST)_t;
+				AST tmp1798_AST_in = (AST)_t;
 				match(_t,AALIST);
 				_t = _t.getNextSibling();
 				break;
@@ -33274,7 +33411,7 @@
 			}
 			}
 			}
-			_t = __t1600;
+			_t = __t1611;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -33320,21 +33457,21 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp1788_AST_in = (AST)_t;
+					AST tmp1799_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FROM:
 				{
-					AST tmp1789_AST_in = (AST)_t;
+					AST tmp1800_AST_in = (AST)_t;
 					match(_t,FROM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case THROUGH:
 				{
-					AST tmp1790_AST_in = (AST)_t;
+					AST tmp1801_AST_in = (AST)_t;
 					match(_t,THROUGH);
 					_t = _t.getNextSibling();
 					break;
@@ -33353,7 +33490,7 @@
 			}
 			case CLOSE:
 			{
-				AST tmp1791_AST_in = (AST)_t;
+				AST tmp1802_AST_in = (AST)_t;
 				match(_t,CLOSE);
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -33374,7 +33511,7 @@
 		}
 		}
 		}
-		_t = __t1598;
+		_t = __t1609;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33383,12 +33520,12 @@
 		
 		AST accumulatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1607 = _t;
-		AST tmp1792_AST_in = (AST)_t;
+		AST __t1618 = _t;
+		AST tmp1803_AST_in = (AST)_t;
 		match(_t,ACCUMULATE);
 		_t = _t.getFirstChild();
 		{
-		_loop1609:
+		_loop1620:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
@@ -33396,14 +33533,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1609;
+				break _loop1620;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1607;
+		_t = __t1618;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33412,8 +33549,8 @@
 		
 		AST analyzestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1619 = _t;
-		AST tmp1793_AST_in = (AST)_t;
+		AST __t1630 = _t;
+		AST tmp1804_AST_in = (AST)_t;
 		match(_t,ANALYZE);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -33425,13 +33562,13 @@
 		switch ( _t.getType()) {
 		case OUTPUT:
 		{
-			AST __t1621 = _t;
-			AST tmp1794_AST_in = (AST)_t;
+			AST __t1632 = _t;
+			AST tmp1805_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			filenameorvalue(_t);
 			_t = _retTree;
-			_t = __t1621;
+			_t = __t1632;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -33450,41 +33587,41 @@
 		}
 		}
 		{
-		_loop1623:
+		_loop1634:
 		do {
 			if (_t==null) _t=ASTNULL;
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1795_AST_in = (AST)_t;
+				AST tmp1806_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ALL:
 			{
-				AST tmp1796_AST_in = (AST)_t;
+				AST tmp1807_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1797_AST_in = (AST)_t;
+				AST tmp1808_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			default:
 			{
-				break _loop1623;
+				break _loop1634;
 			}
 			}
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1619;
+		_t = __t1630;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33493,8 +33630,8 @@
 		
 		AST applystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1625 = _t;
-		AST tmp1798_AST_in = (AST)_t;
+		AST __t1636 = _t;
+		AST tmp1809_AST_in = (AST)_t;
 		match(_t,APPLY);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -33504,13 +33641,13 @@
 		switch ( _t.getType()) {
 		case TO:
 		{
-			AST __t1627 = _t;
-			AST tmp1799_AST_in = (AST)_t;
+			AST __t1638 = _t;
+			AST tmp1810_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			gwidget(_t);
 			_t = _retTree;
-			_t = __t1627;
+			_t = __t1638;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -33527,7 +33664,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1625;
+		_t = __t1636;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33536,8 +33673,8 @@
 		
 		AST assignstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1634 = _t;
-		AST tmp1800_AST_in = (AST)_t;
+		AST __t1645 = _t;
+		AST tmp1811_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		assignment_list(_t);
@@ -33547,7 +33684,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1801_AST_in = (AST)_t;
+			AST tmp1812_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -33565,7 +33702,7 @@
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1634;
+		_t = __t1645;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33574,13 +33711,13 @@
 		
 		AST bellstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1650 = _t;
-		AST tmp1802_AST_in = (AST)_t;
+		AST __t1661 = _t;
+		AST tmp1813_AST_in = (AST)_t;
 		match(_t,BELL);
 		_t = _t.getFirstChild();
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1650;
+		_t = __t1661;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33589,14 +33726,14 @@
 		
 		AST callstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1652 = _t;
-		AST tmp1803_AST_in = (AST)_t;
+		AST __t1663 = _t;
+		AST tmp1814_AST_in = (AST)_t;
 		match(_t,CALL);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
 		_t = _retTree;
 		{
-		_loop1654:
+		_loop1665:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_tokenSet_31.member(_t.getType()))) {
@@ -33604,14 +33741,14 @@
 				_t = _retTree;
 			}
 			else {
-				break _loop1654;
+				break _loop1665;
 			}
 			
 		} while (true);
 		}
 		state_end(_t);
 		_t = _retTree;
-		_t = __t1652;
+		_t = __t1663;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
@@ -33620,57 +33757,57 @@
 		
 		AST casestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST __t1658 = _t;
-		AST tmp1804_AST_in = (AST)_t;
+		AST __t1669 = _t;
+		AST tmp1815_AST_in = (AST)_t;
 		match(_t,CASE);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
 		block_colon(_t);
 		_t = _retTree;
-		AST __t1659 = _t;
-		AST tmp1805_AST_in = (AST)_t;
+		AST __t1670 = _t;
+		AST tmp1816_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
-		_loop1662:
+		_loop1673:
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WHEN)) {
-				AST __t1661 = _t;
-				AST tmp1806_AST_in = (AST)_t;
+				AST __t1672 = _t;
+				AST tmp1817_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				case_expression(_t);
 				_t = _retTree;
-				AST tmp1807_AST_in = (AST)_t;
+				AST tmp1818_AST_in = (AST)_t;
 				match(_t,THEN);
 				_t = _t.getNextSibling();
 				blockorstate(_t);
 				_t = _retTree;
-				_t = __t1661;
+				_t = __t1672;
 				_t = _t.getNextSibling();
 			}
 			else {
-				break _loop1662;
+				break _loop1673;
 			}
 			
 		} while (true);
 		}
-		_t = __t1659;
+		_t = __t1670;
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		switch ( _t.getType()) {
 		case OTHERWISE:
 		{
-			AST __t1664 = _t;
-			AST tmp1808_AST_in = (AST)_t;
+			AST __t1675 = _t;
+			AST tmp1819_AST_in = (AST)_t;
 			match(_t,OTHERWISE);
 			_t = _t.getFirstChild();
 			blockorstate(_t);
 			_t = _retTree;
-			_t = __t1664;
+			_t = __t1675;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -33690,15 +33827,15 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1809_AST_in = (AST)_t;
+			AST tmp1820_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST __t1666 = _t;
-			AST tmp1810_AST_in = (AST)_t;
+			AST __t1677 = _t;
+			AST tmp1821_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -33706,7 +33843,7 @@
 			switch ( _t.getType()) {
 			case CASE:
 			{
-				AST tmp1811_AST_in = (AST)_t;
+				AST tmp1822_AST_in = (AST)_t;
 				match(_t,CASE);
 				_t = _t.getNextSibling();
 				break;
@@ -33721,7 +33858,7 @@
 			}
 			}
 			}
-			_t = __t1666;
+			_t = __t1677;
 			_t = _t.getNextSibling();
 			state_end(_t);
 			_t = _retTree;
@@ -33733,155 +33870,11 @@
 		}
 		}
 		}
-		_t = __t1658;
+		_t = __t1669;
 		_t = _t.getNextSibling();
 		_retTree = _t;
 	}
 	
-	public final void classstate(AST _t) throws RecognitionException {
-		
-		AST classstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
-		
-		AST __t1675 = _t;
-		AST tmp1812_AST_in = (AST)_t;
-		match(_t,CLASS);
-		_t = _t.getFirstChild();
-		AST tmp1813_AST_in = (AST)_t;
-		match(_t,TYPE_NAME);
-		_t = _t.getNextSibling();
-		{
-		if (_t==null) _t=ASTNULL;
-		switch ( _t.getType()) {
-		case INHERITS:
-		{
-			AST __t1677 = _t;
-			AST tmp1814_AST_in = (AST)_t;
-			match(_t,INHERITS);
-			_t = _t.getFirstChild();
-			AST tmp1815_AST_in = (AST)_t;
-			match(_t,TYPE_NAME);
-			_t = _t.getNextSibling();
-			_t = __t1677;
-			_t = _t.getNextSibling();
-			break;
-		}
-		case PERIOD:
-		case LEXCOLON:
-		case FINAL:
-		case IMPLEMENTS:
-		{
-			break;
-		}
-		default:
-		{
-			throw new NoViableAltException(_t);
-		}
-		}
-		}
-		{
-		if (_t==null) _t=ASTNULL;
-		switch ( _t.getType()) {
-		case IMPLEMENTS:
-		{
-			AST __t1679 = _t;
-			AST tmp1816_AST_in = (AST)_t;
-			match(_t,IMPLEMENTS);
-			_t = _t.getFirstChild();
-			AST tmp1817_AST_in = (AST)_t;
-			match(_t,TYPE_NAME);
-			_t = _t.getNextSibling();
-			{
-			_loop1681:
-			do {
-				if (_t==null) _t=ASTNULL;
-				if ((_t.getType()==COMMA)) {
-					AST tmp1818_AST_in = (AST)_t;
-					match(_t,COMMA);
-					_t = _t.getNextSibling();
-					AST tmp1819_AST_in = (AST)_t;
-					match(_t,TYPE_NAME);
-					_t = _t.getNextSibling();
-				}
-				else {
-					break _loop1681;
-				}
-				
-			} while (true);
-			}
-			_t = __t1679;
-			_t = _t.getNextSibling();
-			break;
-		}
-		case PERIOD:
-		case LEXCOLON:
-		case FINAL:
-		{
-			break;
-		}
-		default:
-		{
-			throw new NoViableAltException(_t);
-		}
-		}
-		}
-		{
-		if (_t==null) _t=ASTNULL;
-		switch ( _t.getType()) {
-		case FINAL:
-		{
-			AST tmp1820_AST_in = (AST)_t;
-			match(_t,FINAL);
-			_t = _t.getNextSibling();
-			break;
-		}
-		case PERIOD:
-		case LEXCOLON:
-		{
-			break;
-		}
-		default:
-		{
-			throw new NoViableAltException(_t);
-		}
-		}
-		}
-		block_colon(_t);
-		_t = _retTree;
-		code_block(_t);
-		_t = _retTree;
-		AST __t1683 = _t;
-		AST tmp1821_AST_in = (AST)_t;
-		match(_t,END);
-		_t = _t.getFirstChild();
-		{
-		if (_t==null) _t=ASTNULL;
-		switch ( _t.getType()) {
-		case CLASS:
-		{
-			AST tmp1822_AST_in = (AST)_t;
-			match(_t,CLASS);
-			_t = _t.getNextSibling();
-			break;
-		}
-		case 3:
-		{
-			break;
-		}
-		default:
-		{
-			throw new NoViableAltException(_t);
-		}
-		}
-		}
-		_t = __t1683;
-		_t = _t.getNextSibling();
-		state_end(_t);
-		_t = _retTree;
-		_t = __t1675;
-		_t = _t.getNextSibling();
-		_retTree = _t;
-	}
-	
 	public final void closestate(AST _t) throws RecognitionException {
 		
 		AST closestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
@@ -40548,97 +40541,97 @@
 		switch ( _t.getType()) {
 		case COLUMN:
 		{
-			AST __t1641 = _t;
+			AST __t1652 = _t;
 			AST tmp2251_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1641;
+			_t = __t1652;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLUMNOF:
 		{
-			AST __t1642 = _t;
+			AST __t1653 = _t;
 			AST tmp2252_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t1642;
+			_t = __t1653;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROW:
 		{
-			AST __t1643 = _t;
+			AST __t1654 = _t;
 			AST tmp2253_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1643;
+			_t = __t1654;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWOF:
 		{
-			AST __t1644 = _t;
+			AST __t1655 = _t;
 			AST tmp2254_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t1644;
+			_t = __t1655;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case X:
 		{
-			AST __t1645 = _t;
+			AST __t1656 = _t;
 			AST tmp2255_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1645;
+			_t = __t1656;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XOF:
 		{
-			AST __t1646 = _t;
+			AST __t1657 = _t;
 			AST tmp2256_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t1646;
+			_t = __t1657;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case Y:
 		{
-			AST __t1647 = _t;
+			AST __t1658 = _t;
 			AST tmp2257_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1647;
+			_t = __t1658;
 			_t = _t.getNextSibling();
 			break;
 		}
 		case YOF:
 		{
-			AST __t1648 = _t;
+			AST __t1659 = _t;
 			AST tmp2258_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
 			_t = _retTree;
-			_t = __t1648;
+			_t = __t1659;
 			_t = _t.getNextSibling();
 			break;
 		}
@@ -40654,33 +40647,33 @@
 		
 		AST case_expression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		boolean synPredMatched1671 = false;
+		boolean synPredMatched1682 = false;
 		if (_t==null) _t=ASTNULL;
 		if (((_t.getType()==OR))) {
-			AST __t1671 = _t;
-			synPredMatched1671 = true;
+			AST __t1682 = _t;
+			synPredMatched1682 = true;
 			inputState.guessing++;
 			try {
 				{
-				AST __t1670 = _t;
+				AST __t1681 = _t;
 				AST tmp2259_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
 				AST tmp2260_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
-				_t = __t1670;
+				_t = __t1681;
 				_t = _t.getNextSibling();
 				}
 			}
 			catch (RecognitionException pe) {
-				synPredMatched1671 = false;
+				synPredMatched1682 = false;
 			}
-			_t = __t1671;
+			_t = __t1682;
 inputState.guessing--;
 		}
-		if ( synPredMatched1671 ) {
-			AST __t1672 = _t;
+		if ( synPredMatched1682 ) {
+			AST __t1683 = _t;
 			AST tmp2261_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
@@ -40688,17 +40681,17 @@
 			_t = _retTree;
 			case_expression(_t);
 			_t = _retTree;
-			_t = __t1672;
+			_t = __t1683;
 			_t = _t.getNextSibling();
 		}
 		else if ((_t.getType()==WHEN)) {
-			AST __t1673 = _t;
+			AST __t1684 = _t;
 			AST tmp2262_AST_in = (AST)_t;
 			match(_t,WHEN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			_t = __t1673;
+			_t = __t1684;
 			_t = _t.getNextSibling();
 		}
 		else if ((_tokenSet_3.member(_t.getType()))) {

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2006-03-30 00:33:40 UTC (rev 61)
@@ -8,7 +8,7 @@
 To find actions taken within this grammar, search for "action.",
 which is the tree parser action object.
 
-Copyright (C) 2001-2006 Joanju (www.joanju.com)
+Copyright (C) 2001-2006 Joanju Software (www.joanju.com)
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
@@ -82,10 +82,6 @@
 		if (action==null) action = new TP01Support();
 	}
 
-	/** Get the action object. getActionObject and getTpSupport are identical.
-	 * @deprecated
-	 */
-	public TP01Action getTpSupport() { return action; }
 	/** Get the action object. getActionObject and getTpSupport are identical. */
 	public TP01Action getActionObject() { return action; }
 
@@ -93,14 +89,7 @@
 	 * By default, the support object is a new TP01Support,
 	 * but you can configure this to be any TP01Action object.
 	 * setTpSupport and setActionObject are identical.
-	 * @deprecated
 	 */
-	public void setTpSupport(TP01Action action) { this.action = action; }
-	/** Set the action object.
-	 * By default, the support object is a new TP01Support,
-	 * but you can configure this to be any TP01Action object.
-	 * setTpSupport and setActionObject are identical.
-	 */
 	public void setActionObject(TP01Action action) { this.action = action; }
 
 
@@ -127,6 +116,7 @@
 	:	#(	p:Program_root {action.programRoot(#p);}
 			(blockorstate)*
 			Program_tail
+			{action.programTail();}
 		)
 	;
 
@@ -656,7 +646,12 @@
 	;
 
 defineframestate
-	:	#(	def:DEFINE (def_shared)? (def_visib)? FRAME
+	:	#(	def:DEFINE (def_shared)?
+			// Note that frames cannot be inherited. If that ever changes, then things will get tricky
+			// when creating the symbol tables for inheritance caching. See Frame.copyBare(), and the
+			// attributes of Frame that it does not deal with.
+			(PRIVATE)?  // important: see note above.
+			FRAME
 			id:ID { action.frameDef(#def, #id); }
 			(form_item[CQ.SYMBOL])*
 			(	#(HEADER (display_item)+ )

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Browse.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -11,6 +11,7 @@
 
 import org.prorefactor.core.TokenTypes;
 import org.prorefactor.treeparser.FieldContainer;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 
 
@@ -18,6 +19,11 @@
 
 	public Browse(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Browse(getName(), scope);
+	}
+
 	/** Returns TokenTypes.BROWSE. */
 	public int getProgressType() { return TokenTypes.BROWSE; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Button.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public Button(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Button(getName(), scope);
+	}
+
 	/** Returns TokenTypes.BUTTON. */
 	public int getProgressType() { return TokenTypes.BUTTON; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Frame.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Frame.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Frame.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -13,6 +13,7 @@
 import org.prorefactor.core.TokenTypes;
 import org.prorefactor.treeparser.Block;
 import org.prorefactor.treeparser.FieldContainer;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 
 
@@ -26,6 +27,16 @@
 
 	private boolean initialized = false;
 	private Block frameScopeBlock = null;
+
+	
+
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		// Frames cannot be inherited, so we don't have to worry about the other frame attributes.
+		return new Frame(getName(), scope);
+	}
+
+	
 	public Block getFrameScopeBlock() { return frameScopeBlock; }
 
 	

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Image.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public Image(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Image(getName(), scope);
+	}
+
 	/** Returns TokenTypes.IMAGE. */
 	public int getProgressType() { return TokenTypes.IMAGE; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Menu.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Menu.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Menu.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public Menu(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Menu(getName(), scope);
+	}
+
 	/** Returns TokenTypes.MENU. */
 	public int getProgressType() { return TokenTypes.MENU; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/MenuItem.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/MenuItem.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/MenuItem.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public MenuItem(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new MenuItem(getName(), scope);
+	}
+
 	/** Returns TokenTypes.MENUITEM. */
 	public int getProgressType() { return TokenTypes.MENUITEM; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Rectangle.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public Rectangle(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Rectangle(getName(), scope);
+	}
+
 	/** Returns TokenTypes.RECTANGLE. */
 	public int getProgressType() { return TokenTypes.RECTANGLE; }
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Submenu.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Submenu.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.core/src/org/prorefactor/widgettypes/Submenu.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -10,6 +10,7 @@
 package org.prorefactor.widgettypes;
 
 import org.prorefactor.core.TokenTypes;
+import org.prorefactor.treeparser.Symbol;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.Widget;
 
@@ -18,6 +19,11 @@
 
 	public Submenu(String name, SymbolScope scope) { super(name, scope); }
 
+	@Override
+	public Symbol copyBare(SymbolScope scope) {
+		return new Submenu(getName(), scope);
+	}
+
 	/** Returns TokenTypes.SUBMENU. */
 	public int getProgressType() { return TokenTypes.SUBMENU; }
 

Modified: trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/Plugin.java
===================================================================
--- trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/Plugin.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/Plugin.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -46,6 +46,8 @@
 	//The shared instance.
 	private static Plugin plugin;
 	
+	private ProRefactorIDEGateway ideGateway = null;
+	
 	// What's the proper way for getting this?
 	private static String ID = "org.prorefactor.eclipse";
 
@@ -91,6 +93,11 @@
 	/** Returns the shared instance. */
 	public static Plugin getDefault() { return plugin; }
 
+	
+	public static ProRefactorIDEGateway getIDEGateway() {
+		if (plugin.ideGateway==null) plugin.ideGateway = new ProRefactorIDEGateway();
+		return plugin.ideGateway;
+	}
 
 
 	public SelectionManager getSelectionManager() { return selectionManager; }

Added: trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/ProRefactorIDEGateway.java
===================================================================
--- trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/ProRefactorIDEGateway.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/ProRefactorIDEGateway.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -0,0 +1,31 @@
+/* Created on Mar 26, 2006
+ * John Green
+ *
+ * Copyright (C) 2006 Joanju Software
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ */
+package org.prorefactor.eclipse;
+
+import java.io.File;
+
+import org.eclipse.core.resources.IFile;
+import org.prorefactor.refactor.IDE;
+
+
+/** @see IDE */
+public class ProRefactorIDEGateway implements IDE {
+
+	/** @see IDE#getProjectRelativePath(File) */
+	public String [] getProjectRelativePath(File file) {
+		IFile ifile = ResourceUtil.getIFile(file.getAbsolutePath());
+		if (ifile==null) return null;
+		String [] ret = new String[2];
+		ret[0] = ifile.getProject().getName();
+		ret[1] = ifile.getProjectRelativePath().toString();
+		return ret;
+	}
+
+}

Modified: trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java
===================================================================
--- trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java	2006-03-30 00:22:41 UTC (rev 60)
+++ trunk/org.prorefactor.eclipse/src/org/prorefactor/eclipse/actions/ActionManager.java	2006-03-30 00:33:40 UTC (rev 61)
@@ -1,7 +1,7 @@
 /* Created 2003
  * John Green
  *
- * Copyright (C) 2003-2004 Joanju Limited
+ * Copyright (C) 2003-2006 Joanju Software
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -44,6 +44,7 @@
 import org.prorefactor.eclipse.Plugin;
 import org.prorefactor.eclipse.messages.ParserMessages;
 import org.prorefactor.refactor.RefactorSession;
+import org.prorefactor.treeparser.SymbolScopeSuper;
 
 import com.joanju.ProparseLdr;
 
@@ -67,7 +68,7 @@
 	public boolean doTheParse = true;
 	private String errorMess = null;
 	/** A list of IFile *.p and *.w objects, generated from the selected resources */
-	protected ArrayList fileList = null;
+	protected ArrayList<IFile> fileList = null;
 	private ProparseLdr parser = null;
 	private boolean parseErrors = false;
 	public ParserMessages parserMessages;
@@ -209,7 +210,6 @@
 		parserMessages = new ParserMessages(); 
 		try {
 			op = new IRunnableWithProgress() {
-				public ActionManager outerclass = null;
 				public void run(IProgressMonitor monitor) throws InterruptedException {
 						run2(monitor, currIter);
 				}
@@ -278,7 +278,7 @@
 	
 	
 	protected void loadSelectionList(ISelection iselection) {
-		fileList = new ArrayList();
+		fileList = new ArrayList<IFile>();
 		if (iselection==null) return;
 		IStructuredSelection selection = (IStructuredSelection) iselection;
 		if (selection.isEmpty()) return;
@@ -333,6 +333,15 @@
 		while (it.hasNext()) {
 			if (monitor.isCanceled()) throw new InterruptedException("Canceled"); 
 			currResource = (IResource) it.next();
+			if (workDone==0) {
+				// Clear the super class inheritance cache for both Proparse and ProRefactor.
+				SymbolScopeSuper.cache.clear();
+				parser.configSet("multi-parse", "false");
+			} else if (workDone==1) {
+				// Proparse's cache is cleared when the first parse is done. Now we enable the cache
+				// for the rest of this run.
+				parser.configSet("multi-parse", "true");
+			}
 			workDone += 1;
 			checkForProjectChange(currResource);
 			if (preParse!=null) preParse.run(currResource);
@@ -362,7 +371,7 @@
 	public int setup(ISelection iselection) {
 		loadSelectionList(iselection);
 		if (fileList!=null && ! fileList.isEmpty()) {
-			currResource = (IResource) fileList.get(0);
+			currResource = fileList.get(0);
 		} else { 
 			// Try to get the IFile from the current editor.
 			IEditorPart textEditor = Plugin.getActiveWorkbenchWindow().getActivePage().getActiveEditor();
@@ -386,8 +395,9 @@
 		}
 		try {
 			refPack = RefactorSession.getInstance();
-			currProject = ((IResource)fileList.get(0)).getProject().getName();
+			currProject = fileList.get(0).getProject().getName();
 			refPack.loadProject(currProject);
+			refPack.setIDE(Plugin.getIDEGateway());
 		} catch (Throwable e) {
 			reportError("Error Loading Project Settings\n" + e.toString());
 			Plugin.log(e);



From johnallengreen at berlios.de  Thu Mar 30 04:43:05 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 04:43:05 +0200
Subject: [Prorefactor-svn] r62 - in trunk: org.prorefactor.core/META-INF org.prorefactor.doc org.prorefactor.doc/META-INF org.prorefactor.eclipse/META-INF org.prorefactor.feature org.prorefactor.javadoc org.prorefactor.javadoc/META-INF org.prorefactor.lib/META-INF org.prorefactor.update
Message-ID: <200603300243.k2U2h5sh017234@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 04:42:57 +0200 (Thu, 30 Mar 2006)
New Revision: 62

Modified:
   trunk/org.prorefactor.core/META-INF/MANIFEST.MF
   trunk/org.prorefactor.doc/META-INF/MANIFEST.MF
   trunk/org.prorefactor.doc/manual.xml
   trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF
   trunk/org.prorefactor.feature/feature.xml
   trunk/org.prorefactor.javadoc/META-INF/MANIFEST.MF
   trunk/org.prorefactor.javadoc/javadoc.xml
   trunk/org.prorefactor.lib/META-INF/MANIFEST.MF
   trunk/org.prorefactor.update/site.xml
Log:
Version 1.4.0.

Modified: trunk/org.prorefactor.core/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.core/META-INF/MANIFEST.MF	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.core/META-INF/MANIFEST.MF	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ProRefactor Core
 Bundle-SymbolicName: org.prorefactor.core
-Bundle-Version: 1.3.0
+Bundle-Version: 1.4.0
 Bundle-ClassPath: core.jar
 Bundle-Vendor: ProRefactor.org
 Bundle-Localization: plugin

Modified: trunk/org.prorefactor.doc/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.doc/META-INF/MANIFEST.MF	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.doc/META-INF/MANIFEST.MF	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ProRefactor Documentation
 Bundle-SymbolicName: org.prorefactor.doc; singleton:=true
-Bundle-Version: 1.3.0
+Bundle-Version: 1.4.0
 Bundle-Vendor: ProRefactor.org
 Bundle-Localization: plugin
 Require-Bundle: org.eclipse.help

Modified: trunk/org.prorefactor.doc/manual.xml
===================================================================
--- trunk/org.prorefactor.doc/manual.xml	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.doc/manual.xml	2006-03-30 02:42:57 UTC (rev 62)
@@ -7,7 +7,7 @@
 
     <date>2006</date>
 
-    <pubdate>February 2006, ProRefactor version 1.3.0</pubdate>
+    <pubdate>March 2006, ProRefactor version 1.4.0</pubdate>
 
     <author>
       <firstname>John</firstname>
@@ -18,7 +18,7 @@
     <copyright>
       <year>2004-2006</year>
 
-      <holder>Joanju and other ProRefactor.org Contributors</holder>
+      <holder>Joanju Software and other ProRefactor.org Contributors</holder>
     </copyright>
 
     <legalnotice>
@@ -439,9 +439,9 @@
       units in those projects.</para>
 
       <note>
-        <para>ProRefactor considers <filename>.p</filename> and
-        <filename>.w</filename> files to be compile units. This may be
-        configurable in future versions.</para>
+        <para>ProRefactor considers <filename>.p</filename>,
+        <filename>.w</filename>, and <filename>.cls</filename> files to be
+        compile units. This may be configurable in future versions.</para>
       </note>
 
       <para>ProRefactor stores information about your compile units, and it
@@ -1494,6 +1494,24 @@
 
     <variablelist>
       <varlistentry>
+        <term>Version 1.4.0</term>
+
+        <listitem>
+          <itemizedlist>
+            <listitem>
+              <para>Added support for class inheritance, 10.1 syntax, .cls
+              files, Proparse 3.0.</para>
+            </listitem>
+
+            <listitem>
+              <para>Internal: Merged sub-project "refactor" into sub-project
+              "core", due to inter-dependencies.</para>
+            </listitem>
+          </itemizedlist>
+        </listitem>
+      </varlistentry>
+
+      <varlistentry>
         <term>Version 1.3.0</term>
 
         <listitem>

Modified: trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.eclipse/META-INF/MANIFEST.MF	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ProRefactor
 Bundle-SymbolicName: org.prorefactor.eclipse; singleton:=true
-Bundle-Version: 1.3.0
+Bundle-Version: 1.4.0
 Bundle-ClassPath: eclipse.jar
 Bundle-Activator: org.prorefactor.eclipse.Plugin
 Bundle-Vendor: ProRefactor.org

Modified: trunk/org.prorefactor.feature/feature.xml
===================================================================
--- trunk/org.prorefactor.feature/feature.xml	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.feature/feature.xml	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 <feature
       id="org.prorefactor"
       label="org.prorefactor"
-      version="1.3.0"
+      version="1.4.0"
       provider-name="ProRefactor.org"
       plugin="org.prorefactor.eclipse">
 
@@ -48,6 +48,10 @@
 archives.
    </license>
 
+   <url>
+      <update label="ProRefactor.org" url="http://prorefactor.org/update/"/>
+   </url>
+
    <requires>
       <import plugin="org.eclipse.jface.text"/>
       <import plugin="org.eclipse.ui.workbench.texteditor"/>
@@ -65,42 +69,36 @@
          id="org.prorefactor.core"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="1.4.0"/>
 
    <plugin
          id="org.prorefactor.eclipse"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="1.4.0"/>
 
    <plugin
          id="org.prorefactor.javadoc"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="1.4.0"/>
 
    <plugin
-         id="org.prorefactor.refactor"
-         download-size="0"
-         install-size="0"
-         version="0.0.0"/>
-
-   <plugin
          id="org.prorefactor.doc"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="1.4.0"/>
 
    <plugin
          id="org.prorefactor.lib"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="1.4.0"/>
 
    <plugin
          id="org.prolint"
          download-size="0"
          install-size="0"
-         version="0.0.0"/>
+         version="0.1.3"/>
 
 </feature>

Modified: trunk/org.prorefactor.javadoc/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.javadoc/META-INF/MANIFEST.MF	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.javadoc/META-INF/MANIFEST.MF	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ProRefactor Javadoc
 Bundle-SymbolicName: org.prorefactor.javadoc; singleton:=true
-Bundle-Version: 1.3.0
+Bundle-Version: 1.4.0
 Bundle-Vendor: ProRefactor.org
 Bundle-Localization: plugin
 Require-Bundle: org.eclipse.help

Modified: trunk/org.prorefactor.javadoc/javadoc.xml
===================================================================
--- trunk/org.prorefactor.javadoc/javadoc.xml	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.javadoc/javadoc.xml	2006-03-30 02:42:57 UTC (rev 62)
@@ -7,7 +7,7 @@
 	           author="true"
 	           version="true"
 	           use="true"
-	           classpath="../org.prorefactor.antlr/bin;../org.prorefactor.core/bin;../org.prorefactor.refactor/bin;../org.prorefactor.eclipse/bin;"
+	           classpath="../org.prorefactor.antlr/bin;../org.prorefactor.core/bin;../org.prorefactor.eclipse/bin;"
 	           windowtitle="ProRefactor">
 	    <fileset dir="../org.prorefactor.core/src" defaultexcludes="yes">
 	      <include name="**/*.java"/>
@@ -15,17 +15,11 @@
 	      <exclude name="org/prorefactor/treeparser01/TreeParser01**"/>
 	      <exclude name="org/prorefactor/treeparser02/TreeParser02**"/>
 	    </fileset>
-	    <fileset dir="../org.prorefactor.refactor/src" defaultexcludes="yes">
-	      <include name="**/*.java"/>
-	      <exclude name="org/prorefactor/treeparser03/TreeParser03**"/>
-	      <exclude name="org/prorefactor/refactor/tp04/TP04.java"/>
-	      <exclude name="org/prorefactor/refactor/tp04/TP04TokenTypes.java"/>
-	    </fileset>
 	    <fileset dir="../org.prorefactor.eclipse/src" defaultexcludes="yes">
 	      <include name="**/*.java"/>
 	    </fileset>
-	    <doctitle><![CDATA[<h1>ProRefactor 1.3.0</h1>]]></doctitle>
-	    <bottom><![CDATA[<i>Copyright &#169; 2002-2006 Joanju and others. All Rights Reserved.</i>]]></bottom>
+	    <doctitle><![CDATA[<h1>ProRefactor 1.4.0</h1>]]></doctitle>
+	    <bottom><![CDATA[<i>Copyright &#169; 2002-2006 Joanju Software and others. All Rights Reserved.</i>]]></bottom>
 	    <tag name="todo" scope="all" description="To do:" />
 	  </javadoc>
       <zip zipfile="doc.zip" basedir="javadoc" filesonly="false" whenempty="skip" update="false"/>

Modified: trunk/org.prorefactor.lib/META-INF/MANIFEST.MF
===================================================================
--- trunk/org.prorefactor.lib/META-INF/MANIFEST.MF	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.lib/META-INF/MANIFEST.MF	2006-03-30 02:42:57 UTC (rev 62)
@@ -2,7 +2,7 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: ProRefactor required Libraries
 Bundle-SymbolicName: org.prorefactor.lib
-Bundle-Version: 1.3.0
+Bundle-Version: 1.4.0
 Bundle-ClassPath: antlr/antlr.jar,
  jakarta/commons-collections/commons-collections.jar,
  hibernate/cglib-full-2.0.2.jar,

Modified: trunk/org.prorefactor.update/site.xml
===================================================================
--- trunk/org.prorefactor.update/site.xml	2006-03-30 00:33:40 UTC (rev 61)
+++ trunk/org.prorefactor.update/site.xml	2006-03-30 02:42:57 UTC (rev 62)
@@ -3,7 +3,7 @@
    <description url="http://prorefactor.org/update/">
       ProRefactor Update Site
    </description>
-   <feature url="features/org.prorefactor_1.3.0.jar" id="org.prorefactor" version="1.3.0">
+   <feature url="features/org.prorefactor_1.4.0.jar" id="org.prorefactor" version="1.4.0">
       <category name="ProRefactor.org"/>
    </feature>
    <category-def name="ProRefactor.org" label="ProRefactor.org">



From johnallengreen at berlios.de  Thu Mar 30 21:04:07 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 21:04:07 +0200
Subject: [Prorefactor-svn] r63 - in trunk/org.prorefactor.core/src/org/prorefactor: core/unittest treeparser treeparser01
Message-ID: <200603301904.k2UJ47U9016509@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 21:04:04 +0200 (Thu, 30 Mar 2006)
New Revision: 63

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/Config.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/RunHandle.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
Log:
Dealt with various warnings like Java 5 generics.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/Config.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/Config.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/Config.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.core.unittest;
@@ -46,7 +51,7 @@
 		parser.configSet("proversion", getEnvProperty("proversion"));
 		parser.configSet("window-system", getEnvProperty("window_system"));
 	
-		// dbAliases();
+		dbAliases();
 		
 		parser.configSet("init","true");
 	}
@@ -54,10 +59,9 @@
 	/**
 	 * @return
 	 */
-	private void dbAliases() {
+	private static void dbAliases() {
 		parser.schemaAliasDelete(""); // deletes all
 		String [] alias = getEnvProperty("database_aliases").split(",");
-		
 		for (int i = 0; i < alias.length - 1; i = i + 2) {
 			parser.schemaAliasCreate(alias[i], alias[i+1]);
 		}

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,12 +3,17 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.core.unittest;
 
 import java.util.ArrayList;
-import java.util.Collection;
+import java.util.Map;
 
 import junit.framework.TestCase;
 
@@ -90,29 +95,29 @@
 			Call getCompileListCall = new Call(externalName,getCompileList.getName());
 			
 			// Create expected result set for root scope: enable-ui, user-action, disable-ui.
-			ArrayList expectedRootCalls = new ArrayList();
+			ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
 			expectedRootCalls.add(disableUiCall);
 			expectedRootCalls.add(enableUiCall);
 			expectedRootCalls.add(userActionCall);
 			
 
 			// Get actual calls found in code and test against expected.
-			Collection actualRootCalls = processAction.getRootScope().getCallList();
-			assertTrue(actualRootCalls.containsAll(expectedRootCalls));
-			assertTrue(! actualRootCalls.contains(setStateCall));			
-			assertTrue(! actualRootCalls.contains(getCompileListCall));			
+			Map<String, Call> actualRootCalls = processAction.getRootScope().getCallMap();
+			assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
+			assertTrue(! actualRootCalls.values().contains(setStateCall));			
+			assertTrue(! actualRootCalls.values().contains(getCompileListCall));			
 			
 			// Internal proc enable-ui calls: setState.
-			Collection actualEnableUiCalls = enableUi.getRoutineScope().getCallList();
-			assertTrue(actualEnableUiCalls.contains(setStateCall));
+			Map<String, Call> actualEnableUiCalls = enableUi.getRoutineScope().getCallMap();
+			assertTrue(actualEnableUiCalls.values().contains(setStateCall));
 			
 			// Internal proc user-action calls: get-compile-list.
-			Collection actualUserActionCalls = userAction.getRoutineScope().getCallList();
-			assertTrue(actualUserActionCalls.contains(getCompileListCall));
+			Map<String, Call> actualUserActionCalls = userAction.getRoutineScope().getCallMap();
+			assertTrue(actualUserActionCalls.values().contains(getCompileListCall));
 			
 			// Internal proc get-compile-list calls: setState x 3.
-			Collection actualGetCompileListCalls = getCompileList.getRoutineScope().getCallList();
-			assertTrue(actualGetCompileListCalls.contains(setStateCall));
+			Map<String, Call> actualGetCompileListCalls = getCompileList.getRoutineScope().getCallMap();
+			assertTrue(actualGetCompileListCalls.values().contains(setStateCall));
 						
 		} catch (RecognitionException e) {
 			e.printStackTrace();
@@ -155,23 +160,23 @@
 			Call test01InternalCall = new Call(externalName,test01.getName());
 			
 			// Expected root procedure calls.
-			ArrayList expectedRootCalls = new ArrayList();
+			ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
 			expectedRootCalls.add(persistentProcCall);
 			expectedRootCalls.add(test01InHandleCall);
 			expectedRootCalls.add(test01InternalCall);
 
 			// Expected calls in procedure test_01
-			ArrayList expectedTest01Calls = new ArrayList();
+			ArrayList<Call> expectedTest01Calls = new ArrayList<Call>();
 			expectedTest01Calls.add(test02InHandleCall);
 			
 			// Test actual root calls agains expected root calls.
-			Collection actualRootCalls = processAction.getCallList();
-			assertTrue(actualRootCalls.containsAll(expectedRootCalls));
-			assertTrue(! actualRootCalls.contains(test02InHandleCall));			
+			Map<String, Call> actualRootCalls = processAction.getCallList();
+			assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
+			assertTrue(! actualRootCalls.values().contains(test02InHandleCall));			
 
 			// Test actual calls in test_01 against expected calls.
-			Collection actualTest01Calls = test01.getRoutineScope().getCallList();
-			assertTrue(actualTest01Calls.containsAll(expectedTest01Calls));
+			Map<String, Call> actualTest01Calls = test01.getRoutineScope().getCallMap();
+			assertTrue(actualTest01Calls.values().containsAll(expectedTest01Calls));
 			
 		} catch (RecognitionException e) {
 			e.printStackTrace();

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01SymbolActionTest.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.core.unittest;
@@ -22,7 +27,6 @@
  *
  */
 public class TP01SymbolActionTest extends TestCase {
-	private Config config = null;
 	private ProparseLdr parser = null;
 	private TP01Support walkAction;
 	private TreeParser01 walker;
@@ -42,7 +46,6 @@
 	}
 	
 	public void setUp(){
-		config = Config.getInstance();
 		parser = ProparseLdr.getInstance();
 		walkAction = new TP01Support();
 		walker = new TreeParser01();

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.treeparser;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Routine.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,7 +3,7 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
- * Copyright (C) 2004-2006 Joanju and others.
+ * Copyright (c) 2004,2006 ProRefactor.org.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/RunHandle.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/RunHandle.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/RunHandle.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.treeparser;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SymbolScope.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -13,7 +13,6 @@
 
 
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -389,28 +388,17 @@
 
 
 
-	public void setRootBlock(Block block) { rootBlock = block; }
+	public void registerCall(Call call) { callMap.put(call.id(), call); }
 
 
-	/**
-	 * @param call
-	 */
-	public void registerCall(Call call) {
-		callMap.put(call.id(), call);
-	}
+	public void setRootBlock(Block block) { rootBlock = block; }
 
 
-	/**
-	 * @return a Collection view of the calls registered in
-	 * this SymbolScope. Caution: changes to the Collection
-	 * will affect the internal list in the SymbolScope.
-	 */
-	public Collection<Call> getCallList() {
-		// TODO - change signature to Map to allow key search.
-		return callMap.values();
-	}
 
+	/** Get the call map. */
+	public Map<String, Call> getCallMap() { return callMap; }
 
+
 	/**
 	 * @param name
 	 * @return

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-30 02:42:57 UTC (rev 62)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-30 19:04:04 UTC (rev 63)
@@ -3,13 +3,18 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 
 package org.prorefactor.treeparser01;
 
 
-import java.util.Collection;
+import java.util.Map;
 
 import org.prorefactor.core.JPNode;
 import org.prorefactor.treeparser.Call;
@@ -203,14 +208,11 @@
 	public void exprtSystemHandleName(AST sysHandleName) {
 	}
 
-	/**
-	 * @return a Collection containing all the Call objects
-	 * registered in the currentScope.
-	 */
-	public Collection getCallList() {
-		return currentScope.getCallList();
-	}
 
+	/** @return the Map of Call objects registered in the currentScope. */
+	public Map<String, Call> getCallList() { return currentScope.getCallMap(); }
+
+
 	/**
 	 * @return
 	 */



From johnallengreen at berlios.de  Thu Mar 30 22:16:36 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Thu, 30 Mar 2006 22:16:36 +0200
Subject: [Prorefactor-svn] r64 - in trunk/org.prorefactor.core/src/org/prorefactor: core/unittest treeparser treeparser01
Message-ID: <200603302016.k2UKGanp029262@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-30 22:16:36 +0200 (Thu, 30 Mar 2006)
New Revision: 64

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/RoutineHandler.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ErrorList.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Expression.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SemanticRecord.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Value.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
Log:
More superficial updates.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/RoutineHandler.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/RoutineHandler.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/RoutineHandler.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Call.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -106,7 +106,7 @@
 	public boolean equals(Object other){
 		if (other.getClass() == this.getClass()){
 			Call otherCall = (Call) other;
-			return id().equals(otherCall.id());
+			return id().equalsIgnoreCase(otherCall.id());
 		} else return false;
 	}
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ErrorList.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ErrorList.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ErrorList.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.treeparser;
@@ -15,47 +20,30 @@
  *
  */
 public class ErrorList {
+
+	public ErrorList() { }
+
+	private ArrayList<SemanticError> list = new ArrayList<SemanticError>();
 	
-	private ArrayList list = null;
 	
-	public ErrorList(){
-		list = new ArrayList();
-	}
+
+	public boolean add(SemanticError o) { return list.add(o); }
+
+
+	public void clear() { list.clear(); }
+
+
+	public boolean equals(Object obj) { return list.equals(obj); }
 	
-	/**
-	 * @param o
-	 * @return
-	 */
-	public boolean add(SemanticError o) {
-		return list.add(o);
-	}
+	
+	/** Get a copy of the error list. */
+	public ArrayList<SemanticError> getCopy() { return new ArrayList<SemanticError>(list); }
 
-	/**
-	 * 
-	 */
-	public void clear() {
-		list.clear();
-	}
 
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	public boolean equals(Object obj) {
-		return list.equals(obj);
-	}
+	public boolean isEmpty() { return list.isEmpty(); }
 
-	/**
-	 * @return
-	 */
-	public boolean isEmpty() {
-		return list.isEmpty();
-	}
 
-	/**
-	 * @return
-	 */
-	public int size() {
-		return list.size();
-	}
+	public int size() { return list.size(); }
 
+
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Expression.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Expression.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Expression.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.treeparser;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SemanticRecord.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SemanticRecord.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/SemanticRecord.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 package org.prorefactor.treeparser;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Value.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Value.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/Value.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -3,6 +3,11 @@
  * @author Peter Dalbadie
  * 21-Sep-2004
  * 
+ * Copyright (c) 2004,2006 ProRefactor.org.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
  */
 
 

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-30 19:04:04 UTC (rev 63)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-30 20:16:36 UTC (rev 64)
@@ -38,32 +38,24 @@
  */
 public class TP01ProcessAction extends TP01Action {
 
-
+	public TP01ProcessAction(SymbolScopeRoot rootScope){
+		this.rootScope = rootScope;
+		currentScope = rootScope;
+		errorList = new ErrorList();
+	}
+	
 	SymbolScope currentScope;
 	SymbolScopeRoot rootScope;
 	TableBuffer lastTableReferenced;
 	TableBuffer prevTableReferenced;
 	TableBuffer currDefTable;
 
-	private ErrorList errorList;
-
 	private Call wipCall;
+	private ErrorList errorList;
 	private Expression wipExpression;
 	private JPNode wipFieldNode;
 	
-	public TP01ProcessAction(){	// initialization
-		rootScope = new SymbolScopeRoot();
-		currentScope = rootScope;
-		errorList = new ErrorList();
-		// See programRoot() for initiazation of the root Block.
-	}
 
-	public TP01ProcessAction(SymbolScopeRoot rootScope){
-		this.rootScope = rootScope;
-		currentScope = rootScope;
-		errorList = new ErrorList();
-	}
-	
 	/**
 	 * Get the RunHandle value in "run <proc> in <handle>." Where <handle>
 	 * is a handle valued Expression; then save the RunHandle value



From johnallengreen at berlios.de  Fri Mar 31 06:21:31 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Fri, 31 Mar 2006 06:21:31 +0200
Subject: [Prorefactor-svn] r65 - in trunk/org.prorefactor.core/src/org/prorefactor: core/unittest treeparser treeparser01
Message-ID: <200603310421.k2V4LVmp019979@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-31 06:21:30 +0200 (Fri, 31 Mar 2006)
New Revision: 65

Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
Log:
Superficial changes to TP01ProcessAction.java. For methods called by the tree parser,
commented as such, and made those protected.
In ParseUnit, added support for TP01Action objects other than the default, and this
allowed me to make TP01ProcessActionTest.java slightly simpler.

Modified: trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-30 20:16:36 UTC (rev 64)
+++ trunk/org.prorefactor.core/src/org/prorefactor/core/unittest/TP01ProcessActionTest.java	2006-03-31 04:21:30 UTC (rev 65)
@@ -12,30 +12,25 @@
 
 package org.prorefactor.core.unittest;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Map;
 
 import junit.framework.TestCase;
 
-import org.prorefactor.core.JPNode;
+import org.prorefactor.refactor.RefactorException;
 import org.prorefactor.treeparser.Call;
+import org.prorefactor.treeparser.ParseUnit;
 import org.prorefactor.treeparser01.TP01ProcessAction;
 import org.prorefactor.treeparser01.TP01Support;
-import org.prorefactor.treeparser01.TreeParser01;
 
-import antlr.RecognitionException;
-
-import com.joanju.ProparseLdr;
-
 /**
  * Tests for ProcessParseAction.
  *
  */
 public class TP01ProcessActionTest extends TestCase {
-	private ProparseLdr parser = null;
 	private TP01Support symbolAction;
 	private TP01ProcessAction processAction;
-	private TreeParser01 treeWalker;
 
 	private String testDir = Config.testDir();
 	
@@ -46,85 +41,66 @@
 		super(name);
 	}
 	
-	private JPNode getTree() {
-		int topNode = parser.getHandle();
-		parser.nodeTop(topNode);
-		JPNode ast = JPNode.getTree(topNode);
-		return ast;
-	}
-	
 	public void setUp(){
-		parser = ProparseLdr.getInstance();
 		symbolAction = new TP01Support();
 		processAction = new TP01ProcessAction(symbolAction.getRootScope());
-		treeWalker = new TreeParser01();
 	}
 
+
 	/**
 	 * Parse compile-file.p and verify that all calls
 	 * are registered correctly, for each scope.
+	 * @throws RefactorException 
 	 */
-	public void testCompileFileCalls(){
-		try {
-			String externalName = "compile-file.p";
-			parser.parse(testDir + externalName);
-			assertTrue("Parse error.", parser.errorGetStatus() >= 0);
-			
-			JPNode ast = getTree();
-			
-			treeWalker.setActionObject(symbolAction);
-			treeWalker.program(ast);
+	public void testCompileFileCalls() throws Exception{
+		File file = new File(testDir + "compile-file.p");
+		String externalName = file.getPath();
 
-			treeWalker.setActionObject(processAction);
-			treeWalker.program(ast);
-			
+		ParseUnit pu = new ParseUnit(file);
+		pu.treeParser01(symbolAction);
+		pu.treeParser01(processAction);
 
-			// Define routine handlers for expected routines.
-			RoutineHandler enableUi = new RoutineHandler("enable-ui", symbolAction);
-			RoutineHandler userAction = new RoutineHandler("user-action", symbolAction);
-			RoutineHandler disableUi = new RoutineHandler("disable-ui", symbolAction);
-			RoutineHandler setState = new RoutineHandler("setState", symbolAction);
-			RoutineHandler getCompileList = new RoutineHandler("get-compile-list", symbolAction);			
+		// Define routine handlers for expected routines.
+		RoutineHandler enableUi = new RoutineHandler("enable-ui", symbolAction);
+		RoutineHandler userAction = new RoutineHandler("user-action", symbolAction);
+		RoutineHandler disableUi = new RoutineHandler("disable-ui", symbolAction);
+		RoutineHandler setState = new RoutineHandler("setState", symbolAction);
+		RoutineHandler getCompileList = new RoutineHandler("get-compile-list", symbolAction);			
 
+		// Define call objects for expected calls.
+		Call enableUiCall = new Call(externalName,enableUi.getName());
+		Call userActionCall = new Call(externalName,userAction.getName());
+		Call disableUiCall = new Call(externalName,disableUi.getName());
+		Call setStateCall = new Call(externalName,setState.getName());
+		Call getCompileListCall = new Call(externalName,getCompileList.getName());
+		
+		// Create expected result set for root scope: enable-ui, user-action, disable-ui.
+		ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
+		expectedRootCalls.add(disableUiCall);
+		expectedRootCalls.add(enableUiCall);
+		expectedRootCalls.add(userActionCall);
 
-			// Define call objects for expected calls.
-			Call enableUiCall = new Call(externalName,enableUi.getName());
-			Call userActionCall = new Call(externalName,userAction.getName());
-			Call disableUiCall = new Call(externalName,disableUi.getName());
-			Call setStateCall = new Call(externalName,setState.getName());
-			Call getCompileListCall = new Call(externalName,getCompileList.getName());
-			
-			// Create expected result set for root scope: enable-ui, user-action, disable-ui.
-			ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
-			expectedRootCalls.add(disableUiCall);
-			expectedRootCalls.add(enableUiCall);
-			expectedRootCalls.add(userActionCall);
-			
-
-			// Get actual calls found in code and test against expected.
-			Map<String, Call> actualRootCalls = processAction.getRootScope().getCallMap();
-			assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
-			assertTrue(! actualRootCalls.values().contains(setStateCall));			
-			assertTrue(! actualRootCalls.values().contains(getCompileListCall));			
-			
-			// Internal proc enable-ui calls: setState.
-			Map<String, Call> actualEnableUiCalls = enableUi.getRoutineScope().getCallMap();
-			assertTrue(actualEnableUiCalls.values().contains(setStateCall));
-			
-			// Internal proc user-action calls: get-compile-list.
-			Map<String, Call> actualUserActionCalls = userAction.getRoutineScope().getCallMap();
-			assertTrue(actualUserActionCalls.values().contains(getCompileListCall));
-			
-			// Internal proc get-compile-list calls: setState x 3.
-			Map<String, Call> actualGetCompileListCalls = getCompileList.getRoutineScope().getCallMap();
-			assertTrue(actualGetCompileListCalls.values().contains(setStateCall));
+		// Get actual calls found in code and test against expected.
+		Map<String, Call> actualRootCalls = pu.getRootScope().getCallMap();
+		assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
+		assertTrue(! actualRootCalls.values().contains(setStateCall));			
+		assertTrue(! actualRootCalls.values().contains(getCompileListCall));			
+		
+		// Internal proc enable-ui calls: setState.
+		Map<String, Call> actualEnableUiCalls = enableUi.getRoutineScope().getCallMap();
+		assertTrue(actualEnableUiCalls.values().contains(setStateCall));
+		
+		// Internal proc user-action calls: get-compile-list.
+		Map<String, Call> actualUserActionCalls = userAction.getRoutineScope().getCallMap();
+		assertTrue(actualUserActionCalls.values().contains(getCompileListCall));
+		
+		// Internal proc get-compile-list calls: setState x 3.
+		Map<String, Call> actualGetCompileListCalls = getCompileList.getRoutineScope().getCallMap();
+		assertTrue(actualGetCompileListCalls.values().contains(setStateCall));
 						
-		} catch (RecognitionException e) {
-			e.printStackTrace();
-			fail();
-		}
 	}
 
+
 	/**
 	 * Parse persistent-run.p and verify that:
 	 * a) run <proc1> persistent set <h> results in the
@@ -132,56 +108,46 @@
 	 * b) run <proc2> in <h> is registered as a call to
 	 * proc1.proc2.
 	 */
-	public void testPersistenProc(){
-		try {
-			String externalName = "persistent-run.p";
-			parser.parse(testDir + externalName);
-			assertTrue("Parse error.", parser.errorGetStatus() >= 0);
-			
-			JPNode ast = getTree();
+	public void testPersistenProc() throws Exception {
+		File file = new File(testDir + "persistent-run.p");
+		String externalName = file.getPath();
 
-			treeWalker.setActionObject(symbolAction);
-			treeWalker.program(ast);
+		ParseUnit pu = new ParseUnit(file);
+		pu.treeParser01(symbolAction);
+		pu.treeParser01(processAction);
+	
+		assertTrue(processAction.getErrorList().size() == 0);
 
-			treeWalker.setActionObject(processAction);
-			treeWalker.program(ast);
+		// Define routines.
+		RoutineHandler test01 = new RoutineHandler("test_01", symbolAction);
+		RoutineHandler test02 = new RoutineHandler("test_02", symbolAction);
+		
+		// Define calls.
+		String targetProc = "persistent-proc.p";
+		Call persistentProcCall = new Call(targetProc,null);
+		Call test01InHandleCall = new Call(targetProc,test01.getName());
+		Call test02InHandleCall = new Call(targetProc,test02.getName());
+		Call test01InternalCall = new Call(externalName,test01.getName());
+		
+		// Expected root procedure calls.
+		ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
+		expectedRootCalls.add(persistentProcCall);
+		expectedRootCalls.add(test01InHandleCall);
+		expectedRootCalls.add(test01InternalCall);
 
-			assertTrue(processAction.getErrorList().size() == 0);
+		// Expected calls in procedure test_01
+		ArrayList<Call> expectedTest01Calls = new ArrayList<Call>();
+		expectedTest01Calls.add(test02InHandleCall);
+		
+		// Test actual root calls agains expected root calls.
+		Map<String, Call> actualRootCalls = processAction.getCallList();
+		assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
+		assertTrue(! actualRootCalls.values().contains(test02InHandleCall));			
 
-			// Define routines.
-			RoutineHandler test01 = new RoutineHandler("test_01", symbolAction);
-			RoutineHandler test02 = new RoutineHandler("test_02", symbolAction);
-			
-			// Define calls.
-			String targetProc = "persistent-proc.p";
-			Call persistentProcCall = new Call(targetProc,null);
-			Call test01InHandleCall = new Call(targetProc,test01.getName());
-			Call test02InHandleCall = new Call(targetProc,test02.getName());
-			Call test01InternalCall = new Call(externalName,test01.getName());
-			
-			// Expected root procedure calls.
-			ArrayList<Call> expectedRootCalls = new ArrayList<Call>();
-			expectedRootCalls.add(persistentProcCall);
-			expectedRootCalls.add(test01InHandleCall);
-			expectedRootCalls.add(test01InternalCall);
+		// Test actual calls in test_01 against expected calls.
+		Map<String, Call> actualTest01Calls = test01.getRoutineScope().getCallMap();
+		assertTrue(actualTest01Calls.values().containsAll(expectedTest01Calls));
+	}
 
-			// Expected calls in procedure test_01
-			ArrayList<Call> expectedTest01Calls = new ArrayList<Call>();
-			expectedTest01Calls.add(test02InHandleCall);
-			
-			// Test actual root calls agains expected root calls.
-			Map<String, Call> actualRootCalls = processAction.getCallList();
-			assertTrue(actualRootCalls.values().containsAll(expectedRootCalls));
-			assertTrue(! actualRootCalls.values().contains(test02InHandleCall));			
 
-			// Test actual calls in test_01 against expected calls.
-			Map<String, Call> actualTest01Calls = test01.getRoutineScope().getCallMap();
-			assertTrue(actualTest01Calls.values().containsAll(expectedTest01Calls));
-			
-		} catch (RecognitionException e) {
-			e.printStackTrace();
-			fail();
-		}
-
-	}
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java	2006-03-30 20:16:36 UTC (rev 64)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser/ParseUnit.java	2006-03-31 04:21:30 UTC (rev 65)
@@ -20,6 +20,7 @@
 import org.prorefactor.refactor.PUB;
 import org.prorefactor.refactor.RefactorException;
 import org.prorefactor.refactor.RefactorSession;
+import org.prorefactor.treeparser01.TP01Action;
 import org.prorefactor.treeparser01.TreeParser01;
 
 import com.joanju.ProparseLdr;
@@ -133,8 +134,8 @@
 	}
 
 	
-	/** Run TreeParser01. This takes care of calling parse() first, if that
-	 * has not already been done.
+	/** Run TreeParser01.
+	 * Takes care of calling parse() first, if that has not already been done.
 	 */
 	public void treeParser01() throws RefactorException {
 		if (this.getTopNode()==null) parse();
@@ -144,4 +145,16 @@
 	}
 
 	
+	/** Run TreeParser01 with any TP01Action object.
+	 * Takes care of calling parse() first, if that has not already been done.
+	 */
+	public void treeParser01(TP01Action action) throws RefactorException {
+		if (this.getTopNode()==null) parse();
+		TreeParser01 tp = new TreeParser01();
+		tp.setActionObject(action);
+		action.setParseUnit(this);
+		treeParser(tp);
+	}
+
+	
 }

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-30 20:16:36 UTC (rev 64)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TP01ProcessAction.java	2006-03-31 04:21:30 UTC (rev 65)
@@ -25,16 +25,14 @@
 import org.prorefactor.treeparser.SemanticError;
 import org.prorefactor.treeparser.SymbolScope;
 import org.prorefactor.treeparser.SymbolScopeRoot;
-import org.prorefactor.treeparser.TableBuffer;
 import org.prorefactor.treeparser.Variable;
 
 import antlr.SemanticException;
 import antlr.collections.AST;
 
 
-/**
+/** Action class for TP01 - creates Call records for RUN statements.
  * @author pcd
- *
  */
 public class TP01ProcessAction extends TP01Action {
 
@@ -43,33 +41,108 @@
 		currentScope = rootScope;
 		errorList = new ErrorList();
 	}
-	
-	SymbolScope currentScope;
-	SymbolScopeRoot rootScope;
-	TableBuffer lastTableReferenced;
-	TableBuffer prevTableReferenced;
-	TableBuffer currDefTable;
 
 	private Call wipCall;
 	private ErrorList errorList;
 	private Expression wipExpression;
 	private JPNode wipFieldNode;
+	private SymbolScope currentScope;
+	private SymbolScopeRoot rootScope;
 	
 
-	/**
+
+	/** Unused... I'm not sure where this was going.  -- John */
+	protected void expressionExprt(AST node) {
+		wipExpression = new Expression((JPNode) node);
+		wipExpression.setValue(wipFieldNode.getText());
+	}
+
+	
+	/** Unused.  -- John
+	 * Pop a SystemHandle from the semantic stack, create an
+	 * Expression, save the SystemHandle as the Expression value
+	 * and place the Expression on top of semantic stack.
+	 */
+	protected void exprtSystemHandleName(AST sysHandleName) { }
+
+
+	/** @return the Map of Call objects registered in the currentScope. */
+	public Map<String, Call> getCallList() { return currentScope.getCallMap(); }
+
+
+	public ErrorList getErrorList() { return errorList; }
+
+
+	/** Called by the tree parser at a Field_ref node. */
+	protected void field(AST refAST, AST idAST, int contextQualifier, int whichTable) {
+		wipFieldNode = (JPNode) idAST;
+	}
+
+	
+	/** Called by the tree parser at filenameorvalue: VALUE(expression), passing in the expression node. */
+	protected void fnvExpression(AST node){
+		wipExpression = new Expression((JPNode) node);
+	}
+	
+
+	/** Called by the tree parser for filenameorvalue: FILENAME  production */
+	protected void fnvFilename(AST node){
+		Expression exp = new Expression((JPNode) node);
+		exp.setValue(node.getText());
+		wipExpression = exp;
+	}
+
+	
+	/** Called by the tree parser at the beginning of a RUN statement. */
+	protected void runBegin(AST node) {
+		// Expect a FileName at the top of semantic stack;
+		String fileName = (String) wipExpression.getValue();
+		Call call = new Call((JPNode) node);
+		call.setRunArgument(fileName);
+		wipCall = call;
+	}
+
+	
+	/* Called by the tree parser in the RUN statement right before any parameters. */
+	protected void runEnd(AST node) {
+		/* 
+		 * Cannot resolve whether internal or external procedure here.
+		 * run <name> in <handle>: <name> is an internal procedure.
+		 * run <name> and <name> is defined in the current scope: <name> is an internal procedure.
+		 * run <name> and <name> is not defined in the current scope: <name> is an external procedure.
+		 * 
+		 */
+		Call call = wipCall;
+		if (call.isUnresolved()){
+			errorList.add(new SemanticError("Unresolved call", null));
+		} else {
+			try {
+				String routineId = call.getRunArgument();
+				call.finalize(rootScope.hasRoutine(routineId));
+			} catch (SemanticException e) {
+				throw new RuntimeException("Unhandled SemanticException.");
+			}
+		}
+		// Record the call in the current context.
+		currentScope.registerCall(call);
+	}
+	
+
+	/** Called by the tree parser for RUN IN HANDLE.
 	 * Get the RunHandle value in "run <proc> in <handle>." Where <handle>
 	 * is a handle valued Expression; then save the RunHandle value
 	 * in the current call.
 	 * @see com.qad.parse.ParseAction#runInHandle(antlr.collections.AST, antlr.collections.AST)
 	 */
-	public void runInHandle(AST node) {
+	protected void runInHandle(AST node) {
 		//wipCall.setRunHandle((RunHandle) wipExpression.getValue());
 		// TODO - enable expressionExprt
 		Variable handleVar = currentScope.lookupVariable(wipFieldNode.getText());
 		wipCall.setRunHandle((RunHandle) handleVar.getValue());
 	}
 
-	/** 
+
+	/** Called by the tree parser for RUN PERSISTENT SET.
 	 * Update the <handle> in "run <proc> persistent set <handle>.":
 	 * save a reference to the external procedure <proc> in <handle>.
 	 * The AST structure for this form of the run is:
@@ -82,7 +155,7 @@
 	 * the Call.finalize method can update its value.
 	 * @param fld is used for error reporting.
 	 */
-	public void runPersistentSet(AST fld) {
+	protected void runPersistentSet(AST fld) {
 		String varName = wipFieldNode.getText();
 
 		Variable var = (Variable) currentScope.lookupVariable(varName);
@@ -98,72 +171,8 @@
 		}
 	}
 
-	/* (non-Javadoc)
-	 * @see com.qad.parse.ParseAction#run(antlr.collections.AST)
-	 */
-	public void runBegin(AST node) {
-		// Expect a FileName at the top of semantic stack;
-		String fileName = (String) wipExpression.getValue();
-		Call call = new Call((JPNode) node);
-		call.setRunArgument(fileName);
-		wipCall = call;
-	}
 
-	/* (non-Javadoc)
-	 * @see com.qad.parse.ParseAction#runEnd()
-	 */
-	public void runEnd(AST node) {
-
-/* 
- * Cannot resolve whether internal or external procedure here.
- * run <name> in <handle>: <name> is an internal procedure.
- * run <name> and <name> is defined in the current scope: <name> is an internal procedure.
- * run <name> and <name> is not defined in the current scope: <name> is an external procedure.
- * 
- */
-		Call call = wipCall;
-		
-		if (call.isUnresolved()){
-			errorList.add(new SemanticError("Unresolved call", null));
-		} else {
-			try {
-				String routineId = call.getRunArgument();
-				call.finalize(rootScope.hasRoutine(routineId));
-			} catch (SemanticException e) {
-				throw new RuntimeException("Unhandled SemanticException.");
-			}
-		}
-			
-		// Record the call in the current context.
-		currentScope.registerCall(call);
-	}
-	
 	/**
-	 * Action taken in:
-	 * filenameorvalue: ... expression ... production
-	 */
-	public void fnvExpression(AST node){
-		wipExpression = new Expression((JPNode) node);
-	}
-	
-	/**
-	 * Action taken in:
-	 * filenameorvalue: FILENAME  production
-	 * @return
-	 */
-	public void fnvFilename(AST node){
-		Expression exp = new Expression((JPNode) node);
-		exp.setValue(node.getText());
-		wipExpression = exp;
-	}
-
-	
-	public void field(AST refAST, AST idAST, int contextQualifier, int whichTable) {
-		wipFieldNode = (JPNode) idAST;
-	}
-
-	
-	/**
 	 * Switch SymbolTable scope to that of the procedure.
 	 * @see com.qad.parse.ParseAction#procedureBegin(antlr.collections.AST)
 	 */
@@ -174,49 +183,10 @@
 	}
 
 
-	/**
-	 * @see com.qad.parse.ParseAction#procedureEnd(antlr.collections.AST)
-	 */
-	public void procedureEnd(AST p) {
+	/** Called by the tree parser at the end of a PROCEDURE statement. */
+	protected void procedureEnd(AST p) {
 		currentScope = currentScope.getParentScope();
 	}
 
-	/**
-	 * 
-	 * @see com.qad.parse.ParseAction#expressionExprt(antlr.collections.AST)
-	 */
-	public void expressionExprt(AST node) {
-		wipExpression = new Expression((JPNode) node);
-		wipExpression.setValue(wipFieldNode.getText());
-	}
 
-	
-	/**
-	 * Pop a SystemHandle from the semantic stack, create an
-	 * Expression, save the SystemHandle as the Expression value
-	 * and place the Expression on top of semantic stack.
-	 * @see com.qad.parse.ParseAction#exprtSystemHandleName(antlr.collections.AST)
-	 */
-	public void exprtSystemHandleName(AST sysHandleName) {
-	}
-
-
-	/** @return the Map of Call objects registered in the currentScope. */
-	public Map<String, Call> getCallList() { return currentScope.getCallMap(); }
-
-
-	/**
-	 * @return
-	 */
-	public SymbolScopeRoot getRootScope() {
-		// TODO Move Up: should scope elements be in action base class.
-		return rootScope;
-	}
-
-	/**
-	 * @return
-	 */
-	public ErrorList getErrorList() {
-		return errorList;
-	}
 }



From johnallengreen at berlios.de  Fri Mar 31 21:19:08 2006
From: johnallengreen at berlios.de (johnallengreen at BerliOS)
Date: Fri, 31 Mar 2006 21:19:08 +0200
Subject: [Prorefactor-svn] r66 - in trunk/org.prorefactor.core/src/org/prorefactor: treeparser01 treeparser03 treeparserbase
Message-ID: <200603311919.k2VJJ8q6007349@sheep.berlios.de>

Author: johnallengreen
Date: 2006-03-31 21:19:00 +0200 (Fri, 31 Mar 2006)
New Revision: 66

Added:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g
Removed:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g
Modified:
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
   trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
   trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.g
   trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.java
Log:
Fixed bug reported by Roel.
For parameter passing, DATASETHANDLE should have been followed by field rather than identifier.

Deleted: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -1,2951 +0,0 @@
-/*
-
-JPTreeParser.g - Primary tree parser.
-
-Joanju Proparse Syntax Tree Structure Specification
-
-Copyright (c) 2001-2006 Joanju Software.
-All rights reserved. This program and the accompanying materials 
-are made available under the terms of the Eclipse Public License v1.0
-which accompanies this distribution, and is available at
-http://www.eclipse.org/legal/epl-v10.html
-
-
-This tree parser has no actions. It is the basis for creating new
-tree parsers.
-
-
-Notes:
-	- Token types always start with a capital letter
-	- functions always start with a lowercase letter
-	- ALLCAPS is by convention the name for a real token type
-	- Mixed_case is by convention the name for a synthetic node's token type
-	- This: #(
-	  means that the first node is root, the rest are children of that root.
-	- the pipe symbol "|" represents logical OR, of course
-	- "something" is optional: (something)?
-	- "something" must be present one or more times: (something)+
-	- "something" may be there zero, one, or many times: (something)*
-	- A period represents a token of any type.
-
-*/
-
-
-header {
-	package org.prorefactor.treeparserbase;
-
-	import org.prorefactor.core.IJPNode;
-	import org.prorefactor.treeparser.IJPTreeParser;
-}
-
-
-
-options {
-	language = "Java";
-}
-
-
-
-// Class preamble - this gets inserted near the top of the .java file.
-{
-} // Class preamble
-
-
-
-// class definition options for Antlr
-class JPTreeParser extends TreeParser;
-options {
-	importVocab = ProParser;
-	defaultErrorHandler = false;
-	classHeaderSuffix = IJPTreeParser;
-}
-
-
-
-// This is added to top of the class definitions
-{
-
-	// Where did the tree parser leave off parsing -- might give us at least a bit
-	// of an idea where things left off if an exception was thrown.
-	// See antlr/TreeParser and the generated code.
-	public AST get_retTree() {
-		return _retTree;
-	}
-
-	// Func for grabbing the "state2" attribute from the node at LT(1) 
-	private boolean state2(AST node, int match) {
-		return ((IJPNode)node).getState2() == match;
-	}
-
-}
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// Begin grammar
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-
-program
-	:	#(Program_root (blockorstate)* Program_tail)
-	;
-
-code_block
-	:	#(Code_block (blockorstate)* )
-	;
-
-blockorstate
-	:	(	labeled_block
-		|	statement
-		|	// Expr_statement has a "statehead" node attribute
-			#(Expr_statement expression (NOERROR_KW)? state_end)
-		|	PROPARSEDIRECTIVE
-		|	PERIOD
-		|	DOT_COMMENT
-		|	#(ANNOTATION (.)* )
-		)
-	;
-
-labeled_block
-	:	#(BLOCK_LABEL LEXCOLON (dostate|forstate|repeatstate) )
-	;
-
-
-block_colon
-	:	LEXCOLON | PERIOD
-	;
-block_end
-	:	EOF
-	|	END state_end
-	;
-block_for
-	:	#(FOR RECORD_NAME (COMMA RECORD_NAME)* )
-	;
-block_opt
-	:	#(Block_iterator field EQUAL expression TO expression (BY constant)? )
-	|	querytuningphrase 
-	|	#(WHILE expression )
-	|	TRANSACTION 
-	|	on___phrase 
-	|	framephrase 
-	|	BREAK
-	|	#(BY expression (DESCENDING)? )
-	|	collatephrase
-	|	#(GROUP ( #(BY expression (DESCENDING)? ) )+ )
-	;
-block_preselect
-	:	#(PRESELECT for_record_spec )
-	;
-
-statement
-// All statement first nodes have a node attribute of "statehead".
-// Additionally, for those first statement nodes which are ambiguous
-// (ex: CREATE), there is an additional disambiguating attribute of "state2".
-	:						aatracestatement
-	|						accumulatestate
- 	|						altertablestate
- 	|						analyzestate
-	|						applystate
-	|						assignstate
-	|						bellstate
-	|						buffercomparestate
-	|						buffercopystate
-	|						callstate
-	|						casestate
-	|						choosestate
-	|						classstate
-	|						clearstate
-	|	{state2(_t, 0)}?			closestate			// SQL
-	|	{state2(_t, QUERY)}?			closequerystate
-	|	{state2(_t, STOREDPROCEDURE)}?	closestoredprocedurestate
-	|						colorstate
-	|						compilestate
-	|						connectstate
-	|						constructorstate
-	|						copylobstate
-	|	{state2(_t, 0)}?			createstate
-	|	{state2(_t, ALIAS)}?			createaliasstate
-	|	{state2(_t, Automationobject)}?	createautomationobjectstate
-	|	{state2(_t, BROWSE)}?			createbrowsestate
-	|	{state2(_t, BUFFER)}?			createbufferstate
-	|	{state2(_t, CALL)}?			createcallstate
-	|	{state2(_t, CLIENTPRINCIPAL)}? createclientprincipalstate
-	|	{state2(_t, DATABASE)}?		createdatabasestate
-	|	{state2(_t, DATASET)}?			createdatasetstate
-	|	{state2(_t, DATASOURCE)}?		createdatasourcestate
-	|	{state2(_t, INDEX)}?			createindexstate		// SQL
-	|	{state2(_t, QUERY)}?			createquerystate   
-	|	{state2(_t, SAXREADER)}?		createsaxreaderstate
-	|	{state2(_t, SAXWRITER)}?		createsaxwriterstate
-	|	{state2(_t, SERVER)}?			createserverstate
-	|	{state2(_t, SERVERSOCKET)}?		createserversocketstate
-	|	{state2(_t, SOAPHEADER)}?		createsoapheaderstate
-	|	{state2(_t, SOAPHEADERENTRYREF)}?	createsoapheaderentryrefstate
-	|	{state2(_t, SOCKET)}?			createsocketstate
-	|	{state2(_t, TABLE)}?			createtablestate		// SQL
-	|	{state2(_t, TEMPTABLE)}?		createtemptablestate
-	|	{state2(_t, VIEW)}?			createviewstate			// SQL
-	|	{state2(_t, WIDGET)}?			createwidgetstate
-	|	{state2(_t, WIDGETPOOL)}?		createwidgetpoolstate
-	|	{state2(_t, XDOCUMENT)}?		createxdocumentstate
-	|	{state2(_t, XNODEREF)}?		createxnoderefstate
-	|	{state2(_t, ADVISE)}?			ddeadvisestate
-	|	{state2(_t, EXECUTE)}?		ddeexecutestate
-	|	{state2(_t, GET)}?			ddegetstate
-	|	{state2(_t, INITIATE)}?		ddeinitiatestate
-	|	{state2(_t, REQUEST)}?		dderequeststate
-	|	{state2(_t, SEND)}?			ddesendstate
-	|	{state2(_t, TERMINATE)}?		ddeterminatestate	
-	|						declarecursorstate
-	|	{state2(_t, BROWSE)}?			definebrowsestate
-	|	{state2(_t, BUFFER)}?			definebufferstate
-	|	{state2(_t, BUTTON)}?			definebuttonstate
-	|	{state2(_t, DATASET)}?			definedatasetstate
-	|	{state2(_t, DATASOURCE)}?		definedatasourcestate
-	|	{state2(_t, FRAME)}?			defineframestate
-	|	{state2(_t, IMAGE)}?			defineimagestate
-	|	{state2(_t, MENU)}?			definemenustate
-	|	{state2(_t, PARAMETER)}?		defineparameterstate
-	|	{state2(_t, QUERY)}?			definequerystate
-	|	{state2(_t, RECTANGLE)}?		definerectanglestate
-	|	{state2(_t, STREAM)}?			definestreamstate
-	|	{state2(_t, SUBMENU)}?		definesubmenustate
-	|	{state2(_t, TEMPTABLE)}?		definetemptablestate
-	|	{state2(_t, WORKTABLE)}?		defineworktablestate
-	|	{state2(_t, VARIABLE)}?		definevariablestate
-	|						dictionarystate
-	|	{state2(_t, 0)}?			deletestate
-	|	{state2(_t, ALIAS)}?			deletealiasstate
-	|	{state2(_t, FROM)}?			deletefromstate
-	|	{state2(_t, OBJECT)}?			deleteobjectstate
-	|	{state2(_t, PROCEDURE)}?		deleteprocedurestate
-	|	{state2(_t, WIDGET)}?			deletewidgetstate
-	|	{state2(_t, WIDGETPOOL)}?		deletewidgetpoolstate
-	|						destructorstate
-	|	{state2(_t, 0)}?			disablestate
-	|	{state2(_t, TRIGGERS)}?		disabletriggersstate
-	|						disconnectstate
-	|						displaystate
-	|						dostate
-	|						downstate
-	|	{state2(_t, INDEX)}?			dropindexstate			// SQL
-	|	{state2(_t, TABLE)}?			droptablestate			// SQL
-	|	{state2(_t, VIEW)}?			dropviewstate			// SQL
-	|						emptytemptablestate  
-	|						enablestate
-	|						exportstate
-	|						fetchstate
-	|						findstate
-	|						forstate
-	|						formstate
-	|						functionstate
-	|						getstate
-	|						getkeyvaluestate  
-	|						grantstate
-	|						hidestate
-	|						ifstate
-	|						importstate  
-	|	{state2(_t, CLEAR)}?			inputclearstate
-	|	{state2(_t, CLOSE)}?			inputclosestate
-	|	{state2(_t, FROM)}?			inputfromstate
-	|	{state2(_t, THROUGH)}?		inputthroughstate
-	|	{state2(_t, CLOSE)}?			inputoutputclosestate
-	|	{state2(_t, THROUGH)}?		inputoutputthroughstate
-	|	{state2(_t, INTO)}?			insertintostate			// SQL
-	|	{state2(_t, 0)}?			insertstate
-	|						interfacestate
-	|						leavestate
-	|						loadstate  
-	|						messagestate
-	|						methodstate
-	|						nextstate
-	|						nextpromptstate
-	|						onstate  
-	|	{state2(_t, 0)}?			openstate			// SQL
-	|	{state2(_t, QUERY)}?			openquerystate
-	|						osappendstate
-	|						oscommandstate
-	|						oscopystate
-	|						oscreatedirstate  
-	|						osdeletestate
-	|						osrenamestate
-	|	{state2(_t, CLOSE)}?			outputclosestate
-	|	{state2(_t, THROUGH)}?		outputthroughstate
-	|	{state2(_t, TO)}?			outputtostate
-	|						pagestate  
-	|						pausestate
-	|						procedurestate
-	|						processeventsstate
-	|						promptforstate
-	|						publishstate
-	|	{state2(_t, 0)}?			putstate
-	|	{state2(_t, CURSOR)}?			putcursorstate
-	|	{state2(_t, SCREEN)}?			putscreenstate
-	|						putkeyvaluestate
-	|						quitstate
-	|						rawtransferstate
-	|						readkeystate
-	|	{state2(_t, 0)}?			releasestate
-	|	{state2(_t, EXTERNAL)}?		releaseexternalstate
-	|	{state2(_t, OBJECT)}?			releaseobjectstate
-	|						repeatstate
-	|						repositionstate  
-	|						returnstate
-	|						revokestate
-	|	{state2(_t, 0)}?			runstate
-	|	{state2(_t, STOREDPROCEDURE)}?	runstoredprocedurestate
-	|	{state2(_t, SUPER)}?			runsuperstate
-	|						savecachestate
-	|						scrollstate
-	|						seekstate  
-	|						selectstate
-	|						setstate
-	|						showstatsstate
-	|						statusstate  
-	|						stopstate
-	|						subscribestate
-	|	{state2(_t, COLOR)}?			systemdialogcolorstate
-	|	{state2(_t, FONT)}?			systemdialogfontstate
-	|	{state2(_t, GETDIR)}?		systemdialoggetdirstate
-	|	{state2(_t, GETFILE)}?		systemdialoggetfilestate
-	|	{state2(_t, PRINTERSETUP)}?		systemdialogprintersetupstate
-	|						systemhelpstate
-	|						transactionmodeautomaticstate
-	|						triggerprocedurestate
-	|						underlinestate  
-	|						undostate
-	|						unloadstate
-	|						unsubscribestate
-	|						upstate  
-	|						updatestatement
-	|						usestate
-	|						validatestate
-	|						viewstate
-	|						waitforstate
-	;
-
-
-pseudfn
-// See PSC's grammar for <pseudfn> and for <asignmt>.
-// These are functions that can (or, in some cases, must) be an l-value.
-	:	#(FIXCODEPAGE funargs )
-	|	#(OVERLAY funargs )
-	|	#(PUTBITS funargs )
-	|	#(PUTBYTE funargs )
-	|	#(PUTBYTES funargs )
-	|	#(PUTDOUBLE funargs )
-	|	#(PUTFLOAT funargs )
-	|	#(PUTLONG funargs )
-	|	#(PUTSHORT funargs )
-	|	#(PUTSTRING funargs )
-	|	#(PUTUNSIGNEDSHORT funargs )
-	|	#(SETBYTEORDER funargs )
-	|	#(SETPOINTERVALUE funargs )
-	|	#(SETSIZE funargs )
-	|	AAMSG // not the whole func - we don't want its arguments here
-	|	currentvaluefunc
-	|	CURRENTWINDOW
-	|	dynamiccurrentvaluefunc
-	|	entryfunc
-	|	lengthfunc
-	|	nextvaluefunc
-	|	rawfunc
-	|	substringfunc
-	|	widattr
-	// Keywords from <optargfn> and <noargfn>. Assignments to those
-	// are accepted by the compiler, however, assignment to them seems to have
-	// no affect at runtime.
-	// The following are from <optargfn>
-	| PAGESIZE_KW | LINECOUNTER | PAGENUMBER | FRAMECOL
-	| FRAMEDOWN | FRAMELINE | FRAMEROW | USERID | ETIME_KW
-	// The following are from <noargfn>
-	| DBNAME | TIME | OPSYS | RETRY | AASERIAL | AACONTROL
-	| MESSAGELINES | TERMINAL | PROPATH | CURRENTLANGUAGE | PROMSGS
-	| SCREENLINES | LASTKEY
-	| FRAMEFIELD | FRAMEFILE | FRAMEVALUE | GOPENDING
-	| PROGRESS | FRAMEINDEX | FRAMEDB | FRAMENAME | DATASERVERS
-	| NUMDBS | NUMALIASES | ISATTRSPACE | PROCSTATUS
-	| PROCHANDLE | CURSOR | OSERROR | RETURNVALUE | OSDRIVES
-	| PROVERSION | TRANSACTION | MACHINECLASS 
-	| AAPCONTROL | GETCODEPAGES | COMSELF
-	;
-
-functioncall
-	:	#(ACCUMULATE accum_what (#(BY expression (DESCENDING)?))? expression )
-	|	#(ADDINTERVAL LEFTPAREN expression COMMA expression COMMA expression RIGHTPAREN )
-	|	#(AUDITENABLED LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(CANFIND LEFTPAREN (findwhich)? recordphrase RIGHTPAREN )
-	|	#(CAST LEFTPAREN field COMMA TYPE_NAME RIGHTPAREN )
-	|	currentvaluefunc // is also a pseudfn.
-	|	dynamiccurrentvaluefunc // is also a pseudfn.
-	|	#(DYNAMICFUNCTION LEFTPAREN expression (#(IN_KW expression))? (COMMA parameter)* RIGHTPAREN (NOERROR_KW)? )
-		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
-	|	entryfunc // is also a pseudfn.
-	|	#(ETIME_KW (funargs)? )
-	|	#(EXTENT LEFTPAREN field RIGHTPAREN )
-	|	#(FRAMECOL (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMEDOWN (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMELINE (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMEROW (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(GETCODEPAGES (funargs)? )
-	|	#(GUID LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(IF expression THEN expression ELSE expression )
-	|	ldbnamefunc 
-	|	lengthfunc // is also a pseudfn.
-	|	#(LINECOUNTER (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(MTIME LEFTPAREN (expression)? RIGHTPAREN )
-	|	nextvaluefunc // is also a pseudfn.
-		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
-	|	#(PAGENUMBER (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(PAGESIZE_KW (LEFTPAREN ID RIGHTPAREN)? )
-	|	rawfunc // is also a pseudfn.
-	|	#(SEEK LEFTPAREN (INPUT|OUTPUT|ID) RIGHTPAREN )
-	|	substringfunc // is also a pseudfn.
-	|	#(SUPER (parameterlist)? )
-	|	#(TIMEZONE LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(USERID (funargs)? )
-	|	#(USER (funargs)? )
-	|	sqlaggregatefunc  
-	|	argfunc
-	|	noargfunc
-	|	recordfunc
-	;
-
-argfunc
-	:	#(AACBIT funargs )
-	|	#(AAMSG funargs )
-	|	#(ABSOLUTE funargs )
-	|	#(ALIAS funargs )
-	|	#(ASC funargs )
-	|	#(BASE64DECODE funargs )
-	|	#(BASE64ENCODE funargs )
-	|	#(CANDO funargs )
-	|	#(CANQUERY funargs )
-	|	#(CANSET funargs )
-	|	#(CAPS funargs )
-	|	#(CHR funargs )
-	|	#(CODEPAGECONVERT funargs )
-	|	#(COLLATE funargs ) // See docs for BY phrase in FOR, PRESELECT, etc.
-	|	#(COMPARE funargs )
-	|	#(CONNECTED funargs )
-	|	#(COUNTOF funargs )
-	|	#(CURRENTRESULTROW funargs )
-	|	#(DATE funargs )
-	|	#(DATETIME funargs )
-	|	#(DATETIMETZ funargs )
-	|	#(DAY funargs )
-	|	#(DBCODEPAGE funargs )
-	|	#(DBCOLLATION funargs )
-	|	#(DBPARAM funargs )
-	|	#(DBRESTRICTIONS funargs )
-	|	#(DBTASKID funargs )
-	|	#(DBTYPE funargs )
-	|	#(DBVERSION funargs )
-	|	#(DECIMAL funargs )
-	|	#(DECRYPT funargs )
-	|	#(DYNAMICNEXTVALUE funargs )
-	|	#(ENCODE funargs )
-	|	#(ENCRYPT funargs )
-	|	#(EXP funargs )
-	|	#(FILL funargs )
-	|	#(FIRST funargs )
-	|	#(FIRSTOF funargs )
-	|	#(GENERATEPBEKEY funargs )
-	|	#(GETBITS funargs )
-	|	#(GETBYTE funargs )
-	|	#(GETBYTEORDER funargs )
-	|	#(GETBYTES funargs )
-	|	#(GETCOLLATIONS funargs )
-	|	#(GETDOUBLE funargs )
-	|	#(GETFLOAT funargs )
-	|	#(GETLICENSE funargs )
-	|	#(GETLONG funargs )
-	|	#(GETPOINTERVALUE funargs )
-	|	#(GETSHORT funargs )
-	|	#(GETSIZE funargs )
-	|	#(GETSTRING funargs )
-	|	#(GETUNSIGNEDSHORT funargs )
-	|	#(HEXDECODE funargs )
-	|	#(HEXENCODE funargs )
-	|	#(INDEX funargs )
-	|	#(INTEGER funargs )
-	|	#(INTERVAL funargs )
-	|	#(ISCODEPAGEFIXED funargs )
-	|	#(ISCOLUMNCODEPAGE funargs )
-	|	#(ISLEADBYTE funargs )
-	|	#(ISODATE funargs )
-	|	#(KBLABEL funargs )
-	|	#(KEYCODE funargs )
-	|	#(KEYFUNCTION funargs )
-	|	#(KEYLABEL funargs )
-	|	#(KEYWORD funargs )
-	|	#(KEYWORDALL funargs )
-	|	#(LAST funargs )
-	|	#(LASTOF funargs )
-	|	#(LC funargs )
-	|	#(LEFTTRIM funargs )
-	|	#(LIBRARY funargs )
-	|	#(LISTEVENTS funargs )
-	|	#(LISTQUERYATTRS funargs )
-	|	#(LISTSETATTRS funargs )
-	|	#(LISTWIDGETS funargs )
-	|	#(LOADPICTURE funargs )
-	|	#(LOG funargs )
-	|	#(LOGICAL funargs )
-	|	#(LOOKUP funargs )
-	|	#(MAXIMUM funargs )
-	|	#(MD5DIGEST funargs )
-	|	#(MEMBER funargs )
-	|	#(MINIMUM funargs )
-	|	#(MONTH funargs )
-	|	#(NORMALIZE funargs )
-	|	#(NUMENTRIES funargs )
-	|	#(NUMRESULTS funargs )
-	|	#(OSGETENV funargs )
-	|	#(PDBNAME funargs )
-	|	#(PROGRAMNAME funargs )
-	|	#(QUERYOFFEND funargs )
-	|	#(QUOTER funargs )
-	|	#(RINDEX funargs )
-	|	#(RANDOM funargs )
-	|	#(REPLACE funargs )
-	|	#(RGBVALUE funargs )
-	|	#(RIGHTTRIM funargs )
-	|	#(ROUND funargs )
-	|	#(SDBNAME funargs )
-	|	#(SEARCH funargs )
-	|	#(SETDBCLIENT funargs )
-	|	#(SETUSERID funargs )
-	|	#(SHA1DIGEST funargs )
-	|	#(SQRT funargs )
-	|	#(SSLSERVERNAME funargs )
-	|	#(STRING funargs )
-	|	#(SUBSTITUTE funargs )
-	|	#(TOROWID funargs )
-	|	#(TRIM funargs )
-	|	#(TRUNCATE funargs )
-	|	#(TYPEOF funargs )
-	|	#(VALIDEVENT funargs )
-	|	#(VALIDHANDLE funargs )
-	|	#(VALIDOBJECT funargs )
-	|	#(WEEKDAY funargs )
-	|	#(WIDGETHANDLE funargs )
-	|	#(YEAR funargs )
-	;
-
-recordfunc
-	:	#(AMBIGUOUS recordfunargs )
-	|	#(AVAILABLE recordfunargs )
-	|	#(CURRENTCHANGED recordfunargs )
-	|	#(DATASOURCEMODIFIED recordfunargs )
-	|	#(ERROR recordfunargs )
-	|	#(LOCKED recordfunargs )
-	|	#(NEW recordfunargs )
-	|	#(RECID recordfunargs )
-	|	#(RECORDLENGTH recordfunargs )
-	|	#(REJECTED recordfunargs )
-	|	#(ROWID recordfunargs )
-	|	#(ROWSTATE recordfunargs )
-	;
-recordfunargs
-	:	(LEFTPAREN RECORD_NAME RIGHTPAREN | RECORD_NAME)
-	;
-
-noargfunc
-	:	AACONTROL
-	|	AAPCONTROL
-	|	AASERIAL
-	|	CURRENTLANGUAGE
-	|	CURSOR
-	|	DATASERVERS
-	|	DBNAME
-	|	FRAMEDB
-	|	FRAMEFIELD
-	|	FRAMEFILE
-	|	FRAMEINDEX
-	|	FRAMENAME
-	|	FRAMEVALUE
-	|	GENERATEPBESALT
-	|	GENERATERANDOMKEY
-	|	GENERATEUUID
-	|	GATEWAYS
-	|	GOPENDING
-	|	ISATTRSPACE
-	|	LASTKEY
-	|	MACHINECLASS
-	|	MESSAGELINES
-	|	NOW
-	|	NUMALIASES
-	|	NUMDBS
-	|	OPSYS
-	|	OSDRIVES
-	|	OSERROR
-	|	PROCHANDLE
-	|	PROCSTATUS
-	|	PROGRESS
-	|	PROMSGS
-	|	PROPATH
-	|	PROVERSION
-	|	RETRY
-	|	RETURNVALUE
-	|	SCREENLINES
-	|	TERMINAL
-	|	TIME
-	|	TODAY
-	|	TRANSACTION
-	;
-
-
-parameter
-	:	#(BUFFER (RECORD_NAME | ID FOR RECORD_NAME ) )
-	|	#(PARAMETER expression EQUAL expression )
-	|	#(OUTPUT parameter_arg )
-	|	#(INPUTOUTPUT parameter_arg )
-	|	#(INPUT parameter_arg )
-	;
-parameter_arg
-	:	(	TABLEHANDLE field parameter_dataset_options
-		|	TABLE (FOR)? RECORD_NAME parameter_dataset_options
-		|	DATASET ID parameter_dataset_options
-		|	DATASETHANDLE ID parameter_dataset_options
-		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
-		|	expression (AS datatype_com)?
-		)
-		(BYPOINTER|BYVARIANTPOINTER)?
-	;
-parameter_dataset_options
-	: (APPEND)? (BYVALUE|BYREFERENCE|BIND)?
-	;
-
-parameterlist
-	:	#(Parameter_list parameterlist_noroot )
-	;
-parameterlist_noroot
-	:	LEFTPAREN (parameter)? (COMMA parameter)* RIGHTPAREN
-	;
-
-eventlist
-	:	#(Event_list . (COMMA .)* )
-	;
-
-funargs
-	:	LEFTPAREN expression (COMMA expression)* RIGHTPAREN
-	;
-
-anyorvalue
-	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
-	|	TYPELESS_TOKEN
-	;
-filenameorvalue
-	:	valueexpression | FILENAME
-	;
-valueexpression
-	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
-	;
-expressionorvalue
-	:	valueexpression | expression
-	;
-
-findwhich
-	:	CURRENT | EACH | FIRST | LAST | NEXT | PREV
-	;
-
-lockhow
-	:	SHARELOCK | EXCLUSIVELOCK | NOLOCK
-	;
-
-
-expression
-	:	#(OR expression expression )
-	|	#(AND expression expression )
-	|	#(NOT expression )
-	|	#(MATCHES expression expression )
-	|	#(BEGINS expression expression )
-	|	#(CONTAINS expression expression )
-	|	#(EQ expression expression )
-	|	#(NE expression expression )
-	|	#(GTHAN expression expression )
-	|	#(GE expression expression )
-	|	#(LTHAN expression expression )
-	|	#(LE expression expression )
-	|	#(PLUS expression expression )
-	|	#(MINUS expression expression )
-	|	#(MULTIPLY expression expression )
-	|	#(DIVIDE expression expression )
-	|	#(MODULO expression expression )
-	|	#(UNARY_MINUS exprt )
-	|	#(UNARY_PLUS exprt )
-	|	exprt
-	;
-
-exprt
-	:	#(LEFTPAREN expression RIGHTPAREN )
-	|	constant
-	|	widattr
-	|	#(USER_FUNC parameterlist_noroot )
-	|	#(LOCAL_METHOD_REF parameterlist_noroot )
-	|	( #(NEW TYPE_NAME) )=> #(NEW TYPE_NAME parameterlist )
-	|	// SUPER is amibiguous between functioncall and systemhandlename
-		(	options{generateAmbigWarnings=false;}
-		:	functioncall
-		|	systemhandlename
-		)
-	|	field
-	|	#(Entered_func field (NOT)? ENTERED )
-	|	RECORD_NAME // for DISPLAY buffername, etc.
-	;
-
-widattr
-	:	#(	Widget_ref
-			(NORETURNVALUE)?
-			s_widget
-			(OBJCOLON . (array_subscript)? (method_param_list)? )+
-			(#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? (AS .)?
-		)
-	;
-
-gwidget
-	:	#(Widget_ref s_widget (#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? )
-	;
-
-widgetlist
-	:	gwidget (COMMA gwidget)*
-	;
-
-s_widget
-	:	widname	| (FIELD)? field
-	;
-
-widname
-	:	systemhandlename
-	|	DATASET ID
-	|	DATASOURCE ID
-	|	FRAME ID
-	|	MENU ID
-	|	SUBMENU ID
-	|	MENUITEM ID
-	|	BROWSE ID
-	|	QUERY ID
-	|	TEMPTABLE ID
-	|	BUFFER ID
-	|	XDOCUMENT ID
-	|	XNODEREF ID
-	|	SOCKET ID
-	;
-
-field
-	:	#(Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? ID (array_subscript)? )
-	;
-
-array_subscript
-	:	#(Array_subscript LEFTBRACE expression (FOR expression)? RIGHTBRACE )
-	;
-
-method_param_list
-	:	#(Method_param_list LEFTPAREN (parameter)? (COMMA (parameter)?)* RIGHTPAREN )
-	;
-
-constant
-	:	TRUE_KW | FALSE_KW | YES | NO | UNKNOWNVALUE | QSTRING | LEXDATE | NUMBER | NULL_KW
-	|	NOWAIT | SHARELOCK | EXCLUSIVELOCK | NOLOCK
-	|	BIGENDIAN
-	|	FINDCASESENSITIVE | FINDGLOBAL | FINDNEXTOCCURRENCE | FINDPREVOCCURRENCE | FINDSELECT | FINDWRAPAROUND
-	|	FUNCTIONCALLTYPE | GETATTRCALLTYPE | PROCEDURECALLTYPE | SETATTRCALLTYPE
-	|	HOSTBYTEORDER | LITTLEENDIAN
-	|	READAVAILABLE | READEXACTNUM
-	|	ROWUNMODIFIED | ROWDELETED | ROWMODIFIED | ROWCREATED
-	|	SAXCOMPLETE | SAXPARSERERROR | SAXRUNNING | SAXUNINITIALIZED
-	|	SEARCHSELF | SEARCHTARGET
-	|	WINDOWDELAYEDMINIMIZE | WINDOWMINIMIZED | WINDOWNORMAL | WINDOWMAXIMIZED
-	;
-
-systemhandlename
-	:	AAMEMORY | ACTIVEWINDOW | AUDITCONTROL | AUDITPOLICY | CLIPBOARD | CODEBASELOCATOR | COLORTABLE | COMPILER 
-	|	COMSELF | CURRENTWINDOW | DEBUGGER | DEFAULTWINDOW
-	|	ERRORSTATUS | FILEINFORMATION | FOCUS | FONTTABLE | LASTEVENT | LOGMANAGER
-	|	MOUSE | PROFILER | RCODEINFORMATION | SECURITYPOLICY | SELF | SESSION
-	|	SOURCEPROCEDURE | SUPER | TARGETPROCEDURE | TEXTCURSOR | THISOBJECT | THISPROCEDURE | WEBCONTEXT
-	;
-
-
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//                   begin PROGRESS syntax features, in alphabetical order
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-
-
-
-aatracestatement
-	:	#(	AATRACE
-			(	OFF state_end
-			|	#(ON (AALIST)? ) state_end
-			|	(stream_name)?
-				(	(TO|FROM|THROUGH) io_phrase state_end
-				|	CLOSE state_end
-				)
-			)
-		)
-	;
-
-accum_what
-	:	AVERAGE|COUNT|MAXIMUM|MINIMUM|TOTAL|SUBAVERAGE|SUBCOUNT|SUBMAXIMUM|SUBMINIMUM|SUBTOTAL
-	;
-
-accumulatestate
-	:	#(ACCUMULATE (display_item)* state_end )
-	;
-
-aggregatephrase
-	:	#(Aggregate_phrase LEFTPAREN (aggregate_opt)+ ( #(BY expression (DESCENDING)? ) )* RIGHTPAREN )
-	;
-aggregate_opt
-	:	#(AVERAGE (label_constant)? )
-	|	#(COUNT (label_constant)? )
-	|	#(MAXIMUM (label_constant)? )
-	|	#(MINIMUM (label_constant)? )
-	|	#(TOTAL (label_constant)? )
-	|	#(SUBAVERAGE (label_constant)? )
-	|	#(SUBCOUNT (label_constant)? )
-	|	#(SUBMAXIMUM (label_constant)? )
-	|	#(SUBMINIMUM (label_constant)? )
-	|	#(SUBTOTAL (label_constant)? )
-	;
-
-analyzestate
-	:	#(	ANALYZE filenameorvalue filenameorvalue
-			( #(OUTPUT filenameorvalue ) )?
-			(APPEND | ALL | NOERROR_KW)* state_end
-		)
-	;
-
-applystate
-	:	#(APPLY expression (#(TO gwidget ))? state_end )
-	;
-
-assign_opt
-	:	#(ASSIGN ( #(EQUAL . expression ) )+ )
-	;
-
-assignstate
-	:	#(ASSIGN assignment_list (NOERROR_KW)? state_end )
-	;
-assignment_list
-	:	RECORD_NAME (#(EXCEPT (field)*))?
-	|	(	assign_equal (#(WHEN expression))?
-		|	#(Assign_from_buffer field ) (#(WHEN expression))?
-		)*
-	;
-assign_equal
-	:	#(EQUAL (pseudfn|field) expression )
-	;
-
-atphrase
-	:	#(	AT
-			(	atphraseab atphraseab
-			|	expression
-			)
-			(COLONALIGNED|LEFTALIGNED|RIGHTALIGNED)?
-		)
-	;
-atphraseab
-	:	#(COLUMN expression )
-	|	#(COLUMNOF referencepoint )
-	|	#(ROW expression )
-	|	#(ROWOF referencepoint )
-	|	#(X expression )
-	|	#(XOF referencepoint )
-	|	#(Y expression )
-	|	#(YOF referencepoint )
-	;
-referencepoint
-	:	field ((PLUS|MINUS) expression)?
-	;
-
-bellstate
-	:	#(BELL state_end )
-	;
-
-buffercomparestate
-	:	#(	BUFFERCOMPARE
-			RECORD_NAME
-			(	#(EXCEPT (field)*)
-			|	#(USING (field)+)
-			)?
-			TO RECORD_NAME
-			(CASESENSITIVE|BINARY)?
-			( #(SAVE ( #(RESULT IN_KW) )? field ) )?
-			(EXPLICIT)?
-			(	COMPARES
-				(NOERROR_KW)?
-				block_colon
-				#(Code_block ( #(WHEN expression THEN blockorstate ) )* )
-				#(END (COMPARES)? )
-			)?
-			(NOLOBS)?
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-
-buffercopystate
-	:	#(	BUFFERCOPY RECORD_NAME
-			(	#(EXCEPT (field)*)
-			|	#(USING (field)+)
-			)?
-			TO RECORD_NAME
-			( #(ASSIGN assignment_list ) )?
-			(NOLOBS)?
-			(NOERROR_KW)?
-			state_end 
-		)
-	;
-
-callstate
-	:	#(CALL filenameorvalue (expressionorvalue)* state_end )
-	;
-
-casesens_or_not
-	:	#(Not_casesens NOT CASESENSITIVE )
-	|	CASESENSITIVE
-	;
-
-casestate
-	:	#(	CASE expression block_colon
-			#(	Code_block
-				(	#(WHEN case_expression THEN blockorstate )
-				)*
-			)
-			( #(OTHERWISE blockorstate ) )?
-			(EOF | #(END (CASE)? ) state_end)
-		)
-	;
-case_expression
-	:	(#(OR .))=> #(OR case_expression case_expression )
-	|	#(WHEN expression)
-	|	expression
-	;
-
-choosestate
-	:	#(	CHOOSE (ROW|FIELD)
-			( #(Form_item field (#(HELP constant))? ) )+
-			(	AUTORETURN 
-			|	#(COLOR anyorvalue) 
-			|	goonphrase
-			|	#(KEYS field )
-			|	NOERROR_KW 
-			|	#(PAUSE expression)
-			)*
-			(framephrase)?
-			state_end
-		)
-	;
-
-classstate
-	:	#(	CLASS TYPE_NAME
-			( #(INHERITS TYPE_NAME) )?
-			( #(IMPLEMENTS TYPE_NAME (COMMA TYPE_NAME)* ) )?
-			( FINAL )?
-			block_colon
-			code_block
-			#(END (CLASS)? )
-			state_end
-		)
-	;
-
-clearstate
-	:	#(CLEAR (#(FRAME ID))? (ALL)? (NOPAUSE)? state_end )
-	;
-
-closequerystate
-	:	#(CLOSE QUERY ID state_end )
-	;
-
-closestoredprocedurestate
-	:	#(	CLOSE
-			STOREDPROCEDURE ID
-			( #(EQUAL field PROCSTATUS ) )?
-			( #(WHERE PROCHANDLE EQ field ) )?
-			state_end
-		)
-	;
-
-collatephrase
-	:	#(COLLATE funargs (DESCENDING)? )
-	;
-
-color_expr
-	:	#(BGCOLOR expression )
-	|	#(DCOLOR expression )
-	|	#(FGCOLOR expression )
-	|	#(PFCOLOR expression )
-	;
-
-colorspecification
-	:	(options{greedy=true;}:color_expr)+
-	|	#(	COLOR (DISPLAY)? anyorvalue
-			( #(PROMPT anyorvalue) )?
-		)
-	;
-
-colorstate
-	:	#(	COLOR
-			(	( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )
-				( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )?
-			)?
-			(#(Form_item field (formatphrase)? ))*
-			(framephrase)? state_end
-		)
-	;
-
-columnformat
-	:	#(	Format_phrase
-			(	#(FORMAT expression)
-			|	label_constant
-			|	NOLABELS
-			|	#(COLUMNFONT expression )
-			|	#(COLUMNDCOLOR expression )
-			|	#(COLUMNBGCOLOR expression )
-			|	#(COLUMNFGCOLOR expression )
-			|	#(COLUMNPFCOLOR expression )
-			|	#(LABELFONT expression )
-			|	#(LABELDCOLOR expression )
-			|	#(LABELBGCOLOR expression )
-			|	#(LABELFGCOLOR expression )
-			|	#(LEXAT field (columnformat)? )
-			|	#(WIDTH NUMBER )
-			|	#(WIDTHPIXELS NUMBER )
-			|	#(WIDTHCHARS NUMBER )
-			)+ 
-		)
-	;
-
-comboboxphrase
-	:	#(	COMBOBOX
-			(	#(LISTITEMS constant (COMMA constant)* )
-			|	#(LISTITEMPAIRS constant (COMMA constant)* )
-			|	#(INNERLINES expression )
-			|	SORT
-			|	tooltip_expr
-			|	SIMPLE
-			|	DROPDOWN
-			|	DROPDOWNLIST
-			|	#(MAXCHARS NUMBER )
-			|	#(AUTOCOMPLETION (UNIQUEMATCH)? )
-			|	sizephrase
-			)*
-		)
-	;
-
-compilestate
-	:	#(	COMPILE filenameorvalue
-			(	#(ATTRSPACE (#(EQUAL expression))? )
-			|	NOATTRSPACE
-			|	#(SAVE (#(EQUAL expression))? ( #(INTO filenameorvalue ) )? )
-			|	#(	LISTING filenameorvalue
-					(	compile_append
-					|	#(PAGESIZE_KW expression)
-					|	#(PAGEWIDTH expression)
-					)*
-				)
-			|	#(XCODE expression )
-			|	#(XREF filenameorvalue (compile_append)? )
-			|	#(STRINGXREF filenameorvalue (compile_append)? )
-			|	#(STREAMIO (#(EQUAL expression))? )
-			|	#(MINSIZE (#(EQUAL expression))? )
-			|	#(LANGUAGES LEFTPAREN (compile_lang (COMMA compile_lang)*)? RIGHTPAREN )
-			|	#(TEXTSEGGROW #(EQUAL expression) )
-			|	#(DEBUGLIST filenameorvalue )
-			|	#(DEFAULTNOXLATE (#(EQUAL expression))? )
-			|	#(GENERATEMD5 (#(EQUAL expression))? )
-			|	#(PREPROCESS filenameorvalue )
-			|	#(USEREVVIDEO (#(EQUAL expression))? )
-			|	#(USEUNDERLINE (#(EQUAL expression))? )
-			|	#(V6FRAME (#(EQUAL expression))? )
-			|	NOERROR_KW
-			)*
-			state_end
-		)
-	;
-compile_lang
-	:	valueexpression | TYPELESS_TOKEN (LEXCOLON TYPELESS_TOKEN)*
-	;
-compile_append
-	:	#(APPEND (#(EQUAL expression))? )
-	;
-
-connectstate
-	:	#(CONNECT (NOERROR_KW|DDE|filenameorvalue)* state_end )
-	;
-	
-constructorstate
-	:	#(	CONSTRUCTOR (PUBLIC|PROTECTED) TYPE_NAME function_params
-			block_colon code_block #(END (CONSTRUCTOR)? ) state_end
-		)
-	;
-	
-convertphrase
-	:	#(	CONVERT 
-			( #(SOURCE (BASE64 | CODEPAGE expression (BASE64)?) ) )?
-			( #(TARGET (BASE64 | CODEPAGE expression (BASE64)?) ) )?
-		)
-	;
-	
-copylobstate
-	:	#(	COPYLOB (FROM)?
-			( FILE expression | (OBJECT)? expression )
-			( #(STARTING AT expression) )?
-			( #(FOR expression) )?
-			TO
-			(	FILE expression (APPEND)?
-			|	(OBJECT)? expression (OVERLAY AT expression (TRIM)?)?
-			)
-			( NOCONVERT | convertphrase )?
-			( NOERROR_KW )?
-		)
-	;
-
-createstate
-	:	#(CREATE RECORD_NAME (#(USING (ROWID|RECID) expression))? (NOERROR_KW)? state_end )
-	;
-
-create_whatever_args
-	:	field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)?
-	;
-
-createaliasstate
-	:	#(CREATE ALIAS anyorvalue FOR DATABASE anyorvalue (NOERROR_KW)? state_end )
-	;
-
-createautomationobjectstate
-	:	#(CREATE QSTRING field (#(CONNECT (#(TO expression))?))? (NOERROR_KW)? state_end )
-	;
-
-createbrowsestate
-	:	#(CREATE BROWSE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end )
-	;
-
-createbufferstate
-	:	#(	CREATE BUFFER field FOR TABLE expression
-			( #(BUFFERNAME expression) )?
-			(#(IN_KW WIDGETPOOL expression))?
-			(NOERROR_KW)? state_end
-		)
-	;
-
-createcallstate
-	:	#(CREATE CALL create_whatever_args state_end )
-	;
-
-createclientprincipalstate
-	:	#(CREATE CLIENTPRINCIPAL create_whatever_args state_end )
-	;
-
-createdatabasestate
-	:	#(	CREATE DATABASE expression 
-			( #(FROM expression (NEWINSTANCE)? ) )?
-			(REPLACE)? (NOERROR_KW)? state_end
-		)
-	;
-
-createdatasetstate
-	:	#(CREATE DATASET create_whatever_args state_end )
-	;
-
-createdatasourcestate
-	:	#(CREATE DATASOURCE create_whatever_args state_end )
-	;
-
-createquerystate
-	:	#(CREATE QUERY create_whatever_args state_end )
-	;
-
-createsaxreaderstate
-	:	#(CREATE SAXREADER create_whatever_args state_end )
-	;
-
-createsaxwriterstate
-	:	#(CREATE SAXWRITER create_whatever_args state_end )
-	;
-
-createserverstate
-	:	#(CREATE SERVER field (assign_opt)? state_end )
-	;
-
-createserversocketstate
-	:	#(CREATE SERVERSOCKET field (NOERROR_KW)? state_end )
-	;
-
-createsoapheaderstate
-	:	#(CREATE SOAPHEADER create_whatever_args state_end )
-	;
-
-createsoapheaderentryrefstate
-	:	#(CREATE SOAPHEADERENTRYREF create_whatever_args state_end )
-	;
-
-createsocketstate
-	:	#(CREATE SOCKET field (NOERROR_KW)? state_end )
-	;
-
-createtemptablestate
-	:	#(CREATE TEMPTABLE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? state_end )
-	;
-
-createwidgetstate
-	:	#(	CREATE
-			(	valueexpression
-			|	BUTTON | COMBOBOX | CONTROLFRAME | DIALOGBOX | EDITOR | FILLIN | FRAME | IMAGE
-			|	MENU | MENUITEM | RADIOSET | RECTANGLE | SELECTIONLIST | SLIDER
-			|	SUBMENU | TEXT | TOGGLEBOX | WINDOW
-			)
-			field
-			(#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end
-		)
-	;
-
-createwidgetpoolstate
-	:	#(CREATE WIDGETPOOL (expression)? (PERSISTENT)? (NOERROR_KW)? state_end )
-	;
-
-createxdocumentstate
-	:	#(CREATE XDOCUMENT create_whatever_args state_end )
-	;
-
-createxnoderefstate
-	:	#(CREATE XNODEREF create_whatever_args state_end )
-	;
-
-currentvaluefunc
-	:	#(CURRENTVALUE LEFTPAREN ID (COMMA ID)? RIGHTPAREN )
-	;
-
-datatype_com
-	:	SHORT | FLOAT | CURRENCY | UNSIGNEDBYTE | ERRORCODE | IUNKNOWN
-	;
-
-datatype_dll
-	:	CHARACTER | datatype_dll_native  
-	;
-
-datatype_dll_native
-	:	BYTE | DOUBLE | FLOAT | LONG | SHORT | UNSIGNEDSHORT
-	;
-
-datatype_field
-	:	BLOB | CLOB | datatype_var
-	;
-
-datatype_param
-	:	datatype_dll_native | datatype_var
-	;
-
-datatype_var
-	:	CHARACTER | COMHANDLE | DATE | DATETIME | DATETIMETZ
-		| DECIMAL | HANDLE | INTEGER | LOGICAL | LONGCHAR | MEMPTR
-		| RAW | RECID | ROWID | TYPE_NAME | WIDGETHANDLE
-	;
-
-ddeadvisestate
-	:	#(DDE ADVISE expression (START|STOP) ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeexecutestate
-	:	#(DDE EXECUTE expression COMMAND expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddegetstate
-	:	#(DDE GET expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeinitiatestate
-	:	#(DDE INITIATE field FRAME expression APPLICATION expression TOPIC expression (NOERROR_KW)? state_end )
-	;
-
-dderequeststate
-	:	#(DDE REQUEST expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddesendstate
-	:	#(DDE SEND expression SOURCE expression ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeterminatestate
-	:	#(DDE TERMINATE expression (NOERROR_KW)? state_end )
-	;
-
-def_shared
-	:	SHARED
-	|	#(NEW (GLOBAL)? SHARED )
-	;
-
-def_visib
-	:	( PRIVATE | PROTECTED | PUBLIC )
-	;
-
-definebrowsestate
-	:	#(	DEFINE (def_shared)? (def_visib)? BROWSE ID
-			(#(QUERY ID))? (lockhow|NOWAIT)*
-			(	#(	DISPLAY
-					(	#(	Form_item
-							(	(RECORD_NAME)=> RECORD_NAME
-							|	expression (columnformat)?
-							|	spacephrase
-							)
-						)
-					)*
-					(#(EXCEPT (field)*))?
-				)
-				(	#(	ENABLE
-						(	#(ALL (#(EXCEPT (field)*))?)
-						|	(	#(	Form_item field
-									(	#(HELP constant)
-									|	#(VALIDATE funargs)
-									|	AUTORETURN
-									|	DISABLEAUTOZAP
-									)*
-								)
-							)*
-						)
-					)
-				)?
-			)?
-			(display_with)*
-			(tooltip_expr)?
-			(#(CONTEXTHELPID expression))?
-			state_end
-		)
-	;
-
-definebufferstate
-	:	#(	DEFINE (def_shared)? (def_visib)? BUFFER ID
-			FOR (TEMPTABLE)? RECORD_NAME (PRESELECT)? (label_constant)? (namespace_uri)? (namespace_prefix)?
-			(#(FIELDS (field)* ))? state_end
-		)
-	;
-
-definebuttonstate
-	:	#(	DEFINE (def_shared)? (def_visib)? BUTTON ID
-			(	AUTOGO
-			|	AUTOENDKEY
-			|	DEFAULT
-			|	color_expr
-			|	#(CONTEXTHELPID expression)
-			|	DROPTARGET
-			|	#(FONT expression)
-			|	#(IMAGEDOWN (imagephrase_opt)+ )
-			|	#(IMAGE (imagephrase_opt)+ )
-			|	#(IMAGEUP (imagephrase_opt)+ )
-			|	#(IMAGEINSENSITIVE (imagephrase_opt)+ )
-			|	#(MOUSEPOINTER expression )
-			|	label_constant
-			|	#(LIKE field (VALIDATE)?)
-			|	FLATBUTTON
-			|	#(NOFOCUS (FLATBUTTON)? )
-			|	NOCONVERT3DCOLORS
-			|	tooltip_expr
-			|	sizephrase (MARGINEXTRA)?
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definedatasetstate
-	:	#(	DEFINE (def_shared)? (def_visib)? DATASET ID (namespace_uri)? (namespace_prefix)? (REFERENCEONLY)?
-			FOR RECORD_NAME (COMMA RECORD_NAME)*
-			( data_relation ( (COMMA)? data_relation)* )?
-			state_end
-		)
-	;
-data_relation
-	:	#(	DATARELATION (ID)?
-			FOR RECORD_NAME COMMA RECORD_NAME (field_mapping_phrase)? (REPOSITION)?
-		)
-	;
-field_mapping_phrase
-	:	#(RELATIONFIELDS LEFTPAREN field COMMA field ( COMMA field COMMA field )* RIGHTPAREN )
-	;
-
-definedatasourcestate
-	:	#(	DEFINE (def_shared)? (def_visib)? DATASOURCE ID
-			FOR (#(QUERY ID))?
-			(source_buffer_phrase)? (COMMA source_buffer_phrase)*
-			state_end
-		)
-	;
-source_buffer_phrase
-	:	#(RECORD_NAME ( KEYS LEFTPAREN ( ROWID | field (COMMA field)* ) RIGHTPAREN )? )
-	;
-
-defineframestate
-	:	#(	DEFINE (def_shared)? (def_visib)? FRAME ID
-			(form_item)*
-			(	#(HEADER (display_item)+ )
-			|	#(BACKGROUND (display_item)+ )
-			)?
-			(#(EXCEPT (field)*))?  (framephrase)?  state_end
-		)
-	;
-
-defineimagestate
-	:	#(	DEFINE (def_shared)? (def_visib)? IMAGE ID
-			(	#(LIKE field (VALIDATE)?)
-			|	imagephrase_opt 
-			|	sizephrase
-			|	color_expr
-			|	CONVERT3DCOLORS
-			|	tooltip_expr
-			|	#(STRETCHTOFIT (RETAINSHAPE)? )
-			|	TRANSPARENT
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definemenustate
-	:	#(	DEFINE (def_shared)? (def_visib)? MENU ID
-			(menu_opt)* (menu_list_item)* state_end
-		)
-	;
-menu_opt
-	:	color_expr
-	|	#(FONT expression)
-	|	#(LIKE field (VALIDATE)?)
-	|	#(TITLE expression)
-	|	MENUBAR
-	|	PINNABLE
-	|	SUBMENUHELP
-	;
-menu_list_item
-	:	(	#(	MENUITEM ID
-				(	#(ACCELERATOR expression )
-				|	color_expr
-				|	DISABLED
-				|	#(FONT expression)
-				|	label_constant
-				|	READONLY
-				|	TOGGLEBOX
-				)*
-				(triggerphrase)? 
-			)
-		|	#(SUBMENU ID (DISABLED | label_constant | #(FONT expression) | color_expr)* )
-		|	#(RULE (#(FONT expression) | color_expr)* )
-		|	SKIP
-		)
-		// You can have PERIOD between menu items.
-		((PERIOD (RULE|SKIP|SUBMENU|MENUITEM))=> PERIOD)?
-	;
-
-defineparameterstate
-	:	#(	DEFINE (def_shared)? (def_visib)?
-			(	PARAMETER BUFFER ID FOR RECORD_NAME (PRESELECT)? (label_constant)? (#(FIELDS (field)* ))?
-			|	(INPUT|OUTPUT|INPUTOUTPUT|RETURN) PARAMETER
-				(	TABLE FOR RECORD_NAME (APPEND|BIND)*
-				|	TABLEHANDLE (FOR)? ID (APPEND|BIND)*
-				|	DATASET FOR ID (APPEND|BYVALUE|BIND)*
-				|	DATASETHANDLE ID (APPEND|BYVALUE|BIND)*
-				|	ID defineparam_var (triggerphrase)?
-				)
-			)
-			state_end
-		)
-	;
-defineparam_var
-	:	(	#(	AS
-				(	(HANDLE (TO)? datatype_dll)=> HANDLE (TO)? datatype_dll
-				|	CLASS TYPE_NAME
-				|	datatype_param
-				)
-			)
-		)?
-		(	options{greedy=true;}
-		:	casesens_or_not | #(FORMAT expression) | #(DECIMALS expression ) | #(LIKE field (VALIDATE)?)
-		|	initial_constant | label_constant | NOUNDO | extentphrase
-		)*
-	;
-
-definequerystate
-	:	#(	DEFINE (def_shared)? (def_visib)? QUERY ID
-			FOR RECORD_NAME (record_fields)?
-			(COMMA RECORD_NAME (record_fields)?)*
-			( #(CACHE expression) | SCROLLING | RCODEINFORMATION)*
-			state_end
-		)
-	;
-
-definerectanglestate
-	:	#(	DEFINE (def_shared)? (def_visib)? RECTANGLE ID
-			(	NOFILL
-			|	#(EDGECHARS expression )
-			|	#(EDGEPIXELS expression )
-			|	color_expr
-			|	GRAPHICEDGE
-			|	#(LIKE field (VALIDATE)?)
-			|	sizephrase
-			|	tooltip_expr
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definestreamstate
-	:	#(	DEFINE (def_shared)? (def_visib)? STREAM ID state_end )
-	;
-
-definesubmenustate
-	:	#(	DEFINE (def_shared)? (def_visib)? SUBMENU ID
-			(menu_opt)* (menu_list_item)* state_end
-		)
-	;
-   
-definetemptablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? TEMPTABLE ID
-			(UNDO|NOUNDO)?
-			(namespace_uri)? (namespace_prefix)?
-			(REFERENCEONLY)?
-			(def_table_like)?
-			(label_constant)?
-			(#(BEFORETABLE ID))?
-			(RCODEINFORMATION)?
-			(def_table_field)*
-			(	#(	INDEX ID ( (AS|IS)? (UNIQUE|PRIMARY|WORDINDEX) )*
-					( ID (ASCENDING|DESCENDING|CASESENSITIVE)* )+
-				)
-			)*
-			state_end
-		)
-	;
-def_table_like
-	:	#(	LIKE RECORD_NAME (VALIDATE)?
-			( #(USEINDEX ID ((AS|IS) PRIMARY)? ) )*
-		)
-	;
-def_table_field
-	:	#(FIELD ID (fieldoption)* )
-	;
-   
-defineworktablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? WORKTABLE ID
-			(NOUNDO)? (def_table_like)? (label_constant)? (def_table_field)* state_end
-		)
-	;
-
-definevariablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? VARIABLE ID
-			(fieldoption)* (triggerphrase)? state_end
-		)
-	;
-
-deletestate
-	:	#(DELETE_KW RECORD_NAME (#(VALIDATE funargs))? (NOERROR_KW)? state_end )
-	;
-
-deletealiasstate
-	:	#(DELETE_KW ALIAS (ID|QSTRING|valueexpression) state_end )
-	;
-
-deleteobjectstate
-	:	#(DELETE_KW OBJECT expression (NOERROR_KW)? state_end )
-	;
-
-deleteprocedurestate
-	:	#(DELETE_KW PROCEDURE expression (NOERROR_KW)? state_end )
-	;
-
-deletewidgetstate
-	:	#(DELETE_KW WIDGET (gwidget)* state_end )
-	;
-
-deletewidgetpoolstate
-	:	#(DELETE_KW WIDGETPOOL (expression)? (NOERROR_KW)? state_end )
-	;
-	
-destructorstate
-	:	#(	DESTRUCTOR PUBLIC TYPE_NAME LEFTPAREN RIGHTPAREN block_colon
-			code_block #(END (DESTRUCTOR)? ) state_end
-		)
-	;
-	
-dictionarystate
-	:	#(DICTIONARY state_end )
-	;
-
-disablestate
-	:	#(DISABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (framephrase)? state_end )
-	;
-
-disabletriggersstate
-	:	#(DISABLE TRIGGERS FOR (DUMP|LOAD) OF RECORD_NAME (ALLOWREPLICATION)? state_end )
-	;
-
-disconnectstate
-	:	#(DISCONNECT filenameorvalue (NOERROR_KW)? state_end )
-	;
-
-displaystate
-	:	#(	DISPLAY (stream_name)? (UNLESSHIDDEN)? (display_item)*
-			(#(EXCEPT (field)*))? (#(IN_KW WINDOW expression))?
-			(display_with)*
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-display_item
-	:	#(	Form_item
-			(	skipphrase
-			|	spacephrase
-			|	(expression|ID) (aggregatephrase|formatphrase)*
-			)
-		)
-	;
-display_with
-	:	(#(WITH BROWSE ID))=> #(WITH BROWSE ID )
-	|	framephrase
-	;
-
-dostate
-	:	#(DO (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
-	;
-
-downstate
-	:	#(DOWN ((stream_name (expression)?) | (expression (stream_name)?))? (framephrase)? state_end )
-	;
-
-// drop - see SQL grammar
-
-dynamiccurrentvaluefunc
-	:	#(DYNAMICCURRENTVALUE funargs)
-	;
-
-editorphrase
-	:	#(	EDITOR
-			(	#(INNERCHARS expression )
-			|	#(INNERLINES expression )
-			|	#(BUFFERCHARS expression )
-			|	#(BUFFERLINES expression )
-			|	LARGE
-			|	#(MAXCHARS expression )
-			|	NOBOX
-			|	NOWORDWRAP
-			|	SCROLLBARHORIZONTAL
-			|	SCROLLBARVERTICAL
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-emptytemptablestate
-	:	#(EMPTY TEMPTABLE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-enablestate
-	:	#(ENABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (#(IN_KW WINDOW expression))? (framephrase)? state_end )
-	;
-
-editingphrase
-	:	#(Editing_phrase (ID LEXCOLON)? EDITING block_colon (blockorstate)* END )
-	;
-
-entryfunc
-	:	#(ENTRY funargs )
-	;
-
-exportstate
-	:	#(EXPORT (stream_name)? (#(DELIMITER constant))? (display_item)* (#(EXCEPT (field)*))? (NOLOBS)? state_end )
-	;
-
-extentphrase
-	:	#(EXTENT (expression)? )
-	;
-
-fieldoption
-	:	#(	AS
-			(	CLASS TYPE_NAME
-			|	datatype_field
-			)
-		)
-	|	casesens_or_not
-	|	color_expr
-	|	#(COLUMNCODEPAGE expression )
-	|	#(CONTEXTHELPID expression)
-	|	#(DECIMALS expression )
-	|	DROPTARGET
-	|	extentphrase
-	|	#(FONT expression)
-	|	#(FORMAT expression)
-	|	#(HELP constant)
-	|	initial_constant
-	|	label_constant
-	|	#(LIKE field (VALIDATE)? )
-	|	#(MOUSEPOINTER expression )
-	|	NOUNDO
-	|	viewasphrase
-	|	TTCODEPAGE
-	|	xml_data_type
-	|	xml_node_type
-	;
-
-fillinphrase
-	:	#(FILLIN (NATIVE | sizephrase | tooltip_expr)* )
-	;
-
-findstate
-	:	#(FIND (findwhich)? recordphrase (NOWAIT|NOPREFETCH|NOERROR_KW)* state_end )
-	;
-
-forstate
-	:	#(FOR for_record_spec (block_opt)* block_colon code_block block_end )
-	;
-for_record_spec
-	:	(findwhich)? recordphrase (COMMA (findwhich)? recordphrase)*
-	;
-
-form_item
-	:	#(	Form_item
-			(	RECORD_NAME
-			|	#(TEXT LEFTPAREN (form_item)* RIGHTPAREN )
-			|	constant (formatphrase)?
-			|	spacephrase
-			|	skipphrase
-			|	widget_id
-			|	CARET
-			|	field (aggregatephrase|formatphrase)*
-			|	assign_equal
-			)
-		)
-	;
-
-formstate
-	:	#(	FORMAT
-			(form_item)*
-			(	#(HEADER (display_item)+ )
-			|	#(BACKGROUND (display_item)+ )
-			)?
-			( #(EXCEPT (field)*) )?
-			(framephrase)?
-			state_end
-		)
-	;
-
-formatphrase
-	:	#(	Format_phrase
-			(	#(AS datatype_var )
-			|	atphrase
-			|	ATTRSPACE
-			|	NOATTRSPACE
-			|	AUTORETURN
-			|	color_expr
-			|	#(CONTEXTHELPID expression)
-			|	BLANK 
-			|	#(COLON expression )
-			|	#(TO expression)
-			|	DEBLANK 
-			|	DISABLEAUTOZAP 
-			|	#(FONT expression ) 
-			|	#(FORMAT expression)
-			|	#(HELP constant)
-			|	label_constant
-			|	#(LEXAT field (formatphrase)? )
-			|	#(LIKE field )
-			|	NOLABELS
-			|	NOTABSTOP 
-			|	#(VALIDATE funargs)
-			|	#(WHEN expression)
-			|	viewasphrase
-			|	widget_id
-			)+
-		)
-	;
-
-framephrase
-	:	#(	WITH
-			(	#(ACCUMULATE (expression)? )
-			|	ATTRSPACE | NOATTRSPACE
-			|	#(CANCELBUTTON field )
-			|	CENTERED 
-			|	#(COLUMN expression )
-			|	CONTEXTHELP | CONTEXTHELPFILE expression
-			|	#(DEFAULTBUTTON field )
-			|	EXPORT
-			|	FITLASTCOLUMN
-			|	#(FONT expression )
-			|	FONTBASEDLAYOUT
-			|	#(FRAME ID)
-			|	#(LABELFONT expression )
-			|	#(LABELDCOLOR expression )
-			|	#(LABELFGCOLOR expression )
-			|	#(LABELBGCOLOR expression )
-			|	MULTIPLE | SINGLE | SEPARATORS | NOSEPARATORS | NOASSIGN| NOROWMARKERS
-			|	NOSCROLLBARVERTICAL | SCROLLBARVERTICAL
-			|	#(ROWHEIGHTCHARS expression )
-			|	#(ROWHEIGHTPIXELS expression )
-			|	EXPANDABLE | DROPTARGET | NOAUTOVALIDATE | NOCOLUMNSCROLLING
-			|	KEEPTABORDER | NOBOX | NOEMPTYSPACE | NOHIDE | NOLABELS | USEDICTEXPS | NOVALIDATE 
-			|	NOHELP | NOUNDERLINE | OVERLAY | PAGEBOTTOM | PAGETOP | NOTABSTOP
-			|	#(RETAIN expression  )
-			|	#(ROW expression )
-			|	SCREENIO | STREAMIO
-			|	#(SCROLL expression )
-			|	SCROLLABLE | SIDELABELS 
-			|	stream_name | THREED
-			|	tooltip_expr
-			|	TOPONLY | USETEXT
-			|	V6FRAME | USEREVVIDEO | USEUNDERLINE
-			|	#(	VIEWAS
-					(	#(DIALOGBOX (DIALOGHELP (expression)?)? )
-					|	MESSAGELINE
-					|	STATUSBAR
-					|	#(TOOLBAR (ATTACHMENT (TOP|BOTTOM|LEFT|RIGHT))? )
-					)
-				)
-			|	#(WIDTH expression )
-			|	#(IN_KW WINDOW expression)
-			|	colorspecification | atphrase | sizephrase | titlephrase 
-			|	#(With_columns expression COLUMNS )
-			|	#(With_down expression DOWN )
-			|	DOWN
-			|	widget_id
-			|	WITH
-			)*
-		)
-	;
-
-functionstate
-	:	#(	FUNCTION ID
-			(RETURNS|RETURN)?
-			( CLASS TYPE_NAME | datatype_var ) 
-			(PRIVATE)?
-			( function_params )?
-			(	FORWARDS (LEXCOLON|PERIOD|EOF)
-			|	(IN_KW SUPER)=> IN_KW SUPER (LEXCOLON|PERIOD|EOF)
-			|	(MAP (TO)? ID)? IN_KW expression (LEXCOLON|PERIOD|EOF)
-			|	block_colon
-				code_block
-				(	EOF
-				|	#(END (FUNCTION)? ) state_end
-				)
-			)
-		)
-	;
-function_params
-	:	#(Parameter_list LEFTPAREN (function_param)? (COMMA function_param)* RIGHTPAREN )
-	;
-function_param
-	:	#(BUFFER (ID)? FOR RECORD_NAME (PRESELECT)? )
-	|	#(INPUT function_param_arg )
-	|	#(OUTPUT function_param_arg )
-	|	#(INPUTOUTPUT function_param_arg )
-	;
-function_param_arg
-	:	TABLE (FOR)? RECORD_NAME (APPEND)? (BIND)?
-	|	TABLEHANDLE (FOR)? ID (APPEND)? (BIND)?
-	|	(DATASET|DATASETHANDLE) ID (APPEND)? (BIND)?
-	|	(ID AS)? (CLASS TYPE_NAME | datatype_var) (extentphrase)?
-	;
-
-getstate
-	:	#(GET findwhich ID (lockhow|NOWAIT)* state_end )
-	;
-
-getkeyvaluestate
-	:	#(GETKEYVALUE SECTION expression KEY (DEFAULT|expression) VALUE field state_end )
-	;
-
-goonphrase
-	:	#(GOON LEFTPAREN goon_elem ((options{greedy=true;}:COMMA)? goon_elem)* RIGHTPAREN )
-	;
-goon_elem
-	:	~(RIGHTPAREN) ( (OF)=> OF gwidget)?
-	;
-
-hidestate
-	:	#(HIDE (stream_name)? (MESSAGE|ALL|(gwidget)*) (NOPAUSE)? (#(IN_KW WINDOW expression))? state_end )
-	;
-
-ifstate
-	:	#(	IF expression THEN (blockorstate)?
-			( #(ELSE (blockorstate)? ) )?
-		)
-	;
-
-imagephrase_opt
-	:	#(FILE expression )
-	|	#(IMAGESIZE expression BY expression )
-	|	#(IMAGESIZECHARS expression BY expression )
-	|	#(IMAGESIZEPIXELS expression BY expression )
-	|	#(	FROM
-			( X expression | Y expression | ROW expression | COLUMN expression )
-			( X expression | Y expression | ROW expression | COLUMN expression )
-		)
-	;
-
-importstate
-	:	#(	IMPORT (stream_name)?
-			( #(DELIMITER constant) | UNFORMATTED )?
-			(	RECORD_NAME (#(EXCEPT (field)*))?
-			|	(field|CARET)+
-			)?
-			(NOLOBS)? (NOERROR_KW)? state_end
-		)
-	;
-
-initial_constant
-	:	#(	INITIAL
-			(	LEFTBRACE (TODAY|constant) (COMMA (TODAY|constant))* RIGHTBRACE
-			|	(TODAY|constant)
-			)
-		)
-	;
-
-inputclearstate
-	:	#(INPUT CLEAR state_end )
-	;
-
-inputclosestate
-	:	#(INPUT (stream_name)? CLOSE state_end )
-	;
-
-inputfromstate
-	:	#(INPUT (stream_name)? FROM io_phrase state_end )
-	;
-   
-inputthroughstate
-	:	#(INPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-inputoutputclosestate
-	:	#(INPUTOUTPUT (stream_name)? CLOSE state_end )
-	;
-
-inputoutputthroughstate
-	:	#(INPUTOUTPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-insertstate
-	:	#(INSERT RECORD_NAME (#(EXCEPT (field)*))? (#(USING (ROWID|RECID) expression))? (framephrase)? (NOERROR_KW)? state_end )
-	;
-	
-interfacestate
-	:	#(INTERFACE TYPE_NAME block_colon code_block #(END (INTERFACE)?) state_end )
-	;
-	
-io_phrase
-	:	(	#(OSDIR LEFTPAREN expression RIGHTPAREN (NOATTRLIST)? )
-		|	#(PRINTER  (.)? )
-		|	TERMINAL
-		|	(valueexpression | FILENAME) *
-		)
-		(	APPEND
-		|	BINARY
-		|	COLLATE
-		|	#(CONVERT ((SOURCE|TARGET) expression)* )
-		|	#(LOBDIR filenameorvalue )
-		|	NOCONVERT
-		|	ECHO | NOECHO
-		|	KEEPMESSAGES 
-		|	LANDSCAPE
-		|	#(MAP anyorvalue )
-		|	NOMAP
-		|	#(NUMCOPIES anyorvalue )
-		|	PAGED
-		|	#(PAGESIZE_KW anyorvalue )
-		|	PORTRAIT
-		|	UNBUFFERED 
-		)*
-	;
-
-label_constant
-	:	#(COLUMNLABEL constant (COMMA constant)* )
-	|	#(LABEL constant (COMMA constant)* )
-	;
-
-ldbnamefunc
-	:	#(LDBNAME LEFTPAREN (#(BUFFER RECORD_NAME) | expression) RIGHTPAREN )
-	;
-
-leavestate
-	:	#(LEAVE (BLOCK_LABEL)? state_end )
-	;
-
-lengthfunc
-	:	#(LENGTH funargs )
-	;
-
-loadstate
-	:	#(	LOAD expression
-			(	#(DIR expression )
-			|	APPLICATION
-			|	DYNAMIC
-			|	NEW
-			|	#(BASEKEY expression )
-			|	NOERROR_KW
-			)*
-			state_end
-		)
-	;
-
-loadpicturefunc 
-	:	#(LOADPICTURE (funargs)? )
-	;
-
-messagestate
-	:	#(	MESSAGE
-			( #(COLOR anyorvalue) )?
-			( #(Form_item (skipphrase | expression) ) )*
-			(	#(	VIEWAS ALERTBOX
-					(MESSAGE|QUESTION|INFORMATION|ERROR|WARNING)?
-					(BUTTONS (YESNO|YESNOCANCEL|OK|OKCANCEL|RETRYCANCEL) )?
-					(#(TITLE expression))?
-				)
-			|	#(SET field (formatphrase)? )
-			|	#(UPDATE field (formatphrase)? )
-			)*
-			( #(IN_KW WINDOW expression) )?
-			state_end
-		)
-	;
-
-methodstate
-	:	#(	METHOD (PRIVATE|PROTECTED|PUBLIC|OVERRIDE|FINAL)*
-			(	VOID
-			|	CLASS TYPE_NAME
-			|	datatype_var
-			)
-			ID
-			function_params
-			(	// Ambiguous on PERIOD, since a block_colon may be a period, and we may also
-				// be at the end of the method declaration for an INTERFACE.
-				// We predicate on the next node being Code_block.
-				// (Upper/lowercase matters. Node: Code_block. Rule/branch: code_block.)
-				(block_colon Code_block)=> block_colon code_block #(END (METHOD)? ) state_end
-			|	state_end
-			)
-		)
-	;
-
-namespace_prefix
-	:	#(NAMESPACEPREFIX constant )
-	;
-namespace_uri
-	:	#(NAMESPACEURI constant )
-	;
-
-nextstate
-	:	#(NEXT (BLOCK_LABEL)? state_end )
-	;
-
-nextpromptstate
-	:	#(NEXTPROMPT field (framephrase)? state_end )
-	;
-
-nextvaluefunc
-	:	#(NEXTVALUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN )
-	;
-
-onstate
-	:	#(	ON
-			(	(ASSIGN|CREATE|DELETE_KW|FIND|WRITE)=>
-				(	(CREATE|DELETE_KW|FIND) OF RECORD_NAME (label_constant)?
-				|	WRITE OF RECORD_NAME (label_constant)?
-					((NEW (BUFFER)? ID) (label_constant)?)?
-					((OLD (BUFFER)? ID) (label_constant)?)? 
-				|	ASSIGN OF field
-					(#(TABLE LABEL constant))?
-					(OLD (VALUE)? ID (options{greedy=true;}:defineparam_var)?)?
-		 		)
-				(OVERRIDE)?
-				(	REVERT state_end
-				|	PERSISTENT runstate
-				|	blockorstate
-				)
-			|	// ON keylabel keyfunction.
-				(. . state_end)=> . . state_end
-			|	eventlist
-				(	ANYWHERE
-				|	OF widgetlist
-					(OR eventlist OF widgetlist)*
-					(ANYWHERE)?
-				)
-				(	REVERT state_end
-				|	PERSISTENT RUN filenameorvalue
-					( #(IN_KW expression) )?
-					(	#(	Parameter_list
-							LEFTPAREN (INPUT)? expression
-							(COMMA (INPUT)? expression)*
-							RIGHTPAREN
-						)
-					)?
-					state_end
-				|	blockorstate
-				)
-			)
-		)
-	;
-
-on___phrase
-	:	#(	ON (ENDKEY|ERROR|STOP|QUIT)
-			( #(UNDO (BLOCK_LABEL)? ) )?
-			(	COMMA
-				(	#(LEAVE (BLOCK_LABEL)? )
-				|	#(NEXT (BLOCK_LABEL)? )
-				|	#(RETRY (BLOCK_LABEL)? )
-				|	#(RETURN (return_options)? )
-				)
-			)?
-		)
-	;
-
-openquerystate
-	:	#(	OPEN QUERY ID (FOR|PRESELECT) for_record_spec
-			(	querytuningphrase
-			|	#(BY expression (DESCENDING)? )
-			|	collatephrase
-			|	INDEXEDREPOSITION
-			|	#(MAXROWS expression )
-			)*
-			state_end
-		)
-	;
-
-osappendstate
-	:	#(OSAPPEND anyorvalue anyorvalue state_end )
-	;
-
-oscommandstate
-	:	#(OS400		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(BTOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(DOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(MPE		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(OS2		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(OSCOMMAND	(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(UNIX		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(VMS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	;
-
-oscopystate
-	:	#(OSCOPY anyorvalue anyorvalue state_end )
-	;
-
-oscreatedirstate
-	:	#(OSCREATEDIR (anyorvalue)+ state_end )
-	;
-
-osdeletestate
-	:	#(OSDELETE (valueexpression | ~(VALUE|RECURSIVE|PERIOD) )+ (RECURSIVE)? state_end )
-	;
-
-osrenamestate
-	:	#(OSRENAME anyorvalue anyorvalue state_end )
-	;
-
-outputclosestate
-	:	#(OUTPUT (stream_name)? CLOSE state_end )
-	;
-
-outputthroughstate
-	:	#(OUTPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-outputtostate
-	:	#(OUTPUT (stream_name)? TO io_phrase state_end )
-	;
-
-pagestate
-	:	#(PAGE (stream_name)? state_end )
-	;
-
-pausestate
-	:	#(	PAUSE (expression)?
-			(	BEFOREHIDE
-			|	#(MESSAGE constant )
-			|	NOMESSAGE
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-procedurestate
-	:	#(	PROCEDURE ID
-			(	#(	EXTERNAL constant
-					(	CDECL_KW
-					|	PASCAL_KW
-					|	STDCALL_KW
-					|	#(ORDINAL expression )
-					|	PERSISTENT
-					)*
-				)
-			|	PRIVATE
-			|	IN_KW SUPER
-			)?
-			block_colon code_block (EOF | #(END (PROCEDURE)?) state_end)
-		)
-	;
-
-processeventsstate
-	:	#(PROCESS EVENTS state_end )
-	;
-
-promptforstate
-	:	#(	PROMPTFOR (stream_name)? (UNLESSHIDDEN)? (form_item)*
-			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?
-			state_end
-		)
-	;
-
-publishstate
-	:	#(PUBLISH expression (#(FROM expression) )? (parameterlist)? state_end )
-	;
-
-putstate
-	:	#(	PUT	
-			(stream_name)? (CONTROL|UNFORMATTED)?
-			(	( #(NULL_KW (LEFTPAREN)? ) )=> #(NULL_KW (funargs)? )
-			|	skipphrase
-			|	spacephrase
-			|	expression (#(FORMAT expression)|#(AT expression )|#(TO expression))*
-			)*
-			state_end
-		)
-	;
-
-putcursorstate
-	:	#(PUT CURSOR (OFF | (#(ROW expression)|#(COLUMN expression))* ) state_end )
-	;
-
-putscreenstate
-	:	#(	PUT SCREEN
-			( ATTRSPACE | NOATTRSPACE | #(COLOR anyorvalue) | #(COLUMN expression) | #(ROW expression) | expression )*
-			state_end
-		)
-	;
-
-putkeyvaluestate
-	:	#(	PUTKEYVALUE
-			(	SECTION expression KEY (DEFAULT|expression) VALUE expression
-			|	(COLOR|FONT) (expression|ALL)
-			)
-			(NOERROR_KW)? state_end
-		)
-	;
-
-querytuningphrase
-	:	#(	QUERYTUNING LEFTPAREN
-			(	ARRAYMESSAGE | NOARRAYMESSAGE
-			|	BINDWHERE | NOBINDWHERE
-			|	#(CACHESIZE NUMBER (ROW|BYTE)? )
-			|	#(DEBUG (SQL|EXTENDED|CURSOR|DATABIND|PERFORMANCE|VERBOSE|SUMMARY|NUMBER)? )
-			|	NODEBUG
-			|	DEFERLOBFETCH
-			|	#(HINT expression )
-			|	INDEXHINT | NOINDEXHINT
-			|	JOINBYSQLDB | NOJOINBYSQLDB
-			|	LOOKAHEAD | NOLOOKAHEAD
-			|	ORDEREDJOIN
-			|	REVERSEFROM
-			|	SEPARATECONNECTION | NOSEPARATECONNECTION
-			)*
-			RIGHTPAREN
-		)
-	;
-
-quitstate
-	:	#(QUIT state_end )
-	;
-
-radiosetphrase
-	:	#(	RADIOSET
-			(	#(HORIZONTAL (EXPAND)? )
-			|	VERTICAL
-			|	(sizephrase)
-			|	#(RADIOBUTTONS 
-					(QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY)
-					(COMMA (QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY))*
-				)
-			|	tooltip_expr
-			)*
-		)
-	;
-
-rawfunc
-	:	#(RAW funargs )
-	;
-
-rawtransferstate
-	:	#(RAWTRANSFER (BUFFER|FIELD)? (RECORD_NAME|field) TO (BUFFER|FIELD)? (RECORD_NAME|field) (NOERROR_KW)? state_end )
-	;
-
-readkeystate
-	:	#(READKEY (stream_name)? (#(PAUSE expression))? state_end )
-	;
-
-repeatstate
-	:	#(REPEAT (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
-	;
-
-record_fields
-	:	#(FIELDS (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
-	|	#(EXCEPT (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
-	;
-
-recordphrase
-	:	#(	RECORD_NAME (record_fields)? (options{greedy=true;}:TODAY|constant)?
-			(	#(LEFT OUTERJOIN )
-			|	OUTERJOIN
-			|	#(OF RECORD_NAME )
-			|	#(WHERE (expression)? )
-			|	#(USEINDEX ID )
-			|	#(USING field (AND field)* )
-			|	lockhow
-			|	NOWAIT
-			|	NOPREFETCH
-			|	NOERROR_KW
-			)*
-		)
-	;
-
-releasestate
-	:	#(RELEASE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-releaseexternalstate
-	:	#(RELEASE EXTERNAL (PROCEDURE)? expression (NOERROR_KW)? state_end )
-	;
-
-releaseobjectstate
-	:	#(RELEASE OBJECT expression (NOERROR_KW)? state_end )
-	;
-
-repositionstate
-	:	#(	REPOSITION ID
-			(	#(	TO
-					(	ROWID expression (COMMA expression)* 
-					|	RECID expression
-					|	ROW expression
-					)
-				)
-			|	#(ROW expression )
-			|	#(FORWARDS expression )
-			|	#(BACKWARDS expression )
-			)
-			(NOERROR_KW)? state_end
-		)
-	;
-
-returnstate
-	:	#(RETURN (return_options)? state_end )
-	;
-
-return_options
-	:	(	( #(ERROR LEFTPAREN RECORD_NAME RIGHTPAREN) )=> expression
-		|	(ERROR)=> ERROR (expression)?
-		|	NOAPPLY (expression)?
-		|	expression
-		)
-	;
-
-runstate
-	:	#(	RUN filenameorvalue
-			(LEFTANGLE LEFTANGLE filenameorvalue RIGHTANGLE RIGHTANGLE)?
-			(	#(PERSISTENT ( #(SET (field)? ) )? )
-			|	#(SET (field)? )
-			|	#(ON (SERVER)? expression (TRANSACTION (DISTINCT)?)? )
-			|	#(IN_KW expression)
-			|	#(	ASYNCHRONOUS ( #(SET (field)? ) )?
-					( #(EVENTPROCEDURE expression ) )?
-					(#(IN_KW expression))?
-				)
-			)*
-			(parameterlist)?
-			(NOERROR_KW|anyorvalue)*
-			state_end
-		)
-	;
-
-runstoredprocedurestate
-	:	#(RUN STOREDPROCEDURE ID (assign_equal)? (NOERROR_KW)? (parameterlist)? state_end )
-	;
-
-runsuperstate
-	:	#(RUN SUPER (parameterlist)? (NOERROR_KW)? state_end )
-	;
-
-savecachestate
-	:	#(SAVE CACHE (CURRENT|COMPLETE) anyorvalue TO filenameorvalue (NOERROR_KW)? state_end )
-	;
-
-scrollstate
-	:	#(SCROLL (FROMCURRENT)? (UP)? (DOWN)? (framephrase)? state_end )
-	;
-
-seekstate
-	:	#(SEEK (INPUT|OUTPUT|stream_name) TO (expression|END) state_end )
-	;
-
-selectionlistphrase
-	:	#(	SELECTIONLIST
-			(	SINGLE
-			|	MULTIPLE
-			|	NODRAG
-			|	#(LISTITEMS constant (COMMA constant)* )
-			|	#(LISTITEMPAIRS constant (COMMA constant)* )
-			|	SCROLLBARHORIZONTAL
-			|	SCROLLBARVERTICAL
-			|	#(INNERCHARS expression )
-			|	#(INNERLINES expression )
-			|	SORT
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-setstate
-	:	#(	SET
-			(stream_name)? (UNLESSHIDDEN)? (form_item)*
-			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?  (NOERROR_KW)?
-			state_end
-		)
-	;
-
-showstatsstate
-	:	#(SHOWSTATS (CLEAR)? state_end )
-	;
-
-sizephrase
-	:	#(SIZE expression BY expression )
-	|	#(SIZECHARS expression BY expression )
-	|	#(SIZEPIXELS expression BY expression )
-	;
-
-skipphrase
-	:	#(SKIP (funargs)? )
-	;
-
-sliderphrase
-	:	#(	SLIDER
-			(	HORIZONTAL
-			|	#(MAXVALUE expression )
-			|	#(MINVALUE expression )
-			|	VERTICAL
-			|	NOCURRENTVALUE
-			|	LARGETOSMALL
-			|	#(TICMARKS (NONE|TOP|BOTTOM|LEFT|RIGHT|BOTH) (#(FREQUENCY expression))? )
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-spacephrase
-	:	#(SPACE (funargs)? )
-	;
-
-state_end
-	:	PERIOD | EOF
-	;
-
-statusstate
-	:	#(	STATUS
-			(	#(DEFAULT (expression)? )
-			|	#(INPUT (OFF|expression)? )
-			)
-			(#(IN_KW WINDOW expression))?
-		state_end
-		)
-	;
-
-stopstate
-	:	#(STOP state_end )
-	;
-
-stream_name
-	:	#(STREAM ID )
-	;
-
-subscribestate
-	:	#(	SUBSCRIBE ( #(PROCEDURE expression) )? (TO)? expression
-			(ANYWHERE | #(IN_KW expression) )
-			( #(RUNPROCEDURE expression) )?
-			(NOERROR_KW)? state_end
-		)
-	;
-   
-substringfunc
-	:	#(SUBSTRING funargs )
-	;
-
-systemdialogcolorstate
-	:	#(SYSTEMDIALOG COLOR expression ( #(UPDATE field) )? (#(IN_KW WINDOW expression))? state_end )
-	;
-
-systemdialogfontstate
-	:	#(	SYSTEMDIALOG FONT expression
-			(	ANSIONLY
-			|	FIXEDONLY
-			|	#(MAXSIZE expression )
-			|	#(MINSIZE expression )
-			|	#(UPDATE field )
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialoggetdirstate
-	:	#(	SYSTEMDIALOG GETDIR field
-			(	#(INITIALDIR expression)
-			|	RETURNTOSTARTDIR
-			|	#(TITLE expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialoggetfilestate
-	:	#(	SYSTEMDIALOG GETFILE field
-			(	#(	FILTERS expression expression (COMMA expression expression)*
-					( #(INITIALFILTER expression ) )?
-				)
-			|	ASKOVERWRITE
-			|	CREATETESTFILE
-			|	#(DEFAULTEXTENSION expression )
-			|	#(INITIALDIR expression )
-			|	MUSTEXIST
-			|	RETURNTOSTARTDIR
-			|	SAVEAS
-			|	#(TITLE expression)
-			|	USEFILENAME
-			|	#(UPDATE field )
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialogprintersetupstate
-	:	#(	SYSTEMDIALOG PRINTERSETUP
-			( #(NUMCOPIES expression) | #(UPDATE field) | LANDSCAPE | PORTRAIT | #(IN_KW WINDOW expression) )*
-			state_end
-		)
-	;
-
-systemhelpstate
-	:	#(	SYSTEMHELP expression
-			( #(WINDOWNAME expression) )?
-			(	#(ALTERNATEKEY expression )
-			|	#(CONTEXT expression )
-			|	CONTENTS 
-			|	#(SETCONTENTS expression )
-			|	FINDER
-			|	#(CONTEXTPOPUP expression )
-			|	#(HELPTOPIC expression )
-			|	#(KEY expression )
-			|	#(PARTIALKEY (expression)? )
-			|	#(MULTIPLEKEY expression TEXT expression )
-			|	#(COMMAND expression )
-			|	#(POSITION (MAXIMIZE | X expression Y expression WIDTH expression HEIGHT expression) )
-			|	FORCEFILE
-			|	HELP
-			|	QUIT
-			)
-			state_end
-		)
-	;
-
-textphrase
-	:	#(TEXT (sizephrase | tooltip_expr)* )
-	;
-
-titlephrase
-	:	#(TITLE (color_expr | #(COLOR anyorvalue) | #(FONT expression) )* expression )
-	;
-
-toggleboxphrase
-	:	#(TOGGLEBOX (sizephrase | tooltip_expr)* )
-	;
-
-tooltip_expr
-	:	#(TOOLTIP (valueexpression | constant) )
-	;
-
-transactionmodeautomaticstate
-	:	#(TRANSACTIONMODE AUTOMATIC (CHAINED)? state_end )
-	;
-
-triggerphrase
-	:	#(	TRIGGERS block_colon
-			#(	Code_block
-				( #(ON eventlist (ANYWHERE)? (PERSISTENT runstate | blockorstate) ) )*
-			)
-			#(END (TRIGGERS)? )
-		)
-	;
-
-triggerprocedurestate
-	:	#(	TRIGGER PROCEDURE FOR
-			(	(CREATE|DELETE_KW|FIND|REPLICATIONCREATE|REPLICATIONDELETE)
-				OF RECORD_NAME (label_constant)?
-			|	(WRITE|REPLICATIONWRITE) OF RECORD_NAME (label_constant)?
-				(NEW (BUFFER)? ID (label_constant)?)?
-				(OLD (BUFFER)? ID (label_constant)?)? 
-			|	ASSIGN
-				(	#(OF field (#(TABLE LABEL constant))? )
-				|	#(NEW (VALUE)? id:ID defineparam_var )
-				)? 
-				(	#(OLD (VALUE)? id2:ID defineparam_var )
-				)?
-			)
-			state_end
-		)
-	;
-
-underlinestate
-	:	#(UNDERLINE (stream_name)? (#(Form_item field (formatphrase)? ))* (framephrase)? state_end )
-	;
-
-undostate
-	:	#(	UNDO (BLOCK_LABEL)?
-			(	COMMA
-				(	#(LEAVE (BLOCK_LABEL)? )
-				|	#(NEXT (BLOCK_LABEL)? )
-				|	#(RETRY (BLOCK_LABEL)? )
-				|	#(RETURN (return_options)? )
-				)
-			)?
-			state_end
-		)
-	;
-
-unloadstate
-	:	#(UNLOAD expression (NOERROR_KW)? state_end )
-	;
-
-unsubscribestate
-	:	#(UNSUBSCRIBE (#(PROCEDURE expression))? (TO)? (expression|ALL) (#(IN_KW expression))? state_end )
-	;
-
-upstate
-	:	#(UP (options{greedy=true;}:stream_name)? (expression)? (stream_name)? (framephrase)? state_end )
-	;
-
-updatestatement
-	:	(#(UPDATE RECORD_NAME SET))=> sqlupdatestate
-	|	updatestate
-	;
-
-updatestate
-	:	#(	UPDATE
-			(UNLESSHIDDEN)?	
-			(form_item)*
-			(goonphrase)?
-			(#(EXCEPT (field)*))?
-			(#(IN_KW WINDOW expression))?
-			(framephrase)?
-			(editingphrase)?
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-
-usestate
-	:	#(USE expression (NOERROR_KW)? state_end )
-	;
-
-validatestate
-	:	#(VALIDATE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-viewstate
-	:	#(VIEW (stream_name)? (gwidget)* (#(IN_KW WINDOW expression))? state_end )
-	;
-
-viewasphrase
-	:	#(	VIEWAS
-			(	comboboxphrase
-			|	editorphrase
-			|	fillinphrase
-			|	radiosetphrase
-			|	selectionlistphrase
-			|	sliderphrase
-			|	textphrase
-			|	toggleboxphrase
-			)
-		)
-	;
-
-waitforstate
-	:	#(	WAITFOR
-			eventlist OF widgetlist
-			(#(OR eventlist OF widgetlist))*
-			(#(FOCUS gwidget))?
-			(#(PAUSE expression))?
-			(EXCLUSIVEWEBUSER (expression)?)?
-			state_end
-		)
-	;
-
-widget_id: #(WIDGETID expression ) ;
-
-xml_data_type: #(XMLDATATYPE constant ) ;
-xml_node_type: #(XMLNODETYPE constant ) ;
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// Begin SQL
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-altertablestate
-	:	#(	ALTER TABLE RECORD_NAME
-			(	ADD COLUMN sql_col_def
-			|	DROP COLUMN field
-			|	ALTER COLUMN field
-				(  	#(FORMAT expression)
-				|	label_constant
-     				|	#(DEFAULT expression )
-				| 	casesens_or_not
-   				)*
-			)
-			state_end
-		)
-	;
-
-closestate
-	:	#(CLOSE ID state_end )
-	;
-
-createindexstate
-	:	#(CREATE (UNIQUE)? INDEX ID ON RECORD_NAME #(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ) state_end )
-	;
-
-createtablestate
-	:	#(	CREATE TABLE ID 
-			LEFTPAREN
-			(	sql_col_def
-			|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
-			)
-			(	COMMA
-				(	sql_col_def
-				|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
-				)
-			)*
-			RIGHTPAREN
-			state_end
-		)
-	;
-
-createviewstate
-	:	#(CREATE VIEW ID (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? AS selectstatea state_end )
-	;
-
-declarecursorstate
-	:	#(DECLARE ID CURSOR FOR selectstatea (#(FOR (#(READ (ONLY)?) | UPDATE)))? state_end )
-	;
-
-deletefromstate
-	:	#(	DELETE_KW FROM RECORD_NAME
-			( #(WHERE (sqlexpression | #(CURRENT OF ID))? ) )?
-			state_end
-		)
-	;
-
-dropindexstate
-	:	#(DROP INDEX ID state_end )
-	;
-
-droptablestate
-	:	#(DROP TABLE RECORD_NAME state_end )
-	;
-
-dropviewstate
-	:	#(DROP VIEW ID state_end )
-	;
-
-fetchstate
-	:	#(FETCH ID INTO field (fetch_indicator)? (COMMA field (fetch_indicator)? )* state_end )
-	;
-fetch_indicator
-	:	#(INDICATOR field )
-	|	field
-	;
-
-grantstate
-	: 	#(GRANT (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to (WITH GRANT OPTION)? state_end )
-	;
-grant_rev_opt
-	:	#(ALL (PRIVILEGES)? )
-	|	(	SELECT | INSERT | DELETE_KW
-		|	#(UPDATE (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? )
-		|	COMMA
-		)+
-	;
-grant_rev_to
-	:	#(TO (PUBLIC | FILENAME (COMMA FILENAME)*) )
-	|	#(FROM (PUBLIC | FILENAME (COMMA FILENAME)*) )
-	;
-
-insertintostate
-	:	#(	INSERT INTO RECORD_NAME
-			(#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))?
-			(	#(	VALUES LEFTPAREN sqlexpression (fetch_indicator)?
-					(COMMA sqlexpression (fetch_indicator)?)* RIGHTPAREN
-				)
-			|	selectstatea
-			)
-			state_end
-		)
-	;
-
-openstate
-	: 	#(OPEN ID state_end )
-	;
-
-revokestate
-	: 	#(REVOKE (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to state_end )
-	;
-
-selectstate
-	: 	selectstatea state_end
-	;
-
-selectstatea
-	:	#(	SELECT
-			(ALL | DISTINCT)?
-			(	STAR
-			|	#(	Sql_select_what
-					(	(LEFTPAREN)=> LEFTPAREN sqlexpression (formatphrase)? RIGHTPAREN (formatphrase)?
-					|	sqlexpression (formatphrase)?
-					)
-					(COMMA sqlexpression (formatphrase)?)*
-				)
-			)
-			( #(INTO field (fetch_indicator)? (COMMA field (fetch_indicator)?)* ) )?
-			#(FROM select_from_spec (COMMA select_from_spec)* )
-			( #(GROUP BY expression (COMMA expression)* ) )?
-			( #(HAVING sqlexpression) )?
-			(	#(ORDER BY select_order_expr )
-			|	#(BY select_order_expr )
-			)?
-			// Ick. I had trouble convincing antlr not to check the syntactic predicate
-			// if next token _t was null.
-			(	{_t != null}? ( ( #(WITH CHECK OPTION ) )=>{_t != null}? #(WITH CHECK OPTION ) | )
-			|	// empty alt
-			)
-			(framephrase)?
-			( #(UNION (ALL)? selectstatea) )?
-		)
-	;
-select_from_spec
-	:	select_sqltableref
-		(	#(LEFT (OUTER)? JOIN select_sqltableref ON sqlexpression )
-		|	#(RIGHT (OUTER)? JOIN select_sqltableref ON sqlexpression )
-		|	#(INNER JOIN select_sqltableref ON sqlexpression )
-		|	#(OUTER JOIN select_sqltableref ON sqlexpression )
-		|	#(JOIN select_sqltableref ON sqlexpression )
-		)*
-		( #(WHERE sqlexpression) )?
-	;
-select_sqltableref
-	:	(RECORD_NAME | ID) (ID)?
-	;
-select_order_expr
-	:	sqlscalar (ASC|DESCENDING)? (COMMA sqlscalar (ASC|DESCENDING)?)*
-	;
-
-sqlupdatestate
-	: 	#(	UPDATE RECORD_NAME SET sqlupdate_equal (COMMA sqlupdate_equal)*
-			( #(WHERE (sqlexpression | CURRENT OF ID) ) )?
-			state_end
-		)
-	;
-sqlupdate_equal
-	:	#(EQUAL field sqlexpression (fetch_indicator)? )
-	;
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// sql functions and phrases
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-sqlaggregatefunc
-// also see maximumfunc and minimumfunc
-	:	#(AVG sqlaggregatefunc_arg )
-	|	#(COUNT sqlaggregatefunc_arg )
-	|	#(SUM sqlaggregatefunc_arg )
-	;
-sqlaggregatefunc_arg
-	:	LEFTPAREN
-		(	DISTINCT
-			(	LEFTPAREN field RIGHTPAREN
-			|	field
-			)
-		|	STAR
-		|	(ALL)? sqlscalar
-		)
-		RIGHTPAREN
-	;
-
-sql_col_def
-	:	#(	ID
-			. // datatype
-			(PRECISION)?
-			(LEFTPAREN NUMBER (COMMA NUMBER)? RIGHTPAREN)?
-			( #(Not_null NOT NULL_KW (UNIQUE)? ) )?
-			(	label_constant
-			|	#(DEFAULT expression )
-			|  	#(FORMAT expression)
-			| 	casesens_or_not
-			)*
-		)
-	;
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// sqlexpression 
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-sqlexpression
-	:	#(OR sqlexpression sqlexpression )
-	|	#(AND sqlexpression sqlexpression )
-	|	#(NOT sqlexpression )
-	|	#(MATCHES	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(BEGINS	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(CONTAINS	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(EQ		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(NE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(GTHAN		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(GE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(LTHAN		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(LE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(EXISTS LEFTPAREN selectstatea RIGHTPAREN )
-	|	#(Sql_begins (NOT)? BEGINS sqlscalar )
-	|	#(Sql_between (NOT)? BETWEEN sqlscalar AND sqlscalar )
-	|	#(Sql_in (NOT)? IN_KW LEFTPAREN (selectstatea | sql_in_val (COMMA sql_in_val)*) RIGHTPAREN )
-	|	#(Sql_like (NOT)? LIKE sqlscalar (ESCAPE sqlscalar)? )
-	|	#(Sql_null_test IS (NOT)? NULL_KW )
-	|	sqlscalar
-	;
-sql_comp_query
-	:	#(Sql_comp_query (ANY|ALL|SOME)? LEFTPAREN selectstatea RIGHTPAREN )
-	;
-sql_in_val
-	:	field (fetch_indicator)? | constant | USERID
-	;
-sqlscalar
-	:	#(PLUS sqlscalar sqlscalar )
-	|	#(MINUS sqlscalar sqlscalar )
-	|	#(MULTIPLY sqlscalar sqlscalar )
-	|	#(DIVIDE sqlscalar sqlscalar )
-	|	#(MODULO sqlscalar sqlscalar )
-	|	#(UNARY_PLUS exprt )
-	|	#(UNARY_MINUS exprt )
-	|	(LEFTPAREN)=> #(LEFTPAREN sqlexpression RIGHTPAREN )
-	|	exprt
-	;
-
-

Added: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/JPTreeParser.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -0,0 +1,2951 @@
+/*
+
+JPTreeParser.g - Primary tree parser.
+
+Joanju Proparse Syntax Tree Structure Specification
+
+Copyright (c) 2001-2006 Joanju Software.
+All rights reserved. This program and the accompanying materials 
+are made available under the terms of the Eclipse Public License v1.0
+which accompanies this distribution, and is available at
+http://www.eclipse.org/legal/epl-v10.html
+
+
+This tree parser has no actions. It is the basis for creating new
+tree parsers.
+
+
+Notes:
+	- Token types always start with a capital letter
+	- functions always start with a lowercase letter
+	- ALLCAPS is by convention the name for a real token type
+	- Mixed_case is by convention the name for a synthetic node's token type
+	- This: #(
+	  means that the first node is root, the rest are children of that root.
+	- the pipe symbol "|" represents logical OR, of course
+	- "something" is optional: (something)?
+	- "something" must be present one or more times: (something)+
+	- "something" may be there zero, one, or many times: (something)*
+	- A period represents a token of any type.
+
+*/
+
+
+header {
+	package org.prorefactor.treeparserbase;
+
+	import org.prorefactor.core.IJPNode;
+	import org.prorefactor.treeparser.IJPTreeParser;
+}
+
+
+
+options {
+	language = "Java";
+}
+
+
+
+// Class preamble - this gets inserted near the top of the .java file.
+{
+} // Class preamble
+
+
+
+// class definition options for Antlr
+class JPTreeParser extends TreeParser;
+options {
+	importVocab = ProParser;
+	defaultErrorHandler = false;
+	classHeaderSuffix = IJPTreeParser;
+}
+
+
+
+// This is added to top of the class definitions
+{
+
+	// Where did the tree parser leave off parsing -- might give us at least a bit
+	// of an idea where things left off if an exception was thrown.
+	// See antlr/TreeParser and the generated code.
+	public AST get_retTree() {
+		return _retTree;
+	}
+
+	// Func for grabbing the "state2" attribute from the node at LT(1) 
+	private boolean state2(AST node, int match) {
+		return ((IJPNode)node).getState2() == match;
+	}
+
+}
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Begin grammar
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+program
+	:	#(Program_root (blockorstate)* Program_tail)
+	;
+
+code_block
+	:	#(Code_block (blockorstate)* )
+	;
+
+blockorstate
+	:	(	labeled_block
+		|	statement
+		|	// Expr_statement has a "statehead" node attribute
+			#(Expr_statement expression (NOERROR_KW)? state_end)
+		|	PROPARSEDIRECTIVE
+		|	PERIOD
+		|	DOT_COMMENT
+		|	#(ANNOTATION (.)* )
+		)
+	;
+
+labeled_block
+	:	#(BLOCK_LABEL LEXCOLON (dostate|forstate|repeatstate) )
+	;
+
+
+block_colon
+	:	LEXCOLON | PERIOD
+	;
+block_end
+	:	EOF
+	|	END state_end
+	;
+block_for
+	:	#(FOR RECORD_NAME (COMMA RECORD_NAME)* )
+	;
+block_opt
+	:	#(Block_iterator field EQUAL expression TO expression (BY constant)? )
+	|	querytuningphrase 
+	|	#(WHILE expression )
+	|	TRANSACTION 
+	|	on___phrase 
+	|	framephrase 
+	|	BREAK
+	|	#(BY expression (DESCENDING)? )
+	|	collatephrase
+	|	#(GROUP ( #(BY expression (DESCENDING)? ) )+ )
+	;
+block_preselect
+	:	#(PRESELECT for_record_spec )
+	;
+
+statement
+// All statement first nodes have a node attribute of "statehead".
+// Additionally, for those first statement nodes which are ambiguous
+// (ex: CREATE), there is an additional disambiguating attribute of "state2".
+	:						aatracestatement
+	|						accumulatestate
+ 	|						altertablestate
+ 	|						analyzestate
+	|						applystate
+	|						assignstate
+	|						bellstate
+	|						buffercomparestate
+	|						buffercopystate
+	|						callstate
+	|						casestate
+	|						choosestate
+	|						classstate
+	|						clearstate
+	|	{state2(_t, 0)}?			closestate			// SQL
+	|	{state2(_t, QUERY)}?			closequerystate
+	|	{state2(_t, STOREDPROCEDURE)}?	closestoredprocedurestate
+	|						colorstate
+	|						compilestate
+	|						connectstate
+	|						constructorstate
+	|						copylobstate
+	|	{state2(_t, 0)}?			createstate
+	|	{state2(_t, ALIAS)}?			createaliasstate
+	|	{state2(_t, Automationobject)}?	createautomationobjectstate
+	|	{state2(_t, BROWSE)}?			createbrowsestate
+	|	{state2(_t, BUFFER)}?			createbufferstate
+	|	{state2(_t, CALL)}?			createcallstate
+	|	{state2(_t, CLIENTPRINCIPAL)}? createclientprincipalstate
+	|	{state2(_t, DATABASE)}?		createdatabasestate
+	|	{state2(_t, DATASET)}?			createdatasetstate
+	|	{state2(_t, DATASOURCE)}?		createdatasourcestate
+	|	{state2(_t, INDEX)}?			createindexstate		// SQL
+	|	{state2(_t, QUERY)}?			createquerystate   
+	|	{state2(_t, SAXREADER)}?		createsaxreaderstate
+	|	{state2(_t, SAXWRITER)}?		createsaxwriterstate
+	|	{state2(_t, SERVER)}?			createserverstate
+	|	{state2(_t, SERVERSOCKET)}?		createserversocketstate
+	|	{state2(_t, SOAPHEADER)}?		createsoapheaderstate
+	|	{state2(_t, SOAPHEADERENTRYREF)}?	createsoapheaderentryrefstate
+	|	{state2(_t, SOCKET)}?			createsocketstate
+	|	{state2(_t, TABLE)}?			createtablestate		// SQL
+	|	{state2(_t, TEMPTABLE)}?		createtemptablestate
+	|	{state2(_t, VIEW)}?			createviewstate			// SQL
+	|	{state2(_t, WIDGET)}?			createwidgetstate
+	|	{state2(_t, WIDGETPOOL)}?		createwidgetpoolstate
+	|	{state2(_t, XDOCUMENT)}?		createxdocumentstate
+	|	{state2(_t, XNODEREF)}?		createxnoderefstate
+	|	{state2(_t, ADVISE)}?			ddeadvisestate
+	|	{state2(_t, EXECUTE)}?		ddeexecutestate
+	|	{state2(_t, GET)}?			ddegetstate
+	|	{state2(_t, INITIATE)}?		ddeinitiatestate
+	|	{state2(_t, REQUEST)}?		dderequeststate
+	|	{state2(_t, SEND)}?			ddesendstate
+	|	{state2(_t, TERMINATE)}?		ddeterminatestate	
+	|						declarecursorstate
+	|	{state2(_t, BROWSE)}?			definebrowsestate
+	|	{state2(_t, BUFFER)}?			definebufferstate
+	|	{state2(_t, BUTTON)}?			definebuttonstate
+	|	{state2(_t, DATASET)}?			definedatasetstate
+	|	{state2(_t, DATASOURCE)}?		definedatasourcestate
+	|	{state2(_t, FRAME)}?			defineframestate
+	|	{state2(_t, IMAGE)}?			defineimagestate
+	|	{state2(_t, MENU)}?			definemenustate
+	|	{state2(_t, PARAMETER)}?		defineparameterstate
+	|	{state2(_t, QUERY)}?			definequerystate
+	|	{state2(_t, RECTANGLE)}?		definerectanglestate
+	|	{state2(_t, STREAM)}?			definestreamstate
+	|	{state2(_t, SUBMENU)}?		definesubmenustate
+	|	{state2(_t, TEMPTABLE)}?		definetemptablestate
+	|	{state2(_t, WORKTABLE)}?		defineworktablestate
+	|	{state2(_t, VARIABLE)}?		definevariablestate
+	|						dictionarystate
+	|	{state2(_t, 0)}?			deletestate
+	|	{state2(_t, ALIAS)}?			deletealiasstate
+	|	{state2(_t, FROM)}?			deletefromstate
+	|	{state2(_t, OBJECT)}?			deleteobjectstate
+	|	{state2(_t, PROCEDURE)}?		deleteprocedurestate
+	|	{state2(_t, WIDGET)}?			deletewidgetstate
+	|	{state2(_t, WIDGETPOOL)}?		deletewidgetpoolstate
+	|						destructorstate
+	|	{state2(_t, 0)}?			disablestate
+	|	{state2(_t, TRIGGERS)}?		disabletriggersstate
+	|						disconnectstate
+	|						displaystate
+	|						dostate
+	|						downstate
+	|	{state2(_t, INDEX)}?			dropindexstate			// SQL
+	|	{state2(_t, TABLE)}?			droptablestate			// SQL
+	|	{state2(_t, VIEW)}?			dropviewstate			// SQL
+	|						emptytemptablestate  
+	|						enablestate
+	|						exportstate
+	|						fetchstate
+	|						findstate
+	|						forstate
+	|						formstate
+	|						functionstate
+	|						getstate
+	|						getkeyvaluestate  
+	|						grantstate
+	|						hidestate
+	|						ifstate
+	|						importstate  
+	|	{state2(_t, CLEAR)}?			inputclearstate
+	|	{state2(_t, CLOSE)}?			inputclosestate
+	|	{state2(_t, FROM)}?			inputfromstate
+	|	{state2(_t, THROUGH)}?		inputthroughstate
+	|	{state2(_t, CLOSE)}?			inputoutputclosestate
+	|	{state2(_t, THROUGH)}?		inputoutputthroughstate
+	|	{state2(_t, INTO)}?			insertintostate			// SQL
+	|	{state2(_t, 0)}?			insertstate
+	|						interfacestate
+	|						leavestate
+	|						loadstate  
+	|						messagestate
+	|						methodstate
+	|						nextstate
+	|						nextpromptstate
+	|						onstate  
+	|	{state2(_t, 0)}?			openstate			// SQL
+	|	{state2(_t, QUERY)}?			openquerystate
+	|						osappendstate
+	|						oscommandstate
+	|						oscopystate
+	|						oscreatedirstate  
+	|						osdeletestate
+	|						osrenamestate
+	|	{state2(_t, CLOSE)}?			outputclosestate
+	|	{state2(_t, THROUGH)}?		outputthroughstate
+	|	{state2(_t, TO)}?			outputtostate
+	|						pagestate  
+	|						pausestate
+	|						procedurestate
+	|						processeventsstate
+	|						promptforstate
+	|						publishstate
+	|	{state2(_t, 0)}?			putstate
+	|	{state2(_t, CURSOR)}?			putcursorstate
+	|	{state2(_t, SCREEN)}?			putscreenstate
+	|						putkeyvaluestate
+	|						quitstate
+	|						rawtransferstate
+	|						readkeystate
+	|	{state2(_t, 0)}?			releasestate
+	|	{state2(_t, EXTERNAL)}?		releaseexternalstate
+	|	{state2(_t, OBJECT)}?			releaseobjectstate
+	|						repeatstate
+	|						repositionstate  
+	|						returnstate
+	|						revokestate
+	|	{state2(_t, 0)}?			runstate
+	|	{state2(_t, STOREDPROCEDURE)}?	runstoredprocedurestate
+	|	{state2(_t, SUPER)}?			runsuperstate
+	|						savecachestate
+	|						scrollstate
+	|						seekstate  
+	|						selectstate
+	|						setstate
+	|						showstatsstate
+	|						statusstate  
+	|						stopstate
+	|						subscribestate
+	|	{state2(_t, COLOR)}?			systemdialogcolorstate
+	|	{state2(_t, FONT)}?			systemdialogfontstate
+	|	{state2(_t, GETDIR)}?		systemdialoggetdirstate
+	|	{state2(_t, GETFILE)}?		systemdialoggetfilestate
+	|	{state2(_t, PRINTERSETUP)}?		systemdialogprintersetupstate
+	|						systemhelpstate
+	|						transactionmodeautomaticstate
+	|						triggerprocedurestate
+	|						underlinestate  
+	|						undostate
+	|						unloadstate
+	|						unsubscribestate
+	|						upstate  
+	|						updatestatement
+	|						usestate
+	|						validatestate
+	|						viewstate
+	|						waitforstate
+	;
+
+
+pseudfn
+// See PSC's grammar for <pseudfn> and for <asignmt>.
+// These are functions that can (or, in some cases, must) be an l-value.
+	:	#(FIXCODEPAGE funargs )
+	|	#(OVERLAY funargs )
+	|	#(PUTBITS funargs )
+	|	#(PUTBYTE funargs )
+	|	#(PUTBYTES funargs )
+	|	#(PUTDOUBLE funargs )
+	|	#(PUTFLOAT funargs )
+	|	#(PUTLONG funargs )
+	|	#(PUTSHORT funargs )
+	|	#(PUTSTRING funargs )
+	|	#(PUTUNSIGNEDSHORT funargs )
+	|	#(SETBYTEORDER funargs )
+	|	#(SETPOINTERVALUE funargs )
+	|	#(SETSIZE funargs )
+	|	AAMSG // not the whole func - we don't want its arguments here
+	|	currentvaluefunc
+	|	CURRENTWINDOW
+	|	dynamiccurrentvaluefunc
+	|	entryfunc
+	|	lengthfunc
+	|	nextvaluefunc
+	|	rawfunc
+	|	substringfunc
+	|	widattr
+	// Keywords from <optargfn> and <noargfn>. Assignments to those
+	// are accepted by the compiler, however, assignment to them seems to have
+	// no affect at runtime.
+	// The following are from <optargfn>
+	| PAGESIZE_KW | LINECOUNTER | PAGENUMBER | FRAMECOL
+	| FRAMEDOWN | FRAMELINE | FRAMEROW | USERID | ETIME_KW
+	// The following are from <noargfn>
+	| DBNAME | TIME | OPSYS | RETRY | AASERIAL | AACONTROL
+	| MESSAGELINES | TERMINAL | PROPATH | CURRENTLANGUAGE | PROMSGS
+	| SCREENLINES | LASTKEY
+	| FRAMEFIELD | FRAMEFILE | FRAMEVALUE | GOPENDING
+	| PROGRESS | FRAMEINDEX | FRAMEDB | FRAMENAME | DATASERVERS
+	| NUMDBS | NUMALIASES | ISATTRSPACE | PROCSTATUS
+	| PROCHANDLE | CURSOR | OSERROR | RETURNVALUE | OSDRIVES
+	| PROVERSION | TRANSACTION | MACHINECLASS 
+	| AAPCONTROL | GETCODEPAGES | COMSELF
+	;
+
+functioncall
+	:	#(ACCUMULATE accum_what (#(BY expression (DESCENDING)?))? expression )
+	|	#(ADDINTERVAL LEFTPAREN expression COMMA expression COMMA expression RIGHTPAREN )
+	|	#(AUDITENABLED LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(CANFIND LEFTPAREN (findwhich)? recordphrase RIGHTPAREN )
+	|	#(CAST LEFTPAREN field COMMA TYPE_NAME RIGHTPAREN )
+	|	currentvaluefunc // is also a pseudfn.
+	|	dynamiccurrentvaluefunc // is also a pseudfn.
+	|	#(DYNAMICFUNCTION LEFTPAREN expression (#(IN_KW expression))? (COMMA parameter)* RIGHTPAREN (NOERROR_KW)? )
+		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
+	|	entryfunc // is also a pseudfn.
+	|	#(ETIME_KW (funargs)? )
+	|	#(EXTENT LEFTPAREN field RIGHTPAREN )
+	|	#(FRAMECOL (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMEDOWN (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMELINE (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMEROW (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(GETCODEPAGES (funargs)? )
+	|	#(GUID LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(IF expression THEN expression ELSE expression )
+	|	ldbnamefunc 
+	|	lengthfunc // is also a pseudfn.
+	|	#(LINECOUNTER (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(MTIME LEFTPAREN (expression)? RIGHTPAREN )
+	|	nextvaluefunc // is also a pseudfn.
+		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
+	|	#(PAGENUMBER (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(PAGESIZE_KW (LEFTPAREN ID RIGHTPAREN)? )
+	|	rawfunc // is also a pseudfn.
+	|	#(SEEK LEFTPAREN (INPUT|OUTPUT|ID) RIGHTPAREN )
+	|	substringfunc // is also a pseudfn.
+	|	#(SUPER (parameterlist)? )
+	|	#(TIMEZONE LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(USERID (funargs)? )
+	|	#(USER (funargs)? )
+	|	sqlaggregatefunc  
+	|	argfunc
+	|	noargfunc
+	|	recordfunc
+	;
+
+argfunc
+	:	#(AACBIT funargs )
+	|	#(AAMSG funargs )
+	|	#(ABSOLUTE funargs )
+	|	#(ALIAS funargs )
+	|	#(ASC funargs )
+	|	#(BASE64DECODE funargs )
+	|	#(BASE64ENCODE funargs )
+	|	#(CANDO funargs )
+	|	#(CANQUERY funargs )
+	|	#(CANSET funargs )
+	|	#(CAPS funargs )
+	|	#(CHR funargs )
+	|	#(CODEPAGECONVERT funargs )
+	|	#(COLLATE funargs ) // See docs for BY phrase in FOR, PRESELECT, etc.
+	|	#(COMPARE funargs )
+	|	#(CONNECTED funargs )
+	|	#(COUNTOF funargs )
+	|	#(CURRENTRESULTROW funargs )
+	|	#(DATE funargs )
+	|	#(DATETIME funargs )
+	|	#(DATETIMETZ funargs )
+	|	#(DAY funargs )
+	|	#(DBCODEPAGE funargs )
+	|	#(DBCOLLATION funargs )
+	|	#(DBPARAM funargs )
+	|	#(DBRESTRICTIONS funargs )
+	|	#(DBTASKID funargs )
+	|	#(DBTYPE funargs )
+	|	#(DBVERSION funargs )
+	|	#(DECIMAL funargs )
+	|	#(DECRYPT funargs )
+	|	#(DYNAMICNEXTVALUE funargs )
+	|	#(ENCODE funargs )
+	|	#(ENCRYPT funargs )
+	|	#(EXP funargs )
+	|	#(FILL funargs )
+	|	#(FIRST funargs )
+	|	#(FIRSTOF funargs )
+	|	#(GENERATEPBEKEY funargs )
+	|	#(GETBITS funargs )
+	|	#(GETBYTE funargs )
+	|	#(GETBYTEORDER funargs )
+	|	#(GETBYTES funargs )
+	|	#(GETCOLLATIONS funargs )
+	|	#(GETDOUBLE funargs )
+	|	#(GETFLOAT funargs )
+	|	#(GETLICENSE funargs )
+	|	#(GETLONG funargs )
+	|	#(GETPOINTERVALUE funargs )
+	|	#(GETSHORT funargs )
+	|	#(GETSIZE funargs )
+	|	#(GETSTRING funargs )
+	|	#(GETUNSIGNEDSHORT funargs )
+	|	#(HEXDECODE funargs )
+	|	#(HEXENCODE funargs )
+	|	#(INDEX funargs )
+	|	#(INTEGER funargs )
+	|	#(INTERVAL funargs )
+	|	#(ISCODEPAGEFIXED funargs )
+	|	#(ISCOLUMNCODEPAGE funargs )
+	|	#(ISLEADBYTE funargs )
+	|	#(ISODATE funargs )
+	|	#(KBLABEL funargs )
+	|	#(KEYCODE funargs )
+	|	#(KEYFUNCTION funargs )
+	|	#(KEYLABEL funargs )
+	|	#(KEYWORD funargs )
+	|	#(KEYWORDALL funargs )
+	|	#(LAST funargs )
+	|	#(LASTOF funargs )
+	|	#(LC funargs )
+	|	#(LEFTTRIM funargs )
+	|	#(LIBRARY funargs )
+	|	#(LISTEVENTS funargs )
+	|	#(LISTQUERYATTRS funargs )
+	|	#(LISTSETATTRS funargs )
+	|	#(LISTWIDGETS funargs )
+	|	#(LOADPICTURE funargs )
+	|	#(LOG funargs )
+	|	#(LOGICAL funargs )
+	|	#(LOOKUP funargs )
+	|	#(MAXIMUM funargs )
+	|	#(MD5DIGEST funargs )
+	|	#(MEMBER funargs )
+	|	#(MINIMUM funargs )
+	|	#(MONTH funargs )
+	|	#(NORMALIZE funargs )
+	|	#(NUMENTRIES funargs )
+	|	#(NUMRESULTS funargs )
+	|	#(OSGETENV funargs )
+	|	#(PDBNAME funargs )
+	|	#(PROGRAMNAME funargs )
+	|	#(QUERYOFFEND funargs )
+	|	#(QUOTER funargs )
+	|	#(RINDEX funargs )
+	|	#(RANDOM funargs )
+	|	#(REPLACE funargs )
+	|	#(RGBVALUE funargs )
+	|	#(RIGHTTRIM funargs )
+	|	#(ROUND funargs )
+	|	#(SDBNAME funargs )
+	|	#(SEARCH funargs )
+	|	#(SETDBCLIENT funargs )
+	|	#(SETUSERID funargs )
+	|	#(SHA1DIGEST funargs )
+	|	#(SQRT funargs )
+	|	#(SSLSERVERNAME funargs )
+	|	#(STRING funargs )
+	|	#(SUBSTITUTE funargs )
+	|	#(TOROWID funargs )
+	|	#(TRIM funargs )
+	|	#(TRUNCATE funargs )
+	|	#(TYPEOF funargs )
+	|	#(VALIDEVENT funargs )
+	|	#(VALIDHANDLE funargs )
+	|	#(VALIDOBJECT funargs )
+	|	#(WEEKDAY funargs )
+	|	#(WIDGETHANDLE funargs )
+	|	#(YEAR funargs )
+	;
+
+recordfunc
+	:	#(AMBIGUOUS recordfunargs )
+	|	#(AVAILABLE recordfunargs )
+	|	#(CURRENTCHANGED recordfunargs )
+	|	#(DATASOURCEMODIFIED recordfunargs )
+	|	#(ERROR recordfunargs )
+	|	#(LOCKED recordfunargs )
+	|	#(NEW recordfunargs )
+	|	#(RECID recordfunargs )
+	|	#(RECORDLENGTH recordfunargs )
+	|	#(REJECTED recordfunargs )
+	|	#(ROWID recordfunargs )
+	|	#(ROWSTATE recordfunargs )
+	;
+recordfunargs
+	:	(LEFTPAREN RECORD_NAME RIGHTPAREN | RECORD_NAME)
+	;
+
+noargfunc
+	:	AACONTROL
+	|	AAPCONTROL
+	|	AASERIAL
+	|	CURRENTLANGUAGE
+	|	CURSOR
+	|	DATASERVERS
+	|	DBNAME
+	|	FRAMEDB
+	|	FRAMEFIELD
+	|	FRAMEFILE
+	|	FRAMEINDEX
+	|	FRAMENAME
+	|	FRAMEVALUE
+	|	GENERATEPBESALT
+	|	GENERATERANDOMKEY
+	|	GENERATEUUID
+	|	GATEWAYS
+	|	GOPENDING
+	|	ISATTRSPACE
+	|	LASTKEY
+	|	MACHINECLASS
+	|	MESSAGELINES
+	|	NOW
+	|	NUMALIASES
+	|	NUMDBS
+	|	OPSYS
+	|	OSDRIVES
+	|	OSERROR
+	|	PROCHANDLE
+	|	PROCSTATUS
+	|	PROGRESS
+	|	PROMSGS
+	|	PROPATH
+	|	PROVERSION
+	|	RETRY
+	|	RETURNVALUE
+	|	SCREENLINES
+	|	TERMINAL
+	|	TIME
+	|	TODAY
+	|	TRANSACTION
+	;
+
+
+parameter
+	:	#(BUFFER (RECORD_NAME | ID FOR RECORD_NAME ) )
+	|	#(PARAMETER expression EQUAL expression )
+	|	#(OUTPUT parameter_arg )
+	|	#(INPUTOUTPUT parameter_arg )
+	|	#(INPUT parameter_arg )
+	;
+parameter_arg
+	:	(	TABLEHANDLE field parameter_dataset_options
+		|	TABLE (FOR)? RECORD_NAME parameter_dataset_options
+		|	DATASET ID parameter_dataset_options
+		|	DATASETHANDLE field parameter_dataset_options
+		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
+		|	expression (AS datatype_com)?
+		)
+		(BYPOINTER|BYVARIANTPOINTER)?
+	;
+parameter_dataset_options
+	: (APPEND)? (BYVALUE|BYREFERENCE|BIND)?
+	;
+
+parameterlist
+	:	#(Parameter_list parameterlist_noroot )
+	;
+parameterlist_noroot
+	:	LEFTPAREN (parameter)? (COMMA parameter)* RIGHTPAREN
+	;
+
+eventlist
+	:	#(Event_list . (COMMA .)* )
+	;
+
+funargs
+	:	LEFTPAREN expression (COMMA expression)* RIGHTPAREN
+	;
+
+anyorvalue
+	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
+	|	TYPELESS_TOKEN
+	;
+filenameorvalue
+	:	valueexpression | FILENAME
+	;
+valueexpression
+	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
+	;
+expressionorvalue
+	:	valueexpression | expression
+	;
+
+findwhich
+	:	CURRENT | EACH | FIRST | LAST | NEXT | PREV
+	;
+
+lockhow
+	:	SHARELOCK | EXCLUSIVELOCK | NOLOCK
+	;
+
+
+expression
+	:	#(OR expression expression )
+	|	#(AND expression expression )
+	|	#(NOT expression )
+	|	#(MATCHES expression expression )
+	|	#(BEGINS expression expression )
+	|	#(CONTAINS expression expression )
+	|	#(EQ expression expression )
+	|	#(NE expression expression )
+	|	#(GTHAN expression expression )
+	|	#(GE expression expression )
+	|	#(LTHAN expression expression )
+	|	#(LE expression expression )
+	|	#(PLUS expression expression )
+	|	#(MINUS expression expression )
+	|	#(MULTIPLY expression expression )
+	|	#(DIVIDE expression expression )
+	|	#(MODULO expression expression )
+	|	#(UNARY_MINUS exprt )
+	|	#(UNARY_PLUS exprt )
+	|	exprt
+	;
+
+exprt
+	:	#(LEFTPAREN expression RIGHTPAREN )
+	|	constant
+	|	widattr
+	|	#(USER_FUNC parameterlist_noroot )
+	|	#(LOCAL_METHOD_REF parameterlist_noroot )
+	|	( #(NEW TYPE_NAME) )=> #(NEW TYPE_NAME parameterlist )
+	|	// SUPER is amibiguous between functioncall and systemhandlename
+		(	options{generateAmbigWarnings=false;}
+		:	functioncall
+		|	systemhandlename
+		)
+	|	field
+	|	#(Entered_func field (NOT)? ENTERED )
+	|	RECORD_NAME // for DISPLAY buffername, etc.
+	;
+
+widattr
+	:	#(	Widget_ref
+			(NORETURNVALUE)?
+			s_widget
+			(OBJCOLON . (array_subscript)? (method_param_list)? )+
+			(#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? (AS .)?
+		)
+	;
+
+gwidget
+	:	#(Widget_ref s_widget (#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? )
+	;
+
+widgetlist
+	:	gwidget (COMMA gwidget)*
+	;
+
+s_widget
+	:	widname	| (FIELD)? field
+	;
+
+widname
+	:	systemhandlename
+	|	DATASET ID
+	|	DATASOURCE ID
+	|	FRAME ID
+	|	MENU ID
+	|	SUBMENU ID
+	|	MENUITEM ID
+	|	BROWSE ID
+	|	QUERY ID
+	|	TEMPTABLE ID
+	|	BUFFER ID
+	|	XDOCUMENT ID
+	|	XNODEREF ID
+	|	SOCKET ID
+	;
+
+field
+	:	#(Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? ID (array_subscript)? )
+	;
+
+array_subscript
+	:	#(Array_subscript LEFTBRACE expression (FOR expression)? RIGHTBRACE )
+	;
+
+method_param_list
+	:	#(Method_param_list LEFTPAREN (parameter)? (COMMA (parameter)?)* RIGHTPAREN )
+	;
+
+constant
+	:	TRUE_KW | FALSE_KW | YES | NO | UNKNOWNVALUE | QSTRING | LEXDATE | NUMBER | NULL_KW
+	|	NOWAIT | SHARELOCK | EXCLUSIVELOCK | NOLOCK
+	|	BIGENDIAN
+	|	FINDCASESENSITIVE | FINDGLOBAL | FINDNEXTOCCURRENCE | FINDPREVOCCURRENCE | FINDSELECT | FINDWRAPAROUND
+	|	FUNCTIONCALLTYPE | GETATTRCALLTYPE | PROCEDURECALLTYPE | SETATTRCALLTYPE
+	|	HOSTBYTEORDER | LITTLEENDIAN
+	|	READAVAILABLE | READEXACTNUM
+	|	ROWUNMODIFIED | ROWDELETED | ROWMODIFIED | ROWCREATED
+	|	SAXCOMPLETE | SAXPARSERERROR | SAXRUNNING | SAXUNINITIALIZED
+	|	SEARCHSELF | SEARCHTARGET
+	|	WINDOWDELAYEDMINIMIZE | WINDOWMINIMIZED | WINDOWNORMAL | WINDOWMAXIMIZED
+	;
+
+systemhandlename
+	:	AAMEMORY | ACTIVEWINDOW | AUDITCONTROL | AUDITPOLICY | CLIPBOARD | CODEBASELOCATOR | COLORTABLE | COMPILER 
+	|	COMSELF | CURRENTWINDOW | DEBUGGER | DEFAULTWINDOW
+	|	ERRORSTATUS | FILEINFORMATION | FOCUS | FONTTABLE | LASTEVENT | LOGMANAGER
+	|	MOUSE | PROFILER | RCODEINFORMATION | SECURITYPOLICY | SELF | SESSION
+	|	SOURCEPROCEDURE | SUPER | TARGETPROCEDURE | TEXTCURSOR | THISOBJECT | THISPROCEDURE | WEBCONTEXT
+	;
+
+
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//                   begin PROGRESS syntax features, in alphabetical order
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+
+aatracestatement
+	:	#(	AATRACE
+			(	OFF state_end
+			|	#(ON (AALIST)? ) state_end
+			|	(stream_name)?
+				(	(TO|FROM|THROUGH) io_phrase state_end
+				|	CLOSE state_end
+				)
+			)
+		)
+	;
+
+accum_what
+	:	AVERAGE|COUNT|MAXIMUM|MINIMUM|TOTAL|SUBAVERAGE|SUBCOUNT|SUBMAXIMUM|SUBMINIMUM|SUBTOTAL
+	;
+
+accumulatestate
+	:	#(ACCUMULATE (display_item)* state_end )
+	;
+
+aggregatephrase
+	:	#(Aggregate_phrase LEFTPAREN (aggregate_opt)+ ( #(BY expression (DESCENDING)? ) )* RIGHTPAREN )
+	;
+aggregate_opt
+	:	#(AVERAGE (label_constant)? )
+	|	#(COUNT (label_constant)? )
+	|	#(MAXIMUM (label_constant)? )
+	|	#(MINIMUM (label_constant)? )
+	|	#(TOTAL (label_constant)? )
+	|	#(SUBAVERAGE (label_constant)? )
+	|	#(SUBCOUNT (label_constant)? )
+	|	#(SUBMAXIMUM (label_constant)? )
+	|	#(SUBMINIMUM (label_constant)? )
+	|	#(SUBTOTAL (label_constant)? )
+	;
+
+analyzestate
+	:	#(	ANALYZE filenameorvalue filenameorvalue
+			( #(OUTPUT filenameorvalue ) )?
+			(APPEND | ALL | NOERROR_KW)* state_end
+		)
+	;
+
+applystate
+	:	#(APPLY expression (#(TO gwidget ))? state_end )
+	;
+
+assign_opt
+	:	#(ASSIGN ( #(EQUAL . expression ) )+ )
+	;
+
+assignstate
+	:	#(ASSIGN assignment_list (NOERROR_KW)? state_end )
+	;
+assignment_list
+	:	RECORD_NAME (#(EXCEPT (field)*))?
+	|	(	assign_equal (#(WHEN expression))?
+		|	#(Assign_from_buffer field ) (#(WHEN expression))?
+		)*
+	;
+assign_equal
+	:	#(EQUAL (pseudfn|field) expression )
+	;
+
+atphrase
+	:	#(	AT
+			(	atphraseab atphraseab
+			|	expression
+			)
+			(COLONALIGNED|LEFTALIGNED|RIGHTALIGNED)?
+		)
+	;
+atphraseab
+	:	#(COLUMN expression )
+	|	#(COLUMNOF referencepoint )
+	|	#(ROW expression )
+	|	#(ROWOF referencepoint )
+	|	#(X expression )
+	|	#(XOF referencepoint )
+	|	#(Y expression )
+	|	#(YOF referencepoint )
+	;
+referencepoint
+	:	field ((PLUS|MINUS) expression)?
+	;
+
+bellstate
+	:	#(BELL state_end )
+	;
+
+buffercomparestate
+	:	#(	BUFFERCOMPARE
+			RECORD_NAME
+			(	#(EXCEPT (field)*)
+			|	#(USING (field)+)
+			)?
+			TO RECORD_NAME
+			(CASESENSITIVE|BINARY)?
+			( #(SAVE ( #(RESULT IN_KW) )? field ) )?
+			(EXPLICIT)?
+			(	COMPARES
+				(NOERROR_KW)?
+				block_colon
+				#(Code_block ( #(WHEN expression THEN blockorstate ) )* )
+				#(END (COMPARES)? )
+			)?
+			(NOLOBS)?
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+
+buffercopystate
+	:	#(	BUFFERCOPY RECORD_NAME
+			(	#(EXCEPT (field)*)
+			|	#(USING (field)+)
+			)?
+			TO RECORD_NAME
+			( #(ASSIGN assignment_list ) )?
+			(NOLOBS)?
+			(NOERROR_KW)?
+			state_end 
+		)
+	;
+
+callstate
+	:	#(CALL filenameorvalue (expressionorvalue)* state_end )
+	;
+
+casesens_or_not
+	:	#(Not_casesens NOT CASESENSITIVE )
+	|	CASESENSITIVE
+	;
+
+casestate
+	:	#(	CASE expression block_colon
+			#(	Code_block
+				(	#(WHEN case_expression THEN blockorstate )
+				)*
+			)
+			( #(OTHERWISE blockorstate ) )?
+			(EOF | #(END (CASE)? ) state_end)
+		)
+	;
+case_expression
+	:	(#(OR .))=> #(OR case_expression case_expression )
+	|	#(WHEN expression)
+	|	expression
+	;
+
+choosestate
+	:	#(	CHOOSE (ROW|FIELD)
+			( #(Form_item field (#(HELP constant))? ) )+
+			(	AUTORETURN 
+			|	#(COLOR anyorvalue) 
+			|	goonphrase
+			|	#(KEYS field )
+			|	NOERROR_KW 
+			|	#(PAUSE expression)
+			)*
+			(framephrase)?
+			state_end
+		)
+	;
+
+classstate
+	:	#(	CLASS TYPE_NAME
+			( #(INHERITS TYPE_NAME) )?
+			( #(IMPLEMENTS TYPE_NAME (COMMA TYPE_NAME)* ) )?
+			( FINAL )?
+			block_colon
+			code_block
+			#(END (CLASS)? )
+			state_end
+		)
+	;
+
+clearstate
+	:	#(CLEAR (#(FRAME ID))? (ALL)? (NOPAUSE)? state_end )
+	;
+
+closequerystate
+	:	#(CLOSE QUERY ID state_end )
+	;
+
+closestoredprocedurestate
+	:	#(	CLOSE
+			STOREDPROCEDURE ID
+			( #(EQUAL field PROCSTATUS ) )?
+			( #(WHERE PROCHANDLE EQ field ) )?
+			state_end
+		)
+	;
+
+collatephrase
+	:	#(COLLATE funargs (DESCENDING)? )
+	;
+
+color_expr
+	:	#(BGCOLOR expression )
+	|	#(DCOLOR expression )
+	|	#(FGCOLOR expression )
+	|	#(PFCOLOR expression )
+	;
+
+colorspecification
+	:	(options{greedy=true;}:color_expr)+
+	|	#(	COLOR (DISPLAY)? anyorvalue
+			( #(PROMPT anyorvalue) )?
+		)
+	;
+
+colorstate
+	:	#(	COLOR
+			(	( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )
+				( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )?
+			)?
+			(#(Form_item field (formatphrase)? ))*
+			(framephrase)? state_end
+		)
+	;
+
+columnformat
+	:	#(	Format_phrase
+			(	#(FORMAT expression)
+			|	label_constant
+			|	NOLABELS
+			|	#(COLUMNFONT expression )
+			|	#(COLUMNDCOLOR expression )
+			|	#(COLUMNBGCOLOR expression )
+			|	#(COLUMNFGCOLOR expression )
+			|	#(COLUMNPFCOLOR expression )
+			|	#(LABELFONT expression )
+			|	#(LABELDCOLOR expression )
+			|	#(LABELBGCOLOR expression )
+			|	#(LABELFGCOLOR expression )
+			|	#(LEXAT field (columnformat)? )
+			|	#(WIDTH NUMBER )
+			|	#(WIDTHPIXELS NUMBER )
+			|	#(WIDTHCHARS NUMBER )
+			)+ 
+		)
+	;
+
+comboboxphrase
+	:	#(	COMBOBOX
+			(	#(LISTITEMS constant (COMMA constant)* )
+			|	#(LISTITEMPAIRS constant (COMMA constant)* )
+			|	#(INNERLINES expression )
+			|	SORT
+			|	tooltip_expr
+			|	SIMPLE
+			|	DROPDOWN
+			|	DROPDOWNLIST
+			|	#(MAXCHARS NUMBER )
+			|	#(AUTOCOMPLETION (UNIQUEMATCH)? )
+			|	sizephrase
+			)*
+		)
+	;
+
+compilestate
+	:	#(	COMPILE filenameorvalue
+			(	#(ATTRSPACE (#(EQUAL expression))? )
+			|	NOATTRSPACE
+			|	#(SAVE (#(EQUAL expression))? ( #(INTO filenameorvalue ) )? )
+			|	#(	LISTING filenameorvalue
+					(	compile_append
+					|	#(PAGESIZE_KW expression)
+					|	#(PAGEWIDTH expression)
+					)*
+				)
+			|	#(XCODE expression )
+			|	#(XREF filenameorvalue (compile_append)? )
+			|	#(STRINGXREF filenameorvalue (compile_append)? )
+			|	#(STREAMIO (#(EQUAL expression))? )
+			|	#(MINSIZE (#(EQUAL expression))? )
+			|	#(LANGUAGES LEFTPAREN (compile_lang (COMMA compile_lang)*)? RIGHTPAREN )
+			|	#(TEXTSEGGROW #(EQUAL expression) )
+			|	#(DEBUGLIST filenameorvalue )
+			|	#(DEFAULTNOXLATE (#(EQUAL expression))? )
+			|	#(GENERATEMD5 (#(EQUAL expression))? )
+			|	#(PREPROCESS filenameorvalue )
+			|	#(USEREVVIDEO (#(EQUAL expression))? )
+			|	#(USEUNDERLINE (#(EQUAL expression))? )
+			|	#(V6FRAME (#(EQUAL expression))? )
+			|	NOERROR_KW
+			)*
+			state_end
+		)
+	;
+compile_lang
+	:	valueexpression | TYPELESS_TOKEN (LEXCOLON TYPELESS_TOKEN)*
+	;
+compile_append
+	:	#(APPEND (#(EQUAL expression))? )
+	;
+
+connectstate
+	:	#(CONNECT (NOERROR_KW|DDE|filenameorvalue)* state_end )
+	;
+	
+constructorstate
+	:	#(	CONSTRUCTOR (PUBLIC|PROTECTED) TYPE_NAME function_params
+			block_colon code_block #(END (CONSTRUCTOR)? ) state_end
+		)
+	;
+	
+convertphrase
+	:	#(	CONVERT 
+			( #(SOURCE (BASE64 | CODEPAGE expression (BASE64)?) ) )?
+			( #(TARGET (BASE64 | CODEPAGE expression (BASE64)?) ) )?
+		)
+	;
+	
+copylobstate
+	:	#(	COPYLOB (FROM)?
+			( FILE expression | (OBJECT)? expression )
+			( #(STARTING AT expression) )?
+			( #(FOR expression) )?
+			TO
+			(	FILE expression (APPEND)?
+			|	(OBJECT)? expression (OVERLAY AT expression (TRIM)?)?
+			)
+			( NOCONVERT | convertphrase )?
+			( NOERROR_KW )?
+		)
+	;
+
+createstate
+	:	#(CREATE RECORD_NAME (#(USING (ROWID|RECID) expression))? (NOERROR_KW)? state_end )
+	;
+
+create_whatever_args
+	:	field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)?
+	;
+
+createaliasstate
+	:	#(CREATE ALIAS anyorvalue FOR DATABASE anyorvalue (NOERROR_KW)? state_end )
+	;
+
+createautomationobjectstate
+	:	#(CREATE QSTRING field (#(CONNECT (#(TO expression))?))? (NOERROR_KW)? state_end )
+	;
+
+createbrowsestate
+	:	#(CREATE BROWSE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end )
+	;
+
+createbufferstate
+	:	#(	CREATE BUFFER field FOR TABLE expression
+			( #(BUFFERNAME expression) )?
+			(#(IN_KW WIDGETPOOL expression))?
+			(NOERROR_KW)? state_end
+		)
+	;
+
+createcallstate
+	:	#(CREATE CALL create_whatever_args state_end )
+	;
+
+createclientprincipalstate
+	:	#(CREATE CLIENTPRINCIPAL create_whatever_args state_end )
+	;
+
+createdatabasestate
+	:	#(	CREATE DATABASE expression 
+			( #(FROM expression (NEWINSTANCE)? ) )?
+			(REPLACE)? (NOERROR_KW)? state_end
+		)
+	;
+
+createdatasetstate
+	:	#(CREATE DATASET create_whatever_args state_end )
+	;
+
+createdatasourcestate
+	:	#(CREATE DATASOURCE create_whatever_args state_end )
+	;
+
+createquerystate
+	:	#(CREATE QUERY create_whatever_args state_end )
+	;
+
+createsaxreaderstate
+	:	#(CREATE SAXREADER create_whatever_args state_end )
+	;
+
+createsaxwriterstate
+	:	#(CREATE SAXWRITER create_whatever_args state_end )
+	;
+
+createserverstate
+	:	#(CREATE SERVER field (assign_opt)? state_end )
+	;
+
+createserversocketstate
+	:	#(CREATE SERVERSOCKET field (NOERROR_KW)? state_end )
+	;
+
+createsoapheaderstate
+	:	#(CREATE SOAPHEADER create_whatever_args state_end )
+	;
+
+createsoapheaderentryrefstate
+	:	#(CREATE SOAPHEADERENTRYREF create_whatever_args state_end )
+	;
+
+createsocketstate
+	:	#(CREATE SOCKET field (NOERROR_KW)? state_end )
+	;
+
+createtemptablestate
+	:	#(CREATE TEMPTABLE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? state_end )
+	;
+
+createwidgetstate
+	:	#(	CREATE
+			(	valueexpression
+			|	BUTTON | COMBOBOX | CONTROLFRAME | DIALOGBOX | EDITOR | FILLIN | FRAME | IMAGE
+			|	MENU | MENUITEM | RADIOSET | RECTANGLE | SELECTIONLIST | SLIDER
+			|	SUBMENU | TEXT | TOGGLEBOX | WINDOW
+			)
+			field
+			(#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end
+		)
+	;
+
+createwidgetpoolstate
+	:	#(CREATE WIDGETPOOL (expression)? (PERSISTENT)? (NOERROR_KW)? state_end )
+	;
+
+createxdocumentstate
+	:	#(CREATE XDOCUMENT create_whatever_args state_end )
+	;
+
+createxnoderefstate
+	:	#(CREATE XNODEREF create_whatever_args state_end )
+	;
+
+currentvaluefunc
+	:	#(CURRENTVALUE LEFTPAREN ID (COMMA ID)? RIGHTPAREN )
+	;
+
+datatype_com
+	:	SHORT | FLOAT | CURRENCY | UNSIGNEDBYTE | ERRORCODE | IUNKNOWN
+	;
+
+datatype_dll
+	:	CHARACTER | datatype_dll_native  
+	;
+
+datatype_dll_native
+	:	BYTE | DOUBLE | FLOAT | LONG | SHORT | UNSIGNEDSHORT
+	;
+
+datatype_field
+	:	BLOB | CLOB | datatype_var
+	;
+
+datatype_param
+	:	datatype_dll_native | datatype_var
+	;
+
+datatype_var
+	:	CHARACTER | COMHANDLE | DATE | DATETIME | DATETIMETZ
+		| DECIMAL | HANDLE | INTEGER | LOGICAL | LONGCHAR | MEMPTR
+		| RAW | RECID | ROWID | TYPE_NAME | WIDGETHANDLE
+	;
+
+ddeadvisestate
+	:	#(DDE ADVISE expression (START|STOP) ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeexecutestate
+	:	#(DDE EXECUTE expression COMMAND expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddegetstate
+	:	#(DDE GET expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeinitiatestate
+	:	#(DDE INITIATE field FRAME expression APPLICATION expression TOPIC expression (NOERROR_KW)? state_end )
+	;
+
+dderequeststate
+	:	#(DDE REQUEST expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddesendstate
+	:	#(DDE SEND expression SOURCE expression ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeterminatestate
+	:	#(DDE TERMINATE expression (NOERROR_KW)? state_end )
+	;
+
+def_shared
+	:	SHARED
+	|	#(NEW (GLOBAL)? SHARED )
+	;
+
+def_visib
+	:	( PRIVATE | PROTECTED | PUBLIC )
+	;
+
+definebrowsestate
+	:	#(	DEFINE (def_shared)? (def_visib)? BROWSE ID
+			(#(QUERY ID))? (lockhow|NOWAIT)*
+			(	#(	DISPLAY
+					(	#(	Form_item
+							(	(RECORD_NAME)=> RECORD_NAME
+							|	expression (columnformat)?
+							|	spacephrase
+							)
+						)
+					)*
+					(#(EXCEPT (field)*))?
+				)
+				(	#(	ENABLE
+						(	#(ALL (#(EXCEPT (field)*))?)
+						|	(	#(	Form_item field
+									(	#(HELP constant)
+									|	#(VALIDATE funargs)
+									|	AUTORETURN
+									|	DISABLEAUTOZAP
+									)*
+								)
+							)*
+						)
+					)
+				)?
+			)?
+			(display_with)*
+			(tooltip_expr)?
+			(#(CONTEXTHELPID expression))?
+			state_end
+		)
+	;
+
+definebufferstate
+	:	#(	DEFINE (def_shared)? (def_visib)? BUFFER ID
+			FOR (TEMPTABLE)? RECORD_NAME (PRESELECT)? (label_constant)? (namespace_uri)? (namespace_prefix)?
+			(#(FIELDS (field)* ))? state_end
+		)
+	;
+
+definebuttonstate
+	:	#(	DEFINE (def_shared)? (def_visib)? BUTTON ID
+			(	AUTOGO
+			|	AUTOENDKEY
+			|	DEFAULT
+			|	color_expr
+			|	#(CONTEXTHELPID expression)
+			|	DROPTARGET
+			|	#(FONT expression)
+			|	#(IMAGEDOWN (imagephrase_opt)+ )
+			|	#(IMAGE (imagephrase_opt)+ )
+			|	#(IMAGEUP (imagephrase_opt)+ )
+			|	#(IMAGEINSENSITIVE (imagephrase_opt)+ )
+			|	#(MOUSEPOINTER expression )
+			|	label_constant
+			|	#(LIKE field (VALIDATE)?)
+			|	FLATBUTTON
+			|	#(NOFOCUS (FLATBUTTON)? )
+			|	NOCONVERT3DCOLORS
+			|	tooltip_expr
+			|	sizephrase (MARGINEXTRA)?
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definedatasetstate
+	:	#(	DEFINE (def_shared)? (def_visib)? DATASET ID (namespace_uri)? (namespace_prefix)? (REFERENCEONLY)?
+			FOR RECORD_NAME (COMMA RECORD_NAME)*
+			( data_relation ( (COMMA)? data_relation)* )?
+			state_end
+		)
+	;
+data_relation
+	:	#(	DATARELATION (ID)?
+			FOR RECORD_NAME COMMA RECORD_NAME (field_mapping_phrase)? (REPOSITION)?
+		)
+	;
+field_mapping_phrase
+	:	#(RELATIONFIELDS LEFTPAREN field COMMA field ( COMMA field COMMA field )* RIGHTPAREN )
+	;
+
+definedatasourcestate
+	:	#(	DEFINE (def_shared)? (def_visib)? DATASOURCE ID
+			FOR (#(QUERY ID))?
+			(source_buffer_phrase)? (COMMA source_buffer_phrase)*
+			state_end
+		)
+	;
+source_buffer_phrase
+	:	#(RECORD_NAME ( KEYS LEFTPAREN ( ROWID | field (COMMA field)* ) RIGHTPAREN )? )
+	;
+
+defineframestate
+	:	#(	DEFINE (def_shared)? (def_visib)? FRAME ID
+			(form_item)*
+			(	#(HEADER (display_item)+ )
+			|	#(BACKGROUND (display_item)+ )
+			)?
+			(#(EXCEPT (field)*))?  (framephrase)?  state_end
+		)
+	;
+
+defineimagestate
+	:	#(	DEFINE (def_shared)? (def_visib)? IMAGE ID
+			(	#(LIKE field (VALIDATE)?)
+			|	imagephrase_opt 
+			|	sizephrase
+			|	color_expr
+			|	CONVERT3DCOLORS
+			|	tooltip_expr
+			|	#(STRETCHTOFIT (RETAINSHAPE)? )
+			|	TRANSPARENT
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definemenustate
+	:	#(	DEFINE (def_shared)? (def_visib)? MENU ID
+			(menu_opt)* (menu_list_item)* state_end
+		)
+	;
+menu_opt
+	:	color_expr
+	|	#(FONT expression)
+	|	#(LIKE field (VALIDATE)?)
+	|	#(TITLE expression)
+	|	MENUBAR
+	|	PINNABLE
+	|	SUBMENUHELP
+	;
+menu_list_item
+	:	(	#(	MENUITEM ID
+				(	#(ACCELERATOR expression )
+				|	color_expr
+				|	DISABLED
+				|	#(FONT expression)
+				|	label_constant
+				|	READONLY
+				|	TOGGLEBOX
+				)*
+				(triggerphrase)? 
+			)
+		|	#(SUBMENU ID (DISABLED | label_constant | #(FONT expression) | color_expr)* )
+		|	#(RULE (#(FONT expression) | color_expr)* )
+		|	SKIP
+		)
+		// You can have PERIOD between menu items.
+		((PERIOD (RULE|SKIP|SUBMENU|MENUITEM))=> PERIOD)?
+	;
+
+defineparameterstate
+	:	#(	DEFINE (def_shared)? (def_visib)?
+			(	PARAMETER BUFFER ID FOR RECORD_NAME (PRESELECT)? (label_constant)? (#(FIELDS (field)* ))?
+			|	(INPUT|OUTPUT|INPUTOUTPUT|RETURN) PARAMETER
+				(	TABLE FOR RECORD_NAME (APPEND|BIND)*
+				|	TABLEHANDLE (FOR)? ID (APPEND|BIND)*
+				|	DATASET FOR ID (APPEND|BYVALUE|BIND)*
+				|	DATASETHANDLE ID (APPEND|BYVALUE|BIND)*
+				|	ID defineparam_var (triggerphrase)?
+				)
+			)
+			state_end
+		)
+	;
+defineparam_var
+	:	(	#(	AS
+				(	(HANDLE (TO)? datatype_dll)=> HANDLE (TO)? datatype_dll
+				|	CLASS TYPE_NAME
+				|	datatype_param
+				)
+			)
+		)?
+		(	options{greedy=true;}
+		:	casesens_or_not | #(FORMAT expression) | #(DECIMALS expression ) | #(LIKE field (VALIDATE)?)
+		|	initial_constant | label_constant | NOUNDO | extentphrase
+		)*
+	;
+
+definequerystate
+	:	#(	DEFINE (def_shared)? (def_visib)? QUERY ID
+			FOR RECORD_NAME (record_fields)?
+			(COMMA RECORD_NAME (record_fields)?)*
+			( #(CACHE expression) | SCROLLING | RCODEINFORMATION)*
+			state_end
+		)
+	;
+
+definerectanglestate
+	:	#(	DEFINE (def_shared)? (def_visib)? RECTANGLE ID
+			(	NOFILL
+			|	#(EDGECHARS expression )
+			|	#(EDGEPIXELS expression )
+			|	color_expr
+			|	GRAPHICEDGE
+			|	#(LIKE field (VALIDATE)?)
+			|	sizephrase
+			|	tooltip_expr
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definestreamstate
+	:	#(	DEFINE (def_shared)? (def_visib)? STREAM ID state_end )
+	;
+
+definesubmenustate
+	:	#(	DEFINE (def_shared)? (def_visib)? SUBMENU ID
+			(menu_opt)* (menu_list_item)* state_end
+		)
+	;
+   
+definetemptablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? TEMPTABLE ID
+			(UNDO|NOUNDO)?
+			(namespace_uri)? (namespace_prefix)?
+			(REFERENCEONLY)?
+			(def_table_like)?
+			(label_constant)?
+			(#(BEFORETABLE ID))?
+			(RCODEINFORMATION)?
+			(def_table_field)*
+			(	#(	INDEX ID ( (AS|IS)? (UNIQUE|PRIMARY|WORDINDEX) )*
+					( ID (ASCENDING|DESCENDING|CASESENSITIVE)* )+
+				)
+			)*
+			state_end
+		)
+	;
+def_table_like
+	:	#(	LIKE RECORD_NAME (VALIDATE)?
+			( #(USEINDEX ID ((AS|IS) PRIMARY)? ) )*
+		)
+	;
+def_table_field
+	:	#(FIELD ID (fieldoption)* )
+	;
+   
+defineworktablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? WORKTABLE ID
+			(NOUNDO)? (def_table_like)? (label_constant)? (def_table_field)* state_end
+		)
+	;
+
+definevariablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? VARIABLE ID
+			(fieldoption)* (triggerphrase)? state_end
+		)
+	;
+
+deletestate
+	:	#(DELETE_KW RECORD_NAME (#(VALIDATE funargs))? (NOERROR_KW)? state_end )
+	;
+
+deletealiasstate
+	:	#(DELETE_KW ALIAS (ID|QSTRING|valueexpression) state_end )
+	;
+
+deleteobjectstate
+	:	#(DELETE_KW OBJECT expression (NOERROR_KW)? state_end )
+	;
+
+deleteprocedurestate
+	:	#(DELETE_KW PROCEDURE expression (NOERROR_KW)? state_end )
+	;
+
+deletewidgetstate
+	:	#(DELETE_KW WIDGET (gwidget)* state_end )
+	;
+
+deletewidgetpoolstate
+	:	#(DELETE_KW WIDGETPOOL (expression)? (NOERROR_KW)? state_end )
+	;
+	
+destructorstate
+	:	#(	DESTRUCTOR PUBLIC TYPE_NAME LEFTPAREN RIGHTPAREN block_colon
+			code_block #(END (DESTRUCTOR)? ) state_end
+		)
+	;
+	
+dictionarystate
+	:	#(DICTIONARY state_end )
+	;
+
+disablestate
+	:	#(DISABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (framephrase)? state_end )
+	;
+
+disabletriggersstate
+	:	#(DISABLE TRIGGERS FOR (DUMP|LOAD) OF RECORD_NAME (ALLOWREPLICATION)? state_end )
+	;
+
+disconnectstate
+	:	#(DISCONNECT filenameorvalue (NOERROR_KW)? state_end )
+	;
+
+displaystate
+	:	#(	DISPLAY (stream_name)? (UNLESSHIDDEN)? (display_item)*
+			(#(EXCEPT (field)*))? (#(IN_KW WINDOW expression))?
+			(display_with)*
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+display_item
+	:	#(	Form_item
+			(	skipphrase
+			|	spacephrase
+			|	(expression|ID) (aggregatephrase|formatphrase)*
+			)
+		)
+	;
+display_with
+	:	(#(WITH BROWSE ID))=> #(WITH BROWSE ID )
+	|	framephrase
+	;
+
+dostate
+	:	#(DO (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
+	;
+
+downstate
+	:	#(DOWN ((stream_name (expression)?) | (expression (stream_name)?))? (framephrase)? state_end )
+	;
+
+// drop - see SQL grammar
+
+dynamiccurrentvaluefunc
+	:	#(DYNAMICCURRENTVALUE funargs)
+	;
+
+editorphrase
+	:	#(	EDITOR
+			(	#(INNERCHARS expression )
+			|	#(INNERLINES expression )
+			|	#(BUFFERCHARS expression )
+			|	#(BUFFERLINES expression )
+			|	LARGE
+			|	#(MAXCHARS expression )
+			|	NOBOX
+			|	NOWORDWRAP
+			|	SCROLLBARHORIZONTAL
+			|	SCROLLBARVERTICAL
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+emptytemptablestate
+	:	#(EMPTY TEMPTABLE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+enablestate
+	:	#(ENABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (#(IN_KW WINDOW expression))? (framephrase)? state_end )
+	;
+
+editingphrase
+	:	#(Editing_phrase (ID LEXCOLON)? EDITING block_colon (blockorstate)* END )
+	;
+
+entryfunc
+	:	#(ENTRY funargs )
+	;
+
+exportstate
+	:	#(EXPORT (stream_name)? (#(DELIMITER constant))? (display_item)* (#(EXCEPT (field)*))? (NOLOBS)? state_end )
+	;
+
+extentphrase
+	:	#(EXTENT (expression)? )
+	;
+
+fieldoption
+	:	#(	AS
+			(	CLASS TYPE_NAME
+			|	datatype_field
+			)
+		)
+	|	casesens_or_not
+	|	color_expr
+	|	#(COLUMNCODEPAGE expression )
+	|	#(CONTEXTHELPID expression)
+	|	#(DECIMALS expression )
+	|	DROPTARGET
+	|	extentphrase
+	|	#(FONT expression)
+	|	#(FORMAT expression)
+	|	#(HELP constant)
+	|	initial_constant
+	|	label_constant
+	|	#(LIKE field (VALIDATE)? )
+	|	#(MOUSEPOINTER expression )
+	|	NOUNDO
+	|	viewasphrase
+	|	TTCODEPAGE
+	|	xml_data_type
+	|	xml_node_type
+	;
+
+fillinphrase
+	:	#(FILLIN (NATIVE | sizephrase | tooltip_expr)* )
+	;
+
+findstate
+	:	#(FIND (findwhich)? recordphrase (NOWAIT|NOPREFETCH|NOERROR_KW)* state_end )
+	;
+
+forstate
+	:	#(FOR for_record_spec (block_opt)* block_colon code_block block_end )
+	;
+for_record_spec
+	:	(findwhich)? recordphrase (COMMA (findwhich)? recordphrase)*
+	;
+
+form_item
+	:	#(	Form_item
+			(	RECORD_NAME
+			|	#(TEXT LEFTPAREN (form_item)* RIGHTPAREN )
+			|	constant (formatphrase)?
+			|	spacephrase
+			|	skipphrase
+			|	widget_id
+			|	CARET
+			|	field (aggregatephrase|formatphrase)*
+			|	assign_equal
+			)
+		)
+	;
+
+formstate
+	:	#(	FORMAT
+			(form_item)*
+			(	#(HEADER (display_item)+ )
+			|	#(BACKGROUND (display_item)+ )
+			)?
+			( #(EXCEPT (field)*) )?
+			(framephrase)?
+			state_end
+		)
+	;
+
+formatphrase
+	:	#(	Format_phrase
+			(	#(AS datatype_var )
+			|	atphrase
+			|	ATTRSPACE
+			|	NOATTRSPACE
+			|	AUTORETURN
+			|	color_expr
+			|	#(CONTEXTHELPID expression)
+			|	BLANK 
+			|	#(COLON expression )
+			|	#(TO expression)
+			|	DEBLANK 
+			|	DISABLEAUTOZAP 
+			|	#(FONT expression ) 
+			|	#(FORMAT expression)
+			|	#(HELP constant)
+			|	label_constant
+			|	#(LEXAT field (formatphrase)? )
+			|	#(LIKE field )
+			|	NOLABELS
+			|	NOTABSTOP 
+			|	#(VALIDATE funargs)
+			|	#(WHEN expression)
+			|	viewasphrase
+			|	widget_id
+			)+
+		)
+	;
+
+framephrase
+	:	#(	WITH
+			(	#(ACCUMULATE (expression)? )
+			|	ATTRSPACE | NOATTRSPACE
+			|	#(CANCELBUTTON field )
+			|	CENTERED 
+			|	#(COLUMN expression )
+			|	CONTEXTHELP | CONTEXTHELPFILE expression
+			|	#(DEFAULTBUTTON field )
+			|	EXPORT
+			|	FITLASTCOLUMN
+			|	#(FONT expression )
+			|	FONTBASEDLAYOUT
+			|	#(FRAME ID)
+			|	#(LABELFONT expression )
+			|	#(LABELDCOLOR expression )
+			|	#(LABELFGCOLOR expression )
+			|	#(LABELBGCOLOR expression )
+			|	MULTIPLE | SINGLE | SEPARATORS | NOSEPARATORS | NOASSIGN| NOROWMARKERS
+			|	NOSCROLLBARVERTICAL | SCROLLBARVERTICAL
+			|	#(ROWHEIGHTCHARS expression )
+			|	#(ROWHEIGHTPIXELS expression )
+			|	EXPANDABLE | DROPTARGET | NOAUTOVALIDATE | NOCOLUMNSCROLLING
+			|	KEEPTABORDER | NOBOX | NOEMPTYSPACE | NOHIDE | NOLABELS | USEDICTEXPS | NOVALIDATE 
+			|	NOHELP | NOUNDERLINE | OVERLAY | PAGEBOTTOM | PAGETOP | NOTABSTOP
+			|	#(RETAIN expression  )
+			|	#(ROW expression )
+			|	SCREENIO | STREAMIO
+			|	#(SCROLL expression )
+			|	SCROLLABLE | SIDELABELS 
+			|	stream_name | THREED
+			|	tooltip_expr
+			|	TOPONLY | USETEXT
+			|	V6FRAME | USEREVVIDEO | USEUNDERLINE
+			|	#(	VIEWAS
+					(	#(DIALOGBOX (DIALOGHELP (expression)?)? )
+					|	MESSAGELINE
+					|	STATUSBAR
+					|	#(TOOLBAR (ATTACHMENT (TOP|BOTTOM|LEFT|RIGHT))? )
+					)
+				)
+			|	#(WIDTH expression )
+			|	#(IN_KW WINDOW expression)
+			|	colorspecification | atphrase | sizephrase | titlephrase 
+			|	#(With_columns expression COLUMNS )
+			|	#(With_down expression DOWN )
+			|	DOWN
+			|	widget_id
+			|	WITH
+			)*
+		)
+	;
+
+functionstate
+	:	#(	FUNCTION ID
+			(RETURNS|RETURN)?
+			( CLASS TYPE_NAME | datatype_var ) 
+			(PRIVATE)?
+			( function_params )?
+			(	FORWARDS (LEXCOLON|PERIOD|EOF)
+			|	(IN_KW SUPER)=> IN_KW SUPER (LEXCOLON|PERIOD|EOF)
+			|	(MAP (TO)? ID)? IN_KW expression (LEXCOLON|PERIOD|EOF)
+			|	block_colon
+				code_block
+				(	EOF
+				|	#(END (FUNCTION)? ) state_end
+				)
+			)
+		)
+	;
+function_params
+	:	#(Parameter_list LEFTPAREN (function_param)? (COMMA function_param)* RIGHTPAREN )
+	;
+function_param
+	:	#(BUFFER (ID)? FOR RECORD_NAME (PRESELECT)? )
+	|	#(INPUT function_param_arg )
+	|	#(OUTPUT function_param_arg )
+	|	#(INPUTOUTPUT function_param_arg )
+	;
+function_param_arg
+	:	TABLE (FOR)? RECORD_NAME (APPEND)? (BIND)?
+	|	TABLEHANDLE (FOR)? ID (APPEND)? (BIND)?
+	|	(DATASET|DATASETHANDLE) ID (APPEND)? (BIND)?
+	|	(ID AS)? (CLASS TYPE_NAME | datatype_var) (extentphrase)?
+	;
+
+getstate
+	:	#(GET findwhich ID (lockhow|NOWAIT)* state_end )
+	;
+
+getkeyvaluestate
+	:	#(GETKEYVALUE SECTION expression KEY (DEFAULT|expression) VALUE field state_end )
+	;
+
+goonphrase
+	:	#(GOON LEFTPAREN goon_elem ((options{greedy=true;}:COMMA)? goon_elem)* RIGHTPAREN )
+	;
+goon_elem
+	:	~(RIGHTPAREN) ( (OF)=> OF gwidget)?
+	;
+
+hidestate
+	:	#(HIDE (stream_name)? (MESSAGE|ALL|(gwidget)*) (NOPAUSE)? (#(IN_KW WINDOW expression))? state_end )
+	;
+
+ifstate
+	:	#(	IF expression THEN (blockorstate)?
+			( #(ELSE (blockorstate)? ) )?
+		)
+	;
+
+imagephrase_opt
+	:	#(FILE expression )
+	|	#(IMAGESIZE expression BY expression )
+	|	#(IMAGESIZECHARS expression BY expression )
+	|	#(IMAGESIZEPIXELS expression BY expression )
+	|	#(	FROM
+			( X expression | Y expression | ROW expression | COLUMN expression )
+			( X expression | Y expression | ROW expression | COLUMN expression )
+		)
+	;
+
+importstate
+	:	#(	IMPORT (stream_name)?
+			( #(DELIMITER constant) | UNFORMATTED )?
+			(	RECORD_NAME (#(EXCEPT (field)*))?
+			|	(field|CARET)+
+			)?
+			(NOLOBS)? (NOERROR_KW)? state_end
+		)
+	;
+
+initial_constant
+	:	#(	INITIAL
+			(	LEFTBRACE (TODAY|constant) (COMMA (TODAY|constant))* RIGHTBRACE
+			|	(TODAY|constant)
+			)
+		)
+	;
+
+inputclearstate
+	:	#(INPUT CLEAR state_end )
+	;
+
+inputclosestate
+	:	#(INPUT (stream_name)? CLOSE state_end )
+	;
+
+inputfromstate
+	:	#(INPUT (stream_name)? FROM io_phrase state_end )
+	;
+   
+inputthroughstate
+	:	#(INPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+inputoutputclosestate
+	:	#(INPUTOUTPUT (stream_name)? CLOSE state_end )
+	;
+
+inputoutputthroughstate
+	:	#(INPUTOUTPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+insertstate
+	:	#(INSERT RECORD_NAME (#(EXCEPT (field)*))? (#(USING (ROWID|RECID) expression))? (framephrase)? (NOERROR_KW)? state_end )
+	;
+	
+interfacestate
+	:	#(INTERFACE TYPE_NAME block_colon code_block #(END (INTERFACE)?) state_end )
+	;
+	
+io_phrase
+	:	(	#(OSDIR LEFTPAREN expression RIGHTPAREN (NOATTRLIST)? )
+		|	#(PRINTER  (.)? )
+		|	TERMINAL
+		|	(valueexpression | FILENAME) *
+		)
+		(	APPEND
+		|	BINARY
+		|	COLLATE
+		|	#(CONVERT ((SOURCE|TARGET) expression)* )
+		|	#(LOBDIR filenameorvalue )
+		|	NOCONVERT
+		|	ECHO | NOECHO
+		|	KEEPMESSAGES 
+		|	LANDSCAPE
+		|	#(MAP anyorvalue )
+		|	NOMAP
+		|	#(NUMCOPIES anyorvalue )
+		|	PAGED
+		|	#(PAGESIZE_KW anyorvalue )
+		|	PORTRAIT
+		|	UNBUFFERED 
+		)*
+	;
+
+label_constant
+	:	#(COLUMNLABEL constant (COMMA constant)* )
+	|	#(LABEL constant (COMMA constant)* )
+	;
+
+ldbnamefunc
+	:	#(LDBNAME LEFTPAREN (#(BUFFER RECORD_NAME) | expression) RIGHTPAREN )
+	;
+
+leavestate
+	:	#(LEAVE (BLOCK_LABEL)? state_end )
+	;
+
+lengthfunc
+	:	#(LENGTH funargs )
+	;
+
+loadstate
+	:	#(	LOAD expression
+			(	#(DIR expression )
+			|	APPLICATION
+			|	DYNAMIC
+			|	NEW
+			|	#(BASEKEY expression )
+			|	NOERROR_KW
+			)*
+			state_end
+		)
+	;
+
+loadpicturefunc 
+	:	#(LOADPICTURE (funargs)? )
+	;
+
+messagestate
+	:	#(	MESSAGE
+			( #(COLOR anyorvalue) )?
+			( #(Form_item (skipphrase | expression) ) )*
+			(	#(	VIEWAS ALERTBOX
+					(MESSAGE|QUESTION|INFORMATION|ERROR|WARNING)?
+					(BUTTONS (YESNO|YESNOCANCEL|OK|OKCANCEL|RETRYCANCEL) )?
+					(#(TITLE expression))?
+				)
+			|	#(SET field (formatphrase)? )
+			|	#(UPDATE field (formatphrase)? )
+			)*
+			( #(IN_KW WINDOW expression) )?
+			state_end
+		)
+	;
+
+methodstate
+	:	#(	METHOD (PRIVATE|PROTECTED|PUBLIC|OVERRIDE|FINAL)*
+			(	VOID
+			|	CLASS TYPE_NAME
+			|	datatype_var
+			)
+			ID
+			function_params
+			(	// Ambiguous on PERIOD, since a block_colon may be a period, and we may also
+				// be at the end of the method declaration for an INTERFACE.
+				// We predicate on the next node being Code_block.
+				// (Upper/lowercase matters. Node: Code_block. Rule/branch: code_block.)
+				(block_colon Code_block)=> block_colon code_block #(END (METHOD)? ) state_end
+			|	state_end
+			)
+		)
+	;
+
+namespace_prefix
+	:	#(NAMESPACEPREFIX constant )
+	;
+namespace_uri
+	:	#(NAMESPACEURI constant )
+	;
+
+nextstate
+	:	#(NEXT (BLOCK_LABEL)? state_end )
+	;
+
+nextpromptstate
+	:	#(NEXTPROMPT field (framephrase)? state_end )
+	;
+
+nextvaluefunc
+	:	#(NEXTVALUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN )
+	;
+
+onstate
+	:	#(	ON
+			(	(ASSIGN|CREATE|DELETE_KW|FIND|WRITE)=>
+				(	(CREATE|DELETE_KW|FIND) OF RECORD_NAME (label_constant)?
+				|	WRITE OF RECORD_NAME (label_constant)?
+					((NEW (BUFFER)? ID) (label_constant)?)?
+					((OLD (BUFFER)? ID) (label_constant)?)? 
+				|	ASSIGN OF field
+					(#(TABLE LABEL constant))?
+					(OLD (VALUE)? ID (options{greedy=true;}:defineparam_var)?)?
+		 		)
+				(OVERRIDE)?
+				(	REVERT state_end
+				|	PERSISTENT runstate
+				|	blockorstate
+				)
+			|	// ON keylabel keyfunction.
+				(. . state_end)=> . . state_end
+			|	eventlist
+				(	ANYWHERE
+				|	OF widgetlist
+					(OR eventlist OF widgetlist)*
+					(ANYWHERE)?
+				)
+				(	REVERT state_end
+				|	PERSISTENT RUN filenameorvalue
+					( #(IN_KW expression) )?
+					(	#(	Parameter_list
+							LEFTPAREN (INPUT)? expression
+							(COMMA (INPUT)? expression)*
+							RIGHTPAREN
+						)
+					)?
+					state_end
+				|	blockorstate
+				)
+			)
+		)
+	;
+
+on___phrase
+	:	#(	ON (ENDKEY|ERROR|STOP|QUIT)
+			( #(UNDO (BLOCK_LABEL)? ) )?
+			(	COMMA
+				(	#(LEAVE (BLOCK_LABEL)? )
+				|	#(NEXT (BLOCK_LABEL)? )
+				|	#(RETRY (BLOCK_LABEL)? )
+				|	#(RETURN (return_options)? )
+				)
+			)?
+		)
+	;
+
+openquerystate
+	:	#(	OPEN QUERY ID (FOR|PRESELECT) for_record_spec
+			(	querytuningphrase
+			|	#(BY expression (DESCENDING)? )
+			|	collatephrase
+			|	INDEXEDREPOSITION
+			|	#(MAXROWS expression )
+			)*
+			state_end
+		)
+	;
+
+osappendstate
+	:	#(OSAPPEND anyorvalue anyorvalue state_end )
+	;
+
+oscommandstate
+	:	#(OS400		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(BTOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(DOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(MPE		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(OS2		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(OSCOMMAND	(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(UNIX		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(VMS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	;
+
+oscopystate
+	:	#(OSCOPY anyorvalue anyorvalue state_end )
+	;
+
+oscreatedirstate
+	:	#(OSCREATEDIR (anyorvalue)+ state_end )
+	;
+
+osdeletestate
+	:	#(OSDELETE (valueexpression | ~(VALUE|RECURSIVE|PERIOD) )+ (RECURSIVE)? state_end )
+	;
+
+osrenamestate
+	:	#(OSRENAME anyorvalue anyorvalue state_end )
+	;
+
+outputclosestate
+	:	#(OUTPUT (stream_name)? CLOSE state_end )
+	;
+
+outputthroughstate
+	:	#(OUTPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+outputtostate
+	:	#(OUTPUT (stream_name)? TO io_phrase state_end )
+	;
+
+pagestate
+	:	#(PAGE (stream_name)? state_end )
+	;
+
+pausestate
+	:	#(	PAUSE (expression)?
+			(	BEFOREHIDE
+			|	#(MESSAGE constant )
+			|	NOMESSAGE
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+procedurestate
+	:	#(	PROCEDURE ID
+			(	#(	EXTERNAL constant
+					(	CDECL_KW
+					|	PASCAL_KW
+					|	STDCALL_KW
+					|	#(ORDINAL expression )
+					|	PERSISTENT
+					)*
+				)
+			|	PRIVATE
+			|	IN_KW SUPER
+			)?
+			block_colon code_block (EOF | #(END (PROCEDURE)?) state_end)
+		)
+	;
+
+processeventsstate
+	:	#(PROCESS EVENTS state_end )
+	;
+
+promptforstate
+	:	#(	PROMPTFOR (stream_name)? (UNLESSHIDDEN)? (form_item)*
+			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?
+			state_end
+		)
+	;
+
+publishstate
+	:	#(PUBLISH expression (#(FROM expression) )? (parameterlist)? state_end )
+	;
+
+putstate
+	:	#(	PUT	
+			(stream_name)? (CONTROL|UNFORMATTED)?
+			(	( #(NULL_KW (LEFTPAREN)? ) )=> #(NULL_KW (funargs)? )
+			|	skipphrase
+			|	spacephrase
+			|	expression (#(FORMAT expression)|#(AT expression )|#(TO expression))*
+			)*
+			state_end
+		)
+	;
+
+putcursorstate
+	:	#(PUT CURSOR (OFF | (#(ROW expression)|#(COLUMN expression))* ) state_end )
+	;
+
+putscreenstate
+	:	#(	PUT SCREEN
+			( ATTRSPACE | NOATTRSPACE | #(COLOR anyorvalue) | #(COLUMN expression) | #(ROW expression) | expression )*
+			state_end
+		)
+	;
+
+putkeyvaluestate
+	:	#(	PUTKEYVALUE
+			(	SECTION expression KEY (DEFAULT|expression) VALUE expression
+			|	(COLOR|FONT) (expression|ALL)
+			)
+			(NOERROR_KW)? state_end
+		)
+	;
+
+querytuningphrase
+	:	#(	QUERYTUNING LEFTPAREN
+			(	ARRAYMESSAGE | NOARRAYMESSAGE
+			|	BINDWHERE | NOBINDWHERE
+			|	#(CACHESIZE NUMBER (ROW|BYTE)? )
+			|	#(DEBUG (SQL|EXTENDED|CURSOR|DATABIND|PERFORMANCE|VERBOSE|SUMMARY|NUMBER)? )
+			|	NODEBUG
+			|	DEFERLOBFETCH
+			|	#(HINT expression )
+			|	INDEXHINT | NOINDEXHINT
+			|	JOINBYSQLDB | NOJOINBYSQLDB
+			|	LOOKAHEAD | NOLOOKAHEAD
+			|	ORDEREDJOIN
+			|	REVERSEFROM
+			|	SEPARATECONNECTION | NOSEPARATECONNECTION
+			)*
+			RIGHTPAREN
+		)
+	;
+
+quitstate
+	:	#(QUIT state_end )
+	;
+
+radiosetphrase
+	:	#(	RADIOSET
+			(	#(HORIZONTAL (EXPAND)? )
+			|	VERTICAL
+			|	(sizephrase)
+			|	#(RADIOBUTTONS 
+					(QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY)
+					(COMMA (QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY))*
+				)
+			|	tooltip_expr
+			)*
+		)
+	;
+
+rawfunc
+	:	#(RAW funargs )
+	;
+
+rawtransferstate
+	:	#(RAWTRANSFER (BUFFER|FIELD)? (RECORD_NAME|field) TO (BUFFER|FIELD)? (RECORD_NAME|field) (NOERROR_KW)? state_end )
+	;
+
+readkeystate
+	:	#(READKEY (stream_name)? (#(PAUSE expression))? state_end )
+	;
+
+repeatstate
+	:	#(REPEAT (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
+	;
+
+record_fields
+	:	#(FIELDS (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
+	|	#(EXCEPT (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
+	;
+
+recordphrase
+	:	#(	RECORD_NAME (record_fields)? (options{greedy=true;}:TODAY|constant)?
+			(	#(LEFT OUTERJOIN )
+			|	OUTERJOIN
+			|	#(OF RECORD_NAME )
+			|	#(WHERE (expression)? )
+			|	#(USEINDEX ID )
+			|	#(USING field (AND field)* )
+			|	lockhow
+			|	NOWAIT
+			|	NOPREFETCH
+			|	NOERROR_KW
+			)*
+		)
+	;
+
+releasestate
+	:	#(RELEASE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+releaseexternalstate
+	:	#(RELEASE EXTERNAL (PROCEDURE)? expression (NOERROR_KW)? state_end )
+	;
+
+releaseobjectstate
+	:	#(RELEASE OBJECT expression (NOERROR_KW)? state_end )
+	;
+
+repositionstate
+	:	#(	REPOSITION ID
+			(	#(	TO
+					(	ROWID expression (COMMA expression)* 
+					|	RECID expression
+					|	ROW expression
+					)
+				)
+			|	#(ROW expression )
+			|	#(FORWARDS expression )
+			|	#(BACKWARDS expression )
+			)
+			(NOERROR_KW)? state_end
+		)
+	;
+
+returnstate
+	:	#(RETURN (return_options)? state_end )
+	;
+
+return_options
+	:	(	( #(ERROR LEFTPAREN RECORD_NAME RIGHTPAREN) )=> expression
+		|	(ERROR)=> ERROR (expression)?
+		|	NOAPPLY (expression)?
+		|	expression
+		)
+	;
+
+runstate
+	:	#(	RUN filenameorvalue
+			(LEFTANGLE LEFTANGLE filenameorvalue RIGHTANGLE RIGHTANGLE)?
+			(	#(PERSISTENT ( #(SET (field)? ) )? )
+			|	#(SET (field)? )
+			|	#(ON (SERVER)? expression (TRANSACTION (DISTINCT)?)? )
+			|	#(IN_KW expression)
+			|	#(	ASYNCHRONOUS ( #(SET (field)? ) )?
+					( #(EVENTPROCEDURE expression ) )?
+					(#(IN_KW expression))?
+				)
+			)*
+			(parameterlist)?
+			(NOERROR_KW|anyorvalue)*
+			state_end
+		)
+	;
+
+runstoredprocedurestate
+	:	#(RUN STOREDPROCEDURE ID (assign_equal)? (NOERROR_KW)? (parameterlist)? state_end )
+	;
+
+runsuperstate
+	:	#(RUN SUPER (parameterlist)? (NOERROR_KW)? state_end )
+	;
+
+savecachestate
+	:	#(SAVE CACHE (CURRENT|COMPLETE) anyorvalue TO filenameorvalue (NOERROR_KW)? state_end )
+	;
+
+scrollstate
+	:	#(SCROLL (FROMCURRENT)? (UP)? (DOWN)? (framephrase)? state_end )
+	;
+
+seekstate
+	:	#(SEEK (INPUT|OUTPUT|stream_name) TO (expression|END) state_end )
+	;
+
+selectionlistphrase
+	:	#(	SELECTIONLIST
+			(	SINGLE
+			|	MULTIPLE
+			|	NODRAG
+			|	#(LISTITEMS constant (COMMA constant)* )
+			|	#(LISTITEMPAIRS constant (COMMA constant)* )
+			|	SCROLLBARHORIZONTAL
+			|	SCROLLBARVERTICAL
+			|	#(INNERCHARS expression )
+			|	#(INNERLINES expression )
+			|	SORT
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+setstate
+	:	#(	SET
+			(stream_name)? (UNLESSHIDDEN)? (form_item)*
+			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?  (NOERROR_KW)?
+			state_end
+		)
+	;
+
+showstatsstate
+	:	#(SHOWSTATS (CLEAR)? state_end )
+	;
+
+sizephrase
+	:	#(SIZE expression BY expression )
+	|	#(SIZECHARS expression BY expression )
+	|	#(SIZEPIXELS expression BY expression )
+	;
+
+skipphrase
+	:	#(SKIP (funargs)? )
+	;
+
+sliderphrase
+	:	#(	SLIDER
+			(	HORIZONTAL
+			|	#(MAXVALUE expression )
+			|	#(MINVALUE expression )
+			|	VERTICAL
+			|	NOCURRENTVALUE
+			|	LARGETOSMALL
+			|	#(TICMARKS (NONE|TOP|BOTTOM|LEFT|RIGHT|BOTH) (#(FREQUENCY expression))? )
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+spacephrase
+	:	#(SPACE (funargs)? )
+	;
+
+state_end
+	:	PERIOD | EOF
+	;
+
+statusstate
+	:	#(	STATUS
+			(	#(DEFAULT (expression)? )
+			|	#(INPUT (OFF|expression)? )
+			)
+			(#(IN_KW WINDOW expression))?
+		state_end
+		)
+	;
+
+stopstate
+	:	#(STOP state_end )
+	;
+
+stream_name
+	:	#(STREAM ID )
+	;
+
+subscribestate
+	:	#(	SUBSCRIBE ( #(PROCEDURE expression) )? (TO)? expression
+			(ANYWHERE | #(IN_KW expression) )
+			( #(RUNPROCEDURE expression) )?
+			(NOERROR_KW)? state_end
+		)
+	;
+   
+substringfunc
+	:	#(SUBSTRING funargs )
+	;
+
+systemdialogcolorstate
+	:	#(SYSTEMDIALOG COLOR expression ( #(UPDATE field) )? (#(IN_KW WINDOW expression))? state_end )
+	;
+
+systemdialogfontstate
+	:	#(	SYSTEMDIALOG FONT expression
+			(	ANSIONLY
+			|	FIXEDONLY
+			|	#(MAXSIZE expression )
+			|	#(MINSIZE expression )
+			|	#(UPDATE field )
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialoggetdirstate
+	:	#(	SYSTEMDIALOG GETDIR field
+			(	#(INITIALDIR expression)
+			|	RETURNTOSTARTDIR
+			|	#(TITLE expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialoggetfilestate
+	:	#(	SYSTEMDIALOG GETFILE field
+			(	#(	FILTERS expression expression (COMMA expression expression)*
+					( #(INITIALFILTER expression ) )?
+				)
+			|	ASKOVERWRITE
+			|	CREATETESTFILE
+			|	#(DEFAULTEXTENSION expression )
+			|	#(INITIALDIR expression )
+			|	MUSTEXIST
+			|	RETURNTOSTARTDIR
+			|	SAVEAS
+			|	#(TITLE expression)
+			|	USEFILENAME
+			|	#(UPDATE field )
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialogprintersetupstate
+	:	#(	SYSTEMDIALOG PRINTERSETUP
+			( #(NUMCOPIES expression) | #(UPDATE field) | LANDSCAPE | PORTRAIT | #(IN_KW WINDOW expression) )*
+			state_end
+		)
+	;
+
+systemhelpstate
+	:	#(	SYSTEMHELP expression
+			( #(WINDOWNAME expression) )?
+			(	#(ALTERNATEKEY expression )
+			|	#(CONTEXT expression )
+			|	CONTENTS 
+			|	#(SETCONTENTS expression )
+			|	FINDER
+			|	#(CONTEXTPOPUP expression )
+			|	#(HELPTOPIC expression )
+			|	#(KEY expression )
+			|	#(PARTIALKEY (expression)? )
+			|	#(MULTIPLEKEY expression TEXT expression )
+			|	#(COMMAND expression )
+			|	#(POSITION (MAXIMIZE | X expression Y expression WIDTH expression HEIGHT expression) )
+			|	FORCEFILE
+			|	HELP
+			|	QUIT
+			)
+			state_end
+		)
+	;
+
+textphrase
+	:	#(TEXT (sizephrase | tooltip_expr)* )
+	;
+
+titlephrase
+	:	#(TITLE (color_expr | #(COLOR anyorvalue) | #(FONT expression) )* expression )
+	;
+
+toggleboxphrase
+	:	#(TOGGLEBOX (sizephrase | tooltip_expr)* )
+	;
+
+tooltip_expr
+	:	#(TOOLTIP (valueexpression | constant) )
+	;
+
+transactionmodeautomaticstate
+	:	#(TRANSACTIONMODE AUTOMATIC (CHAINED)? state_end )
+	;
+
+triggerphrase
+	:	#(	TRIGGERS block_colon
+			#(	Code_block
+				( #(ON eventlist (ANYWHERE)? (PERSISTENT runstate | blockorstate) ) )*
+			)
+			#(END (TRIGGERS)? )
+		)
+	;
+
+triggerprocedurestate
+	:	#(	TRIGGER PROCEDURE FOR
+			(	(CREATE|DELETE_KW|FIND|REPLICATIONCREATE|REPLICATIONDELETE)
+				OF RECORD_NAME (label_constant)?
+			|	(WRITE|REPLICATIONWRITE) OF RECORD_NAME (label_constant)?
+				(NEW (BUFFER)? ID (label_constant)?)?
+				(OLD (BUFFER)? ID (label_constant)?)? 
+			|	ASSIGN
+				(	#(OF field (#(TABLE LABEL constant))? )
+				|	#(NEW (VALUE)? id:ID defineparam_var )
+				)? 
+				(	#(OLD (VALUE)? id2:ID defineparam_var )
+				)?
+			)
+			state_end
+		)
+	;
+
+underlinestate
+	:	#(UNDERLINE (stream_name)? (#(Form_item field (formatphrase)? ))* (framephrase)? state_end )
+	;
+
+undostate
+	:	#(	UNDO (BLOCK_LABEL)?
+			(	COMMA
+				(	#(LEAVE (BLOCK_LABEL)? )
+				|	#(NEXT (BLOCK_LABEL)? )
+				|	#(RETRY (BLOCK_LABEL)? )
+				|	#(RETURN (return_options)? )
+				)
+			)?
+			state_end
+		)
+	;
+
+unloadstate
+	:	#(UNLOAD expression (NOERROR_KW)? state_end )
+	;
+
+unsubscribestate
+	:	#(UNSUBSCRIBE (#(PROCEDURE expression))? (TO)? (expression|ALL) (#(IN_KW expression))? state_end )
+	;
+
+upstate
+	:	#(UP (options{greedy=true;}:stream_name)? (expression)? (stream_name)? (framephrase)? state_end )
+	;
+
+updatestatement
+	:	(#(UPDATE RECORD_NAME SET))=> sqlupdatestate
+	|	updatestate
+	;
+
+updatestate
+	:	#(	UPDATE
+			(UNLESSHIDDEN)?	
+			(form_item)*
+			(goonphrase)?
+			(#(EXCEPT (field)*))?
+			(#(IN_KW WINDOW expression))?
+			(framephrase)?
+			(editingphrase)?
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+
+usestate
+	:	#(USE expression (NOERROR_KW)? state_end )
+	;
+
+validatestate
+	:	#(VALIDATE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+viewstate
+	:	#(VIEW (stream_name)? (gwidget)* (#(IN_KW WINDOW expression))? state_end )
+	;
+
+viewasphrase
+	:	#(	VIEWAS
+			(	comboboxphrase
+			|	editorphrase
+			|	fillinphrase
+			|	radiosetphrase
+			|	selectionlistphrase
+			|	sliderphrase
+			|	textphrase
+			|	toggleboxphrase
+			)
+		)
+	;
+
+waitforstate
+	:	#(	WAITFOR
+			eventlist OF widgetlist
+			(#(OR eventlist OF widgetlist))*
+			(#(FOCUS gwidget))?
+			(#(PAUSE expression))?
+			(EXCLUSIVEWEBUSER (expression)?)?
+			state_end
+		)
+	;
+
+widget_id: #(WIDGETID expression ) ;
+
+xml_data_type: #(XMLDATATYPE constant ) ;
+xml_node_type: #(XMLNODETYPE constant ) ;
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Begin SQL
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+altertablestate
+	:	#(	ALTER TABLE RECORD_NAME
+			(	ADD COLUMN sql_col_def
+			|	DROP COLUMN field
+			|	ALTER COLUMN field
+				(  	#(FORMAT expression)
+				|	label_constant
+     				|	#(DEFAULT expression )
+				| 	casesens_or_not
+   				)*
+			)
+			state_end
+		)
+	;
+
+closestate
+	:	#(CLOSE ID state_end )
+	;
+
+createindexstate
+	:	#(CREATE (UNIQUE)? INDEX ID ON RECORD_NAME #(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ) state_end )
+	;
+
+createtablestate
+	:	#(	CREATE TABLE ID 
+			LEFTPAREN
+			(	sql_col_def
+			|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
+			)
+			(	COMMA
+				(	sql_col_def
+				|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
+				)
+			)*
+			RIGHTPAREN
+			state_end
+		)
+	;
+
+createviewstate
+	:	#(CREATE VIEW ID (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? AS selectstatea state_end )
+	;
+
+declarecursorstate
+	:	#(DECLARE ID CURSOR FOR selectstatea (#(FOR (#(READ (ONLY)?) | UPDATE)))? state_end )
+	;
+
+deletefromstate
+	:	#(	DELETE_KW FROM RECORD_NAME
+			( #(WHERE (sqlexpression | #(CURRENT OF ID))? ) )?
+			state_end
+		)
+	;
+
+dropindexstate
+	:	#(DROP INDEX ID state_end )
+	;
+
+droptablestate
+	:	#(DROP TABLE RECORD_NAME state_end )
+	;
+
+dropviewstate
+	:	#(DROP VIEW ID state_end )
+	;
+
+fetchstate
+	:	#(FETCH ID INTO field (fetch_indicator)? (COMMA field (fetch_indicator)? )* state_end )
+	;
+fetch_indicator
+	:	#(INDICATOR field )
+	|	field
+	;
+
+grantstate
+	: 	#(GRANT (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to (WITH GRANT OPTION)? state_end )
+	;
+grant_rev_opt
+	:	#(ALL (PRIVILEGES)? )
+	|	(	SELECT | INSERT | DELETE_KW
+		|	#(UPDATE (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? )
+		|	COMMA
+		)+
+	;
+grant_rev_to
+	:	#(TO (PUBLIC | FILENAME (COMMA FILENAME)*) )
+	|	#(FROM (PUBLIC | FILENAME (COMMA FILENAME)*) )
+	;
+
+insertintostate
+	:	#(	INSERT INTO RECORD_NAME
+			(#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))?
+			(	#(	VALUES LEFTPAREN sqlexpression (fetch_indicator)?
+					(COMMA sqlexpression (fetch_indicator)?)* RIGHTPAREN
+				)
+			|	selectstatea
+			)
+			state_end
+		)
+	;
+
+openstate
+	: 	#(OPEN ID state_end )
+	;
+
+revokestate
+	: 	#(REVOKE (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to state_end )
+	;
+
+selectstate
+	: 	selectstatea state_end
+	;
+
+selectstatea
+	:	#(	SELECT
+			(ALL | DISTINCT)?
+			(	STAR
+			|	#(	Sql_select_what
+					(	(LEFTPAREN)=> LEFTPAREN sqlexpression (formatphrase)? RIGHTPAREN (formatphrase)?
+					|	sqlexpression (formatphrase)?
+					)
+					(COMMA sqlexpression (formatphrase)?)*
+				)
+			)
+			( #(INTO field (fetch_indicator)? (COMMA field (fetch_indicator)?)* ) )?
+			#(FROM select_from_spec (COMMA select_from_spec)* )
+			( #(GROUP BY expression (COMMA expression)* ) )?
+			( #(HAVING sqlexpression) )?
+			(	#(ORDER BY select_order_expr )
+			|	#(BY select_order_expr )
+			)?
+			// Ick. I had trouble convincing antlr not to check the syntactic predicate
+			// if next token _t was null.
+			(	{_t != null}? ( ( #(WITH CHECK OPTION ) )=>{_t != null}? #(WITH CHECK OPTION ) | )
+			|	// empty alt
+			)
+			(framephrase)?
+			( #(UNION (ALL)? selectstatea) )?
+		)
+	;
+select_from_spec
+	:	select_sqltableref
+		(	#(LEFT (OUTER)? JOIN select_sqltableref ON sqlexpression )
+		|	#(RIGHT (OUTER)? JOIN select_sqltableref ON sqlexpression )
+		|	#(INNER JOIN select_sqltableref ON sqlexpression )
+		|	#(OUTER JOIN select_sqltableref ON sqlexpression )
+		|	#(JOIN select_sqltableref ON sqlexpression )
+		)*
+		( #(WHERE sqlexpression) )?
+	;
+select_sqltableref
+	:	(RECORD_NAME | ID) (ID)?
+	;
+select_order_expr
+	:	sqlscalar (ASC|DESCENDING)? (COMMA sqlscalar (ASC|DESCENDING)?)*
+	;
+
+sqlupdatestate
+	: 	#(	UPDATE RECORD_NAME SET sqlupdate_equal (COMMA sqlupdate_equal)*
+			( #(WHERE (sqlexpression | CURRENT OF ID) ) )?
+			state_end
+		)
+	;
+sqlupdate_equal
+	:	#(EQUAL field sqlexpression (fetch_indicator)? )
+	;
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// sql functions and phrases
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+sqlaggregatefunc
+// also see maximumfunc and minimumfunc
+	:	#(AVG sqlaggregatefunc_arg )
+	|	#(COUNT sqlaggregatefunc_arg )
+	|	#(SUM sqlaggregatefunc_arg )
+	;
+sqlaggregatefunc_arg
+	:	LEFTPAREN
+		(	DISTINCT
+			(	LEFTPAREN field RIGHTPAREN
+			|	field
+			)
+		|	STAR
+		|	(ALL)? sqlscalar
+		)
+		RIGHTPAREN
+	;
+
+sql_col_def
+	:	#(	ID
+			. // datatype
+			(PRECISION)?
+			(LEFTPAREN NUMBER (COMMA NUMBER)? RIGHTPAREN)?
+			( #(Not_null NOT NULL_KW (UNIQUE)? ) )?
+			(	label_constant
+			|	#(DEFAULT expression )
+			|  	#(FORMAT expression)
+			| 	casesens_or_not
+			)*
+		)
+	;
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// sqlexpression 
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+sqlexpression
+	:	#(OR sqlexpression sqlexpression )
+	|	#(AND sqlexpression sqlexpression )
+	|	#(NOT sqlexpression )
+	|	#(MATCHES	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(BEGINS	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(CONTAINS	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(EQ		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(NE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(GTHAN		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(GE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(LTHAN		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(LE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(EXISTS LEFTPAREN selectstatea RIGHTPAREN )
+	|	#(Sql_begins (NOT)? BEGINS sqlscalar )
+	|	#(Sql_between (NOT)? BETWEEN sqlscalar AND sqlscalar )
+	|	#(Sql_in (NOT)? IN_KW LEFTPAREN (selectstatea | sql_in_val (COMMA sql_in_val)*) RIGHTPAREN )
+	|	#(Sql_like (NOT)? LIKE sqlscalar (ESCAPE sqlscalar)? )
+	|	#(Sql_null_test IS (NOT)? NULL_KW )
+	|	sqlscalar
+	;
+sql_comp_query
+	:	#(Sql_comp_query (ANY|ALL|SOME)? LEFTPAREN selectstatea RIGHTPAREN )
+	;
+sql_in_val
+	:	field (fetch_indicator)? | constant | USERID
+	;
+sqlscalar
+	:	#(PLUS sqlscalar sqlscalar )
+	|	#(MINUS sqlscalar sqlscalar )
+	|	#(MULTIPLY sqlscalar sqlscalar )
+	|	#(DIVIDE sqlscalar sqlscalar )
+	|	#(MODULO sqlscalar sqlscalar )
+	|	#(UNARY_PLUS exprt )
+	|	#(UNARY_MINUS exprt )
+	|	(LEFTPAREN)=> #(LEFTPAREN sqlexpression RIGHTPAREN )
+	|	exprt
+	;
+
+

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/TreeParser01.java	2006-03-31 19:19:00 UTC (rev 66)
@@ -6363,19 +6363,18 @@
 			AST tmp523_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp524_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
+			fld(_t,CQ.INIT);
+			_t = _retTree;
 			parameter_dataset_options(_t);
 			_t = _retTree;
 			break;
 		}
 		case ID:
 		{
-			AST tmp525_AST_in = (AST)_t;
+			AST tmp524_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp526_AST_in = (AST)_t;
+			AST tmp525_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			{
@@ -6383,10 +6382,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp527_AST_in = (AST)_t;
+				AST tmp526_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp528_AST_in = (AST)_t;
+				AST tmp527_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -6441,7 +6440,7 @@
 				switch ( _t.getType()) {
 				case AS:
 				{
-					AST tmp529_AST_in = (AST)_t;
+					AST tmp528_AST_in = (AST)_t;
 					match(_t,AS);
 					_t = _t.getNextSibling();
 					datatype_com(_t);
@@ -6471,14 +6470,14 @@
 		switch ( _t.getType()) {
 		case BYPOINTER:
 		{
-			AST tmp530_AST_in = (AST)_t;
+			AST tmp529_AST_in = (AST)_t;
 			match(_t,BYPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVARIANTPOINTER:
 		{
-			AST tmp531_AST_in = (AST)_t;
+			AST tmp530_AST_in = (AST)_t;
 			match(_t,BYVARIANTPOINTER);
 			_t = _t.getNextSibling();
 			break;
@@ -6505,7 +6504,7 @@
 		switch ( _t.getType()) {
 		case APPEND:
 		{
-			AST tmp532_AST_in = (AST)_t;
+			AST tmp531_AST_in = (AST)_t;
 			match(_t,APPEND);
 			_t = _t.getNextSibling();
 			break;
@@ -6530,21 +6529,21 @@
 		switch ( _t.getType()) {
 		case BYVALUE:
 		{
-			AST tmp533_AST_in = (AST)_t;
+			AST tmp532_AST_in = (AST)_t;
 			match(_t,BYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYREFERENCE:
 		{
-			AST tmp534_AST_in = (AST)_t;
+			AST tmp533_AST_in = (AST)_t;
 			match(_t,BYREFERENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BIND:
 		{
-			AST tmp535_AST_in = (AST)_t;
+			AST tmp534_AST_in = (AST)_t;
 			match(_t,BIND);
 			_t = _t.getNextSibling();
 			break;
@@ -6572,42 +6571,42 @@
 		switch ( _t.getType()) {
 		case SHORT:
 		{
-			AST tmp536_AST_in = (AST)_t;
+			AST tmp535_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp537_AST_in = (AST)_t;
+			AST tmp536_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENCY:
 		{
-			AST tmp538_AST_in = (AST)_t;
+			AST tmp537_AST_in = (AST)_t;
 			match(_t,CURRENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDBYTE:
 		{
-			AST tmp539_AST_in = (AST)_t;
+			AST tmp538_AST_in = (AST)_t;
 			match(_t,UNSIGNEDBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORCODE:
 		{
-			AST tmp540_AST_in = (AST)_t;
+			AST tmp539_AST_in = (AST)_t;
 			match(_t,ERRORCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IUNKNOWN:
 		{
-			AST tmp541_AST_in = (AST)_t;
+			AST tmp540_AST_in = (AST)_t;
 			match(_t,IUNKNOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -6628,112 +6627,112 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp542_AST_in = (AST)_t;
+			AST tmp541_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMHANDLE:
 		{
-			AST tmp543_AST_in = (AST)_t;
+			AST tmp542_AST_in = (AST)_t;
 			match(_t,COMHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST tmp544_AST_in = (AST)_t;
+			AST tmp543_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST tmp545_AST_in = (AST)_t;
+			AST tmp544_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST tmp546_AST_in = (AST)_t;
+			AST tmp545_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST tmp547_AST_in = (AST)_t;
+			AST tmp546_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HANDLE:
 		{
-			AST tmp548_AST_in = (AST)_t;
+			AST tmp547_AST_in = (AST)_t;
 			match(_t,HANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST tmp549_AST_in = (AST)_t;
+			AST tmp548_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST tmp550_AST_in = (AST)_t;
+			AST tmp549_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONGCHAR:
 		{
-			AST tmp551_AST_in = (AST)_t;
+			AST tmp550_AST_in = (AST)_t;
 			match(_t,LONGCHAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMPTR:
 		{
-			AST tmp552_AST_in = (AST)_t;
+			AST tmp551_AST_in = (AST)_t;
 			match(_t,MEMPTR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAW:
 		{
-			AST tmp553_AST_in = (AST)_t;
+			AST tmp552_AST_in = (AST)_t;
 			match(_t,RAW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECID:
 		{
-			AST tmp554_AST_in = (AST)_t;
+			AST tmp553_AST_in = (AST)_t;
 			match(_t,RECID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST tmp555_AST_in = (AST)_t;
+			AST tmp554_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TYPE_NAME:
 		{
-			AST tmp556_AST_in = (AST)_t;
+			AST tmp555_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST tmp557_AST_in = (AST)_t;
+			AST tmp556_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getNextSibling();
 			break;
@@ -6757,16 +6756,16 @@
 		case VALUE:
 		{
 			AST __t86 = _t;
-			AST tmp558_AST_in = (AST)_t;
+			AST tmp557_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp559_AST_in = (AST)_t;
+			AST tmp558_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			exp = _t==ASTNULL ? null : (AST)_t;
 			expression(_t);
 			_t = _retTree;
-			AST tmp560_AST_in = (AST)_t;
+			AST tmp559_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t86;
@@ -6803,12 +6802,12 @@
 		case LEFTPAREN:
 		{
 			AST __t88 = _t;
-			AST tmp561_AST_in = (AST)_t;
+			AST tmp560_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp562_AST_in = (AST)_t;
+			AST tmp561_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t88;
@@ -6871,7 +6870,7 @@
 		case USER_FUNC:
 		{
 			AST __t89 = _t;
-			AST tmp563_AST_in = (AST)_t;
+			AST tmp562_AST_in = (AST)_t;
 			match(_t,USER_FUNC);
 			_t = _t.getFirstChild();
 			parameterlist_noroot(_t);
@@ -6883,7 +6882,7 @@
 		case LOCAL_METHOD_REF:
 		{
 			AST __t90 = _t;
-			AST tmp564_AST_in = (AST)_t;
+			AST tmp563_AST_in = (AST)_t;
 			match(_t,LOCAL_METHOD_REF);
 			_t = _t.getFirstChild();
 			parameterlist_noroot(_t);
@@ -6901,7 +6900,7 @@
 		case Entered_func:
 		{
 			AST __t96 = _t;
-			AST tmp565_AST_in = (AST)_t;
+			AST tmp564_AST_in = (AST)_t;
 			match(_t,Entered_func);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.SYMBOL);
@@ -6911,7 +6910,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp566_AST_in = (AST)_t;
+				AST tmp565_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -6926,7 +6925,7 @@
 			}
 			}
 			}
-			AST tmp567_AST_in = (AST)_t;
+			AST tmp566_AST_in = (AST)_t;
 			match(_t,ENTERED);
 			_t = _t.getNextSibling();
 			_t = __t96;
@@ -6949,10 +6948,10 @@
 				try {
 					{
 					AST __t92 = _t;
-					AST tmp568_AST_in = (AST)_t;
+					AST tmp567_AST_in = (AST)_t;
 					match(_t,NEW);
 					_t = _t.getFirstChild();
-					AST tmp569_AST_in = (AST)_t;
+					AST tmp568_AST_in = (AST)_t;
 					match(_t,TYPE_NAME);
 					_t = _t.getNextSibling();
 					_t = __t92;
@@ -6967,10 +6966,10 @@
 			}
 			if ( synPredMatched93 ) {
 				AST __t94 = _t;
-				AST tmp570_AST_in = (AST)_t;
+				AST tmp569_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getFirstChild();
-				AST tmp571_AST_in = (AST)_t;
+				AST tmp570_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				parameterlist(_t);
@@ -7007,7 +7006,7 @@
 		AST widattr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t99 = _t;
-		AST tmp572_AST_in = (AST)_t;
+		AST tmp571_AST_in = (AST)_t;
 		match(_t,Widget_ref);
 		_t = _t.getFirstChild();
 		{
@@ -7015,7 +7014,7 @@
 		switch ( _t.getType()) {
 		case NORETURNVALUE:
 		{
-			AST tmp573_AST_in = (AST)_t;
+			AST tmp572_AST_in = (AST)_t;
 			match(_t,NORETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
@@ -7083,10 +7082,10 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJCOLON)) {
-				AST tmp574_AST_in = (AST)_t;
+				AST tmp573_AST_in = (AST)_t;
 				match(_t,OBJCOLON);
 				_t = _t.getNextSibling();
-				AST tmp575_AST_in = (AST)_t;
+				AST tmp574_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				{
@@ -7148,7 +7147,7 @@
 		case IN_KW:
 		{
 			AST __t106 = _t;
-			AST tmp576_AST_in = (AST)_t;
+			AST tmp575_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			widname(_t);
@@ -7173,10 +7172,10 @@
 		switch ( _t.getType()) {
 		case AS:
 		{
-			AST tmp577_AST_in = (AST)_t;
+			AST tmp576_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
-			AST tmp578_AST_in = (AST)_t;
+			AST tmp577_AST_in = (AST)_t;
 			if ( _t==null ) throw new MismatchedTokenException();
 			_t = _t.getNextSibling();
 			break;
@@ -7200,7 +7199,7 @@
 		
 		AST parameterlist_noroot_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp579_AST_in = (AST)_t;
+		AST tmp578_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -7232,7 +7231,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp580_AST_in = (AST)_t;
+				AST tmp579_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				parameter(_t);
@@ -7244,7 +7243,7 @@
 			
 		} while (true);
 		}
-		AST tmp581_AST_in = (AST)_t;
+		AST tmp580_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -7258,217 +7257,217 @@
 		switch ( _t.getType()) {
 		case AAMEMORY:
 		{
-			AST tmp582_AST_in = (AST)_t;
+			AST tmp581_AST_in = (AST)_t;
 			match(_t,AAMEMORY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACTIVEWINDOW:
 		{
-			AST tmp583_AST_in = (AST)_t;
+			AST tmp582_AST_in = (AST)_t;
 			match(_t,ACTIVEWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUDITCONTROL:
 		{
-			AST tmp584_AST_in = (AST)_t;
+			AST tmp583_AST_in = (AST)_t;
 			match(_t,AUDITCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUDITPOLICY:
 		{
-			AST tmp585_AST_in = (AST)_t;
+			AST tmp584_AST_in = (AST)_t;
 			match(_t,AUDITPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLIPBOARD:
 		{
-			AST tmp586_AST_in = (AST)_t;
+			AST tmp585_AST_in = (AST)_t;
 			match(_t,CLIPBOARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEBASELOCATOR:
 		{
-			AST tmp587_AST_in = (AST)_t;
+			AST tmp586_AST_in = (AST)_t;
 			match(_t,CODEBASELOCATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLORTABLE:
 		{
-			AST tmp588_AST_in = (AST)_t;
+			AST tmp587_AST_in = (AST)_t;
 			match(_t,COLORTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILER:
 		{
-			AST tmp589_AST_in = (AST)_t;
+			AST tmp588_AST_in = (AST)_t;
 			match(_t,COMPILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp590_AST_in = (AST)_t;
+			AST tmp589_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp591_AST_in = (AST)_t;
+			AST tmp590_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUGGER:
 		{
-			AST tmp592_AST_in = (AST)_t;
+			AST tmp591_AST_in = (AST)_t;
 			match(_t,DEBUGGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTWINDOW:
 		{
-			AST tmp593_AST_in = (AST)_t;
+			AST tmp592_AST_in = (AST)_t;
 			match(_t,DEFAULTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORSTATUS:
 		{
-			AST tmp594_AST_in = (AST)_t;
+			AST tmp593_AST_in = (AST)_t;
 			match(_t,ERRORSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILEINFORMATION:
 		{
-			AST tmp595_AST_in = (AST)_t;
+			AST tmp594_AST_in = (AST)_t;
 			match(_t,FILEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FOCUS:
 		{
-			AST tmp596_AST_in = (AST)_t;
+			AST tmp595_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONTTABLE:
 		{
-			AST tmp597_AST_in = (AST)_t;
+			AST tmp596_AST_in = (AST)_t;
 			match(_t,FONTTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTEVENT:
 		{
-			AST tmp598_AST_in = (AST)_t;
+			AST tmp597_AST_in = (AST)_t;
 			match(_t,LASTEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGMANAGER:
 		{
-			AST tmp599_AST_in = (AST)_t;
+			AST tmp598_AST_in = (AST)_t;
 			match(_t,LOGMANAGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSE:
 		{
-			AST tmp600_AST_in = (AST)_t;
+			AST tmp599_AST_in = (AST)_t;
 			match(_t,MOUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROFILER:
 		{
-			AST tmp601_AST_in = (AST)_t;
+			AST tmp600_AST_in = (AST)_t;
 			match(_t,PROFILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RCODEINFORMATION:
 		{
-			AST tmp602_AST_in = (AST)_t;
+			AST tmp601_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECURITYPOLICY:
 		{
-			AST tmp603_AST_in = (AST)_t;
+			AST tmp602_AST_in = (AST)_t;
 			match(_t,SECURITYPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELF:
 		{
-			AST tmp604_AST_in = (AST)_t;
+			AST tmp603_AST_in = (AST)_t;
 			match(_t,SELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SESSION:
 		{
-			AST tmp605_AST_in = (AST)_t;
+			AST tmp604_AST_in = (AST)_t;
 			match(_t,SESSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCEPROCEDURE:
 		{
-			AST tmp606_AST_in = (AST)_t;
+			AST tmp605_AST_in = (AST)_t;
 			match(_t,SOURCEPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUPER:
 		{
-			AST tmp607_AST_in = (AST)_t;
+			AST tmp606_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGETPROCEDURE:
 		{
-			AST tmp608_AST_in = (AST)_t;
+			AST tmp607_AST_in = (AST)_t;
 			match(_t,TARGETPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTCURSOR:
 		{
-			AST tmp609_AST_in = (AST)_t;
+			AST tmp608_AST_in = (AST)_t;
 			match(_t,TEXTCURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISOBJECT:
 		{
-			AST tmp610_AST_in = (AST)_t;
+			AST tmp609_AST_in = (AST)_t;
 			match(_t,THISOBJECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISPROCEDURE:
 		{
-			AST tmp611_AST_in = (AST)_t;
+			AST tmp610_AST_in = (AST)_t;
 			match(_t,THISPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEBCONTEXT:
 		{
-			AST tmp612_AST_in = (AST)_t;
+			AST tmp611_AST_in = (AST)_t;
 			match(_t,WEBCONTEXT);
 			_t = _t.getNextSibling();
 			break;
@@ -7544,7 +7543,7 @@
 			switch ( _t.getType()) {
 			case FIELD:
 			{
-				AST tmp613_AST_in = (AST)_t;
+				AST tmp612_AST_in = (AST)_t;
 				match(_t,FIELD);
 				_t = _t.getNextSibling();
 				break;
@@ -7576,10 +7575,10 @@
 		AST array_subscript_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1598 = _t;
-		AST tmp614_AST_in = (AST)_t;
+		AST tmp613_AST_in = (AST)_t;
 		match(_t,Array_subscript);
 		_t = _t.getFirstChild();
-		AST tmp615_AST_in = (AST)_t;
+		AST tmp614_AST_in = (AST)_t;
 		match(_t,LEFTBRACE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -7589,7 +7588,7 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp616_AST_in = (AST)_t;
+			AST tmp615_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -7606,7 +7605,7 @@
 		}
 		}
 		}
-		AST tmp617_AST_in = (AST)_t;
+		AST tmp616_AST_in = (AST)_t;
 		match(_t,RIGHTBRACE);
 		_t = _t.getNextSibling();
 		_t = __t1598;
@@ -7619,10 +7618,10 @@
 		AST method_param_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1601 = _t;
-		AST tmp618_AST_in = (AST)_t;
+		AST tmp617_AST_in = (AST)_t;
 		match(_t,Method_param_list);
 		_t = _t.getFirstChild();
-		AST tmp619_AST_in = (AST)_t;
+		AST tmp618_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -7654,7 +7653,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp620_AST_in = (AST)_t;
+				AST tmp619_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -7688,7 +7687,7 @@
 			
 		} while (true);
 		}
-		AST tmp621_AST_in = (AST)_t;
+		AST tmp620_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1601;
@@ -7742,27 +7741,27 @@
 		}
 		case DATASET:
 		{
-			AST tmp622_AST_in = (AST)_t;
+			AST tmp621_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
-			AST tmp623_AST_in = (AST)_t;
+			AST tmp622_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCE:
 		{
-			AST tmp624_AST_in = (AST)_t;
+			AST tmp623_AST_in = (AST)_t;
 			match(_t,DATASOURCE);
 			_t = _t.getNextSibling();
-			AST tmp625_AST_in = (AST)_t;
+			AST tmp624_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp626_AST_in = (AST)_t;
+			AST tmp625_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			f = (AST)_t;
@@ -7775,37 +7774,37 @@
 		}
 		case MENU:
 		{
-			AST tmp627_AST_in = (AST)_t;
+			AST tmp626_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
-			AST tmp628_AST_in = (AST)_t;
+			AST tmp627_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp629_AST_in = (AST)_t;
+			AST tmp628_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
-			AST tmp630_AST_in = (AST)_t;
+			AST tmp629_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp631_AST_in = (AST)_t;
+			AST tmp630_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
-			AST tmp632_AST_in = (AST)_t;
+			AST tmp631_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST tmp633_AST_in = (AST)_t;
+			AST tmp632_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
 			b = (AST)_t;
@@ -7818,60 +7817,60 @@
 		}
 		case QUERY:
 		{
-			AST tmp634_AST_in = (AST)_t;
+			AST tmp633_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getNextSibling();
-			AST tmp635_AST_in = (AST)_t;
+			AST tmp634_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp636_AST_in = (AST)_t;
+			AST tmp635_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
-			AST tmp637_AST_in = (AST)_t;
+			AST tmp636_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp638_AST_in = (AST)_t;
+			AST tmp637_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
-			AST tmp639_AST_in = (AST)_t;
+			AST tmp638_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp640_AST_in = (AST)_t;
+			AST tmp639_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
-			AST tmp641_AST_in = (AST)_t;
+			AST tmp640_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp642_AST_in = (AST)_t;
+			AST tmp641_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
-			AST tmp643_AST_in = (AST)_t;
+			AST tmp642_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp644_AST_in = (AST)_t;
+			AST tmp643_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
-			AST tmp645_AST_in = (AST)_t;
+			AST tmp644_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -7889,7 +7888,7 @@
 		AST gwidget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t109 = _t;
-		AST tmp646_AST_in = (AST)_t;
+		AST tmp645_AST_in = (AST)_t;
 		match(_t,Widget_ref);
 		_t = _t.getFirstChild();
 		s_widget(_t);
@@ -7900,7 +7899,7 @@
 		case IN_KW:
 		{
 			AST __t111 = _t;
-			AST tmp647_AST_in = (AST)_t;
+			AST tmp646_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			widname(_t);
@@ -7930,7 +7929,7 @@
 		AST f = null;
 		
 		AST __t830 = _t;
-		AST tmp648_AST_in = (AST)_t;
+		AST tmp647_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getFirstChild();
 		f = (AST)_t;
@@ -7950,7 +7949,7 @@
 		AST i = null;
 		
 		AST __t171 = _t;
-		AST tmp649_AST_in = (AST)_t;
+		AST tmp648_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getFirstChild();
 		i = (AST)_t;
@@ -7981,7 +7980,7 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp650_AST_in = (AST)_t;
+			AST tmp649_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -8070,7 +8069,7 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp651_AST_in = (AST)_t;
+			AST tmp650_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -8505,7 +8504,7 @@
 		case COLUMNLABEL:
 		{
 			AST __t2013 = _t;
-			AST tmp652_AST_in = (AST)_t;
+			AST tmp651_AST_in = (AST)_t;
 			match(_t,COLUMNLABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -8515,7 +8514,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp653_AST_in = (AST)_t;
+					AST tmp652_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -8534,7 +8533,7 @@
 		case LABEL:
 		{
 			AST __t2016 = _t;
-			AST tmp654_AST_in = (AST)_t;
+			AST tmp653_AST_in = (AST)_t;
 			match(_t,LABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -8544,7 +8543,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp655_AST_in = (AST)_t;
+					AST tmp654_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -8584,7 +8583,7 @@
 			case EXCEPT:
 			{
 				AST __t154 = _t;
-				AST tmp656_AST_in = (AST)_t;
+				AST tmp655_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -8642,7 +8641,7 @@
 					case WHEN:
 					{
 						AST __t159 = _t;
-						AST tmp657_AST_in = (AST)_t;
+						AST tmp656_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -8671,7 +8670,7 @@
 				case Assign_from_buffer:
 				{
 					AST __t160 = _t;
-					AST tmp658_AST_in = (AST)_t;
+					AST tmp657_AST_in = (AST)_t;
 					match(_t,Assign_from_buffer);
 					_t = _t.getFirstChild();
 					fld(_t,CQ.UPDATING);
@@ -8684,7 +8683,7 @@
 					case WHEN:
 					{
 						AST __t162 = _t;
-						AST tmp659_AST_in = (AST)_t;
+						AST tmp658_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -8732,7 +8731,7 @@
 		AST assign_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t165 = _t;
-		AST tmp660_AST_in = (AST)_t;
+		AST tmp659_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		{
@@ -8841,7 +8840,7 @@
 		case FIXCODEPAGE:
 		{
 			AST __t1396 = _t;
-			AST tmp661_AST_in = (AST)_t;
+			AST tmp660_AST_in = (AST)_t;
 			match(_t,FIXCODEPAGE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8853,7 +8852,7 @@
 		case OVERLAY:
 		{
 			AST __t1397 = _t;
-			AST tmp662_AST_in = (AST)_t;
+			AST tmp661_AST_in = (AST)_t;
 			match(_t,OVERLAY);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8865,7 +8864,7 @@
 		case PUTBITS:
 		{
 			AST __t1398 = _t;
-			AST tmp663_AST_in = (AST)_t;
+			AST tmp662_AST_in = (AST)_t;
 			match(_t,PUTBITS);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8877,7 +8876,7 @@
 		case PUTBYTE:
 		{
 			AST __t1399 = _t;
-			AST tmp664_AST_in = (AST)_t;
+			AST tmp663_AST_in = (AST)_t;
 			match(_t,PUTBYTE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8889,7 +8888,7 @@
 		case PUTBYTES:
 		{
 			AST __t1400 = _t;
-			AST tmp665_AST_in = (AST)_t;
+			AST tmp664_AST_in = (AST)_t;
 			match(_t,PUTBYTES);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8901,7 +8900,7 @@
 		case PUTDOUBLE:
 		{
 			AST __t1401 = _t;
-			AST tmp666_AST_in = (AST)_t;
+			AST tmp665_AST_in = (AST)_t;
 			match(_t,PUTDOUBLE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8913,7 +8912,7 @@
 		case PUTFLOAT:
 		{
 			AST __t1402 = _t;
-			AST tmp667_AST_in = (AST)_t;
+			AST tmp666_AST_in = (AST)_t;
 			match(_t,PUTFLOAT);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8925,7 +8924,7 @@
 		case PUTLONG:
 		{
 			AST __t1403 = _t;
-			AST tmp668_AST_in = (AST)_t;
+			AST tmp667_AST_in = (AST)_t;
 			match(_t,PUTLONG);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8937,7 +8936,7 @@
 		case PUTSHORT:
 		{
 			AST __t1404 = _t;
-			AST tmp669_AST_in = (AST)_t;
+			AST tmp668_AST_in = (AST)_t;
 			match(_t,PUTSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8949,7 +8948,7 @@
 		case PUTSTRING:
 		{
 			AST __t1405 = _t;
-			AST tmp670_AST_in = (AST)_t;
+			AST tmp669_AST_in = (AST)_t;
 			match(_t,PUTSTRING);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8961,7 +8960,7 @@
 		case PUTUNSIGNEDSHORT:
 		{
 			AST __t1406 = _t;
-			AST tmp671_AST_in = (AST)_t;
+			AST tmp670_AST_in = (AST)_t;
 			match(_t,PUTUNSIGNEDSHORT);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8973,7 +8972,7 @@
 		case SETBYTEORDER:
 		{
 			AST __t1407 = _t;
-			AST tmp672_AST_in = (AST)_t;
+			AST tmp671_AST_in = (AST)_t;
 			match(_t,SETBYTEORDER);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8985,7 +8984,7 @@
 		case SETPOINTERVALUE:
 		{
 			AST __t1408 = _t;
-			AST tmp673_AST_in = (AST)_t;
+			AST tmp672_AST_in = (AST)_t;
 			match(_t,SETPOINTERVALUE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -8997,7 +8996,7 @@
 		case SETSIZE:
 		{
 			AST __t1409 = _t;
-			AST tmp674_AST_in = (AST)_t;
+			AST tmp673_AST_in = (AST)_t;
 			match(_t,SETSIZE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -9008,7 +9007,7 @@
 		}
 		case AAMSG:
 		{
-			AST tmp675_AST_in = (AST)_t;
+			AST tmp674_AST_in = (AST)_t;
 			match(_t,AAMSG);
 			_t = _t.getNextSibling();
 			break;
@@ -9021,7 +9020,7 @@
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp676_AST_in = (AST)_t;
+			AST tmp675_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
@@ -9070,322 +9069,322 @@
 		}
 		case PAGESIZE_KW:
 		{
-			AST tmp677_AST_in = (AST)_t;
+			AST tmp676_AST_in = (AST)_t;
 			match(_t,PAGESIZE_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LINECOUNTER:
 		{
-			AST tmp678_AST_in = (AST)_t;
+			AST tmp677_AST_in = (AST)_t;
 			match(_t,LINECOUNTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PAGENUMBER:
 		{
-			AST tmp679_AST_in = (AST)_t;
+			AST tmp678_AST_in = (AST)_t;
 			match(_t,PAGENUMBER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMECOL:
 		{
-			AST tmp680_AST_in = (AST)_t;
+			AST tmp679_AST_in = (AST)_t;
 			match(_t,FRAMECOL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDOWN:
 		{
-			AST tmp681_AST_in = (AST)_t;
+			AST tmp680_AST_in = (AST)_t;
 			match(_t,FRAMEDOWN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMELINE:
 		{
-			AST tmp682_AST_in = (AST)_t;
+			AST tmp681_AST_in = (AST)_t;
 			match(_t,FRAMELINE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEROW:
 		{
-			AST tmp683_AST_in = (AST)_t;
+			AST tmp682_AST_in = (AST)_t;
 			match(_t,FRAMEROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case USERID:
 		{
-			AST tmp684_AST_in = (AST)_t;
+			AST tmp683_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ETIME_KW:
 		{
-			AST tmp685_AST_in = (AST)_t;
+			AST tmp684_AST_in = (AST)_t;
 			match(_t,ETIME_KW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DBNAME:
 		{
-			AST tmp686_AST_in = (AST)_t;
+			AST tmp685_AST_in = (AST)_t;
 			match(_t,DBNAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TIME:
 		{
-			AST tmp687_AST_in = (AST)_t;
+			AST tmp686_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OPSYS:
 		{
-			AST tmp688_AST_in = (AST)_t;
+			AST tmp687_AST_in = (AST)_t;
 			match(_t,OPSYS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETRY:
 		{
-			AST tmp689_AST_in = (AST)_t;
+			AST tmp688_AST_in = (AST)_t;
 			match(_t,RETRY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AASERIAL:
 		{
-			AST tmp690_AST_in = (AST)_t;
+			AST tmp689_AST_in = (AST)_t;
 			match(_t,AASERIAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AACONTROL:
 		{
-			AST tmp691_AST_in = (AST)_t;
+			AST tmp690_AST_in = (AST)_t;
 			match(_t,AACONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MESSAGELINES:
 		{
-			AST tmp692_AST_in = (AST)_t;
+			AST tmp691_AST_in = (AST)_t;
 			match(_t,MESSAGELINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TERMINAL:
 		{
-			AST tmp693_AST_in = (AST)_t;
+			AST tmp692_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROPATH:
 		{
-			AST tmp694_AST_in = (AST)_t;
+			AST tmp693_AST_in = (AST)_t;
 			match(_t,PROPATH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTLANGUAGE:
 		{
-			AST tmp695_AST_in = (AST)_t;
+			AST tmp694_AST_in = (AST)_t;
 			match(_t,CURRENTLANGUAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROMSGS:
 		{
-			AST tmp696_AST_in = (AST)_t;
+			AST tmp695_AST_in = (AST)_t;
 			match(_t,PROMSGS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SCREENLINES:
 		{
-			AST tmp697_AST_in = (AST)_t;
+			AST tmp696_AST_in = (AST)_t;
 			match(_t,SCREENLINES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTKEY:
 		{
-			AST tmp698_AST_in = (AST)_t;
+			AST tmp697_AST_in = (AST)_t;
 			match(_t,LASTKEY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFIELD:
 		{
-			AST tmp699_AST_in = (AST)_t;
+			AST tmp698_AST_in = (AST)_t;
 			match(_t,FRAMEFIELD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEFILE:
 		{
-			AST tmp700_AST_in = (AST)_t;
+			AST tmp699_AST_in = (AST)_t;
 			match(_t,FRAMEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEVALUE:
 		{
-			AST tmp701_AST_in = (AST)_t;
+			AST tmp700_AST_in = (AST)_t;
 			match(_t,FRAMEVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GOPENDING:
 		{
-			AST tmp702_AST_in = (AST)_t;
+			AST tmp701_AST_in = (AST)_t;
 			match(_t,GOPENDING);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROGRESS:
 		{
-			AST tmp703_AST_in = (AST)_t;
+			AST tmp702_AST_in = (AST)_t;
 			match(_t,PROGRESS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEINDEX:
 		{
-			AST tmp704_AST_in = (AST)_t;
+			AST tmp703_AST_in = (AST)_t;
 			match(_t,FRAMEINDEX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMEDB:
 		{
-			AST tmp705_AST_in = (AST)_t;
+			AST tmp704_AST_in = (AST)_t;
 			match(_t,FRAMEDB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAMENAME:
 		{
-			AST tmp706_AST_in = (AST)_t;
+			AST tmp705_AST_in = (AST)_t;
 			match(_t,FRAMENAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASERVERS:
 		{
-			AST tmp707_AST_in = (AST)_t;
+			AST tmp706_AST_in = (AST)_t;
 			match(_t,DATASERVERS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMDBS:
 		{
-			AST tmp708_AST_in = (AST)_t;
+			AST tmp707_AST_in = (AST)_t;
 			match(_t,NUMDBS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NUMALIASES:
 		{
-			AST tmp709_AST_in = (AST)_t;
+			AST tmp708_AST_in = (AST)_t;
 			match(_t,NUMALIASES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ISATTRSPACE:
 		{
-			AST tmp710_AST_in = (AST)_t;
+			AST tmp709_AST_in = (AST)_t;
 			match(_t,ISATTRSPACE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCSTATUS:
 		{
-			AST tmp711_AST_in = (AST)_t;
+			AST tmp710_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROCHANDLE:
 		{
-			AST tmp712_AST_in = (AST)_t;
+			AST tmp711_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURSOR:
 		{
-			AST tmp713_AST_in = (AST)_t;
+			AST tmp712_AST_in = (AST)_t;
 			match(_t,CURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSERROR:
 		{
-			AST tmp714_AST_in = (AST)_t;
+			AST tmp713_AST_in = (AST)_t;
 			match(_t,OSERROR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURNVALUE:
 		{
-			AST tmp715_AST_in = (AST)_t;
+			AST tmp714_AST_in = (AST)_t;
 			match(_t,RETURNVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OSDRIVES:
 		{
-			AST tmp716_AST_in = (AST)_t;
+			AST tmp715_AST_in = (AST)_t;
 			match(_t,OSDRIVES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROVERSION:
 		{
-			AST tmp717_AST_in = (AST)_t;
+			AST tmp716_AST_in = (AST)_t;
 			match(_t,PROVERSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TRANSACTION:
 		{
-			AST tmp718_AST_in = (AST)_t;
+			AST tmp717_AST_in = (AST)_t;
 			match(_t,TRANSACTION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MACHINECLASS:
 		{
-			AST tmp719_AST_in = (AST)_t;
+			AST tmp718_AST_in = (AST)_t;
 			match(_t,MACHINECLASS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AAPCONTROL:
 		{
-			AST tmp720_AST_in = (AST)_t;
+			AST tmp719_AST_in = (AST)_t;
 			match(_t,AAPCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case GETCODEPAGES:
 		{
-			AST tmp721_AST_in = (AST)_t;
+			AST tmp720_AST_in = (AST)_t;
 			match(_t,GETCODEPAGES);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp722_AST_in = (AST)_t;
+			AST tmp721_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
@@ -9415,14 +9414,14 @@
 			switch ( _t.getType()) {
 			case PLUS:
 			{
-				AST tmp723_AST_in = (AST)_t;
+				AST tmp722_AST_in = (AST)_t;
 				match(_t,PLUS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINUS:
 			{
-				AST tmp724_AST_in = (AST)_t;
+				AST tmp723_AST_in = (AST)_t;
 				match(_t,MINUS);
 				_t = _t.getNextSibling();
 				break;
@@ -9455,7 +9454,7 @@
 		AST buffercomparestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t173 = _t;
-		AST tmp725_AST_in = (AST)_t;
+		AST tmp724_AST_in = (AST)_t;
 		match(_t,BUFFERCOMPARE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -9466,7 +9465,7 @@
 		case EXCEPT:
 		{
 			AST __t175 = _t;
-			AST tmp726_AST_in = (AST)_t;
+			AST tmp725_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -9490,7 +9489,7 @@
 		case USING:
 		{
 			AST __t178 = _t;
-			AST tmp727_AST_in = (AST)_t;
+			AST tmp726_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -9523,7 +9522,7 @@
 		}
 		}
 		}
-		AST tmp728_AST_in = (AST)_t;
+		AST tmp727_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.REF);
@@ -9533,14 +9532,14 @@
 		switch ( _t.getType()) {
 		case CASESENSITIVE:
 		{
-			AST tmp729_AST_in = (AST)_t;
+			AST tmp728_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BINARY:
 		{
-			AST tmp730_AST_in = (AST)_t;
+			AST tmp729_AST_in = (AST)_t;
 			match(_t,BINARY);
 			_t = _t.getNextSibling();
 			break;
@@ -9567,7 +9566,7 @@
 		case SAVE:
 		{
 			AST __t183 = _t;
-			AST tmp731_AST_in = (AST)_t;
+			AST tmp730_AST_in = (AST)_t;
 			match(_t,SAVE);
 			_t = _t.getFirstChild();
 			{
@@ -9576,10 +9575,10 @@
 			case RESULT:
 			{
 				AST __t185 = _t;
-				AST tmp732_AST_in = (AST)_t;
+				AST tmp731_AST_in = (AST)_t;
 				match(_t,RESULT);
 				_t = _t.getFirstChild();
-				AST tmp733_AST_in = (AST)_t;
+				AST tmp732_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
 				_t = __t185;
@@ -9622,7 +9621,7 @@
 		switch ( _t.getType()) {
 		case EXPLICIT:
 		{
-			AST tmp734_AST_in = (AST)_t;
+			AST tmp733_AST_in = (AST)_t;
 			match(_t,EXPLICIT);
 			_t = _t.getNextSibling();
 			break;
@@ -9646,7 +9645,7 @@
 		switch ( _t.getType()) {
 		case COMPARES:
 		{
-			AST tmp735_AST_in = (AST)_t;
+			AST tmp734_AST_in = (AST)_t;
 			match(_t,COMPARES);
 			_t = _t.getNextSibling();
 			{
@@ -9654,7 +9653,7 @@
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp736_AST_in = (AST)_t;
+				AST tmp735_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -9673,7 +9672,7 @@
 			block_colon(_t);
 			_t = _retTree;
 			AST __t189 = _t;
-			AST tmp737_AST_in = (AST)_t;
+			AST tmp736_AST_in = (AST)_t;
 			match(_t,Code_block);
 			_t = _t.getFirstChild();
 			{
@@ -9682,12 +9681,12 @@
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==WHEN)) {
 					AST __t191 = _t;
-					AST tmp738_AST_in = (AST)_t;
+					AST tmp737_AST_in = (AST)_t;
 					match(_t,WHEN);
 					_t = _t.getFirstChild();
 					expression(_t);
 					_t = _retTree;
-					AST tmp739_AST_in = (AST)_t;
+					AST tmp738_AST_in = (AST)_t;
 					match(_t,THEN);
 					_t = _t.getNextSibling();
 					blockorstate(_t);
@@ -9704,7 +9703,7 @@
 			_t = __t189;
 			_t = _t.getNextSibling();
 			AST __t193 = _t;
-			AST tmp740_AST_in = (AST)_t;
+			AST tmp739_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -9712,7 +9711,7 @@
 			switch ( _t.getType()) {
 			case COMPARES:
 			{
-				AST tmp741_AST_in = (AST)_t;
+				AST tmp740_AST_in = (AST)_t;
 				match(_t,COMPARES);
 				_t = _t.getNextSibling();
 				break;
@@ -9749,7 +9748,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp742_AST_in = (AST)_t;
+			AST tmp741_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -9771,7 +9770,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp743_AST_in = (AST)_t;
+			AST tmp742_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -9802,14 +9801,14 @@
 		switch ( _t.getType()) {
 		case LEXCOLON:
 		{
-			AST tmp744_AST_in = (AST)_t;
+			AST tmp743_AST_in = (AST)_t;
 			match(_t,LEXCOLON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PERIOD:
 		{
-			AST tmp745_AST_in = (AST)_t;
+			AST tmp744_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 			break;
@@ -9830,14 +9829,14 @@
 		switch ( _t.getType()) {
 		case PERIOD:
 		{
-			AST tmp746_AST_in = (AST)_t;
+			AST tmp745_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EOF:
 		{
-			AST tmp747_AST_in = (AST)_t;
+			AST tmp746_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
@@ -9855,7 +9854,7 @@
 		AST buffercopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t198 = _t;
-		AST tmp748_AST_in = (AST)_t;
+		AST tmp747_AST_in = (AST)_t;
 		match(_t,BUFFERCOPY);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -9866,7 +9865,7 @@
 		case EXCEPT:
 		{
 			AST __t200 = _t;
-			AST tmp749_AST_in = (AST)_t;
+			AST tmp748_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -9890,7 +9889,7 @@
 		case USING:
 		{
 			AST __t203 = _t;
-			AST tmp750_AST_in = (AST)_t;
+			AST tmp749_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -9923,7 +9922,7 @@
 		}
 		}
 		}
-		AST tmp751_AST_in = (AST)_t;
+		AST tmp750_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.UPDATING);
@@ -9934,7 +9933,7 @@
 		case ASSIGN:
 		{
 			AST __t207 = _t;
-			AST tmp752_AST_in = (AST)_t;
+			AST tmp751_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getFirstChild();
 			assignment_list(_t);
@@ -9961,7 +9960,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp753_AST_in = (AST)_t;
+			AST tmp752_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -9983,7 +9982,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp754_AST_in = (AST)_t;
+			AST tmp753_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -10014,42 +10013,42 @@
 		switch ( _t.getType()) {
 		case CURRENT:
 		{
-			AST tmp755_AST_in = (AST)_t;
+			AST tmp754_AST_in = (AST)_t;
 			match(_t,CURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EACH:
 		{
-			AST tmp756_AST_in = (AST)_t;
+			AST tmp755_AST_in = (AST)_t;
 			match(_t,EACH);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIRST:
 		{
-			AST tmp757_AST_in = (AST)_t;
+			AST tmp756_AST_in = (AST)_t;
 			match(_t,FIRST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LAST:
 		{
-			AST tmp758_AST_in = (AST)_t;
+			AST tmp757_AST_in = (AST)_t;
 			match(_t,LAST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NEXT:
 		{
-			AST tmp759_AST_in = (AST)_t;
+			AST tmp758_AST_in = (AST)_t;
 			match(_t,NEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PREV:
 		{
-			AST tmp760_AST_in = (AST)_t;
+			AST tmp759_AST_in = (AST)_t;
 			match(_t,PREV);
 			_t = _t.getNextSibling();
 			break;
@@ -10140,7 +10139,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TODAY)) {
-			AST tmp761_AST_in = (AST)_t;
+			AST tmp760_AST_in = (AST)_t;
 			match(_t,TODAY);
 			_t = _t.getNextSibling();
 		}
@@ -10163,10 +10162,10 @@
 			case LEFT:
 			{
 				AST __t1063 = _t;
-				AST tmp762_AST_in = (AST)_t;
+				AST tmp761_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
-				AST tmp763_AST_in = (AST)_t;
+				AST tmp762_AST_in = (AST)_t;
 				match(_t,OUTERJOIN);
 				_t = _t.getNextSibling();
 				_t = __t1063;
@@ -10175,7 +10174,7 @@
 			}
 			case OUTERJOIN:
 			{
-				AST tmp764_AST_in = (AST)_t;
+				AST tmp763_AST_in = (AST)_t;
 				match(_t,OUTERJOIN);
 				_t = _t.getNextSibling();
 				break;
@@ -10183,7 +10182,7 @@
 			case OF:
 			{
 				AST __t1064 = _t;
-				AST tmp765_AST_in = (AST)_t;
+				AST tmp764_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.REF);
@@ -10195,7 +10194,7 @@
 			case WHERE:
 			{
 				AST __t1065 = _t;
-				AST tmp766_AST_in = (AST)_t;
+				AST tmp765_AST_in = (AST)_t;
 				match(_t,WHERE);
 				_t = _t.getFirstChild();
 				{
@@ -10218,10 +10217,10 @@
 			case USEINDEX:
 			{
 				AST __t1067 = _t;
-				AST tmp767_AST_in = (AST)_t;
+				AST tmp766_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp768_AST_in = (AST)_t;
+				AST tmp767_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				_t = __t1067;
@@ -10231,7 +10230,7 @@
 			case USING:
 			{
 				AST __t1068 = _t;
-				AST tmp769_AST_in = (AST)_t;
+				AST tmp768_AST_in = (AST)_t;
 				match(_t,USING);
 				_t = _t.getFirstChild();
 				fld1(_t,CQ.SYMBOL);
@@ -10241,7 +10240,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==AND)) {
-						AST tmp770_AST_in = (AST)_t;
+						AST tmp769_AST_in = (AST)_t;
 						match(_t,AND);
 						_t = _t.getNextSibling();
 						fld1(_t,CQ.SYMBOL);
@@ -10267,21 +10266,21 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp771_AST_in = (AST)_t;
+				AST tmp770_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOPREFETCH:
 			{
-				AST tmp772_AST_in = (AST)_t;
+				AST tmp771_AST_in = (AST)_t;
 				match(_t,NOPREFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp773_AST_in = (AST)_t;
+				AST tmp772_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -10311,14 +10310,14 @@
 		switch ( _t.getType()) {
 		case ROW:
 		{
-			AST tmp774_AST_in = (AST)_t;
+			AST tmp773_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp775_AST_in = (AST)_t;
+			AST tmp774_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -10353,7 +10352,7 @@
 				case HELP:
 				{
 					AST __t220 = _t;
-					AST tmp776_AST_in = (AST)_t;
+					AST tmp775_AST_in = (AST)_t;
 					match(_t,HELP);
 					_t = _t.getFirstChild();
 					constant(_t);
@@ -10389,7 +10388,7 @@
 			switch ( _t.getType()) {
 			case AUTORETURN:
 			{
-				AST tmp777_AST_in = (AST)_t;
+				AST tmp776_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -10397,7 +10396,7 @@
 			case COLOR:
 			{
 				AST __t223 = _t;
-				AST tmp778_AST_in = (AST)_t;
+				AST tmp777_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -10415,7 +10414,7 @@
 			case KEYS:
 			{
 				AST __t224 = _t;
-				AST tmp779_AST_in = (AST)_t;
+				AST tmp778_AST_in = (AST)_t;
 				match(_t,KEYS);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -10426,7 +10425,7 @@
 			}
 			case NOERROR_KW:
 			{
-				AST tmp780_AST_in = (AST)_t;
+				AST tmp779_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -10434,7 +10433,7 @@
 			case PAUSE:
 			{
 				AST __t225 = _t;
-				AST tmp781_AST_in = (AST)_t;
+				AST tmp780_AST_in = (AST)_t;
 				match(_t,PAUSE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -10489,15 +10488,15 @@
 		case VALUE:
 		{
 			AST __t1561 = _t;
-			AST tmp782_AST_in = (AST)_t;
+			AST tmp781_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp783_AST_in = (AST)_t;
+			AST tmp782_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp784_AST_in = (AST)_t;
+			AST tmp783_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t1561;
@@ -10506,7 +10505,7 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp785_AST_in = (AST)_t;
+			AST tmp784_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			break;
@@ -10524,10 +10523,10 @@
 		AST goonphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1933 = _t;
-		AST tmp786_AST_in = (AST)_t;
+		AST tmp785_AST_in = (AST)_t;
 		match(_t,GOON);
 		_t = _t.getFirstChild();
-		AST tmp787_AST_in = (AST)_t;
+		AST tmp786_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		goon_elem(_t);
@@ -10540,7 +10539,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp788_AST_in = (AST)_t;
+					AST tmp787_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 				}
@@ -10560,7 +10559,7 @@
 			
 		} while (true);
 		}
-		AST tmp789_AST_in = (AST)_t;
+		AST tmp788_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1933;
@@ -10580,7 +10579,7 @@
 		if ( inputState.guessing==0 ) {
 			action.classState(c);
 		}
-		AST tmp790_AST_in = (AST)_t;
+		AST tmp789_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
 		{
@@ -10589,10 +10588,10 @@
 		case INHERITS:
 		{
 			AST __t231 = _t;
-			AST tmp791_AST_in = (AST)_t;
+			AST tmp790_AST_in = (AST)_t;
 			match(_t,INHERITS);
 			_t = _t.getFirstChild();
-			AST tmp792_AST_in = (AST)_t;
+			AST tmp791_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			_t = __t231;
@@ -10618,10 +10617,10 @@
 		case IMPLEMENTS:
 		{
 			AST __t233 = _t;
-			AST tmp793_AST_in = (AST)_t;
+			AST tmp792_AST_in = (AST)_t;
 			match(_t,IMPLEMENTS);
 			_t = _t.getFirstChild();
-			AST tmp794_AST_in = (AST)_t;
+			AST tmp793_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			{
@@ -10629,10 +10628,10 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp795_AST_in = (AST)_t;
+					AST tmp794_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
-					AST tmp796_AST_in = (AST)_t;
+					AST tmp795_AST_in = (AST)_t;
 					match(_t,TYPE_NAME);
 					_t = _t.getNextSibling();
 				}
@@ -10663,7 +10662,7 @@
 		switch ( _t.getType()) {
 		case FINAL:
 		{
-			AST tmp797_AST_in = (AST)_t;
+			AST tmp796_AST_in = (AST)_t;
 			match(_t,FINAL);
 			_t = _t.getNextSibling();
 			break;
@@ -10684,7 +10683,7 @@
 		code_block(_t);
 		_t = _retTree;
 		AST __t237 = _t;
-		AST tmp798_AST_in = (AST)_t;
+		AST tmp797_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -10692,7 +10691,7 @@
 		switch ( _t.getType()) {
 		case CLASS:
 		{
-			AST tmp799_AST_in = (AST)_t;
+			AST tmp798_AST_in = (AST)_t;
 			match(_t,CLASS);
 			_t = _t.getNextSibling();
 			break;
@@ -10721,7 +10720,7 @@
 		AST code_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1379 = _t;
-		AST tmp800_AST_in = (AST)_t;
+		AST tmp799_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
@@ -10779,7 +10778,7 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp801_AST_in = (AST)_t;
+			AST tmp800_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
@@ -10801,7 +10800,7 @@
 		switch ( _t.getType()) {
 		case NOPAUSE:
 		{
-			AST tmp802_AST_in = (AST)_t;
+			AST tmp801_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
@@ -10832,13 +10831,13 @@
 		AST closestoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t245 = _t;
-		AST tmp803_AST_in = (AST)_t;
+		AST tmp802_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp804_AST_in = (AST)_t;
+		AST tmp803_AST_in = (AST)_t;
 		match(_t,STOREDPROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp805_AST_in = (AST)_t;
+		AST tmp804_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -10847,12 +10846,12 @@
 		case EQUAL:
 		{
 			AST __t247 = _t;
-			AST tmp806_AST_in = (AST)_t;
+			AST tmp805_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.REF);
 			_t = _retTree;
-			AST tmp807_AST_in = (AST)_t;
+			AST tmp806_AST_in = (AST)_t;
 			match(_t,PROCSTATUS);
 			_t = _t.getNextSibling();
 			_t = __t247;
@@ -10877,13 +10876,13 @@
 		case WHERE:
 		{
 			AST __t249 = _t;
-			AST tmp808_AST_in = (AST)_t;
+			AST tmp807_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
-			AST tmp809_AST_in = (AST)_t;
+			AST tmp808_AST_in = (AST)_t;
 			match(_t,PROCHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp810_AST_in = (AST)_t;
+			AST tmp809_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.REF);
@@ -10935,7 +10934,7 @@
 			case DISPLAY:
 			{
 				AST __t254 = _t;
-				AST tmp811_AST_in = (AST)_t;
+				AST tmp810_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -10947,7 +10946,7 @@
 			case PROMPT:
 			{
 				AST __t255 = _t;
-				AST tmp812_AST_in = (AST)_t;
+				AST tmp811_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -10968,7 +10967,7 @@
 			case DISPLAY:
 			{
 				AST __t257 = _t;
-				AST tmp813_AST_in = (AST)_t;
+				AST tmp812_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -10980,7 +10979,7 @@
 			case PROMPT:
 			{
 				AST __t258 = _t;
-				AST tmp814_AST_in = (AST)_t;
+				AST tmp813_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -11094,7 +11093,7 @@
 		AST formatphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t814 = _t;
-		AST tmp815_AST_in = (AST)_t;
+		AST tmp814_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -11106,7 +11105,7 @@
 			case AS:
 			{
 				AST __t816 = _t;
-				AST tmp816_AST_in = (AST)_t;
+				AST tmp815_AST_in = (AST)_t;
 				match(_t,AS);
 				_t = _t.getFirstChild();
 				datatype_var(_t);
@@ -11123,21 +11122,21 @@
 			}
 			case ATTRSPACE:
 			{
-				AST tmp817_AST_in = (AST)_t;
+				AST tmp816_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp818_AST_in = (AST)_t;
+				AST tmp817_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTORETURN:
 			{
-				AST tmp819_AST_in = (AST)_t;
+				AST tmp818_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -11154,7 +11153,7 @@
 			case CONTEXTHELPID:
 			{
 				AST __t817 = _t;
-				AST tmp820_AST_in = (AST)_t;
+				AST tmp819_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11165,7 +11164,7 @@
 			}
 			case BLANK:
 			{
-				AST tmp821_AST_in = (AST)_t;
+				AST tmp820_AST_in = (AST)_t;
 				match(_t,BLANK);
 				_t = _t.getNextSibling();
 				break;
@@ -11173,7 +11172,7 @@
 			case COLON:
 			{
 				AST __t818 = _t;
-				AST tmp822_AST_in = (AST)_t;
+				AST tmp821_AST_in = (AST)_t;
 				match(_t,COLON);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11185,7 +11184,7 @@
 			case TO:
 			{
 				AST __t819 = _t;
-				AST tmp823_AST_in = (AST)_t;
+				AST tmp822_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11196,14 +11195,14 @@
 			}
 			case DEBLANK:
 			{
-				AST tmp824_AST_in = (AST)_t;
+				AST tmp823_AST_in = (AST)_t;
 				match(_t,DEBLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DISABLEAUTOZAP:
 			{
-				AST tmp825_AST_in = (AST)_t;
+				AST tmp824_AST_in = (AST)_t;
 				match(_t,DISABLEAUTOZAP);
 				_t = _t.getNextSibling();
 				break;
@@ -11211,7 +11210,7 @@
 			case FONT:
 			{
 				AST __t820 = _t;
-				AST tmp826_AST_in = (AST)_t;
+				AST tmp825_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11223,7 +11222,7 @@
 			case FORMAT:
 			{
 				AST __t821 = _t;
-				AST tmp827_AST_in = (AST)_t;
+				AST tmp826_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11235,7 +11234,7 @@
 			case HELP:
 			{
 				AST __t822 = _t;
-				AST tmp828_AST_in = (AST)_t;
+				AST tmp827_AST_in = (AST)_t;
 				match(_t,HELP);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -11254,7 +11253,7 @@
 			case LEXAT:
 			{
 				AST __t823 = _t;
-				AST tmp829_AST_in = (AST)_t;
+				AST tmp828_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11285,7 +11284,7 @@
 			case LIKE:
 			{
 				AST __t825 = _t;
-				AST tmp830_AST_in = (AST)_t;
+				AST tmp829_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11296,14 +11295,14 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp831_AST_in = (AST)_t;
+				AST tmp830_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOTABSTOP:
 			{
-				AST tmp832_AST_in = (AST)_t;
+				AST tmp831_AST_in = (AST)_t;
 				match(_t,NOTABSTOP);
 				_t = _t.getNextSibling();
 				break;
@@ -11311,7 +11310,7 @@
 			case VALIDATE:
 			{
 				AST __t826 = _t;
-				AST tmp833_AST_in = (AST)_t;
+				AST tmp832_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getFirstChild();
 				funargs(_t);
@@ -11323,7 +11322,7 @@
 			case WHEN:
 			{
 				AST __t827 = _t;
-				AST tmp834_AST_in = (AST)_t;
+				AST tmp833_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11356,7 +11355,7 @@
 		AST columnformat_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t265 = _t;
-		AST tmp835_AST_in = (AST)_t;
+		AST tmp834_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -11368,7 +11367,7 @@
 			case FORMAT:
 			{
 				AST __t267 = _t;
-				AST tmp836_AST_in = (AST)_t;
+				AST tmp835_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11386,7 +11385,7 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp837_AST_in = (AST)_t;
+				AST tmp836_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
@@ -11394,7 +11393,7 @@
 			case COLUMNFONT:
 			{
 				AST __t268 = _t;
-				AST tmp838_AST_in = (AST)_t;
+				AST tmp837_AST_in = (AST)_t;
 				match(_t,COLUMNFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11406,7 +11405,7 @@
 			case COLUMNDCOLOR:
 			{
 				AST __t269 = _t;
-				AST tmp839_AST_in = (AST)_t;
+				AST tmp838_AST_in = (AST)_t;
 				match(_t,COLUMNDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11418,7 +11417,7 @@
 			case COLUMNBGCOLOR:
 			{
 				AST __t270 = _t;
-				AST tmp840_AST_in = (AST)_t;
+				AST tmp839_AST_in = (AST)_t;
 				match(_t,COLUMNBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11430,7 +11429,7 @@
 			case COLUMNFGCOLOR:
 			{
 				AST __t271 = _t;
-				AST tmp841_AST_in = (AST)_t;
+				AST tmp840_AST_in = (AST)_t;
 				match(_t,COLUMNFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11442,7 +11441,7 @@
 			case COLUMNPFCOLOR:
 			{
 				AST __t272 = _t;
-				AST tmp842_AST_in = (AST)_t;
+				AST tmp841_AST_in = (AST)_t;
 				match(_t,COLUMNPFCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11454,7 +11453,7 @@
 			case LABELFONT:
 			{
 				AST __t273 = _t;
-				AST tmp843_AST_in = (AST)_t;
+				AST tmp842_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11466,7 +11465,7 @@
 			case LABELDCOLOR:
 			{
 				AST __t274 = _t;
-				AST tmp844_AST_in = (AST)_t;
+				AST tmp843_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11478,7 +11477,7 @@
 			case LABELBGCOLOR:
 			{
 				AST __t275 = _t;
-				AST tmp845_AST_in = (AST)_t;
+				AST tmp844_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11490,7 +11489,7 @@
 			case LABELFGCOLOR:
 			{
 				AST __t276 = _t;
-				AST tmp846_AST_in = (AST)_t;
+				AST tmp845_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11502,7 +11501,7 @@
 			case LEXAT:
 			{
 				AST __t277 = _t;
-				AST tmp847_AST_in = (AST)_t;
+				AST tmp846_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -11533,10 +11532,10 @@
 			case WIDTH:
 			{
 				AST __t279 = _t;
-				AST tmp848_AST_in = (AST)_t;
+				AST tmp847_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
-				AST tmp849_AST_in = (AST)_t;
+				AST tmp848_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t279;
@@ -11546,10 +11545,10 @@
 			case WIDTHPIXELS:
 			{
 				AST __t280 = _t;
-				AST tmp850_AST_in = (AST)_t;
+				AST tmp849_AST_in = (AST)_t;
 				match(_t,WIDTHPIXELS);
 				_t = _t.getFirstChild();
-				AST tmp851_AST_in = (AST)_t;
+				AST tmp850_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t280;
@@ -11559,10 +11558,10 @@
 			case WIDTHCHARS:
 			{
 				AST __t281 = _t;
-				AST tmp852_AST_in = (AST)_t;
+				AST tmp851_AST_in = (AST)_t;
 				match(_t,WIDTHCHARS);
 				_t = _t.getFirstChild();
-				AST tmp853_AST_in = (AST)_t;
+				AST tmp852_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t281;
@@ -11599,14 +11598,14 @@
 		switch ( _t.getType()) {
 		case PUBLIC:
 		{
-			AST tmp854_AST_in = (AST)_t;
+			AST tmp853_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROTECTED:
 		{
-			AST tmp855_AST_in = (AST)_t;
+			AST tmp854_AST_in = (AST)_t;
 			match(_t,PROTECTED);
 			_t = _t.getNextSibling();
 			break;
@@ -11617,7 +11616,7 @@
 		}
 		}
 		}
-		AST tmp856_AST_in = (AST)_t;
+		AST tmp855_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
 		function_params(_t);
@@ -11627,7 +11626,7 @@
 		code_block(_t);
 		_t = _retTree;
 		AST __t286 = _t;
-		AST tmp857_AST_in = (AST)_t;
+		AST tmp856_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -11635,7 +11634,7 @@
 		switch ( _t.getType()) {
 		case CONSTRUCTOR:
 		{
-			AST tmp858_AST_in = (AST)_t;
+			AST tmp857_AST_in = (AST)_t;
 			match(_t,CONSTRUCTOR);
 			_t = _t.getNextSibling();
 			break;
@@ -11667,10 +11666,10 @@
 		AST function_params_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1924 = _t;
-		AST tmp859_AST_in = (AST)_t;
+		AST tmp858_AST_in = (AST)_t;
 		match(_t,Parameter_list);
 		_t = _t.getFirstChild();
-		AST tmp860_AST_in = (AST)_t;
+		AST tmp859_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -11701,7 +11700,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp861_AST_in = (AST)_t;
+				AST tmp860_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				function_param(_t);
@@ -11713,7 +11712,7 @@
 			
 		} while (true);
 		}
-		AST tmp862_AST_in = (AST)_t;
+		AST tmp861_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1924;
@@ -11726,7 +11725,7 @@
 		AST createstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t289 = _t;
-		AST tmp863_AST_in = (AST)_t;
+		AST tmp862_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -11737,7 +11736,7 @@
 		case USING:
 		{
 			AST __t291 = _t;
-			AST tmp864_AST_in = (AST)_t;
+			AST tmp863_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -11745,14 +11744,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp865_AST_in = (AST)_t;
+				AST tmp864_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp866_AST_in = (AST)_t;
+				AST tmp865_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -11786,7 +11785,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp867_AST_in = (AST)_t;
+			AST tmp866_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11821,10 +11820,10 @@
 		case IN_KW:
 		{
 			AST __t296 = _t;
-			AST tmp868_AST_in = (AST)_t;
+			AST tmp867_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp869_AST_in = (AST)_t;
+			AST tmp868_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -11850,7 +11849,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp870_AST_in = (AST)_t;
+			AST tmp869_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11874,10 +11873,10 @@
 		AST createautomationobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t299 = _t;
-		AST tmp871_AST_in = (AST)_t;
+		AST tmp870_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp872_AST_in = (AST)_t;
+		AST tmp871_AST_in = (AST)_t;
 		match(_t,QSTRING);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -11888,7 +11887,7 @@
 		case CONNECT:
 		{
 			AST __t301 = _t;
-			AST tmp873_AST_in = (AST)_t;
+			AST tmp872_AST_in = (AST)_t;
 			match(_t,CONNECT);
 			_t = _t.getFirstChild();
 			{
@@ -11897,7 +11896,7 @@
 			case TO:
 			{
 				AST __t303 = _t;
-				AST tmp874_AST_in = (AST)_t;
+				AST tmp873_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -11937,7 +11936,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp875_AST_in = (AST)_t;
+			AST tmp874_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -11965,10 +11964,10 @@
 		AST createbrowsestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t306 = _t;
-		AST tmp876_AST_in = (AST)_t;
+		AST tmp875_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp877_AST_in = (AST)_t;
+		AST tmp876_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -11979,10 +11978,10 @@
 		case IN_KW:
 		{
 			AST __t308 = _t;
-			AST tmp878_AST_in = (AST)_t;
+			AST tmp877_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp879_AST_in = (AST)_t;
+			AST tmp878_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -12010,7 +12009,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp880_AST_in = (AST)_t;
+			AST tmp879_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12081,7 +12080,7 @@
 		AST assign_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1640 = _t;
-		AST tmp881_AST_in = (AST)_t;
+		AST tmp880_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		{
@@ -12091,10 +12090,10 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==EQUAL)) {
 				AST __t1642 = _t;
-				AST tmp882_AST_in = (AST)_t;
+				AST tmp881_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
-				AST tmp883_AST_in = (AST)_t;
+				AST tmp882_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -12120,13 +12119,13 @@
 		AST on = null;
 		
 		AST __t1172 = _t;
-		AST tmp884_AST_in = (AST)_t;
+		AST tmp883_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getFirstChild();
 		block_colon(_t);
 		_t = _retTree;
 		AST __t1173 = _t;
-		AST tmp885_AST_in = (AST)_t;
+		AST tmp884_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
@@ -12148,7 +12147,7 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp886_AST_in = (AST)_t;
+					AST tmp885_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
@@ -12287,7 +12286,7 @@
 				switch ( _t.getType()) {
 				case PERSISTENT:
 				{
-					AST tmp887_AST_in = (AST)_t;
+					AST tmp886_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					runstate(_t);
@@ -12439,7 +12438,7 @@
 		_t = __t1173;
 		_t = _t.getNextSibling();
 		AST __t1179 = _t;
-		AST tmp888_AST_in = (AST)_t;
+		AST tmp887_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -12447,7 +12446,7 @@
 		switch ( _t.getType()) {
 		case TRIGGERS:
 		{
-			AST tmp889_AST_in = (AST)_t;
+			AST tmp888_AST_in = (AST)_t;
 			match(_t,TRIGGERS);
 			_t = _t.getNextSibling();
 			break;
@@ -12474,18 +12473,18 @@
 		AST createbufferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t313 = _t;
-		AST tmp890_AST_in = (AST)_t;
+		AST tmp889_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp891_AST_in = (AST)_t;
+		AST tmp890_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp892_AST_in = (AST)_t;
+		AST tmp891_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp893_AST_in = (AST)_t;
+		AST tmp892_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -12496,7 +12495,7 @@
 		case BUFFERNAME:
 		{
 			AST __t315 = _t;
-			AST tmp894_AST_in = (AST)_t;
+			AST tmp893_AST_in = (AST)_t;
 			match(_t,BUFFERNAME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -12524,10 +12523,10 @@
 		case IN_KW:
 		{
 			AST __t317 = _t;
-			AST tmp895_AST_in = (AST)_t;
+			AST tmp894_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp896_AST_in = (AST)_t;
+			AST tmp895_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -12553,7 +12552,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp897_AST_in = (AST)_t;
+			AST tmp896_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12581,10 +12580,10 @@
 		AST createserverstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t320 = _t;
-		AST tmp898_AST_in = (AST)_t;
+		AST tmp897_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp899_AST_in = (AST)_t;
+		AST tmp898_AST_in = (AST)_t;
 		match(_t,SERVER);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12621,10 +12620,10 @@
 		AST createserversocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t323 = _t;
-		AST tmp900_AST_in = (AST)_t;
+		AST tmp899_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp901_AST_in = (AST)_t;
+		AST tmp900_AST_in = (AST)_t;
 		match(_t,SERVERSOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12634,7 +12633,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp902_AST_in = (AST)_t;
+			AST tmp901_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12662,10 +12661,10 @@
 		AST createsocketstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t326 = _t;
-		AST tmp903_AST_in = (AST)_t;
+		AST tmp902_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp904_AST_in = (AST)_t;
+		AST tmp903_AST_in = (AST)_t;
 		match(_t,SOCKET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12675,7 +12674,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp905_AST_in = (AST)_t;
+			AST tmp904_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12703,10 +12702,10 @@
 		AST createtemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t329 = _t;
-		AST tmp906_AST_in = (AST)_t;
+		AST tmp905_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp907_AST_in = (AST)_t;
+		AST tmp906_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -12717,10 +12716,10 @@
 		case IN_KW:
 		{
 			AST __t331 = _t;
-			AST tmp908_AST_in = (AST)_t;
+			AST tmp907_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp909_AST_in = (AST)_t;
+			AST tmp908_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -12746,7 +12745,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp910_AST_in = (AST)_t;
+			AST tmp909_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -12774,7 +12773,7 @@
 		AST createwidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t334 = _t;
-		AST tmp911_AST_in = (AST)_t;
+		AST tmp910_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -12788,126 +12787,126 @@
 		}
 		case BUTTON:
 		{
-			AST tmp912_AST_in = (AST)_t;
+			AST tmp911_AST_in = (AST)_t;
 			match(_t,BUTTON);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMBOBOX:
 		{
-			AST tmp913_AST_in = (AST)_t;
+			AST tmp912_AST_in = (AST)_t;
 			match(_t,COMBOBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CONTROLFRAME:
 		{
-			AST tmp914_AST_in = (AST)_t;
+			AST tmp913_AST_in = (AST)_t;
 			match(_t,CONTROLFRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DIALOGBOX:
 		{
-			AST tmp915_AST_in = (AST)_t;
+			AST tmp914_AST_in = (AST)_t;
 			match(_t,DIALOGBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EDITOR:
 		{
-			AST tmp916_AST_in = (AST)_t;
+			AST tmp915_AST_in = (AST)_t;
 			match(_t,EDITOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILLIN:
 		{
-			AST tmp917_AST_in = (AST)_t;
+			AST tmp916_AST_in = (AST)_t;
 			match(_t,FILLIN);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp918_AST_in = (AST)_t;
+			AST tmp917_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IMAGE:
 		{
-			AST tmp919_AST_in = (AST)_t;
+			AST tmp918_AST_in = (AST)_t;
 			match(_t,IMAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp920_AST_in = (AST)_t;
+			AST tmp919_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp921_AST_in = (AST)_t;
+			AST tmp920_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RADIOSET:
 		{
-			AST tmp922_AST_in = (AST)_t;
+			AST tmp921_AST_in = (AST)_t;
 			match(_t,RADIOSET);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECTANGLE:
 		{
-			AST tmp923_AST_in = (AST)_t;
+			AST tmp922_AST_in = (AST)_t;
 			match(_t,RECTANGLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELECTIONLIST:
 		{
-			AST tmp924_AST_in = (AST)_t;
+			AST tmp923_AST_in = (AST)_t;
 			match(_t,SELECTIONLIST);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SLIDER:
 		{
-			AST tmp925_AST_in = (AST)_t;
+			AST tmp924_AST_in = (AST)_t;
 			match(_t,SLIDER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp926_AST_in = (AST)_t;
+			AST tmp925_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXT:
 		{
-			AST tmp927_AST_in = (AST)_t;
+			AST tmp926_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TOGGLEBOX:
 		{
-			AST tmp928_AST_in = (AST)_t;
+			AST tmp927_AST_in = (AST)_t;
 			match(_t,TOGGLEBOX);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WINDOW:
 		{
-			AST tmp929_AST_in = (AST)_t;
+			AST tmp928_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			break;
@@ -12926,10 +12925,10 @@
 		case IN_KW:
 		{
 			AST __t337 = _t;
-			AST tmp930_AST_in = (AST)_t;
+			AST tmp929_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp931_AST_in = (AST)_t;
+			AST tmp930_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -12957,7 +12956,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp932_AST_in = (AST)_t;
+			AST tmp931_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13028,15 +13027,15 @@
 		AST valueexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1563 = _t;
-		AST tmp933_AST_in = (AST)_t;
+		AST tmp932_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getFirstChild();
-		AST tmp934_AST_in = (AST)_t;
+		AST tmp933_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp935_AST_in = (AST)_t;
+		AST tmp934_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1563;
@@ -13049,20 +13048,20 @@
 		AST ddegetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t342 = _t;
-		AST tmp936_AST_in = (AST)_t;
+		AST tmp935_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp937_AST_in = (AST)_t;
+		AST tmp936_AST_in = (AST)_t;
 		match(_t,GET);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp938_AST_in = (AST)_t;
+		AST tmp937_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp939_AST_in = (AST)_t;
+		AST tmp938_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -13073,7 +13072,7 @@
 		case TIME:
 		{
 			AST __t344 = _t;
-			AST tmp940_AST_in = (AST)_t;
+			AST tmp939_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -13099,7 +13098,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp941_AST_in = (AST)_t;
+			AST tmp940_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13127,25 +13126,25 @@
 		AST ddeinitiatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t347 = _t;
-		AST tmp942_AST_in = (AST)_t;
+		AST tmp941_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp943_AST_in = (AST)_t;
+		AST tmp942_AST_in = (AST)_t;
 		match(_t,INITIATE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp944_AST_in = (AST)_t;
+		AST tmp943_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp945_AST_in = (AST)_t;
+		AST tmp944_AST_in = (AST)_t;
 		match(_t,APPLICATION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp946_AST_in = (AST)_t;
+		AST tmp945_AST_in = (AST)_t;
 		match(_t,TOPIC);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -13155,7 +13154,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp947_AST_in = (AST)_t;
+			AST tmp946_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13183,20 +13182,20 @@
 		AST dderequeststate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t350 = _t;
-		AST tmp948_AST_in = (AST)_t;
+		AST tmp947_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp949_AST_in = (AST)_t;
+		AST tmp948_AST_in = (AST)_t;
 		match(_t,REQUEST);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp950_AST_in = (AST)_t;
+		AST tmp949_AST_in = (AST)_t;
 		match(_t,TARGET);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
 		_t = _retTree;
-		AST tmp951_AST_in = (AST)_t;
+		AST tmp950_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -13207,7 +13206,7 @@
 		case TIME:
 		{
 			AST __t352 = _t;
-			AST tmp952_AST_in = (AST)_t;
+			AST tmp951_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -13233,7 +13232,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp953_AST_in = (AST)_t;
+			AST tmp952_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -13312,7 +13311,7 @@
 		}
 		}
 		}
-		AST tmp954_AST_in = (AST)_t;
+		AST tmp953_AST_in = (AST)_t;
 		match(_t,BROWSE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -13327,10 +13326,10 @@
 		case QUERY:
 		{
 			AST __t359 = _t;
-			AST tmp955_AST_in = (AST)_t;
+			AST tmp954_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp956_AST_in = (AST)_t;
+			AST tmp955_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t359;
@@ -13371,7 +13370,7 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp957_AST_in = (AST)_t;
+				AST tmp956_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
@@ -13389,7 +13388,7 @@
 		case DISPLAY:
 		{
 			AST __t363 = _t;
-			AST tmp958_AST_in = (AST)_t;
+			AST tmp957_AST_in = (AST)_t;
 			match(_t,DISPLAY);
 			_t = _t.getFirstChild();
 			{
@@ -13474,7 +13473,7 @@
 			case EXCEPT:
 			{
 				AST __t372 = _t;
-				AST tmp959_AST_in = (AST)_t;
+				AST tmp958_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -13513,7 +13512,7 @@
 			case ENABLE:
 			{
 				AST __t376 = _t;
-				AST tmp960_AST_in = (AST)_t;
+				AST tmp959_AST_in = (AST)_t;
 				match(_t,ENABLE);
 				_t = _t.getFirstChild();
 				{
@@ -13522,7 +13521,7 @@
 				case ALL:
 				{
 					AST __t378 = _t;
-					AST tmp961_AST_in = (AST)_t;
+					AST tmp960_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getFirstChild();
 					{
@@ -13531,7 +13530,7 @@
 					case EXCEPT:
 					{
 						AST __t380 = _t;
-						AST tmp962_AST_in = (AST)_t;
+						AST tmp961_AST_in = (AST)_t;
 						match(_t,EXCEPT);
 						_t = _t.getFirstChild();
 						{
@@ -13591,7 +13590,7 @@
 								case HELP:
 								{
 									AST __t386 = _t;
-									AST tmp963_AST_in = (AST)_t;
+									AST tmp962_AST_in = (AST)_t;
 									match(_t,HELP);
 									_t = _t.getFirstChild();
 									constant(_t);
@@ -13603,7 +13602,7 @@
 								case VALIDATE:
 								{
 									AST __t387 = _t;
-									AST tmp964_AST_in = (AST)_t;
+									AST tmp963_AST_in = (AST)_t;
 									match(_t,VALIDATE);
 									_t = _t.getFirstChild();
 									funargs(_t);
@@ -13614,14 +13613,14 @@
 								}
 								case AUTORETURN:
 								{
-									AST tmp965_AST_in = (AST)_t;
+									AST tmp964_AST_in = (AST)_t;
 									match(_t,AUTORETURN);
 									_t = _t.getNextSibling();
 									break;
 								}
 								case DISABLEAUTOZAP:
 								{
-									AST tmp966_AST_in = (AST)_t;
+									AST tmp965_AST_in = (AST)_t;
 									match(_t,DISABLEAUTOZAP);
 									_t = _t.getNextSibling();
 									break;
@@ -13725,7 +13724,7 @@
 		case CONTEXTHELPID:
 		{
 			AST __t394 = _t;
-			AST tmp967_AST_in = (AST)_t;
+			AST tmp966_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -13763,7 +13762,7 @@
 		switch ( _t.getType()) {
 		case SHARED:
 		{
-			AST tmp968_AST_in = (AST)_t;
+			AST tmp967_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -13771,7 +13770,7 @@
 		case NEW:
 		{
 			AST __t1870 = _t;
-			AST tmp969_AST_in = (AST)_t;
+			AST tmp968_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -13779,7 +13778,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp970_AST_in = (AST)_t;
+				AST tmp969_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -13794,7 +13793,7 @@
 			}
 			}
 			}
-			AST tmp971_AST_in = (AST)_t;
+			AST tmp970_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			_t = __t1870;
@@ -13818,21 +13817,21 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp972_AST_in = (AST)_t;
+			AST tmp971_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROTECTED:
 		{
-			AST tmp973_AST_in = (AST)_t;
+			AST tmp972_AST_in = (AST)_t;
 			match(_t,PROTECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLIC:
 		{
-			AST tmp974_AST_in = (AST)_t;
+			AST tmp973_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
@@ -13854,21 +13853,21 @@
 		switch ( _t.getType()) {
 		case SHARELOCK:
 		{
-			AST tmp975_AST_in = (AST)_t;
+			AST tmp974_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp976_AST_in = (AST)_t;
+			AST tmp975_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp977_AST_in = (AST)_t;
+			AST tmp976_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
@@ -13886,7 +13885,7 @@
 		AST spacephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2285 = _t;
-		AST tmp978_AST_in = (AST)_t;
+		AST tmp977_AST_in = (AST)_t;
 		match(_t,SPACE);
 		_t = _t.getFirstChild();
 		{
@@ -13926,13 +13925,13 @@
 			try {
 				{
 				AST __t1895 = _t;
-				AST tmp979_AST_in = (AST)_t;
+				AST tmp978_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp980_AST_in = (AST)_t;
+				AST tmp979_AST_in = (AST)_t;
 				match(_t,BROWSE);
 				_t = _t.getNextSibling();
-				AST tmp981_AST_in = (AST)_t;
+				AST tmp980_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				_t = __t1895;
@@ -13947,13 +13946,13 @@
 		}
 		if ( synPredMatched1896 ) {
 			AST __t1897 = _t;
-			AST tmp982_AST_in = (AST)_t;
+			AST tmp981_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getFirstChild();
-			AST tmp983_AST_in = (AST)_t;
+			AST tmp982_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp984_AST_in = (AST)_t;
+			AST tmp983_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t1897;
@@ -13975,7 +13974,7 @@
 		AST tooltip_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2345 = _t;
-		AST tmp985_AST_in = (AST)_t;
+		AST tmp984_AST_in = (AST)_t;
 		match(_t,TOOLTIP);
 		_t = _t.getFirstChild();
 		{
@@ -14100,13 +14099,13 @@
 		}
 		}
 		}
-		AST tmp986_AST_in = (AST)_t;
+		AST tmp985_AST_in = (AST)_t;
 		match(_t,BUFFER);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp987_AST_in = (AST)_t;
+		AST tmp986_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -14114,7 +14113,7 @@
 		switch ( _t.getType()) {
 		case TEMPTABLE:
 		{
-			AST tmp988_AST_in = (AST)_t;
+			AST tmp987_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
 			break;
@@ -14140,7 +14139,7 @@
 		switch ( _t.getType()) {
 		case PRESELECT:
 		{
-			AST tmp989_AST_in = (AST)_t;
+			AST tmp988_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -14234,7 +14233,7 @@
 		case FIELDS:
 		{
 			AST __t405 = _t;
-			AST tmp990_AST_in = (AST)_t;
+			AST tmp989_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
@@ -14278,7 +14277,7 @@
 		AST namespace_uri_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2036 = _t;
-		AST tmp991_AST_in = (AST)_t;
+		AST tmp990_AST_in = (AST)_t;
 		match(_t,NAMESPACEURI);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -14293,7 +14292,7 @@
 		AST namespace_prefix_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2034 = _t;
-		AST tmp992_AST_in = (AST)_t;
+		AST tmp991_AST_in = (AST)_t;
 		match(_t,NAMESPACEPREFIX);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -14357,7 +14356,7 @@
 		}
 		}
 		}
-		AST tmp993_AST_in = (AST)_t;
+		AST tmp992_AST_in = (AST)_t;
 		match(_t,BUTTON);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -14373,21 +14372,21 @@
 			switch ( _t.getType()) {
 			case AUTOGO:
 			{
-				AST tmp994_AST_in = (AST)_t;
+				AST tmp993_AST_in = (AST)_t;
 				match(_t,AUTOGO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTOENDKEY:
 			{
-				AST tmp995_AST_in = (AST)_t;
+				AST tmp994_AST_in = (AST)_t;
 				match(_t,AUTOENDKEY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DEFAULT:
 			{
-				AST tmp996_AST_in = (AST)_t;
+				AST tmp995_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getNextSibling();
 				break;
@@ -14404,7 +14403,7 @@
 			case CONTEXTHELPID:
 			{
 				AST __t413 = _t;
-				AST tmp997_AST_in = (AST)_t;
+				AST tmp996_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -14415,7 +14414,7 @@
 			}
 			case DROPTARGET:
 			{
-				AST tmp998_AST_in = (AST)_t;
+				AST tmp997_AST_in = (AST)_t;
 				match(_t,DROPTARGET);
 				_t = _t.getNextSibling();
 				break;
@@ -14423,7 +14422,7 @@
 			case FONT:
 			{
 				AST __t414 = _t;
-				AST tmp999_AST_in = (AST)_t;
+				AST tmp998_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -14435,7 +14434,7 @@
 			case IMAGEDOWN:
 			{
 				AST __t415 = _t;
-				AST tmp1000_AST_in = (AST)_t;
+				AST tmp999_AST_in = (AST)_t;
 				match(_t,IMAGEDOWN);
 				_t = _t.getFirstChild();
 				{
@@ -14461,7 +14460,7 @@
 			case IMAGE:
 			{
 				AST __t418 = _t;
-				AST tmp1001_AST_in = (AST)_t;
+				AST tmp1000_AST_in = (AST)_t;
 				match(_t,IMAGE);
 				_t = _t.getFirstChild();
 				{
@@ -14487,7 +14486,7 @@
 			case IMAGEUP:
 			{
 				AST __t421 = _t;
-				AST tmp1002_AST_in = (AST)_t;
+				AST tmp1001_AST_in = (AST)_t;
 				match(_t,IMAGEUP);
 				_t = _t.getFirstChild();
 				{
@@ -14513,7 +14512,7 @@
 			case IMAGEINSENSITIVE:
 			{
 				AST __t424 = _t;
-				AST tmp1003_AST_in = (AST)_t;
+				AST tmp1002_AST_in = (AST)_t;
 				match(_t,IMAGEINSENSITIVE);
 				_t = _t.getFirstChild();
 				{
@@ -14539,7 +14538,7 @@
 			case MOUSEPOINTER:
 			{
 				AST __t427 = _t;
-				AST tmp1004_AST_in = (AST)_t;
+				AST tmp1003_AST_in = (AST)_t;
 				match(_t,MOUSEPOINTER);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -14558,7 +14557,7 @@
 			case LIKE:
 			{
 				AST __t428 = _t;
-				AST tmp1005_AST_in = (AST)_t;
+				AST tmp1004_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -14568,7 +14567,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1006_AST_in = (AST)_t;
+					AST tmp1005_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -14589,7 +14588,7 @@
 			}
 			case FLATBUTTON:
 			{
-				AST tmp1007_AST_in = (AST)_t;
+				AST tmp1006_AST_in = (AST)_t;
 				match(_t,FLATBUTTON);
 				_t = _t.getNextSibling();
 				break;
@@ -14597,7 +14596,7 @@
 			case NOFOCUS:
 			{
 				AST __t430 = _t;
-				AST tmp1008_AST_in = (AST)_t;
+				AST tmp1007_AST_in = (AST)_t;
 				match(_t,NOFOCUS);
 				_t = _t.getFirstChild();
 				{
@@ -14605,7 +14604,7 @@
 				switch ( _t.getType()) {
 				case FLATBUTTON:
 				{
-					AST tmp1009_AST_in = (AST)_t;
+					AST tmp1008_AST_in = (AST)_t;
 					match(_t,FLATBUTTON);
 					_t = _t.getNextSibling();
 					break;
@@ -14626,7 +14625,7 @@
 			}
 			case NOCONVERT3DCOLORS:
 			{
-				AST tmp1010_AST_in = (AST)_t;
+				AST tmp1009_AST_in = (AST)_t;
 				match(_t,NOCONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -14648,7 +14647,7 @@
 				switch ( _t.getType()) {
 				case MARGINEXTRA:
 				{
-					AST tmp1011_AST_in = (AST)_t;
+					AST tmp1010_AST_in = (AST)_t;
 					match(_t,MARGINEXTRA);
 					_t = _t.getNextSibling();
 					break;
@@ -14738,7 +14737,7 @@
 		case BGCOLOR:
 		{
 			AST __t1691 = _t;
-			AST tmp1012_AST_in = (AST)_t;
+			AST tmp1011_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14750,7 +14749,7 @@
 		case DCOLOR:
 		{
 			AST __t1692 = _t;
-			AST tmp1013_AST_in = (AST)_t;
+			AST tmp1012_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14762,7 +14761,7 @@
 		case FGCOLOR:
 		{
 			AST __t1693 = _t;
-			AST tmp1014_AST_in = (AST)_t;
+			AST tmp1013_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14774,7 +14773,7 @@
 		case PFCOLOR:
 		{
 			AST __t1694 = _t;
-			AST tmp1015_AST_in = (AST)_t;
+			AST tmp1014_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14800,7 +14799,7 @@
 		case FILE:
 		{
 			AST __t1958 = _t;
-			AST tmp1016_AST_in = (AST)_t;
+			AST tmp1015_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -14812,12 +14811,12 @@
 		case IMAGESIZE:
 		{
 			AST __t1959 = _t;
-			AST tmp1017_AST_in = (AST)_t;
+			AST tmp1016_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1018_AST_in = (AST)_t;
+			AST tmp1017_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14829,12 +14828,12 @@
 		case IMAGESIZECHARS:
 		{
 			AST __t1960 = _t;
-			AST tmp1019_AST_in = (AST)_t;
+			AST tmp1018_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1020_AST_in = (AST)_t;
+			AST tmp1019_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14846,12 +14845,12 @@
 		case IMAGESIZEPIXELS:
 		{
 			AST __t1961 = _t;
-			AST tmp1021_AST_in = (AST)_t;
+			AST tmp1020_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1022_AST_in = (AST)_t;
+			AST tmp1021_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14863,7 +14862,7 @@
 		case FROM:
 		{
 			AST __t1962 = _t;
-			AST tmp1023_AST_in = (AST)_t;
+			AST tmp1022_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -14871,7 +14870,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp1024_AST_in = (AST)_t;
+				AST tmp1023_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14880,7 +14879,7 @@
 			}
 			case Y:
 			{
-				AST tmp1025_AST_in = (AST)_t;
+				AST tmp1024_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14889,7 +14888,7 @@
 			}
 			case ROW:
 			{
-				AST tmp1026_AST_in = (AST)_t;
+				AST tmp1025_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14898,7 +14897,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp1027_AST_in = (AST)_t;
+				AST tmp1026_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14916,7 +14915,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp1028_AST_in = (AST)_t;
+				AST tmp1027_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14925,7 +14924,7 @@
 			}
 			case Y:
 			{
-				AST tmp1029_AST_in = (AST)_t;
+				AST tmp1028_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14934,7 +14933,7 @@
 			}
 			case ROW:
 			{
-				AST tmp1030_AST_in = (AST)_t;
+				AST tmp1029_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14943,7 +14942,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp1031_AST_in = (AST)_t;
+				AST tmp1030_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -14977,12 +14976,12 @@
 		case SIZE:
 		{
 			AST __t2268 = _t;
-			AST tmp1032_AST_in = (AST)_t;
+			AST tmp1031_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1033_AST_in = (AST)_t;
+			AST tmp1032_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -14994,12 +14993,12 @@
 		case SIZECHARS:
 		{
 			AST __t2269 = _t;
-			AST tmp1034_AST_in = (AST)_t;
+			AST tmp1033_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1035_AST_in = (AST)_t;
+			AST tmp1034_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -15011,12 +15010,12 @@
 		case SIZEPIXELS:
 		{
 			AST __t2270 = _t;
-			AST tmp1036_AST_in = (AST)_t;
+			AST tmp1035_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1037_AST_in = (AST)_t;
+			AST tmp1036_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -15087,7 +15086,7 @@
 		}
 		}
 		}
-		AST tmp1038_AST_in = (AST)_t;
+		AST tmp1037_AST_in = (AST)_t;
 		match(_t,DATASET);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15142,7 +15141,7 @@
 		switch ( _t.getType()) {
 		case REFERENCEONLY:
 		{
-			AST tmp1039_AST_in = (AST)_t;
+			AST tmp1038_AST_in = (AST)_t;
 			match(_t,REFERENCEONLY);
 			_t = _t.getNextSibling();
 			break;
@@ -15157,7 +15156,7 @@
 		}
 		}
 		}
-		AST tmp1040_AST_in = (AST)_t;
+		AST tmp1039_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -15167,7 +15166,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1041_AST_in = (AST)_t;
+				AST tmp1040_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
@@ -15196,7 +15195,7 @@
 					switch ( _t.getType()) {
 					case COMMA:
 					{
-						AST tmp1042_AST_in = (AST)_t;
+						AST tmp1041_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						break;
@@ -15248,7 +15247,7 @@
 		AST data_relation_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t449 = _t;
-		AST tmp1043_AST_in = (AST)_t;
+		AST tmp1042_AST_in = (AST)_t;
 		match(_t,DATARELATION);
 		_t = _t.getFirstChild();
 		{
@@ -15256,7 +15255,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1044_AST_in = (AST)_t;
+			AST tmp1043_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -15271,12 +15270,12 @@
 		}
 		}
 		}
-		AST tmp1045_AST_in = (AST)_t;
+		AST tmp1044_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
 		_t = _retTree;
-		AST tmp1046_AST_in = (AST)_t;
+		AST tmp1045_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -15306,7 +15305,7 @@
 		switch ( _t.getType()) {
 		case REPOSITION:
 		{
-			AST tmp1047_AST_in = (AST)_t;
+			AST tmp1046_AST_in = (AST)_t;
 			match(_t,REPOSITION);
 			_t = _t.getNextSibling();
 			break;
@@ -15331,15 +15330,15 @@
 		AST field_mapping_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t454 = _t;
-		AST tmp1048_AST_in = (AST)_t;
+		AST tmp1047_AST_in = (AST)_t;
 		match(_t,RELATIONFIELDS);
 		_t = _t.getFirstChild();
-		AST tmp1049_AST_in = (AST)_t;
+		AST tmp1048_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld2(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp1050_AST_in = (AST)_t;
+		AST tmp1049_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		fld1(_t,CQ.SYMBOL);
@@ -15349,12 +15348,12 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1051_AST_in = (AST)_t;
+				AST tmp1050_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld2(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp1052_AST_in = (AST)_t;
+				AST tmp1051_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld1(_t,CQ.SYMBOL);
@@ -15366,7 +15365,7 @@
 			
 		} while (true);
 		}
-		AST tmp1053_AST_in = (AST)_t;
+		AST tmp1052_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t454;
@@ -15428,7 +15427,7 @@
 		}
 		}
 		}
-		AST tmp1054_AST_in = (AST)_t;
+		AST tmp1053_AST_in = (AST)_t;
 		match(_t,DATASOURCE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15437,7 +15436,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(DATASOURCE, def, id));
 		}
-		AST tmp1055_AST_in = (AST)_t;
+		AST tmp1054_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -15446,10 +15445,10 @@
 		case QUERY:
 		{
 			AST __t462 = _t;
-			AST tmp1056_AST_in = (AST)_t;
+			AST tmp1055_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getFirstChild();
-			AST tmp1057_AST_in = (AST)_t;
+			AST tmp1056_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t462;
@@ -15495,7 +15494,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1058_AST_in = (AST)_t;
+				AST tmp1057_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				source_buffer_phrase(_t);
@@ -15534,10 +15533,10 @@
 		switch ( _t.getType()) {
 		case KEYS:
 		{
-			AST tmp1059_AST_in = (AST)_t;
+			AST tmp1058_AST_in = (AST)_t;
 			match(_t,KEYS);
 			_t = _t.getNextSibling();
-			AST tmp1060_AST_in = (AST)_t;
+			AST tmp1059_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -15545,7 +15544,7 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1061_AST_in = (AST)_t;
+				AST tmp1060_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
@@ -15559,7 +15558,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1062_AST_in = (AST)_t;
+						AST tmp1061_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.SYMBOL);
@@ -15579,7 +15578,7 @@
 			}
 			}
 			}
-			AST tmp1063_AST_in = (AST)_t;
+			AST tmp1062_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -15635,7 +15634,7 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp1064_AST_in = (AST)_t;
+			AST tmp1063_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
@@ -15650,7 +15649,7 @@
 		}
 		}
 		}
-		AST tmp1065_AST_in = (AST)_t;
+		AST tmp1064_AST_in = (AST)_t;
 		match(_t,FRAME);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -15679,7 +15678,7 @@
 		case HEADER:
 		{
 			AST __t479 = _t;
-			AST tmp1066_AST_in = (AST)_t;
+			AST tmp1065_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
@@ -15705,7 +15704,7 @@
 		case BACKGROUND:
 		{
 			AST __t482 = _t;
-			AST tmp1067_AST_in = (AST)_t;
+			AST tmp1066_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
@@ -15747,7 +15746,7 @@
 		case EXCEPT:
 		{
 			AST __t486 = _t;
-			AST tmp1068_AST_in = (AST)_t;
+			AST tmp1067_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -15839,10 +15838,10 @@
 		case TEXT:
 		{
 			AST __t791 = _t;
-			AST tmp1069_AST_in = (AST)_t;
+			AST tmp1068_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getFirstChild();
-			AST tmp1070_AST_in = (AST)_t;
+			AST tmp1069_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -15859,7 +15858,7 @@
 				
 			} while (true);
 			}
-			AST tmp1071_AST_in = (AST)_t;
+			AST tmp1070_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t791;
@@ -15952,7 +15951,7 @@
 		}
 		case CARET:
 		{
-			AST tmp1072_AST_in = (AST)_t;
+			AST tmp1071_AST_in = (AST)_t;
 			match(_t,CARET);
 			_t = _t.getNextSibling();
 			break;
@@ -16041,7 +16040,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1073_AST_in = (AST)_t;
+					AST tmp1072_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -16142,7 +16141,7 @@
 		}
 		}
 		}
-		AST tmp1074_AST_in = (AST)_t;
+		AST tmp1073_AST_in = (AST)_t;
 		match(_t,IMAGE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -16159,7 +16158,7 @@
 			case LIKE:
 			{
 				AST __t495 = _t;
-				AST tmp1075_AST_in = (AST)_t;
+				AST tmp1074_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -16169,7 +16168,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1076_AST_in = (AST)_t;
+					AST tmp1075_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -16217,7 +16216,7 @@
 			}
 			case CONVERT3DCOLORS:
 			{
-				AST tmp1077_AST_in = (AST)_t;
+				AST tmp1076_AST_in = (AST)_t;
 				match(_t,CONVERT3DCOLORS);
 				_t = _t.getNextSibling();
 				break;
@@ -16231,7 +16230,7 @@
 			case STRETCHTOFIT:
 			{
 				AST __t497 = _t;
-				AST tmp1078_AST_in = (AST)_t;
+				AST tmp1077_AST_in = (AST)_t;
 				match(_t,STRETCHTOFIT);
 				_t = _t.getFirstChild();
 				{
@@ -16239,7 +16238,7 @@
 				switch ( _t.getType()) {
 				case RETAINSHAPE:
 				{
-					AST tmp1079_AST_in = (AST)_t;
+					AST tmp1078_AST_in = (AST)_t;
 					match(_t,RETAINSHAPE);
 					_t = _t.getNextSibling();
 					break;
@@ -16260,7 +16259,7 @@
 			}
 			case TRANSPARENT:
 			{
-				AST tmp1080_AST_in = (AST)_t;
+				AST tmp1079_AST_in = (AST)_t;
 				match(_t,TRANSPARENT);
 				_t = _t.getNextSibling();
 				break;
@@ -16356,7 +16355,7 @@
 		}
 		}
 		}
-		AST tmp1081_AST_in = (AST)_t;
+		AST tmp1080_AST_in = (AST)_t;
 		match(_t,MENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -16421,7 +16420,7 @@
 		case FONT:
 		{
 			AST __t510 = _t;
-			AST tmp1082_AST_in = (AST)_t;
+			AST tmp1081_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -16433,7 +16432,7 @@
 		case LIKE:
 		{
 			AST __t511 = _t;
-			AST tmp1083_AST_in = (AST)_t;
+			AST tmp1082_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.SYMBOL);
@@ -16443,7 +16442,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp1084_AST_in = (AST)_t;
+				AST tmp1083_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -16465,7 +16464,7 @@
 		case TITLE:
 		{
 			AST __t513 = _t;
-			AST tmp1085_AST_in = (AST)_t;
+			AST tmp1084_AST_in = (AST)_t;
 			match(_t,TITLE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -16476,21 +16475,21 @@
 		}
 		case MENUBAR:
 		{
-			AST tmp1086_AST_in = (AST)_t;
+			AST tmp1085_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp1087_AST_in = (AST)_t;
+			AST tmp1086_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp1088_AST_in = (AST)_t;
+			AST tmp1087_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
@@ -16515,7 +16514,7 @@
 		case MENUITEM:
 		{
 			AST __t516 = _t;
-			AST tmp1089_AST_in = (AST)_t;
+			AST tmp1088_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getFirstChild();
 			id = (AST)_t;
@@ -16532,7 +16531,7 @@
 				case ACCELERATOR:
 				{
 					AST __t518 = _t;
-					AST tmp1090_AST_in = (AST)_t;
+					AST tmp1089_AST_in = (AST)_t;
 					match(_t,ACCELERATOR);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -16552,7 +16551,7 @@
 				}
 				case DISABLED:
 				{
-					AST tmp1091_AST_in = (AST)_t;
+					AST tmp1090_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -16560,7 +16559,7 @@
 				case FONT:
 				{
 					AST __t519 = _t;
-					AST tmp1092_AST_in = (AST)_t;
+					AST tmp1091_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -16578,14 +16577,14 @@
 				}
 				case READONLY:
 				{
-					AST tmp1093_AST_in = (AST)_t;
+					AST tmp1092_AST_in = (AST)_t;
 					match(_t,READONLY);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOGGLEBOX:
 				{
-					AST tmp1094_AST_in = (AST)_t;
+					AST tmp1093_AST_in = (AST)_t;
 					match(_t,TOGGLEBOX);
 					_t = _t.getNextSibling();
 					break;
@@ -16626,7 +16625,7 @@
 		case SUBMENU:
 		{
 			AST __t522 = _t;
-			AST tmp1095_AST_in = (AST)_t;
+			AST tmp1094_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getFirstChild();
 			id2 = (AST)_t;
@@ -16642,7 +16641,7 @@
 				switch ( _t.getType()) {
 				case DISABLED:
 				{
-					AST tmp1096_AST_in = (AST)_t;
+					AST tmp1095_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -16657,7 +16656,7 @@
 				case FONT:
 				{
 					AST __t524 = _t;
-					AST tmp1097_AST_in = (AST)_t;
+					AST tmp1096_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -16692,7 +16691,7 @@
 		case RULE:
 		{
 			AST __t526 = _t;
-			AST tmp1098_AST_in = (AST)_t;
+			AST tmp1097_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getFirstChild();
 			{
@@ -16703,7 +16702,7 @@
 				case FONT:
 				{
 					AST __t528 = _t;
-					AST tmp1099_AST_in = (AST)_t;
+					AST tmp1098_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -16734,7 +16733,7 @@
 		}
 		case SKIP:
 		{
-			AST tmp1100_AST_in = (AST)_t;
+			AST tmp1099_AST_in = (AST)_t;
 			match(_t,SKIP);
 			_t = _t.getNextSibling();
 			break;
@@ -16754,7 +16753,7 @@
 			inputState.guessing++;
 			try {
 				{
-				AST tmp1101_AST_in = (AST)_t;
+				AST tmp1100_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				{
@@ -16762,28 +16761,28 @@
 				switch ( _t.getType()) {
 				case RULE:
 				{
-					AST tmp1102_AST_in = (AST)_t;
+					AST tmp1101_AST_in = (AST)_t;
 					match(_t,RULE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SKIP:
 				{
-					AST tmp1103_AST_in = (AST)_t;
+					AST tmp1102_AST_in = (AST)_t;
 					match(_t,SKIP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SUBMENU:
 				{
-					AST tmp1104_AST_in = (AST)_t;
+					AST tmp1103_AST_in = (AST)_t;
 					match(_t,SUBMENU);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case MENUITEM:
 				{
-					AST tmp1105_AST_in = (AST)_t;
+					AST tmp1104_AST_in = (AST)_t;
 					match(_t,MENUITEM);
 					_t = _t.getNextSibling();
 					break;
@@ -16803,7 +16802,7 @@
 inputState.guessing--;
 		}
 		if ( synPredMatched533 ) {
-			AST tmp1106_AST_in = (AST)_t;
+			AST tmp1105_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 		}
@@ -16889,16 +16888,16 @@
 		switch ( _t.getType()) {
 		case PARAMETER:
 		{
-			AST tmp1107_AST_in = (AST)_t;
+			AST tmp1106_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
-			AST tmp1108_AST_in = (AST)_t;
+			AST tmp1107_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			bid = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1109_AST_in = (AST)_t;
+			AST tmp1108_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			brec = _t==ASTNULL ? null : (AST)_t;
@@ -16912,7 +16911,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp1110_AST_in = (AST)_t;
+				AST tmp1109_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -16959,7 +16958,7 @@
 			case FIELDS:
 			{
 				AST __t542 = _t;
-				AST tmp1111_AST_in = (AST)_t;
+				AST tmp1110_AST_in = (AST)_t;
 				match(_t,FIELDS);
 				_t = _t.getFirstChild();
 				{
@@ -17003,28 +17002,28 @@
 			switch ( _t.getType()) {
 			case INPUT:
 			{
-				AST tmp1112_AST_in = (AST)_t;
+				AST tmp1111_AST_in = (AST)_t;
 				match(_t,INPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OUTPUT:
 			{
-				AST tmp1113_AST_in = (AST)_t;
+				AST tmp1112_AST_in = (AST)_t;
 				match(_t,OUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case INPUTOUTPUT:
 			{
-				AST tmp1114_AST_in = (AST)_t;
+				AST tmp1113_AST_in = (AST)_t;
 				match(_t,INPUTOUTPUT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURN:
 			{
-				AST tmp1115_AST_in = (AST)_t;
+				AST tmp1114_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -17035,7 +17034,7 @@
 			}
 			}
 			}
-			AST tmp1116_AST_in = (AST)_t;
+			AST tmp1115_AST_in = (AST)_t;
 			match(_t,PARAMETER);
 			_t = _t.getNextSibling();
 			{
@@ -17043,10 +17042,10 @@
 			switch ( _t.getType()) {
 			case TABLE:
 			{
-				AST tmp1117_AST_in = (AST)_t;
+				AST tmp1116_AST_in = (AST)_t;
 				match(_t,TABLE);
 				_t = _t.getNextSibling();
-				AST tmp1118_AST_in = (AST)_t;
+				AST tmp1117_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.TEMPTABLESYMBOL);
@@ -17058,14 +17057,14 @@
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1119_AST_in = (AST)_t;
+						AST tmp1118_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1120_AST_in = (AST)_t;
+						AST tmp1119_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
@@ -17081,7 +17080,7 @@
 			}
 			case TABLEHANDLE:
 			{
-				AST tmp1121_AST_in = (AST)_t;
+				AST tmp1120_AST_in = (AST)_t;
 				match(_t,TABLEHANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -17089,7 +17088,7 @@
 				switch ( _t.getType()) {
 				case FOR:
 				{
-					AST tmp1122_AST_in = (AST)_t;
+					AST tmp1121_AST_in = (AST)_t;
 					match(_t,FOR);
 					_t = _t.getNextSibling();
 					break;
@@ -17114,14 +17113,14 @@
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1123_AST_in = (AST)_t;
+						AST tmp1122_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1124_AST_in = (AST)_t;
+						AST tmp1123_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
@@ -17140,10 +17139,10 @@
 			}
 			case DATASET:
 			{
-				AST tmp1125_AST_in = (AST)_t;
+				AST tmp1124_AST_in = (AST)_t;
 				match(_t,DATASET);
 				_t = _t.getNextSibling();
-				AST tmp1126_AST_in = (AST)_t;
+				AST tmp1125_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				ds = (AST)_t;
@@ -17156,21 +17155,21 @@
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1127_AST_in = (AST)_t;
+						AST tmp1126_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BYVALUE:
 					{
-						AST tmp1128_AST_in = (AST)_t;
+						AST tmp1127_AST_in = (AST)_t;
 						match(_t,BYVALUE);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1129_AST_in = (AST)_t;
+						AST tmp1128_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
@@ -17189,7 +17188,7 @@
 			}
 			case DATASETHANDLE:
 			{
-				AST tmp1130_AST_in = (AST)_t;
+				AST tmp1129_AST_in = (AST)_t;
 				match(_t,DATASETHANDLE);
 				_t = _t.getNextSibling();
 				id3 = (AST)_t;
@@ -17202,21 +17201,21 @@
 					switch ( _t.getType()) {
 					case APPEND:
 					{
-						AST tmp1131_AST_in = (AST)_t;
+						AST tmp1130_AST_in = (AST)_t;
 						match(_t,APPEND);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BYVALUE:
 					{
-						AST tmp1132_AST_in = (AST)_t;
+						AST tmp1131_AST_in = (AST)_t;
 						match(_t,BYVALUE);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case BIND:
 					{
-						AST tmp1133_AST_in = (AST)_t;
+						AST tmp1132_AST_in = (AST)_t;
 						match(_t,BIND);
 						_t = _t.getNextSibling();
 						break;
@@ -17311,7 +17310,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1134_AST_in = (AST)_t;
+					AST tmp1133_AST_in = (AST)_t;
 					match(_t,HANDLE);
 					_t = _t.getNextSibling();
 					{
@@ -17319,7 +17318,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp1135_AST_in = (AST)_t;
+						AST tmp1134_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -17351,7 +17350,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched563 ) {
-				AST tmp1136_AST_in = (AST)_t;
+				AST tmp1135_AST_in = (AST)_t;
 				match(_t,HANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -17359,7 +17358,7 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp1137_AST_in = (AST)_t;
+					AST tmp1136_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
@@ -17384,10 +17383,10 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CLASS)) {
-				AST tmp1138_AST_in = (AST)_t;
+				AST tmp1137_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1139_AST_in = (AST)_t;
+				AST tmp1138_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 			}
@@ -17428,7 +17427,7 @@
 			case DECIMALS:
 			{
 				AST __t567 = _t;
-				AST tmp1140_AST_in = (AST)_t;
+				AST tmp1139_AST_in = (AST)_t;
 				match(_t,DECIMALS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -17450,7 +17449,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1141_AST_in = (AST)_t;
+					AST tmp1140_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -17487,7 +17486,7 @@
 			}
 			case NOUNDO:
 			{
-				AST tmp1142_AST_in = (AST)_t;
+				AST tmp1141_AST_in = (AST)_t;
 				match(_t,NOUNDO);
 				_t = _t.getNextSibling();
 				break;
@@ -17502,7 +17501,7 @@
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==FORMAT)) {
 					AST __t566 = _t;
-					AST tmp1143_AST_in = (AST)_t;
+					AST tmp1142_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -17527,7 +17526,7 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp1144_AST_in = (AST)_t;
+			AST tmp1143_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
@@ -17606,13 +17605,13 @@
 		case Not_casesens:
 		{
 			AST __t1667 = _t;
-			AST tmp1145_AST_in = (AST)_t;
+			AST tmp1144_AST_in = (AST)_t;
 			match(_t,Not_casesens);
 			_t = _t.getFirstChild();
-			AST tmp1146_AST_in = (AST)_t;
+			AST tmp1145_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp1147_AST_in = (AST)_t;
+			AST tmp1146_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			_t = __t1667;
@@ -17621,7 +17620,7 @@
 		}
 		case CASESENSITIVE:
 		{
-			AST tmp1148_AST_in = (AST)_t;
+			AST tmp1147_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -17639,7 +17638,7 @@
 		AST initial_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1966 = _t;
-		AST tmp1149_AST_in = (AST)_t;
+		AST tmp1148_AST_in = (AST)_t;
 		match(_t,INITIAL);
 		_t = _t.getFirstChild();
 		{
@@ -17647,7 +17646,7 @@
 		switch ( _t.getType()) {
 		case LEFTBRACE:
 		{
-			AST tmp1150_AST_in = (AST)_t;
+			AST tmp1149_AST_in = (AST)_t;
 			match(_t,LEFTBRACE);
 			_t = _t.getNextSibling();
 			{
@@ -17655,7 +17654,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp1151_AST_in = (AST)_t;
+				AST tmp1150_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -17718,7 +17717,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1152_AST_in = (AST)_t;
+					AST tmp1151_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					{
@@ -17726,7 +17725,7 @@
 					switch ( _t.getType()) {
 					case TODAY:
 					{
-						AST tmp1153_AST_in = (AST)_t;
+						AST tmp1152_AST_in = (AST)_t;
 						match(_t,TODAY);
 						_t = _t.getNextSibling();
 						break;
@@ -17791,7 +17790,7 @@
 				
 			} while (true);
 			}
-			AST tmp1154_AST_in = (AST)_t;
+			AST tmp1153_AST_in = (AST)_t;
 			match(_t,RIGHTBRACE);
 			_t = _t.getNextSibling();
 			break;
@@ -17845,7 +17844,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp1155_AST_in = (AST)_t;
+				AST tmp1154_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -17921,7 +17920,7 @@
 		AST extentphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1917 = _t;
-		AST tmp1156_AST_in = (AST)_t;
+		AST tmp1155_AST_in = (AST)_t;
 		match(_t,EXTENT);
 		_t = _t.getFirstChild();
 		{
@@ -17996,7 +17995,7 @@
 		}
 		}
 		}
-		AST tmp1157_AST_in = (AST)_t;
+		AST tmp1156_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18005,7 +18004,7 @@
 		if ( inputState.guessing==0 ) {
 			push(action.defineSymbol(QUERY, def, id));
 		}
-		AST tmp1158_AST_in = (AST)_t;
+		AST tmp1157_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.INIT);
@@ -18040,7 +18039,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1159_AST_in = (AST)_t;
+				AST tmp1158_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				tbl(_t,CQ.INIT);
@@ -18085,7 +18084,7 @@
 			case CACHE:
 			{
 				AST __t580 = _t;
-				AST tmp1160_AST_in = (AST)_t;
+				AST tmp1159_AST_in = (AST)_t;
 				match(_t,CACHE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -18096,14 +18095,14 @@
 			}
 			case SCROLLING:
 			{
-				AST tmp1161_AST_in = (AST)_t;
+				AST tmp1160_AST_in = (AST)_t;
 				match(_t,SCROLLING);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RCODEINFORMATION:
 			{
-				AST tmp1162_AST_in = (AST)_t;
+				AST tmp1161_AST_in = (AST)_t;
 				match(_t,RCODEINFORMATION);
 				_t = _t.getNextSibling();
 				break;
@@ -18134,7 +18133,7 @@
 		case FIELDS:
 		{
 			AST __t1047 = _t;
-			AST tmp1163_AST_in = (AST)_t;
+			AST tmp1162_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
@@ -18142,7 +18141,7 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1164_AST_in = (AST)_t;
+				AST tmp1163_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -18158,7 +18157,7 @@
 						case WHEN:
 						{
 							AST __t1051 = _t;
-							AST tmp1165_AST_in = (AST)_t;
+							AST tmp1164_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -18185,7 +18184,7 @@
 					
 				} while (true);
 				}
-				AST tmp1166_AST_in = (AST)_t;
+				AST tmp1165_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -18207,7 +18206,7 @@
 		case EXCEPT:
 		{
 			AST __t1053 = _t;
-			AST tmp1167_AST_in = (AST)_t;
+			AST tmp1166_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -18215,7 +18214,7 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1168_AST_in = (AST)_t;
+				AST tmp1167_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -18231,7 +18230,7 @@
 						case WHEN:
 						{
 							AST __t1057 = _t;
-							AST tmp1169_AST_in = (AST)_t;
+							AST tmp1168_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -18258,7 +18257,7 @@
 					
 				} while (true);
 				}
-				AST tmp1170_AST_in = (AST)_t;
+				AST tmp1169_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -18339,7 +18338,7 @@
 		}
 		}
 		}
-		AST tmp1171_AST_in = (AST)_t;
+		AST tmp1170_AST_in = (AST)_t;
 		match(_t,RECTANGLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18355,7 +18354,7 @@
 			switch ( _t.getType()) {
 			case NOFILL:
 			{
-				AST tmp1172_AST_in = (AST)_t;
+				AST tmp1171_AST_in = (AST)_t;
 				match(_t,NOFILL);
 				_t = _t.getNextSibling();
 				break;
@@ -18363,7 +18362,7 @@
 			case EDGECHARS:
 			{
 				AST __t587 = _t;
-				AST tmp1173_AST_in = (AST)_t;
+				AST tmp1172_AST_in = (AST)_t;
 				match(_t,EDGECHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -18375,7 +18374,7 @@
 			case EDGEPIXELS:
 			{
 				AST __t588 = _t;
-				AST tmp1174_AST_in = (AST)_t;
+				AST tmp1173_AST_in = (AST)_t;
 				match(_t,EDGEPIXELS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -18395,7 +18394,7 @@
 			}
 			case GRAPHICEDGE:
 			{
-				AST tmp1175_AST_in = (AST)_t;
+				AST tmp1174_AST_in = (AST)_t;
 				match(_t,GRAPHICEDGE);
 				_t = _t.getNextSibling();
 				break;
@@ -18403,7 +18402,7 @@
 			case LIKE:
 			{
 				AST __t589 = _t;
-				AST tmp1176_AST_in = (AST)_t;
+				AST tmp1175_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -18413,7 +18412,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp1177_AST_in = (AST)_t;
+					AST tmp1176_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -18537,7 +18536,7 @@
 		}
 		}
 		}
-		AST tmp1178_AST_in = (AST)_t;
+		AST tmp1177_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18607,7 +18606,7 @@
 		}
 		}
 		}
-		AST tmp1179_AST_in = (AST)_t;
+		AST tmp1178_AST_in = (AST)_t;
 		match(_t,SUBMENU);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18709,7 +18708,7 @@
 		}
 		}
 		}
-		AST tmp1180_AST_in = (AST)_t;
+		AST tmp1179_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -18723,14 +18722,14 @@
 		switch ( _t.getType()) {
 		case UNDO:
 		{
-			AST tmp1181_AST_in = (AST)_t;
+			AST tmp1180_AST_in = (AST)_t;
 			match(_t,UNDO);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOUNDO:
 		{
-			AST tmp1182_AST_in = (AST)_t;
+			AST tmp1181_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -18818,7 +18817,7 @@
 		switch ( _t.getType()) {
 		case REFERENCEONLY:
 		{
-			AST tmp1183_AST_in = (AST)_t;
+			AST tmp1182_AST_in = (AST)_t;
 			match(_t,REFERENCEONLY);
 			_t = _t.getNextSibling();
 			break;
@@ -18898,7 +18897,7 @@
 		case BEFORETABLE:
 		{
 			AST __t616 = _t;
-			AST tmp1184_AST_in = (AST)_t;
+			AST tmp1183_AST_in = (AST)_t;
 			match(_t,BEFORETABLE);
 			_t = _t.getFirstChild();
 			bt = (AST)_t;
@@ -18930,7 +18929,7 @@
 		switch ( _t.getType()) {
 		case RCODEINFORMATION:
 		{
-			AST tmp1185_AST_in = (AST)_t;
+			AST tmp1184_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
@@ -18968,10 +18967,10 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==INDEX)) {
 				AST __t621 = _t;
-				AST tmp1186_AST_in = (AST)_t;
+				AST tmp1185_AST_in = (AST)_t;
 				match(_t,INDEX);
 				_t = _t.getFirstChild();
-				AST tmp1187_AST_in = (AST)_t;
+				AST tmp1186_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
@@ -18984,14 +18983,14 @@
 						switch ( _t.getType()) {
 						case AS:
 						{
-							AST tmp1188_AST_in = (AST)_t;
+							AST tmp1187_AST_in = (AST)_t;
 							match(_t,AS);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case IS:
 						{
-							AST tmp1189_AST_in = (AST)_t;
+							AST tmp1188_AST_in = (AST)_t;
 							match(_t,IS);
 							_t = _t.getNextSibling();
 							break;
@@ -19013,21 +19012,21 @@
 						switch ( _t.getType()) {
 						case UNIQUE:
 						{
-							AST tmp1190_AST_in = (AST)_t;
+							AST tmp1189_AST_in = (AST)_t;
 							match(_t,UNIQUE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case PRIMARY:
 						{
-							AST tmp1191_AST_in = (AST)_t;
+							AST tmp1190_AST_in = (AST)_t;
 							match(_t,PRIMARY);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case WORDINDEX:
 						{
-							AST tmp1192_AST_in = (AST)_t;
+							AST tmp1191_AST_in = (AST)_t;
 							match(_t,WORDINDEX);
 							_t = _t.getNextSibling();
 							break;
@@ -19051,7 +19050,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==ID)) {
-						AST tmp1193_AST_in = (AST)_t;
+						AST tmp1192_AST_in = (AST)_t;
 						match(_t,ID);
 						_t = _t.getNextSibling();
 						{
@@ -19061,21 +19060,21 @@
 							switch ( _t.getType()) {
 							case ASCENDING:
 							{
-								AST tmp1194_AST_in = (AST)_t;
+								AST tmp1193_AST_in = (AST)_t;
 								match(_t,ASCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case DESCENDING:
 							{
-								AST tmp1195_AST_in = (AST)_t;
+								AST tmp1194_AST_in = (AST)_t;
 								match(_t,DESCENDING);
 								_t = _t.getNextSibling();
 								break;
 							}
 							case CASESENSITIVE:
 							{
-								AST tmp1196_AST_in = (AST)_t;
+								AST tmp1195_AST_in = (AST)_t;
 								match(_t,CASESENSITIVE);
 								_t = _t.getNextSibling();
 								break;
@@ -19117,7 +19116,7 @@
 		AST rec = null;
 		
 		AST __t632 = _t;
-		AST tmp1197_AST_in = (AST)_t;
+		AST tmp1196_AST_in = (AST)_t;
 		match(_t,LIKE);
 		_t = _t.getFirstChild();
 		rec = _t==ASTNULL ? null : (AST)_t;
@@ -19128,7 +19127,7 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST tmp1198_AST_in = (AST)_t;
+			AST tmp1197_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
@@ -19150,10 +19149,10 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==USEINDEX)) {
 				AST __t635 = _t;
-				AST tmp1199_AST_in = (AST)_t;
+				AST tmp1198_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp1200_AST_in = (AST)_t;
+				AST tmp1199_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
@@ -19167,14 +19166,14 @@
 					switch ( _t.getType()) {
 					case AS:
 					{
-						AST tmp1201_AST_in = (AST)_t;
+						AST tmp1200_AST_in = (AST)_t;
 						match(_t,AS);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case IS:
 					{
-						AST tmp1202_AST_in = (AST)_t;
+						AST tmp1201_AST_in = (AST)_t;
 						match(_t,IS);
 						_t = _t.getNextSibling();
 						break;
@@ -19185,7 +19184,7 @@
 					}
 					}
 					}
-					AST tmp1203_AST_in = (AST)_t;
+					AST tmp1202_AST_in = (AST)_t;
 					match(_t,PRIMARY);
 					_t = _t.getNextSibling();
 					break;
@@ -19223,7 +19222,7 @@
 		AST id = null;
 		
 		AST __t640 = _t;
-		AST tmp1204_AST_in = (AST)_t;
+		AST tmp1203_AST_in = (AST)_t;
 		match(_t,FIELD);
 		_t = _t.getFirstChild();
 		id = (AST)_t;
@@ -19270,10 +19269,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp1205_AST_in = (AST)_t;
+				AST tmp1204_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1206_AST_in = (AST)_t;
+				AST tmp1205_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -19333,7 +19332,7 @@
 		case COLUMNCODEPAGE:
 		{
 			AST __t760 = _t;
-			AST tmp1207_AST_in = (AST)_t;
+			AST tmp1206_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19345,7 +19344,7 @@
 		case CONTEXTHELPID:
 		{
 			AST __t761 = _t;
-			AST tmp1208_AST_in = (AST)_t;
+			AST tmp1207_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19357,7 +19356,7 @@
 		case DECIMALS:
 		{
 			AST __t762 = _t;
-			AST tmp1209_AST_in = (AST)_t;
+			AST tmp1208_AST_in = (AST)_t;
 			match(_t,DECIMALS);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19368,7 +19367,7 @@
 		}
 		case DROPTARGET:
 		{
-			AST tmp1210_AST_in = (AST)_t;
+			AST tmp1209_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
@@ -19382,7 +19381,7 @@
 		case FONT:
 		{
 			AST __t763 = _t;
-			AST tmp1211_AST_in = (AST)_t;
+			AST tmp1210_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19394,7 +19393,7 @@
 		case FORMAT:
 		{
 			AST __t764 = _t;
-			AST tmp1212_AST_in = (AST)_t;
+			AST tmp1211_AST_in = (AST)_t;
 			match(_t,FORMAT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19406,7 +19405,7 @@
 		case HELP:
 		{
 			AST __t765 = _t;
-			AST tmp1213_AST_in = (AST)_t;
+			AST tmp1212_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -19441,7 +19440,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp1214_AST_in = (AST)_t;
+				AST tmp1213_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -19466,7 +19465,7 @@
 		case MOUSEPOINTER:
 		{
 			AST __t768 = _t;
-			AST tmp1215_AST_in = (AST)_t;
+			AST tmp1214_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -19477,7 +19476,7 @@
 		}
 		case NOUNDO:
 		{
-			AST tmp1216_AST_in = (AST)_t;
+			AST tmp1215_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -19490,7 +19489,7 @@
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp1217_AST_in = (AST)_t;
+			AST tmp1216_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
@@ -19569,7 +19568,7 @@
 		}
 		}
 		}
-		AST tmp1218_AST_in = (AST)_t;
+		AST tmp1217_AST_in = (AST)_t;
 		match(_t,WORKTABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -19583,7 +19582,7 @@
 		switch ( _t.getType()) {
 		case NOUNDO:
 		{
-			AST tmp1219_AST_in = (AST)_t;
+			AST tmp1218_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -19723,7 +19722,7 @@
 		}
 		}
 		}
-		AST tmp1220_AST_in = (AST)_t;
+		AST tmp1219_AST_in = (AST)_t;
 		match(_t,VARIABLE);
 		_t = _t.getNextSibling();
 		id = (AST)_t;
@@ -19781,7 +19780,7 @@
 		AST deletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t660 = _t;
-		AST tmp1221_AST_in = (AST)_t;
+		AST tmp1220_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.UPDATING);
@@ -19792,7 +19791,7 @@
 		case VALIDATE:
 		{
 			AST __t662 = _t;
-			AST tmp1222_AST_in = (AST)_t;
+			AST tmp1221_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getFirstChild();
 			funargs(_t);
@@ -19818,7 +19817,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1223_AST_in = (AST)_t;
+			AST tmp1222_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -19853,16 +19852,16 @@
 		if ( inputState.guessing==0 ) {
 			action.scopeAdd(d);
 		}
-		AST tmp1224_AST_in = (AST)_t;
+		AST tmp1223_AST_in = (AST)_t;
 		match(_t,PUBLIC);
 		_t = _t.getNextSibling();
-		AST tmp1225_AST_in = (AST)_t;
+		AST tmp1224_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
-		AST tmp1226_AST_in = (AST)_t;
+		AST tmp1225_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
-		AST tmp1227_AST_in = (AST)_t;
+		AST tmp1226_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		block_colon(_t);
@@ -19870,7 +19869,7 @@
 		code_block(_t);
 		_t = _retTree;
 		AST __t666 = _t;
-		AST tmp1228_AST_in = (AST)_t;
+		AST tmp1227_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -19878,7 +19877,7 @@
 		switch ( _t.getType()) {
 		case DESTRUCTOR:
 		{
-			AST tmp1229_AST_in = (AST)_t;
+			AST tmp1228_AST_in = (AST)_t;
 			match(_t,DESTRUCTOR);
 			_t = _t.getNextSibling();
 			break;
@@ -19922,7 +19921,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1230_AST_in = (AST)_t;
+			AST tmp1229_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -19947,7 +19946,7 @@
 		case ALL:
 		{
 			AST __t672 = _t;
-			AST tmp1231_AST_in = (AST)_t;
+			AST tmp1230_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -19956,7 +19955,7 @@
 			case EXCEPT:
 			{
 				AST __t674 = _t;
-				AST tmp1232_AST_in = (AST)_t;
+				AST tmp1231_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -20058,13 +20057,13 @@
 		AST disabletriggersstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t681 = _t;
-		AST tmp1233_AST_in = (AST)_t;
+		AST tmp1232_AST_in = (AST)_t;
 		match(_t,DISABLE);
 		_t = _t.getFirstChild();
-		AST tmp1234_AST_in = (AST)_t;
+		AST tmp1233_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getNextSibling();
-		AST tmp1235_AST_in = (AST)_t;
+		AST tmp1234_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -20072,14 +20071,14 @@
 		switch ( _t.getType()) {
 		case DUMP:
 		{
-			AST tmp1236_AST_in = (AST)_t;
+			AST tmp1235_AST_in = (AST)_t;
 			match(_t,DUMP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOAD:
 		{
-			AST tmp1237_AST_in = (AST)_t;
+			AST tmp1236_AST_in = (AST)_t;
 			match(_t,LOAD);
 			_t = _t.getNextSibling();
 			break;
@@ -20090,7 +20089,7 @@
 		}
 		}
 		}
-		AST tmp1238_AST_in = (AST)_t;
+		AST tmp1237_AST_in = (AST)_t;
 		match(_t,OF);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SYMBOL);
@@ -20100,7 +20099,7 @@
 		switch ( _t.getType()) {
 		case ALLOWREPLICATION:
 		{
-			AST tmp1239_AST_in = (AST)_t;
+			AST tmp1238_AST_in = (AST)_t;
 			match(_t,ALLOWREPLICATION);
 			_t = _t.getNextSibling();
 			break;
@@ -20128,7 +20127,7 @@
 		AST disconnectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t685 = _t;
-		AST tmp1240_AST_in = (AST)_t;
+		AST tmp1239_AST_in = (AST)_t;
 		match(_t,DISCONNECT);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -20138,7 +20137,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1241_AST_in = (AST)_t;
+			AST tmp1240_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20204,7 +20203,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1242_AST_in = (AST)_t;
+			AST tmp1241_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -20245,7 +20244,7 @@
 		case EXCEPT:
 		{
 			AST __t694 = _t;
-			AST tmp1243_AST_in = (AST)_t;
+			AST tmp1242_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -20286,10 +20285,10 @@
 		case IN_KW:
 		{
 			AST __t698 = _t;
-			AST tmp1244_AST_in = (AST)_t;
+			AST tmp1243_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1245_AST_in = (AST)_t;
+			AST tmp1244_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -20330,7 +20329,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1246_AST_in = (AST)_t;
+			AST tmp1245_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20361,10 +20360,10 @@
 		AST stream_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2300 = _t;
-		AST tmp1247_AST_in = (AST)_t;
+		AST tmp1246_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getFirstChild();
-		AST tmp1248_AST_in = (AST)_t;
+		AST tmp1247_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		_t = __t2300;
@@ -20406,7 +20405,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1249_AST_in = (AST)_t;
+					AST tmp1248_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -20458,7 +20457,7 @@
 		AST skipphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2272 = _t;
-		AST tmp1250_AST_in = (AST)_t;
+		AST tmp1249_AST_in = (AST)_t;
 		match(_t,SKIP);
 		_t = _t.getFirstChild();
 		{
@@ -20490,10 +20489,10 @@
 		AST aggregatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1622 = _t;
-		AST tmp1251_AST_in = (AST)_t;
+		AST tmp1250_AST_in = (AST)_t;
 		match(_t,Aggregate_phrase);
 		_t = _t.getFirstChild();
-		AST tmp1252_AST_in = (AST)_t;
+		AST tmp1251_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -20518,7 +20517,7 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==BY)) {
 				AST __t1626 = _t;
-				AST tmp1253_AST_in = (AST)_t;
+				AST tmp1252_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -20528,7 +20527,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1254_AST_in = (AST)_t;
+					AST tmp1253_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -20552,7 +20551,7 @@
 			
 		} while (true);
 		}
-		AST tmp1255_AST_in = (AST)_t;
+		AST tmp1254_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1622;
@@ -20674,14 +20673,14 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1256_AST_in = (AST)_t;
+			AST tmp1255_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case END:
 		{
-			AST tmp1257_AST_in = (AST)_t;
+			AST tmp1256_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getNextSibling();
 			state_end(_t);
@@ -20807,10 +20806,10 @@
 		AST emptytemptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t729 = _t;
-		AST tmp1258_AST_in = (AST)_t;
+		AST tmp1257_AST_in = (AST)_t;
 		match(_t,EMPTY);
 		_t = _t.getFirstChild();
-		AST tmp1259_AST_in = (AST)_t;
+		AST tmp1258_AST_in = (AST)_t;
 		match(_t,TEMPTABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.TEMPTABLESYMBOL);
@@ -20820,7 +20819,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1260_AST_in = (AST)_t;
+			AST tmp1259_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -20860,7 +20859,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1261_AST_in = (AST)_t;
+			AST tmp1260_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -20886,7 +20885,7 @@
 		case ALL:
 		{
 			AST __t735 = _t;
-			AST tmp1262_AST_in = (AST)_t;
+			AST tmp1261_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -20895,7 +20894,7 @@
 			case EXCEPT:
 			{
 				AST __t737 = _t;
-				AST tmp1263_AST_in = (AST)_t;
+				AST tmp1262_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -20969,10 +20968,10 @@
 		case IN_KW:
 		{
 			AST __t743 = _t;
-			AST tmp1264_AST_in = (AST)_t;
+			AST tmp1263_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1265_AST_in = (AST)_t;
+			AST tmp1264_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -21028,7 +21027,7 @@
 		AST exportstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t746 = _t;
-		AST tmp1266_AST_in = (AST)_t;
+		AST tmp1265_AST_in = (AST)_t;
 		match(_t,EXPORT);
 		_t = _t.getFirstChild();
 		{
@@ -21061,7 +21060,7 @@
 		case DELIMITER:
 		{
 			AST __t749 = _t;
-			AST tmp1267_AST_in = (AST)_t;
+			AST tmp1266_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -21104,7 +21103,7 @@
 		case EXCEPT:
 		{
 			AST __t753 = _t;
-			AST tmp1268_AST_in = (AST)_t;
+			AST tmp1267_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -21142,7 +21141,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp1269_AST_in = (AST)_t;
+			AST tmp1268_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -21173,14 +21172,14 @@
 		switch ( _t.getType()) {
 		case BLOB:
 		{
-			AST tmp1270_AST_in = (AST)_t;
+			AST tmp1269_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp1271_AST_in = (AST)_t;
+			AST tmp1270_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
@@ -21219,7 +21218,7 @@
 		AST viewasphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2378 = _t;
-		AST tmp1272_AST_in = (AST)_t;
+		AST tmp1271_AST_in = (AST)_t;
 		match(_t,VIEWAS);
 		_t = _t.getFirstChild();
 		{
@@ -21289,7 +21288,7 @@
 		AST xml_data_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2394 = _t;
-		AST tmp1273_AST_in = (AST)_t;
+		AST tmp1272_AST_in = (AST)_t;
 		match(_t,XMLDATATYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -21304,7 +21303,7 @@
 		AST xml_node_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2396 = _t;
-		AST tmp1274_AST_in = (AST)_t;
+		AST tmp1273_AST_in = (AST)_t;
 		match(_t,XMLNODETYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -21320,7 +21319,7 @@
 		AST r = null;
 		
 		AST __t770 = _t;
-		AST tmp1275_AST_in = (AST)_t;
+		AST tmp1274_AST_in = (AST)_t;
 		match(_t,FIND);
 		_t = _t.getFirstChild();
 		{
@@ -21365,21 +21364,21 @@
 			switch ( _t.getType()) {
 			case NOWAIT:
 			{
-				AST tmp1276_AST_in = (AST)_t;
+				AST tmp1275_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOPREFETCH:
 			{
-				AST tmp1277_AST_in = (AST)_t;
+				AST tmp1276_AST_in = (AST)_t;
 				match(_t,NOPREFETCH);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1278_AST_in = (AST)_t;
+				AST tmp1277_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -21403,15 +21402,15 @@
 		AST fixcodepage_pseudfn_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t776 = _t;
-		AST tmp1279_AST_in = (AST)_t;
+		AST tmp1278_AST_in = (AST)_t;
 		match(_t,FIXCODEPAGE);
 		_t = _t.getFirstChild();
-		AST tmp1280_AST_in = (AST)_t;
+		AST tmp1279_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
 		_t = _retTree;
-		AST tmp1281_AST_in = (AST)_t;
+		AST tmp1280_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t776;
@@ -21471,7 +21470,7 @@
 		AST widget_id_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2392 = _t;
-		AST tmp1282_AST_in = (AST)_t;
+		AST tmp1281_AST_in = (AST)_t;
 		match(_t,WIDGETID);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -21513,7 +21512,7 @@
 		case HEADER:
 		{
 			AST __t802 = _t;
-			AST tmp1283_AST_in = (AST)_t;
+			AST tmp1282_AST_in = (AST)_t;
 			match(_t,HEADER);
 			_t = _t.getFirstChild();
 			{
@@ -21539,7 +21538,7 @@
 		case BACKGROUND:
 		{
 			AST __t805 = _t;
-			AST tmp1284_AST_in = (AST)_t;
+			AST tmp1283_AST_in = (AST)_t;
 			match(_t,BACKGROUND);
 			_t = _t.getFirstChild();
 			{
@@ -21581,7 +21580,7 @@
 		case EXCEPT:
 		{
 			AST __t809 = _t;
-			AST tmp1285_AST_in = (AST)_t;
+			AST tmp1284_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -21649,7 +21648,7 @@
 		AST atphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1648 = _t;
-		AST tmp1286_AST_in = (AST)_t;
+		AST tmp1285_AST_in = (AST)_t;
 		match(_t,AT);
 		_t = _t.getFirstChild();
 		{
@@ -21674,21 +21673,21 @@
 		switch ( _t.getType()) {
 		case COLONALIGNED:
 		{
-			AST tmp1287_AST_in = (AST)_t;
+			AST tmp1286_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp1288_AST_in = (AST)_t;
+			AST tmp1287_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp1289_AST_in = (AST)_t;
+			AST tmp1288_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
@@ -21740,7 +21739,7 @@
 		case COLOR:
 		{
 			AST __t1698 = _t;
-			AST tmp1290_AST_in = (AST)_t;
+			AST tmp1289_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			{
@@ -21748,7 +21747,7 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST tmp1291_AST_in = (AST)_t;
+				AST tmp1290_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getNextSibling();
 				break;
@@ -21772,7 +21771,7 @@
 			case PROMPT:
 			{
 				AST __t1701 = _t;
-				AST tmp1292_AST_in = (AST)_t;
+				AST tmp1291_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -21808,7 +21807,7 @@
 		AST titlephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2335 = _t;
-		AST tmp1293_AST_in = (AST)_t;
+		AST tmp1292_AST_in = (AST)_t;
 		match(_t,TITLE);
 		_t = _t.getFirstChild();
 		{
@@ -21828,7 +21827,7 @@
 			case COLOR:
 			{
 				AST __t2337 = _t;
-				AST tmp1294_AST_in = (AST)_t;
+				AST tmp1293_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -21840,7 +21839,7 @@
 			case FONT:
 			{
 				AST __t2338 = _t;
-				AST tmp1295_AST_in = (AST)_t;
+				AST tmp1294_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -21884,14 +21883,14 @@
 		switch ( _t.getType()) {
 		case RETURNS:
 		{
-			AST tmp1296_AST_in = (AST)_t;
+			AST tmp1295_AST_in = (AST)_t;
 			match(_t,RETURNS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RETURN:
 		{
-			AST tmp1297_AST_in = (AST)_t;
+			AST tmp1296_AST_in = (AST)_t;
 			match(_t,RETURN);
 			_t = _t.getNextSibling();
 			break;
@@ -21927,10 +21926,10 @@
 		switch ( _t.getType()) {
 		case CLASS:
 		{
-			AST tmp1298_AST_in = (AST)_t;
+			AST tmp1297_AST_in = (AST)_t;
 			match(_t,CLASS);
 			_t = _t.getNextSibling();
-			AST tmp1299_AST_in = (AST)_t;
+			AST tmp1298_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -21967,7 +21966,7 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp1300_AST_in = (AST)_t;
+			AST tmp1299_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
@@ -22015,7 +22014,7 @@
 		switch ( _t.getType()) {
 		case FORWARDS:
 		{
-			AST tmp1301_AST_in = (AST)_t;
+			AST tmp1300_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getNextSibling();
 			{
@@ -22023,21 +22022,21 @@
 			switch ( _t.getType()) {
 			case LEXCOLON:
 			{
-				AST tmp1302_AST_in = (AST)_t;
+				AST tmp1301_AST_in = (AST)_t;
 				match(_t,LEXCOLON);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PERIOD:
 			{
-				AST tmp1303_AST_in = (AST)_t;
+				AST tmp1302_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case EOF:
 			{
-				AST tmp1304_AST_in = (AST)_t;
+				AST tmp1303_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
@@ -22068,7 +22067,7 @@
 			switch ( _t.getType()) {
 			case EOF:
 			{
-				AST tmp1305_AST_in = (AST)_t;
+				AST tmp1304_AST_in = (AST)_t;
 				match(_t,Token.EOF_TYPE);
 				_t = _t.getNextSibling();
 				break;
@@ -22076,7 +22075,7 @@
 			case END:
 			{
 				AST __t877 = _t;
-				AST tmp1306_AST_in = (AST)_t;
+				AST tmp1305_AST_in = (AST)_t;
 				match(_t,END);
 				_t = _t.getFirstChild();
 				{
@@ -22084,7 +22083,7 @@
 				switch ( _t.getType()) {
 				case FUNCTION:
 				{
-					AST tmp1307_AST_in = (AST)_t;
+					AST tmp1306_AST_in = (AST)_t;
 					match(_t,FUNCTION);
 					_t = _t.getNextSibling();
 					break;
@@ -22122,10 +22121,10 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1308_AST_in = (AST)_t;
+					AST tmp1307_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getNextSibling();
-					AST tmp1309_AST_in = (AST)_t;
+					AST tmp1308_AST_in = (AST)_t;
 					match(_t,SUPER);
 					_t = _t.getNextSibling();
 					}
@@ -22137,10 +22136,10 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched871 ) {
-				AST tmp1310_AST_in = (AST)_t;
+				AST tmp1309_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
-				AST tmp1311_AST_in = (AST)_t;
+				AST tmp1310_AST_in = (AST)_t;
 				match(_t,SUPER);
 				_t = _t.getNextSibling();
 				{
@@ -22148,21 +22147,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp1312_AST_in = (AST)_t;
+					AST tmp1311_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp1313_AST_in = (AST)_t;
+					AST tmp1312_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp1314_AST_in = (AST)_t;
+					AST tmp1313_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -22183,7 +22182,7 @@
 				switch ( _t.getType()) {
 				case MAP:
 				{
-					AST tmp1315_AST_in = (AST)_t;
+					AST tmp1314_AST_in = (AST)_t;
 					match(_t,MAP);
 					_t = _t.getNextSibling();
 					{
@@ -22191,7 +22190,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp1316_AST_in = (AST)_t;
+						AST tmp1315_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -22206,7 +22205,7 @@
 					}
 					}
 					}
-					AST tmp1317_AST_in = (AST)_t;
+					AST tmp1316_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					break;
@@ -22221,7 +22220,7 @@
 				}
 				}
 				}
-				AST tmp1318_AST_in = (AST)_t;
+				AST tmp1317_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -22231,21 +22230,21 @@
 				switch ( _t.getType()) {
 				case LEXCOLON:
 				{
-					AST tmp1319_AST_in = (AST)_t;
+					AST tmp1318_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PERIOD:
 				{
-					AST tmp1320_AST_in = (AST)_t;
+					AST tmp1319_AST_in = (AST)_t;
 					match(_t,PERIOD);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case EOF:
 				{
-					AST tmp1321_AST_in = (AST)_t;
+					AST tmp1320_AST_in = (AST)_t;
 					match(_t,Token.EOF_TYPE);
 					_t = _t.getNextSibling();
 					break;
@@ -22284,7 +22283,7 @@
 		case BUFFER:
 		{
 			AST __t880 = _t;
-			AST tmp1322_AST_in = (AST)_t;
+			AST tmp1321_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			{
@@ -22307,7 +22306,7 @@
 			}
 			}
 			}
-			AST tmp1323_AST_in = (AST)_t;
+			AST tmp1322_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -22318,7 +22317,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp1324_AST_in = (AST)_t;
+				AST tmp1323_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -22343,7 +22342,7 @@
 		case INPUT:
 		{
 			AST __t883 = _t;
-			AST tmp1325_AST_in = (AST)_t;
+			AST tmp1324_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -22355,7 +22354,7 @@
 		case OUTPUT:
 		{
 			AST __t884 = _t;
-			AST tmp1326_AST_in = (AST)_t;
+			AST tmp1325_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -22367,7 +22366,7 @@
 		case INPUTOUTPUT:
 		{
 			AST __t885 = _t;
-			AST tmp1327_AST_in = (AST)_t;
+			AST tmp1326_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -22397,7 +22396,7 @@
 		switch ( _t.getType()) {
 		case TABLE:
 		{
-			AST tmp1328_AST_in = (AST)_t;
+			AST tmp1327_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			{
@@ -22405,7 +22404,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp1329_AST_in = (AST)_t;
+				AST tmp1328_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -22427,7 +22426,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1330_AST_in = (AST)_t;
+				AST tmp1329_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22448,7 +22447,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1331_AST_in = (AST)_t;
+				AST tmp1330_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22467,7 +22466,7 @@
 		}
 		case TABLEHANDLE:
 		{
-			AST tmp1332_AST_in = (AST)_t;
+			AST tmp1331_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			{
@@ -22475,7 +22474,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp1333_AST_in = (AST)_t;
+				AST tmp1332_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -22498,7 +22497,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1334_AST_in = (AST)_t;
+				AST tmp1333_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22519,7 +22518,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1335_AST_in = (AST)_t;
+				AST tmp1334_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22541,7 +22540,7 @@
 		}
 		case DATASET:
 		{
-			AST tmp1336_AST_in = (AST)_t;
+			AST tmp1335_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
 			ds = (AST)_t;
@@ -22552,7 +22551,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1337_AST_in = (AST)_t;
+				AST tmp1336_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22573,7 +22572,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1338_AST_in = (AST)_t;
+				AST tmp1337_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22595,7 +22594,7 @@
 		}
 		case DATASETHANDLE:
 		{
-			AST tmp1339_AST_in = (AST)_t;
+			AST tmp1338_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
 			dsh = (AST)_t;
@@ -22606,7 +22605,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1340_AST_in = (AST)_t;
+				AST tmp1339_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -22627,7 +22626,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp1341_AST_in = (AST)_t;
+				AST tmp1340_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -22710,10 +22709,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp1342_AST_in = (AST)_t;
+				AST tmp1341_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1343_AST_in = (AST)_t;
+				AST tmp1342_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -22786,21 +22785,21 @@
 		AST getkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t901 = _t;
-		AST tmp1344_AST_in = (AST)_t;
+		AST tmp1343_AST_in = (AST)_t;
 		match(_t,GETKEYVALUE);
 		_t = _t.getFirstChild();
-		AST tmp1345_AST_in = (AST)_t;
+		AST tmp1344_AST_in = (AST)_t;
 		match(_t,SECTION);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1346_AST_in = (AST)_t;
+		AST tmp1345_AST_in = (AST)_t;
 		match(_t,KEY);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==DEFAULT)) {
-			AST tmp1347_AST_in = (AST)_t;
+			AST tmp1346_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getNextSibling();
 		}
@@ -22813,7 +22812,7 @@
 		}
 		
 		}
-		AST tmp1348_AST_in = (AST)_t;
+		AST tmp1347_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -22830,7 +22829,7 @@
 		AST importstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t904 = _t;
-		AST tmp1349_AST_in = (AST)_t;
+		AST tmp1348_AST_in = (AST)_t;
 		match(_t,IMPORT);
 		_t = _t.getFirstChild();
 		{
@@ -22866,7 +22865,7 @@
 		case DELIMITER:
 		{
 			AST __t907 = _t;
-			AST tmp1350_AST_in = (AST)_t;
+			AST tmp1349_AST_in = (AST)_t;
 			match(_t,DELIMITER);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -22877,7 +22876,7 @@
 		}
 		case UNFORMATTED:
 		{
-			AST tmp1351_AST_in = (AST)_t;
+			AST tmp1350_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
@@ -22911,7 +22910,7 @@
 			case EXCEPT:
 			{
 				AST __t910 = _t;
-				AST tmp1352_AST_in = (AST)_t;
+				AST tmp1351_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -22964,7 +22963,7 @@
 				}
 				case CARET:
 				{
-					AST tmp1353_AST_in = (AST)_t;
+					AST tmp1352_AST_in = (AST)_t;
 					match(_t,CARET);
 					_t = _t.getNextSibling();
 					break;
@@ -22997,7 +22996,7 @@
 		switch ( _t.getType()) {
 		case NOLOBS:
 		{
-			AST tmp1354_AST_in = (AST)_t;
+			AST tmp1353_AST_in = (AST)_t;
 			match(_t,NOLOBS);
 			_t = _t.getNextSibling();
 			break;
@@ -23019,7 +23018,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1355_AST_in = (AST)_t;
+			AST tmp1354_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23062,7 +23061,7 @@
 		case EXCEPT:
 		{
 			AST __t920 = _t;
-			AST tmp1356_AST_in = (AST)_t;
+			AST tmp1355_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -23103,7 +23102,7 @@
 		case USING:
 		{
 			AST __t924 = _t;
-			AST tmp1357_AST_in = (AST)_t;
+			AST tmp1356_AST_in = (AST)_t;
 			match(_t,USING);
 			_t = _t.getFirstChild();
 			{
@@ -23111,14 +23110,14 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp1358_AST_in = (AST)_t;
+				AST tmp1357_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RECID:
 			{
-				AST tmp1359_AST_in = (AST)_t;
+				AST tmp1358_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				break;
@@ -23174,7 +23173,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1360_AST_in = (AST)_t;
+			AST tmp1359_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -23205,7 +23204,7 @@
 		AST messagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t933 = _t;
-		AST tmp1361_AST_in = (AST)_t;
+		AST tmp1360_AST_in = (AST)_t;
 		match(_t,MESSAGE);
 		_t = _t.getFirstChild();
 		{
@@ -23214,7 +23213,7 @@
 		case COLOR:
 		{
 			AST __t935 = _t;
-			AST tmp1362_AST_in = (AST)_t;
+			AST tmp1361_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			anyorvalue(_t);
@@ -23245,7 +23244,7 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==Form_item)) {
 				AST __t937 = _t;
-				AST tmp1363_AST_in = (AST)_t;
+				AST tmp1362_AST_in = (AST)_t;
 				match(_t,Form_item);
 				_t = _t.getFirstChild();
 				{
@@ -23280,10 +23279,10 @@
 			case VIEWAS:
 			{
 				AST __t941 = _t;
-				AST tmp1364_AST_in = (AST)_t;
+				AST tmp1363_AST_in = (AST)_t;
 				match(_t,VIEWAS);
 				_t = _t.getFirstChild();
-				AST tmp1365_AST_in = (AST)_t;
+				AST tmp1364_AST_in = (AST)_t;
 				match(_t,ALERTBOX);
 				_t = _t.getNextSibling();
 				{
@@ -23291,35 +23290,35 @@
 				switch ( _t.getType()) {
 				case MESSAGE:
 				{
-					AST tmp1366_AST_in = (AST)_t;
+					AST tmp1365_AST_in = (AST)_t;
 					match(_t,MESSAGE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case QUESTION:
 				{
-					AST tmp1367_AST_in = (AST)_t;
+					AST tmp1366_AST_in = (AST)_t;
 					match(_t,QUESTION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INFORMATION:
 				{
-					AST tmp1368_AST_in = (AST)_t;
+					AST tmp1367_AST_in = (AST)_t;
 					match(_t,INFORMATION);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case ERROR:
 				{
-					AST tmp1369_AST_in = (AST)_t;
+					AST tmp1368_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WARNING:
 				{
-					AST tmp1370_AST_in = (AST)_t;
+					AST tmp1369_AST_in = (AST)_t;
 					match(_t,WARNING);
 					_t = _t.getNextSibling();
 					break;
@@ -23341,7 +23340,7 @@
 				switch ( _t.getType()) {
 				case BUTTONS:
 				{
-					AST tmp1371_AST_in = (AST)_t;
+					AST tmp1370_AST_in = (AST)_t;
 					match(_t,BUTTONS);
 					_t = _t.getNextSibling();
 					{
@@ -23349,35 +23348,35 @@
 					switch ( _t.getType()) {
 					case YESNO:
 					{
-						AST tmp1372_AST_in = (AST)_t;
+						AST tmp1371_AST_in = (AST)_t;
 						match(_t,YESNO);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case YESNOCANCEL:
 					{
-						AST tmp1373_AST_in = (AST)_t;
+						AST tmp1372_AST_in = (AST)_t;
 						match(_t,YESNOCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OK:
 					{
-						AST tmp1374_AST_in = (AST)_t;
+						AST tmp1373_AST_in = (AST)_t;
 						match(_t,OK);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case OKCANCEL:
 					{
-						AST tmp1375_AST_in = (AST)_t;
+						AST tmp1374_AST_in = (AST)_t;
 						match(_t,OKCANCEL);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case RETRYCANCEL:
 					{
-						AST tmp1376_AST_in = (AST)_t;
+						AST tmp1375_AST_in = (AST)_t;
 						match(_t,RETRYCANCEL);
 						_t = _t.getNextSibling();
 						break;
@@ -23407,7 +23406,7 @@
 				case TITLE:
 				{
 					AST __t946 = _t;
-					AST tmp1377_AST_in = (AST)_t;
+					AST tmp1376_AST_in = (AST)_t;
 					match(_t,TITLE);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -23433,7 +23432,7 @@
 			case SET:
 			{
 				AST __t947 = _t;
-				AST tmp1378_AST_in = (AST)_t;
+				AST tmp1377_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -23464,7 +23463,7 @@
 			case UPDATE:
 			{
 				AST __t949 = _t;
-				AST tmp1379_AST_in = (AST)_t;
+				AST tmp1378_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.REFUP);
@@ -23505,10 +23504,10 @@
 		case IN_KW:
 		{
 			AST __t953 = _t;
-			AST tmp1380_AST_in = (AST)_t;
+			AST tmp1379_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1381_AST_in = (AST)_t;
+			AST tmp1380_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -23552,35 +23551,35 @@
 			switch ( _t.getType()) {
 			case PRIVATE:
 			{
-				AST tmp1382_AST_in = (AST)_t;
+				AST tmp1381_AST_in = (AST)_t;
 				match(_t,PRIVATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PROTECTED:
 			{
-				AST tmp1383_AST_in = (AST)_t;
+				AST tmp1382_AST_in = (AST)_t;
 				match(_t,PROTECTED);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PUBLIC:
 			{
-				AST tmp1384_AST_in = (AST)_t;
+				AST tmp1383_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case OVERRIDE:
 			{
-				AST tmp1385_AST_in = (AST)_t;
+				AST tmp1384_AST_in = (AST)_t;
 				match(_t,OVERRIDE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FINAL:
 			{
-				AST tmp1386_AST_in = (AST)_t;
+				AST tmp1385_AST_in = (AST)_t;
 				match(_t,FINAL);
 				_t = _t.getNextSibling();
 				break;
@@ -23597,17 +23596,17 @@
 		switch ( _t.getType()) {
 		case VOID:
 		{
-			AST tmp1387_AST_in = (AST)_t;
+			AST tmp1386_AST_in = (AST)_t;
 			match(_t,VOID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLASS:
 		{
-			AST tmp1388_AST_in = (AST)_t;
+			AST tmp1387_AST_in = (AST)_t;
 			match(_t,CLASS);
 			_t = _t.getNextSibling();
-			AST tmp1389_AST_in = (AST)_t;
+			AST tmp1388_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -23661,7 +23660,7 @@
 				{
 				block_colon(_t);
 				_t = _retTree;
-				AST tmp1390_AST_in = (AST)_t;
+				AST tmp1389_AST_in = (AST)_t;
 				match(_t,Code_block);
 				_t = _t.getNextSibling();
 				}
@@ -23678,7 +23677,7 @@
 			code_block(_t);
 			_t = _retTree;
 			AST __t962 = _t;
-			AST tmp1391_AST_in = (AST)_t;
+			AST tmp1390_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -23686,7 +23685,7 @@
 			switch ( _t.getType()) {
 			case METHOD:
 			{
-				AST tmp1392_AST_in = (AST)_t;
+				AST tmp1391_AST_in = (AST)_t;
 				match(_t,METHOD);
 				_t = _t.getNextSibling();
 				break;
@@ -23728,7 +23727,7 @@
 		AST nextpromptstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t965 = _t;
-		AST tmp1393_AST_in = (AST)_t;
+		AST tmp1392_AST_in = (AST)_t;
 		match(_t,NEXTPROMPT);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.SYMBOL);
@@ -23791,35 +23790,35 @@
 				switch ( _t.getType()) {
 				case ASSIGN:
 				{
-					AST tmp1394_AST_in = (AST)_t;
+					AST tmp1393_AST_in = (AST)_t;
 					match(_t,ASSIGN);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case CREATE:
 				{
-					AST tmp1395_AST_in = (AST)_t;
+					AST tmp1394_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1396_AST_in = (AST)_t;
+					AST tmp1395_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1397_AST_in = (AST)_t;
+					AST tmp1396_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case WRITE:
 				{
-					AST tmp1398_AST_in = (AST)_t;
+					AST tmp1397_AST_in = (AST)_t;
 					match(_t,WRITE);
 					_t = _t.getNextSibling();
 					break;
@@ -23850,21 +23849,21 @@
 				switch ( _t.getType()) {
 				case CREATE:
 				{
-					AST tmp1399_AST_in = (AST)_t;
+					AST tmp1398_AST_in = (AST)_t;
 					match(_t,CREATE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1400_AST_in = (AST)_t;
+					AST tmp1399_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FIND:
 				{
-					AST tmp1401_AST_in = (AST)_t;
+					AST tmp1400_AST_in = (AST)_t;
 					match(_t,FIND);
 					_t = _t.getNextSibling();
 					break;
@@ -23875,7 +23874,7 @@
 				}
 				}
 				}
-				AST tmp1402_AST_in = (AST)_t;
+				AST tmp1401_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				t1 = _t==ASTNULL ? null : (AST)_t;
@@ -24029,10 +24028,10 @@
 			}
 			case WRITE:
 			{
-				AST tmp1403_AST_in = (AST)_t;
+				AST tmp1402_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
-				AST tmp1404_AST_in = (AST)_t;
+				AST tmp1403_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				rec = _t==ASTNULL ? null : (AST)_t;
@@ -24187,7 +24186,7 @@
 				case NEW:
 				{
 					{
-					AST tmp1405_AST_in = (AST)_t;
+					AST tmp1404_AST_in = (AST)_t;
 					match(_t,NEW);
 					_t = _t.getNextSibling();
 					{
@@ -24195,7 +24194,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1406_AST_in = (AST)_t;
+						AST tmp1405_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -24502,7 +24501,7 @@
 				case OLD:
 				{
 					{
-					AST tmp1407_AST_in = (AST)_t;
+					AST tmp1406_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -24510,7 +24509,7 @@
 					switch ( _t.getType()) {
 					case BUFFER:
 					{
-						AST tmp1408_AST_in = (AST)_t;
+						AST tmp1407_AST_in = (AST)_t;
 						match(_t,BUFFER);
 						_t = _t.getNextSibling();
 						break;
@@ -24810,10 +24809,10 @@
 			}
 			case ASSIGN:
 			{
-				AST tmp1409_AST_in = (AST)_t;
+				AST tmp1408_AST_in = (AST)_t;
 				match(_t,ASSIGN);
 				_t = _t.getNextSibling();
-				AST tmp1410_AST_in = (AST)_t;
+				AST tmp1409_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				fld = _t==ASTNULL ? null : (AST)_t;
@@ -24825,10 +24824,10 @@
 				case TABLE:
 				{
 					AST __t985 = _t;
-					AST tmp1411_AST_in = (AST)_t;
+					AST tmp1410_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1412_AST_in = (AST)_t;
+					AST tmp1411_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -24974,7 +24973,7 @@
 				switch ( _t.getType()) {
 				case OLD:
 				{
-					AST tmp1413_AST_in = (AST)_t;
+					AST tmp1412_AST_in = (AST)_t;
 					match(_t,OLD);
 					_t = _t.getNextSibling();
 					{
@@ -24982,7 +24981,7 @@
 					switch ( _t.getType()) {
 					case VALUE:
 					{
-						AST tmp1414_AST_in = (AST)_t;
+						AST tmp1413_AST_in = (AST)_t;
 						match(_t,VALUE);
 						_t = _t.getNextSibling();
 						break;
@@ -25165,7 +25164,7 @@
 			switch ( _t.getType()) {
 			case OVERRIDE:
 			{
-				AST tmp1415_AST_in = (AST)_t;
+				AST tmp1414_AST_in = (AST)_t;
 				match(_t,OVERRIDE);
 				_t = _t.getNextSibling();
 				break;
@@ -25305,7 +25304,7 @@
 			switch ( _t.getType()) {
 			case REVERT:
 			{
-				AST tmp1416_AST_in = (AST)_t;
+				AST tmp1415_AST_in = (AST)_t;
 				match(_t,REVERT);
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -25314,7 +25313,7 @@
 			}
 			case PERSISTENT:
 			{
-				AST tmp1417_AST_in = (AST)_t;
+				AST tmp1416_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getNextSibling();
 				runstate(_t);
@@ -25461,10 +25460,10 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1418_AST_in = (AST)_t;
+					AST tmp1417_AST_in = (AST)_t;
 					if ( _t==null ) throw new MismatchedTokenException();
 					_t = _t.getNextSibling();
-					AST tmp1419_AST_in = (AST)_t;
+					AST tmp1418_AST_in = (AST)_t;
 					if ( _t==null ) throw new MismatchedTokenException();
 					_t = _t.getNextSibling();
 					state_end(_t);
@@ -25478,10 +25477,10 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched992 ) {
-				AST tmp1420_AST_in = (AST)_t;
+				AST tmp1419_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
-				AST tmp1421_AST_in = (AST)_t;
+				AST tmp1420_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -25495,14 +25494,14 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp1422_AST_in = (AST)_t;
+					AST tmp1421_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case OF:
 				{
-					AST tmp1423_AST_in = (AST)_t;
+					AST tmp1422_AST_in = (AST)_t;
 					match(_t,OF);
 					_t = _t.getNextSibling();
 					widgetlist(_t);
@@ -25512,12 +25511,12 @@
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==OR)) {
-							AST tmp1424_AST_in = (AST)_t;
+							AST tmp1423_AST_in = (AST)_t;
 							match(_t,OR);
 							_t = _t.getNextSibling();
 							eventlist(_t);
 							_t = _retTree;
-							AST tmp1425_AST_in = (AST)_t;
+							AST tmp1424_AST_in = (AST)_t;
 							match(_t,OF);
 							_t = _t.getNextSibling();
 							widgetlist(_t);
@@ -25534,7 +25533,7 @@
 					switch ( _t.getType()) {
 					case ANYWHERE:
 					{
-						AST tmp1426_AST_in = (AST)_t;
+						AST tmp1425_AST_in = (AST)_t;
 						match(_t,ANYWHERE);
 						_t = _t.getNextSibling();
 						break;
@@ -25682,7 +25681,7 @@
 				switch ( _t.getType()) {
 				case REVERT:
 				{
-					AST tmp1427_AST_in = (AST)_t;
+					AST tmp1426_AST_in = (AST)_t;
 					match(_t,REVERT);
 					_t = _t.getNextSibling();
 					state_end(_t);
@@ -25691,10 +25690,10 @@
 				}
 				case PERSISTENT:
 				{
-					AST tmp1428_AST_in = (AST)_t;
+					AST tmp1427_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
-					AST tmp1429_AST_in = (AST)_t;
+					AST tmp1428_AST_in = (AST)_t;
 					match(_t,RUN);
 					_t = _t.getNextSibling();
 					filenameorvalue(_t);
@@ -25705,7 +25704,7 @@
 					case IN_KW:
 					{
 						AST __t999 = _t;
-						AST tmp1430_AST_in = (AST)_t;
+						AST tmp1429_AST_in = (AST)_t;
 						match(_t,IN_KW);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -25732,16 +25731,16 @@
 					case Parameter_list:
 					{
 						AST __t1001 = _t;
-						AST tmp1431_AST_in = (AST)_t;
+						AST tmp1430_AST_in = (AST)_t;
 						match(_t,Parameter_list);
 						_t = _t.getFirstChild();
-						AST tmp1432_AST_in = (AST)_t;
+						AST tmp1431_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						{
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==INPUT)) {
-							AST tmp1433_AST_in = (AST)_t;
+							AST tmp1432_AST_in = (AST)_t;
 							match(_t,INPUT);
 							_t = _t.getNextSibling();
 						}
@@ -25759,13 +25758,13 @@
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp1434_AST_in = (AST)_t;
+								AST tmp1433_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								{
 								if (_t==null) _t=ASTNULL;
 								if ((_t.getType()==INPUT)) {
-									AST tmp1435_AST_in = (AST)_t;
+									AST tmp1434_AST_in = (AST)_t;
 									match(_t,INPUT);
 									_t = _t.getNextSibling();
 								}
@@ -25785,7 +25784,7 @@
 							
 						} while (true);
 						}
-						AST tmp1436_AST_in = (AST)_t;
+						AST tmp1435_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
 						_t = __t1001;
@@ -25972,18 +25971,18 @@
 		switch ( _t.getType()) {
 		case LEFTANGLE:
 		{
-			AST tmp1437_AST_in = (AST)_t;
+			AST tmp1436_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1438_AST_in = (AST)_t;
+			AST tmp1437_AST_in = (AST)_t;
 			match(_t,LEFTANGLE);
 			_t = _t.getNextSibling();
 			filenameorvalue(_t);
 			_t = _retTree;
-			AST tmp1439_AST_in = (AST)_t;
+			AST tmp1438_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
-			AST tmp1440_AST_in = (AST)_t;
+			AST tmp1439_AST_in = (AST)_t;
 			match(_t,RIGHTANGLE);
 			_t = _t.getNextSibling();
 			break;
@@ -26016,7 +26015,7 @@
 			case PERSISTENT:
 			{
 				AST __t1085 = _t;
-				AST tmp1441_AST_in = (AST)_t;
+				AST tmp1440_AST_in = (AST)_t;
 				match(_t,PERSISTENT);
 				_t = _t.getFirstChild();
 				{
@@ -26025,7 +26024,7 @@
 				case SET:
 				{
 					AST __t1087 = _t;
-					AST tmp1442_AST_in = (AST)_t;
+					AST tmp1441_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -26072,7 +26071,7 @@
 			case SET:
 			{
 				AST __t1089 = _t;
-				AST tmp1443_AST_in = (AST)_t;
+				AST tmp1442_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getFirstChild();
 				{
@@ -26101,13 +26100,13 @@
 			case ON:
 			{
 				AST __t1091 = _t;
-				AST tmp1444_AST_in = (AST)_t;
+				AST tmp1443_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==SERVER)) {
-					AST tmp1445_AST_in = (AST)_t;
+					AST tmp1444_AST_in = (AST)_t;
 					match(_t,SERVER);
 					_t = _t.getNextSibling();
 				}
@@ -26125,7 +26124,7 @@
 				switch ( _t.getType()) {
 				case TRANSACTION:
 				{
-					AST tmp1446_AST_in = (AST)_t;
+					AST tmp1445_AST_in = (AST)_t;
 					match(_t,TRANSACTION);
 					_t = _t.getNextSibling();
 					{
@@ -26133,7 +26132,7 @@
 					switch ( _t.getType()) {
 					case DISTINCT:
 					{
-						AST tmp1447_AST_in = (AST)_t;
+						AST tmp1446_AST_in = (AST)_t;
 						match(_t,DISTINCT);
 						_t = _t.getNextSibling();
 						break;
@@ -26167,7 +26166,7 @@
 			case IN_KW:
 			{
 				AST __t1095 = _t;
-				AST tmp1448_AST_in = (AST)_t;
+				AST tmp1447_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
 				hexp = _t==ASTNULL ? null : (AST)_t;
@@ -26183,7 +26182,7 @@
 			case ASYNCHRONOUS:
 			{
 				AST __t1096 = _t;
-				AST tmp1449_AST_in = (AST)_t;
+				AST tmp1448_AST_in = (AST)_t;
 				match(_t,ASYNCHRONOUS);
 				_t = _t.getFirstChild();
 				{
@@ -26192,7 +26191,7 @@
 				case SET:
 				{
 					AST __t1098 = _t;
-					AST tmp1450_AST_in = (AST)_t;
+					AST tmp1449_AST_in = (AST)_t;
 					match(_t,SET);
 					_t = _t.getFirstChild();
 					{
@@ -26236,7 +26235,7 @@
 				case EVENTPROCEDURE:
 				{
 					AST __t1101 = _t;
-					AST tmp1451_AST_in = (AST)_t;
+					AST tmp1450_AST_in = (AST)_t;
 					match(_t,EVENTPROCEDURE);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -26262,7 +26261,7 @@
 				case IN_KW:
 				{
 					AST __t1103 = _t;
-					AST tmp1452_AST_in = (AST)_t;
+					AST tmp1451_AST_in = (AST)_t;
 					match(_t,IN_KW);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -26325,7 +26324,7 @@
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp1453_AST_in = (AST)_t;
+				AST tmp1452_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -26356,10 +26355,10 @@
 		AST eventlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1554 = _t;
-		AST tmp1454_AST_in = (AST)_t;
+		AST tmp1453_AST_in = (AST)_t;
 		match(_t,Event_list);
 		_t = _t.getFirstChild();
-		AST tmp1455_AST_in = (AST)_t;
+		AST tmp1454_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -26367,10 +26366,10 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1456_AST_in = (AST)_t;
+				AST tmp1455_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1457_AST_in = (AST)_t;
+				AST tmp1456_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -26396,7 +26395,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1458_AST_in = (AST)_t;
+				AST tmp1457_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				gwidget(_t);
@@ -26416,13 +26415,13 @@
 		AST openquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1007 = _t;
-		AST tmp1459_AST_in = (AST)_t;
+		AST tmp1458_AST_in = (AST)_t;
 		match(_t,OPEN);
 		_t = _t.getFirstChild();
-		AST tmp1460_AST_in = (AST)_t;
+		AST tmp1459_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
-		AST tmp1461_AST_in = (AST)_t;
+		AST tmp1460_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -26430,14 +26429,14 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp1462_AST_in = (AST)_t;
+			AST tmp1461_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PRESELECT:
 		{
-			AST tmp1463_AST_in = (AST)_t;
+			AST tmp1462_AST_in = (AST)_t;
 			match(_t,PRESELECT);
 			_t = _t.getNextSibling();
 			break;
@@ -26464,7 +26463,7 @@
 			case BY:
 			{
 				AST __t1010 = _t;
-				AST tmp1464_AST_in = (AST)_t;
+				AST tmp1463_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -26474,7 +26473,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1465_AST_in = (AST)_t;
+					AST tmp1464_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -26501,7 +26500,7 @@
 			}
 			case INDEXEDREPOSITION:
 			{
-				AST tmp1466_AST_in = (AST)_t;
+				AST tmp1465_AST_in = (AST)_t;
 				match(_t,INDEXEDREPOSITION);
 				_t = _t.getNextSibling();
 				break;
@@ -26509,7 +26508,7 @@
 			case MAXROWS:
 			{
 				AST __t1012 = _t;
-				AST tmp1467_AST_in = (AST)_t;
+				AST tmp1466_AST_in = (AST)_t;
 				match(_t,MAXROWS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -26554,7 +26553,7 @@
 		case EXTERNAL:
 		{
 			AST __t1017 = _t;
-			AST tmp1468_AST_in = (AST)_t;
+			AST tmp1467_AST_in = (AST)_t;
 			match(_t,EXTERNAL);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -26566,21 +26565,21 @@
 				switch ( _t.getType()) {
 				case CDECL_KW:
 				{
-					AST tmp1469_AST_in = (AST)_t;
+					AST tmp1468_AST_in = (AST)_t;
 					match(_t,CDECL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case PASCAL_KW:
 				{
-					AST tmp1470_AST_in = (AST)_t;
+					AST tmp1469_AST_in = (AST)_t;
 					match(_t,PASCAL_KW);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case STDCALL_KW:
 				{
-					AST tmp1471_AST_in = (AST)_t;
+					AST tmp1470_AST_in = (AST)_t;
 					match(_t,STDCALL_KW);
 					_t = _t.getNextSibling();
 					break;
@@ -26588,7 +26587,7 @@
 				case ORDINAL:
 				{
 					AST __t1019 = _t;
-					AST tmp1472_AST_in = (AST)_t;
+					AST tmp1471_AST_in = (AST)_t;
 					match(_t,ORDINAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -26599,7 +26598,7 @@
 				}
 				case PERSISTENT:
 				{
-					AST tmp1473_AST_in = (AST)_t;
+					AST tmp1472_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					break;
@@ -26617,17 +26616,17 @@
 		}
 		case PRIVATE:
 		{
-			AST tmp1474_AST_in = (AST)_t;
+			AST tmp1473_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IN_KW:
 		{
-			AST tmp1475_AST_in = (AST)_t;
+			AST tmp1474_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp1476_AST_in = (AST)_t;
+			AST tmp1475_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
@@ -26652,7 +26651,7 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1477_AST_in = (AST)_t;
+			AST tmp1476_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
@@ -26660,7 +26659,7 @@
 		case END:
 		{
 			AST __t1022 = _t;
-			AST tmp1478_AST_in = (AST)_t;
+			AST tmp1477_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -26668,7 +26667,7 @@
 			switch ( _t.getType()) {
 			case PROCEDURE:
 			{
-				AST tmp1479_AST_in = (AST)_t;
+				AST tmp1478_AST_in = (AST)_t;
 				match(_t,PROCEDURE);
 				_t = _t.getNextSibling();
 				break;
@@ -26747,7 +26746,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1480_AST_in = (AST)_t;
+			AST tmp1479_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -26813,7 +26812,7 @@
 		case EXCEPT:
 		{
 			AST __t1032 = _t;
-			AST tmp1481_AST_in = (AST)_t;
+			AST tmp1480_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -26854,10 +26853,10 @@
 		case IN_KW:
 		{
 			AST __t1036 = _t;
-			AST tmp1482_AST_in = (AST)_t;
+			AST tmp1481_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1483_AST_in = (AST)_t;
+			AST tmp1482_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -26935,7 +26934,7 @@
 		AST editingphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1910 = _t;
-		AST tmp1484_AST_in = (AST)_t;
+		AST tmp1483_AST_in = (AST)_t;
 		match(_t,Editing_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -26943,10 +26942,10 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1485_AST_in = (AST)_t;
+			AST tmp1484_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1486_AST_in = (AST)_t;
+			AST tmp1485_AST_in = (AST)_t;
 			match(_t,LEXCOLON);
 			_t = _t.getNextSibling();
 			break;
@@ -26961,7 +26960,7 @@
 		}
 		}
 		}
-		AST tmp1487_AST_in = (AST)_t;
+		AST tmp1486_AST_in = (AST)_t;
 		match(_t,EDITING);
 		_t = _t.getNextSibling();
 		block_colon(_t);
@@ -26980,7 +26979,7 @@
 			
 		} while (true);
 		}
-		AST tmp1488_AST_in = (AST)_t;
+		AST tmp1487_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getNextSibling();
 		_t = __t1910;
@@ -26993,7 +26992,7 @@
 		AST rawtransferstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1040 = _t;
-		AST tmp1489_AST_in = (AST)_t;
+		AST tmp1488_AST_in = (AST)_t;
 		match(_t,RAWTRANSFER);
 		_t = _t.getFirstChild();
 		{
@@ -27001,14 +27000,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1490_AST_in = (AST)_t;
+			AST tmp1489_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1491_AST_in = (AST)_t;
+			AST tmp1490_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -27045,7 +27044,7 @@
 		}
 		}
 		}
-		AST tmp1492_AST_in = (AST)_t;
+		AST tmp1491_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
@@ -27053,14 +27052,14 @@
 		switch ( _t.getType()) {
 		case BUFFER:
 		{
-			AST tmp1493_AST_in = (AST)_t;
+			AST tmp1492_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FIELD:
 		{
-			AST tmp1494_AST_in = (AST)_t;
+			AST tmp1493_AST_in = (AST)_t;
 			match(_t,FIELD);
 			_t = _t.getNextSibling();
 			break;
@@ -27102,7 +27101,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1495_AST_in = (AST)_t;
+			AST tmp1494_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -27130,7 +27129,7 @@
 		AST releasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1073 = _t;
-		AST tmp1496_AST_in = (AST)_t;
+		AST tmp1495_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -27140,7 +27139,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1497_AST_in = (AST)_t;
+			AST tmp1496_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -27286,7 +27285,7 @@
 		switch ( _t.getType()) {
 		case FROMCURRENT:
 		{
-			AST tmp1498_AST_in = (AST)_t;
+			AST tmp1497_AST_in = (AST)_t;
 			match(_t,FROMCURRENT);
 			_t = _t.getNextSibling();
 			break;
@@ -27310,7 +27309,7 @@
 		switch ( _t.getType()) {
 		case UP:
 		{
-			AST tmp1499_AST_in = (AST)_t;
+			AST tmp1498_AST_in = (AST)_t;
 			match(_t,UP);
 			_t = _t.getNextSibling();
 			break;
@@ -27333,7 +27332,7 @@
 		switch ( _t.getType()) {
 		case DOWN:
 		{
-			AST tmp1500_AST_in = (AST)_t;
+			AST tmp1499_AST_in = (AST)_t;
 			match(_t,DOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -27425,7 +27424,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1501_AST_in = (AST)_t;
+			AST tmp1500_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -27493,7 +27492,7 @@
 		case EXCEPT:
 		{
 			AST __t1122 = _t;
-			AST tmp1502_AST_in = (AST)_t;
+			AST tmp1501_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -27535,10 +27534,10 @@
 		case IN_KW:
 		{
 			AST __t1126 = _t;
-			AST tmp1503_AST_in = (AST)_t;
+			AST tmp1502_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1504_AST_in = (AST)_t;
+			AST tmp1503_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -27612,7 +27611,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1505_AST_in = (AST)_t;
+			AST tmp1504_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -27640,10 +27639,10 @@
 		AST systemdialogcolorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1131 = _t;
-		AST tmp1506_AST_in = (AST)_t;
+		AST tmp1505_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1507_AST_in = (AST)_t;
+		AST tmp1506_AST_in = (AST)_t;
 		match(_t,COLOR);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -27654,7 +27653,7 @@
 		case UPDATE:
 		{
 			AST __t1133 = _t;
-			AST tmp1508_AST_in = (AST)_t;
+			AST tmp1507_AST_in = (AST)_t;
 			match(_t,UPDATE);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
@@ -27681,10 +27680,10 @@
 		case IN_KW:
 		{
 			AST __t1135 = _t;
-			AST tmp1509_AST_in = (AST)_t;
+			AST tmp1508_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1510_AST_in = (AST)_t;
+			AST tmp1509_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -27716,10 +27715,10 @@
 		AST systemdialogfontstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1137 = _t;
-		AST tmp1511_AST_in = (AST)_t;
+		AST tmp1510_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1512_AST_in = (AST)_t;
+		AST tmp1511_AST_in = (AST)_t;
 		match(_t,FONT);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -27731,14 +27730,14 @@
 			switch ( _t.getType()) {
 			case ANSIONLY:
 			{
-				AST tmp1513_AST_in = (AST)_t;
+				AST tmp1512_AST_in = (AST)_t;
 				match(_t,ANSIONLY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIXEDONLY:
 			{
-				AST tmp1514_AST_in = (AST)_t;
+				AST tmp1513_AST_in = (AST)_t;
 				match(_t,FIXEDONLY);
 				_t = _t.getNextSibling();
 				break;
@@ -27746,7 +27745,7 @@
 			case MAXSIZE:
 			{
 				AST __t1139 = _t;
-				AST tmp1515_AST_in = (AST)_t;
+				AST tmp1514_AST_in = (AST)_t;
 				match(_t,MAXSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27758,7 +27757,7 @@
 			case MINSIZE:
 			{
 				AST __t1140 = _t;
-				AST tmp1516_AST_in = (AST)_t;
+				AST tmp1515_AST_in = (AST)_t;
 				match(_t,MINSIZE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27770,7 +27769,7 @@
 			case UPDATE:
 			{
 				AST __t1141 = _t;
-				AST tmp1517_AST_in = (AST)_t;
+				AST tmp1516_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -27782,10 +27781,10 @@
 			case IN_KW:
 			{
 				AST __t1142 = _t;
-				AST tmp1518_AST_in = (AST)_t;
+				AST tmp1517_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1519_AST_in = (AST)_t;
+				AST tmp1518_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -27813,10 +27812,10 @@
 		AST systemdialoggetdirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1145 = _t;
-		AST tmp1520_AST_in = (AST)_t;
+		AST tmp1519_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1521_AST_in = (AST)_t;
+		AST tmp1520_AST_in = (AST)_t;
 		match(_t,GETDIR);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
@@ -27829,7 +27828,7 @@
 			case INITIALDIR:
 			{
 				AST __t1147 = _t;
-				AST tmp1522_AST_in = (AST)_t;
+				AST tmp1521_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27840,7 +27839,7 @@
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1523_AST_in = (AST)_t;
+				AST tmp1522_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
@@ -27848,7 +27847,7 @@
 			case TITLE:
 			{
 				AST __t1148 = _t;
-				AST tmp1524_AST_in = (AST)_t;
+				AST tmp1523_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27876,10 +27875,10 @@
 		AST systemdialoggetfilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1151 = _t;
-		AST tmp1525_AST_in = (AST)_t;
+		AST tmp1524_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1526_AST_in = (AST)_t;
+		AST tmp1525_AST_in = (AST)_t;
 		match(_t,GETFILE);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.REFUP);
@@ -27892,7 +27891,7 @@
 			case FILTERS:
 			{
 				AST __t1153 = _t;
-				AST tmp1527_AST_in = (AST)_t;
+				AST tmp1526_AST_in = (AST)_t;
 				match(_t,FILTERS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27904,7 +27903,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1528_AST_in = (AST)_t;
+						AST tmp1527_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						expression(_t);
@@ -27924,7 +27923,7 @@
 				case INITIALFILTER:
 				{
 					AST __t1157 = _t;
-					AST tmp1529_AST_in = (AST)_t;
+					AST tmp1528_AST_in = (AST)_t;
 					match(_t,INITIALFILTER);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -27949,14 +27948,14 @@
 			}
 			case ASKOVERWRITE:
 			{
-				AST tmp1530_AST_in = (AST)_t;
+				AST tmp1529_AST_in = (AST)_t;
 				match(_t,ASKOVERWRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CREATETESTFILE:
 			{
-				AST tmp1531_AST_in = (AST)_t;
+				AST tmp1530_AST_in = (AST)_t;
 				match(_t,CREATETESTFILE);
 				_t = _t.getNextSibling();
 				break;
@@ -27964,7 +27963,7 @@
 			case DEFAULTEXTENSION:
 			{
 				AST __t1158 = _t;
-				AST tmp1532_AST_in = (AST)_t;
+				AST tmp1531_AST_in = (AST)_t;
 				match(_t,DEFAULTEXTENSION);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27976,7 +27975,7 @@
 			case INITIALDIR:
 			{
 				AST __t1159 = _t;
-				AST tmp1533_AST_in = (AST)_t;
+				AST tmp1532_AST_in = (AST)_t;
 				match(_t,INITIALDIR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -27987,21 +27986,21 @@
 			}
 			case MUSTEXIST:
 			{
-				AST tmp1534_AST_in = (AST)_t;
+				AST tmp1533_AST_in = (AST)_t;
 				match(_t,MUSTEXIST);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case RETURNTOSTARTDIR:
 			{
-				AST tmp1535_AST_in = (AST)_t;
+				AST tmp1534_AST_in = (AST)_t;
 				match(_t,RETURNTOSTARTDIR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SAVEAS:
 			{
-				AST tmp1536_AST_in = (AST)_t;
+				AST tmp1535_AST_in = (AST)_t;
 				match(_t,SAVEAS);
 				_t = _t.getNextSibling();
 				break;
@@ -28009,7 +28008,7 @@
 			case TITLE:
 			{
 				AST __t1160 = _t;
-				AST tmp1537_AST_in = (AST)_t;
+				AST tmp1536_AST_in = (AST)_t;
 				match(_t,TITLE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -28020,7 +28019,7 @@
 			}
 			case USEFILENAME:
 			{
-				AST tmp1538_AST_in = (AST)_t;
+				AST tmp1537_AST_in = (AST)_t;
 				match(_t,USEFILENAME);
 				_t = _t.getNextSibling();
 				break;
@@ -28028,7 +28027,7 @@
 			case UPDATE:
 			{
 				AST __t1161 = _t;
-				AST tmp1539_AST_in = (AST)_t;
+				AST tmp1538_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -28040,10 +28039,10 @@
 			case IN_KW:
 			{
 				AST __t1162 = _t;
-				AST tmp1540_AST_in = (AST)_t;
+				AST tmp1539_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1541_AST_in = (AST)_t;
+				AST tmp1540_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -28071,10 +28070,10 @@
 		AST systemdialogprintersetupstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1165 = _t;
-		AST tmp1542_AST_in = (AST)_t;
+		AST tmp1541_AST_in = (AST)_t;
 		match(_t,SYSTEMDIALOG);
 		_t = _t.getFirstChild();
-		AST tmp1543_AST_in = (AST)_t;
+		AST tmp1542_AST_in = (AST)_t;
 		match(_t,PRINTERSETUP);
 		_t = _t.getNextSibling();
 		{
@@ -28085,7 +28084,7 @@
 			case NUMCOPIES:
 			{
 				AST __t1167 = _t;
-				AST tmp1544_AST_in = (AST)_t;
+				AST tmp1543_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -28097,7 +28096,7 @@
 			case UPDATE:
 			{
 				AST __t1168 = _t;
-				AST tmp1545_AST_in = (AST)_t;
+				AST tmp1544_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.UPDATING);
@@ -28108,14 +28107,14 @@
 			}
 			case LANDSCAPE:
 			{
-				AST tmp1546_AST_in = (AST)_t;
+				AST tmp1545_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case PORTRAIT:
 			{
-				AST tmp1547_AST_in = (AST)_t;
+				AST tmp1546_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
@@ -28123,10 +28122,10 @@
 			case IN_KW:
 			{
 				AST __t1169 = _t;
-				AST tmp1548_AST_in = (AST)_t;
+				AST tmp1547_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp1549_AST_in = (AST)_t;
+				AST tmp1548_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -28160,13 +28159,13 @@
 		AST id2 = null;
 		
 		AST __t1182 = _t;
-		AST tmp1550_AST_in = (AST)_t;
+		AST tmp1549_AST_in = (AST)_t;
 		match(_t,TRIGGER);
 		_t = _t.getFirstChild();
-		AST tmp1551_AST_in = (AST)_t;
+		AST tmp1550_AST_in = (AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp1552_AST_in = (AST)_t;
+		AST tmp1551_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		{
@@ -28183,35 +28182,35 @@
 			switch ( _t.getType()) {
 			case CREATE:
 			{
-				AST tmp1553_AST_in = (AST)_t;
+				AST tmp1552_AST_in = (AST)_t;
 				match(_t,CREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DELETE_KW:
 			{
-				AST tmp1554_AST_in = (AST)_t;
+				AST tmp1553_AST_in = (AST)_t;
 				match(_t,DELETE_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FIND:
 			{
-				AST tmp1555_AST_in = (AST)_t;
+				AST tmp1554_AST_in = (AST)_t;
 				match(_t,FIND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONCREATE:
 			{
-				AST tmp1556_AST_in = (AST)_t;
+				AST tmp1555_AST_in = (AST)_t;
 				match(_t,REPLICATIONCREATE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONDELETE:
 			{
-				AST tmp1557_AST_in = (AST)_t;
+				AST tmp1556_AST_in = (AST)_t;
 				match(_t,REPLICATIONDELETE);
 				_t = _t.getNextSibling();
 				break;
@@ -28222,7 +28221,7 @@
 			}
 			}
 			}
-			AST tmp1558_AST_in = (AST)_t;
+			AST tmp1557_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			t1 = _t==ASTNULL ? null : (AST)_t;
@@ -28262,14 +28261,14 @@
 			switch ( _t.getType()) {
 			case WRITE:
 			{
-				AST tmp1559_AST_in = (AST)_t;
+				AST tmp1558_AST_in = (AST)_t;
 				match(_t,WRITE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case REPLICATIONWRITE:
 			{
-				AST tmp1560_AST_in = (AST)_t;
+				AST tmp1559_AST_in = (AST)_t;
 				match(_t,REPLICATIONWRITE);
 				_t = _t.getNextSibling();
 				break;
@@ -28280,7 +28279,7 @@
 			}
 			}
 			}
-			AST tmp1561_AST_in = (AST)_t;
+			AST tmp1560_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			rec = _t==ASTNULL ? null : (AST)_t;
@@ -28314,7 +28313,7 @@
 			switch ( _t.getType()) {
 			case NEW:
 			{
-				AST tmp1562_AST_in = (AST)_t;
+				AST tmp1561_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getNextSibling();
 				{
@@ -28322,7 +28321,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1563_AST_in = (AST)_t;
+					AST tmp1562_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -28387,7 +28386,7 @@
 			switch ( _t.getType()) {
 			case OLD:
 			{
-				AST tmp1564_AST_in = (AST)_t;
+				AST tmp1563_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getNextSibling();
 				{
@@ -28395,7 +28394,7 @@
 				switch ( _t.getType()) {
 				case BUFFER:
 				{
-					AST tmp1565_AST_in = (AST)_t;
+					AST tmp1564_AST_in = (AST)_t;
 					match(_t,BUFFER);
 					_t = _t.getNextSibling();
 					break;
@@ -28454,7 +28453,7 @@
 		}
 		case ASSIGN:
 		{
-			AST tmp1566_AST_in = (AST)_t;
+			AST tmp1565_AST_in = (AST)_t;
 			match(_t,ASSIGN);
 			_t = _t.getNextSibling();
 			{
@@ -28463,7 +28462,7 @@
 			case OF:
 			{
 				AST __t1195 = _t;
-				AST tmp1567_AST_in = (AST)_t;
+				AST tmp1566_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getFirstChild();
 				fld(_t,CQ.SYMBOL);
@@ -28474,10 +28473,10 @@
 				case TABLE:
 				{
 					AST __t1197 = _t;
-					AST tmp1568_AST_in = (AST)_t;
+					AST tmp1567_AST_in = (AST)_t;
 					match(_t,TABLE);
 					_t = _t.getFirstChild();
-					AST tmp1569_AST_in = (AST)_t;
+					AST tmp1568_AST_in = (AST)_t;
 					match(_t,LABEL);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -28503,7 +28502,7 @@
 			case NEW:
 			{
 				AST __t1198 = _t;
-				AST tmp1570_AST_in = (AST)_t;
+				AST tmp1569_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getFirstChild();
 				{
@@ -28511,7 +28510,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1571_AST_in = (AST)_t;
+					AST tmp1570_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -28559,7 +28558,7 @@
 			case OLD:
 			{
 				AST __t1201 = _t;
-				AST tmp1572_AST_in = (AST)_t;
+				AST tmp1571_AST_in = (AST)_t;
 				match(_t,OLD);
 				_t = _t.getFirstChild();
 				{
@@ -28567,7 +28566,7 @@
 				switch ( _t.getType()) {
 				case VALUE:
 				{
-					AST tmp1573_AST_in = (AST)_t;
+					AST tmp1572_AST_in = (AST)_t;
 					match(_t,VALUE);
 					_t = _t.getNextSibling();
 					break;
@@ -28832,12 +28831,12 @@
 			try {
 				{
 				AST __t1219 = _t;
-				AST tmp1574_AST_in = (AST)_t;
+				AST tmp1573_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getFirstChild();
 				tbl(_t,CQ.SYMBOL);
 				_t = _retTree;
-				AST tmp1575_AST_in = (AST)_t;
+				AST tmp1574_AST_in = (AST)_t;
 				match(_t,SET);
 				_t = _t.getNextSibling();
 				_t = __t1219;
@@ -28870,12 +28869,12 @@
 		AST sqlupdatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1359 = _t;
-		AST tmp1576_AST_in = (AST)_t;
+		AST tmp1575_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
-		AST tmp1577_AST_in = (AST)_t;
+		AST tmp1576_AST_in = (AST)_t;
 		match(_t,SET);
 		_t = _t.getNextSibling();
 		sqlupdate_equal(_t);
@@ -28885,7 +28884,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1578_AST_in = (AST)_t;
+				AST tmp1577_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlupdate_equal(_t);
@@ -28903,7 +28902,7 @@
 		case WHERE:
 		{
 			AST __t1363 = _t;
-			AST tmp1579_AST_in = (AST)_t;
+			AST tmp1578_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -28913,13 +28912,13 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CURRENT)) {
-				AST tmp1580_AST_in = (AST)_t;
+				AST tmp1579_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getNextSibling();
-				AST tmp1581_AST_in = (AST)_t;
+				AST tmp1580_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp1582_AST_in = (AST)_t;
+				AST tmp1581_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 			}
@@ -28967,7 +28966,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp1583_AST_in = (AST)_t;
+			AST tmp1582_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -29035,7 +29034,7 @@
 		case EXCEPT:
 		{
 			AST __t1228 = _t;
-			AST tmp1584_AST_in = (AST)_t;
+			AST tmp1583_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -29077,10 +29076,10 @@
 		case IN_KW:
 		{
 			AST __t1232 = _t;
-			AST tmp1585_AST_in = (AST)_t;
+			AST tmp1584_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1586_AST_in = (AST)_t;
+			AST tmp1585_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -29154,7 +29153,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1587_AST_in = (AST)_t;
+			AST tmp1586_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -29182,7 +29181,7 @@
 		AST validatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1237 = _t;
-		AST tmp1588_AST_in = (AST)_t;
+		AST tmp1587_AST_in = (AST)_t;
 		match(_t,VALIDATE);
 		_t = _t.getFirstChild();
 		tbl(_t,CQ.REF);
@@ -29192,7 +29191,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1589_AST_in = (AST)_t;
+			AST tmp1588_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -29266,10 +29265,10 @@
 		case IN_KW:
 		{
 			AST __t1245 = _t;
-			AST tmp1590_AST_in = (AST)_t;
+			AST tmp1589_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1591_AST_in = (AST)_t;
+			AST tmp1590_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -29304,10 +29303,10 @@
 		AST altertablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1247 = _t;
-		AST tmp1592_AST_in = (AST)_t;
+		AST tmp1591_AST_in = (AST)_t;
 		match(_t,ALTER);
 		_t = _t.getFirstChild();
-		AST tmp1593_AST_in = (AST)_t;
+		AST tmp1592_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -29317,10 +29316,10 @@
 		switch ( _t.getType()) {
 		case ADD:
 		{
-			AST tmp1594_AST_in = (AST)_t;
+			AST tmp1593_AST_in = (AST)_t;
 			match(_t,ADD);
 			_t = _t.getNextSibling();
-			AST tmp1595_AST_in = (AST)_t;
+			AST tmp1594_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			sql_col_def(_t);
@@ -29329,10 +29328,10 @@
 		}
 		case DROP:
 		{
-			AST tmp1596_AST_in = (AST)_t;
+			AST tmp1595_AST_in = (AST)_t;
 			match(_t,DROP);
 			_t = _t.getNextSibling();
-			AST tmp1597_AST_in = (AST)_t;
+			AST tmp1596_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
@@ -29341,10 +29340,10 @@
 		}
 		case ALTER:
 		{
-			AST tmp1598_AST_in = (AST)_t;
+			AST tmp1597_AST_in = (AST)_t;
 			match(_t,ALTER);
 			_t = _t.getNextSibling();
-			AST tmp1599_AST_in = (AST)_t;
+			AST tmp1598_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
@@ -29357,7 +29356,7 @@
 				case FORMAT:
 				{
 					AST __t1250 = _t;
-					AST tmp1600_AST_in = (AST)_t;
+					AST tmp1599_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -29376,7 +29375,7 @@
 				case DEFAULT:
 				{
 					AST __t1251 = _t;
-					AST tmp1601_AST_in = (AST)_t;
+					AST tmp1600_AST_in = (AST)_t;
 					match(_t,DEFAULT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -29419,10 +29418,10 @@
 		AST sql_col_def_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2451 = _t;
-		AST tmp1602_AST_in = (AST)_t;
+		AST tmp1601_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getFirstChild();
-		AST tmp1603_AST_in = (AST)_t;
+		AST tmp1602_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -29430,7 +29429,7 @@
 		switch ( _t.getType()) {
 		case PRECISION:
 		{
-			AST tmp1604_AST_in = (AST)_t;
+			AST tmp1603_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
@@ -29458,10 +29457,10 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp1605_AST_in = (AST)_t;
+			AST tmp1604_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1606_AST_in = (AST)_t;
+			AST tmp1605_AST_in = (AST)_t;
 			match(_t,NUMBER);
 			_t = _t.getNextSibling();
 			{
@@ -29469,10 +29468,10 @@
 			switch ( _t.getType()) {
 			case COMMA:
 			{
-				AST tmp1607_AST_in = (AST)_t;
+				AST tmp1606_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1608_AST_in = (AST)_t;
+				AST tmp1607_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				break;
@@ -29487,7 +29486,7 @@
 			}
 			}
 			}
-			AST tmp1609_AST_in = (AST)_t;
+			AST tmp1608_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -29515,13 +29514,13 @@
 		case Not_null:
 		{
 			AST __t2456 = _t;
-			AST tmp1610_AST_in = (AST)_t;
+			AST tmp1609_AST_in = (AST)_t;
 			match(_t,Not_null);
 			_t = _t.getFirstChild();
-			AST tmp1611_AST_in = (AST)_t;
+			AST tmp1610_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp1612_AST_in = (AST)_t;
+			AST tmp1611_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			{
@@ -29529,7 +29528,7 @@
 			switch ( _t.getType()) {
 			case UNIQUE:
 			{
-				AST tmp1613_AST_in = (AST)_t;
+				AST tmp1612_AST_in = (AST)_t;
 				match(_t,UNIQUE);
 				_t = _t.getNextSibling();
 				break;
@@ -29579,7 +29578,7 @@
 			case DEFAULT:
 			{
 				AST __t2459 = _t;
-				AST tmp1614_AST_in = (AST)_t;
+				AST tmp1613_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -29591,7 +29590,7 @@
 			case FORMAT:
 			{
 				AST __t2460 = _t;
-				AST tmp1615_AST_in = (AST)_t;
+				AST tmp1614_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -29624,7 +29623,7 @@
 		AST createindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1254 = _t;
-		AST tmp1616_AST_in = (AST)_t;
+		AST tmp1615_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
 		{
@@ -29632,7 +29631,7 @@
 		switch ( _t.getType()) {
 		case UNIQUE:
 		{
-			AST tmp1617_AST_in = (AST)_t;
+			AST tmp1616_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getNextSibling();
 			break;
@@ -29647,22 +29646,22 @@
 		}
 		}
 		}
-		AST tmp1618_AST_in = (AST)_t;
+		AST tmp1617_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getNextSibling();
-		AST tmp1619_AST_in = (AST)_t;
+		AST tmp1618_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1620_AST_in = (AST)_t;
+		AST tmp1619_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
 		_t = _retTree;
 		AST __t1256 = _t;
-		AST tmp1621_AST_in = (AST)_t;
+		AST tmp1620_AST_in = (AST)_t;
 		match(_t,Field_list);
 		_t = _t.getFirstChild();
-		AST tmp1622_AST_in = (AST)_t;
+		AST tmp1621_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.SYMBOL);
@@ -29672,7 +29671,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1623_AST_in = (AST)_t;
+				AST tmp1622_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.SYMBOL);
@@ -29684,7 +29683,7 @@
 			
 		} while (true);
 		}
-		AST tmp1624_AST_in = (AST)_t;
+		AST tmp1623_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1256;
@@ -29701,13 +29700,13 @@
 		AST createviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1260 = _t;
-		AST tmp1625_AST_in = (AST)_t;
+		AST tmp1624_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1626_AST_in = (AST)_t;
+		AST tmp1625_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getNextSibling();
-		AST tmp1627_AST_in = (AST)_t;
+		AST tmp1626_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -29716,10 +29715,10 @@
 		case Field_list:
 		{
 			AST __t1262 = _t;
-			AST tmp1628_AST_in = (AST)_t;
+			AST tmp1627_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp1629_AST_in = (AST)_t;
+			AST tmp1628_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.SYMBOL);
@@ -29729,7 +29728,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1630_AST_in = (AST)_t;
+					AST tmp1629_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.SYMBOL);
@@ -29741,7 +29740,7 @@
 				
 			} while (true);
 			}
-			AST tmp1631_AST_in = (AST)_t;
+			AST tmp1630_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t1262;
@@ -29758,7 +29757,7 @@
 		}
 		}
 		}
-		AST tmp1632_AST_in = (AST)_t;
+		AST tmp1631_AST_in = (AST)_t;
 		match(_t,AS);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
@@ -29775,7 +29774,7 @@
 		AST selectstatea_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1314 = _t;
-		AST tmp1633_AST_in = (AST)_t;
+		AST tmp1632_AST_in = (AST)_t;
 		match(_t,SELECT);
 		_t = _t.getFirstChild();
 		{
@@ -29783,14 +29782,14 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp1634_AST_in = (AST)_t;
+			AST tmp1633_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISTINCT:
 		{
-			AST tmp1635_AST_in = (AST)_t;
+			AST tmp1634_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			break;
@@ -29811,7 +29810,7 @@
 		switch ( _t.getType()) {
 		case STAR:
 		{
-			AST tmp1636_AST_in = (AST)_t;
+			AST tmp1635_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -29819,7 +29818,7 @@
 		case Sql_select_what:
 		{
 			AST __t1317 = _t;
-			AST tmp1637_AST_in = (AST)_t;
+			AST tmp1636_AST_in = (AST)_t;
 			match(_t,Sql_select_what);
 			_t = _t.getFirstChild();
 			{
@@ -29831,7 +29830,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1638_AST_in = (AST)_t;
+					AST tmp1637_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
@@ -29843,7 +29842,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched1320 ) {
-				AST tmp1639_AST_in = (AST)_t;
+				AST tmp1638_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -29867,7 +29866,7 @@
 				}
 				}
 				}
-				AST tmp1640_AST_in = (AST)_t;
+				AST tmp1639_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -29925,7 +29924,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1641_AST_in = (AST)_t;
+					AST tmp1640_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -29973,7 +29972,7 @@
 		case INTO:
 		{
 			AST __t1328 = _t;
-			AST tmp1642_AST_in = (AST)_t;
+			AST tmp1641_AST_in = (AST)_t;
 			match(_t,INTO);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
@@ -30004,7 +30003,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1643_AST_in = (AST)_t;
+					AST tmp1642_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
@@ -30052,7 +30051,7 @@
 		}
 		}
 		AST __t1333 = _t;
-		AST tmp1644_AST_in = (AST)_t;
+		AST tmp1643_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getFirstChild();
 		select_from_spec(_t);
@@ -30062,7 +30061,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1645_AST_in = (AST)_t;
+				AST tmp1644_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				select_from_spec(_t);
@@ -30082,10 +30081,10 @@
 		case GROUP:
 		{
 			AST __t1337 = _t;
-			AST tmp1646_AST_in = (AST)_t;
+			AST tmp1645_AST_in = (AST)_t;
 			match(_t,GROUP);
 			_t = _t.getFirstChild();
-			AST tmp1647_AST_in = (AST)_t;
+			AST tmp1646_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -30095,7 +30094,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1648_AST_in = (AST)_t;
+					AST tmp1647_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					expression(_t);
@@ -30132,7 +30131,7 @@
 		case HAVING:
 		{
 			AST __t1341 = _t;
-			AST tmp1649_AST_in = (AST)_t;
+			AST tmp1648_AST_in = (AST)_t;
 			match(_t,HAVING);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30161,10 +30160,10 @@
 		case ORDER:
 		{
 			AST __t1343 = _t;
-			AST tmp1650_AST_in = (AST)_t;
+			AST tmp1649_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getFirstChild();
-			AST tmp1651_AST_in = (AST)_t;
+			AST tmp1650_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			select_order_expr(_t);
@@ -30176,7 +30175,7 @@
 		case BY:
 		{
 			AST __t1344 = _t;
-			AST tmp1652_AST_in = (AST)_t;
+			AST tmp1651_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getFirstChild();
 			select_order_expr(_t);
@@ -30210,13 +30209,13 @@
 				try {
 					{
 					AST __t1348 = _t;
-					AST tmp1653_AST_in = (AST)_t;
+					AST tmp1652_AST_in = (AST)_t;
 					match(_t,WITH);
 					_t = _t.getFirstChild();
-					AST tmp1654_AST_in = (AST)_t;
+					AST tmp1653_AST_in = (AST)_t;
 					match(_t,CHECK);
 					_t = _t.getNextSibling();
-					AST tmp1655_AST_in = (AST)_t;
+					AST tmp1654_AST_in = (AST)_t;
 					match(_t,OPTION);
 					_t = _t.getNextSibling();
 					_t = __t1348;
@@ -30231,13 +30230,13 @@
 			}
 			if ( synPredMatched1349 ) {
 				AST __t1350 = _t;
-				AST tmp1656_AST_in = (AST)_t;
+				AST tmp1655_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp1657_AST_in = (AST)_t;
+				AST tmp1656_AST_in = (AST)_t;
 				match(_t,CHECK);
 				_t = _t.getNextSibling();
-				AST tmp1658_AST_in = (AST)_t;
+				AST tmp1657_AST_in = (AST)_t;
 				match(_t,OPTION);
 				_t = _t.getNextSibling();
 				_t = __t1350;
@@ -30284,7 +30283,7 @@
 		case UNION:
 		{
 			AST __t1353 = _t;
-			AST tmp1659_AST_in = (AST)_t;
+			AST tmp1658_AST_in = (AST)_t;
 			match(_t,UNION);
 			_t = _t.getFirstChild();
 			{
@@ -30292,7 +30291,7 @@
 			switch ( _t.getType()) {
 			case ALL:
 			{
-				AST tmp1660_AST_in = (AST)_t;
+				AST tmp1659_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
@@ -30333,10 +30332,10 @@
 		AST deletefromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1266 = _t;
-		AST tmp1661_AST_in = (AST)_t;
+		AST tmp1660_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1662_AST_in = (AST)_t;
+		AST tmp1661_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -30347,7 +30346,7 @@
 		case WHERE:
 		{
 			AST __t1268 = _t;
-			AST tmp1663_AST_in = (AST)_t;
+			AST tmp1662_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -30356,13 +30355,13 @@
 			case CURRENT:
 			{
 				AST __t1270 = _t;
-				AST tmp1664_AST_in = (AST)_t;
+				AST tmp1663_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getFirstChild();
-				AST tmp1665_AST_in = (AST)_t;
+				AST tmp1664_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp1666_AST_in = (AST)_t;
+				AST tmp1665_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				_t = __t1270;
@@ -30415,7 +30414,7 @@
 		case OR:
 		{
 			AST __t2463 = _t;
-			AST tmp1667_AST_in = (AST)_t;
+			AST tmp1666_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30429,7 +30428,7 @@
 		case AND:
 		{
 			AST __t2464 = _t;
-			AST tmp1668_AST_in = (AST)_t;
+			AST tmp1667_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30443,7 +30442,7 @@
 		case NOT:
 		{
 			AST __t2465 = _t;
-			AST tmp1669_AST_in = (AST)_t;
+			AST tmp1668_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -30455,7 +30454,7 @@
 		case MATCHES:
 		{
 			AST __t2466 = _t;
-			AST tmp1670_AST_in = (AST)_t;
+			AST tmp1669_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30482,7 +30481,7 @@
 		case BEGINS:
 		{
 			AST __t2468 = _t;
-			AST tmp1671_AST_in = (AST)_t;
+			AST tmp1670_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30509,7 +30508,7 @@
 		case CONTAINS:
 		{
 			AST __t2470 = _t;
-			AST tmp1672_AST_in = (AST)_t;
+			AST tmp1671_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30536,7 +30535,7 @@
 		case EQ:
 		{
 			AST __t2472 = _t;
-			AST tmp1673_AST_in = (AST)_t;
+			AST tmp1672_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30563,7 +30562,7 @@
 		case NE:
 		{
 			AST __t2474 = _t;
-			AST tmp1674_AST_in = (AST)_t;
+			AST tmp1673_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30590,7 +30589,7 @@
 		case GTHAN:
 		{
 			AST __t2476 = _t;
-			AST tmp1675_AST_in = (AST)_t;
+			AST tmp1674_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30617,7 +30616,7 @@
 		case GE:
 		{
 			AST __t2478 = _t;
-			AST tmp1676_AST_in = (AST)_t;
+			AST tmp1675_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30644,7 +30643,7 @@
 		case LTHAN:
 		{
 			AST __t2480 = _t;
-			AST tmp1677_AST_in = (AST)_t;
+			AST tmp1676_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30671,7 +30670,7 @@
 		case LE:
 		{
 			AST __t2482 = _t;
-			AST tmp1678_AST_in = (AST)_t;
+			AST tmp1677_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -30698,15 +30697,15 @@
 		case EXISTS:
 		{
 			AST __t2484 = _t;
-			AST tmp1679_AST_in = (AST)_t;
+			AST tmp1678_AST_in = (AST)_t;
 			match(_t,EXISTS);
 			_t = _t.getFirstChild();
-			AST tmp1680_AST_in = (AST)_t;
+			AST tmp1679_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			selectstatea(_t);
 			_t = _retTree;
-			AST tmp1681_AST_in = (AST)_t;
+			AST tmp1680_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2484;
@@ -30716,7 +30715,7 @@
 		case Sql_begins:
 		{
 			AST __t2485 = _t;
-			AST tmp1682_AST_in = (AST)_t;
+			AST tmp1681_AST_in = (AST)_t;
 			match(_t,Sql_begins);
 			_t = _t.getFirstChild();
 			{
@@ -30724,7 +30723,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1683_AST_in = (AST)_t;
+				AST tmp1682_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30739,7 +30738,7 @@
 			}
 			}
 			}
-			AST tmp1684_AST_in = (AST)_t;
+			AST tmp1683_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30751,7 +30750,7 @@
 		case Sql_between:
 		{
 			AST __t2487 = _t;
-			AST tmp1685_AST_in = (AST)_t;
+			AST tmp1684_AST_in = (AST)_t;
 			match(_t,Sql_between);
 			_t = _t.getFirstChild();
 			{
@@ -30759,7 +30758,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1686_AST_in = (AST)_t;
+				AST tmp1685_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30774,12 +30773,12 @@
 			}
 			}
 			}
-			AST tmp1687_AST_in = (AST)_t;
+			AST tmp1686_AST_in = (AST)_t;
 			match(_t,BETWEEN);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			AST tmp1688_AST_in = (AST)_t;
+			AST tmp1687_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30791,7 +30790,7 @@
 		case Sql_in:
 		{
 			AST __t2489 = _t;
-			AST tmp1689_AST_in = (AST)_t;
+			AST tmp1688_AST_in = (AST)_t;
 			match(_t,Sql_in);
 			_t = _t.getFirstChild();
 			{
@@ -30799,7 +30798,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1690_AST_in = (AST)_t;
+				AST tmp1689_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30814,10 +30813,10 @@
 			}
 			}
 			}
-			AST tmp1691_AST_in = (AST)_t;
+			AST tmp1690_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp1692_AST_in = (AST)_t;
+			AST tmp1691_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -30881,7 +30880,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1693_AST_in = (AST)_t;
+						AST tmp1692_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						sql_in_val(_t);
@@ -30901,7 +30900,7 @@
 			}
 			}
 			}
-			AST tmp1694_AST_in = (AST)_t;
+			AST tmp1693_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2489;
@@ -30911,7 +30910,7 @@
 		case Sql_like:
 		{
 			AST __t2494 = _t;
-			AST tmp1695_AST_in = (AST)_t;
+			AST tmp1694_AST_in = (AST)_t;
 			match(_t,Sql_like);
 			_t = _t.getFirstChild();
 			{
@@ -30919,7 +30918,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1696_AST_in = (AST)_t;
+				AST tmp1695_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30934,7 +30933,7 @@
 			}
 			}
 			}
-			AST tmp1697_AST_in = (AST)_t;
+			AST tmp1696_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -30944,7 +30943,7 @@
 			switch ( _t.getType()) {
 			case ESCAPE:
 			{
-				AST tmp1698_AST_in = (AST)_t;
+				AST tmp1697_AST_in = (AST)_t;
 				match(_t,ESCAPE);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -30968,10 +30967,10 @@
 		case Sql_null_test:
 		{
 			AST __t2497 = _t;
-			AST tmp1699_AST_in = (AST)_t;
+			AST tmp1698_AST_in = (AST)_t;
 			match(_t,Sql_null_test);
 			_t = _t.getFirstChild();
-			AST tmp1700_AST_in = (AST)_t;
+			AST tmp1699_AST_in = (AST)_t;
 			match(_t,IS);
 			_t = _t.getNextSibling();
 			{
@@ -30979,7 +30978,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1701_AST_in = (AST)_t;
+				AST tmp1700_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30994,7 +30993,7 @@
 			}
 			}
 			}
-			AST tmp1702_AST_in = (AST)_t;
+			AST tmp1701_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			_t = __t2497;
@@ -31019,10 +31018,10 @@
 		AST droptablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1272 = _t;
-		AST tmp1703_AST_in = (AST)_t;
+		AST tmp1702_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp1704_AST_in = (AST)_t;
+		AST tmp1703_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -31039,13 +31038,13 @@
 		AST fetchstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1274 = _t;
-		AST tmp1705_AST_in = (AST)_t;
+		AST tmp1704_AST_in = (AST)_t;
 		match(_t,FETCH);
 		_t = _t.getFirstChild();
-		AST tmp1706_AST_in = (AST)_t;
+		AST tmp1705_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1707_AST_in = (AST)_t;
+		AST tmp1706_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		fld(_t,CQ.UPDATING);
@@ -31077,7 +31076,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1708_AST_in = (AST)_t;
+				AST tmp1707_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.UPDATING);
@@ -31127,7 +31126,7 @@
 		case INDICATOR:
 		{
 			AST __t1280 = _t;
-			AST tmp1709_AST_in = (AST)_t;
+			AST tmp1708_AST_in = (AST)_t;
 			match(_t,INDICATOR);
 			_t = _t.getFirstChild();
 			fld(_t,CQ.UPDATING);
@@ -31155,14 +31154,14 @@
 		AST grantstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1282 = _t;
-		AST tmp1710_AST_in = (AST)_t;
+		AST tmp1709_AST_in = (AST)_t;
 		match(_t,GRANT);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp1711_AST_in = (AST)_t;
+		AST tmp1710_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -31176,7 +31175,7 @@
 		}
 		case ID:
 		{
-			AST tmp1712_AST_in = (AST)_t;
+			AST tmp1711_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31194,13 +31193,13 @@
 		switch ( _t.getType()) {
 		case WITH:
 		{
-			AST tmp1713_AST_in = (AST)_t;
+			AST tmp1712_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getNextSibling();
-			AST tmp1714_AST_in = (AST)_t;
+			AST tmp1713_AST_in = (AST)_t;
 			match(_t,GRANT);
 			_t = _t.getNextSibling();
-			AST tmp1715_AST_in = (AST)_t;
+			AST tmp1714_AST_in = (AST)_t;
 			match(_t,OPTION);
 			_t = _t.getNextSibling();
 			break;
@@ -31232,7 +31231,7 @@
 		case ALL:
 		{
 			AST __t1287 = _t;
-			AST tmp1716_AST_in = (AST)_t;
+			AST tmp1715_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -31240,7 +31239,7 @@
 			switch ( _t.getType()) {
 			case PRIVILEGES:
 			{
-				AST tmp1717_AST_in = (AST)_t;
+				AST tmp1716_AST_in = (AST)_t;
 				match(_t,PRIVILEGES);
 				_t = _t.getNextSibling();
 				break;
@@ -31273,21 +31272,21 @@
 				switch ( _t.getType()) {
 				case SELECT:
 				{
-					AST tmp1718_AST_in = (AST)_t;
+					AST tmp1717_AST_in = (AST)_t;
 					match(_t,SELECT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INSERT:
 				{
-					AST tmp1719_AST_in = (AST)_t;
+					AST tmp1718_AST_in = (AST)_t;
 					match(_t,INSERT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp1720_AST_in = (AST)_t;
+					AST tmp1719_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
@@ -31295,7 +31294,7 @@
 				case UPDATE:
 				{
 					AST __t1290 = _t;
-					AST tmp1721_AST_in = (AST)_t;
+					AST tmp1720_AST_in = (AST)_t;
 					match(_t,UPDATE);
 					_t = _t.getFirstChild();
 					{
@@ -31304,10 +31303,10 @@
 					case Field_list:
 					{
 						AST __t1292 = _t;
-						AST tmp1722_AST_in = (AST)_t;
+						AST tmp1721_AST_in = (AST)_t;
 						match(_t,Field_list);
 						_t = _t.getFirstChild();
-						AST tmp1723_AST_in = (AST)_t;
+						AST tmp1722_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						fld(_t,CQ.UPDATING);
@@ -31317,7 +31316,7 @@
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp1724_AST_in = (AST)_t;
+								AST tmp1723_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								fld(_t,CQ.UPDATING);
@@ -31329,7 +31328,7 @@
 							
 						} while (true);
 						}
-						AST tmp1725_AST_in = (AST)_t;
+						AST tmp1724_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
 						_t = __t1292;
@@ -31352,7 +31351,7 @@
 				}
 				case COMMA:
 				{
-					AST tmp1726_AST_in = (AST)_t;
+					AST tmp1725_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					break;
@@ -31384,7 +31383,7 @@
 		case TO:
 		{
 			AST __t2423 = _t;
-			AST tmp1727_AST_in = (AST)_t;
+			AST tmp1726_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -31392,14 +31391,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp1728_AST_in = (AST)_t;
+				AST tmp1727_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp1729_AST_in = (AST)_t;
+				AST tmp1728_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -31407,10 +31406,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1730_AST_in = (AST)_t;
+						AST tmp1729_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp1731_AST_in = (AST)_t;
+						AST tmp1730_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -31435,7 +31434,7 @@
 		case FROM:
 		{
 			AST __t2427 = _t;
-			AST tmp1732_AST_in = (AST)_t;
+			AST tmp1731_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -31443,14 +31442,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp1733_AST_in = (AST)_t;
+				AST tmp1732_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp1734_AST_in = (AST)_t;
+				AST tmp1733_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -31458,10 +31457,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp1735_AST_in = (AST)_t;
+						AST tmp1734_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp1736_AST_in = (AST)_t;
+						AST tmp1735_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -31496,10 +31495,10 @@
 		AST insertintostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1297 = _t;
-		AST tmp1737_AST_in = (AST)_t;
+		AST tmp1736_AST_in = (AST)_t;
 		match(_t,INSERT);
 		_t = _t.getFirstChild();
-		AST tmp1738_AST_in = (AST)_t;
+		AST tmp1737_AST_in = (AST)_t;
 		match(_t,INTO);
 		_t = _t.getNextSibling();
 		tbl(_t,CQ.SCHEMATABLESYMBOL);
@@ -31510,10 +31509,10 @@
 		case Field_list:
 		{
 			AST __t1299 = _t;
-			AST tmp1739_AST_in = (AST)_t;
+			AST tmp1738_AST_in = (AST)_t;
 			match(_t,Field_list);
 			_t = _t.getFirstChild();
-			AST tmp1740_AST_in = (AST)_t;
+			AST tmp1739_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			fld(_t,CQ.UPDATING);
@@ -31523,7 +31522,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1741_AST_in = (AST)_t;
+					AST tmp1740_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					fld(_t,CQ.UPDATING);
@@ -31535,7 +31534,7 @@
 				
 			} while (true);
 			}
-			AST tmp1742_AST_in = (AST)_t;
+			AST tmp1741_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t1299;
@@ -31559,10 +31558,10 @@
 		case VALUES:
 		{
 			AST __t1303 = _t;
-			AST tmp1743_AST_in = (AST)_t;
+			AST tmp1742_AST_in = (AST)_t;
 			match(_t,VALUES);
 			_t = _t.getFirstChild();
-			AST tmp1744_AST_in = (AST)_t;
+			AST tmp1743_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			sqlexpression(_t);
@@ -31593,7 +31592,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1745_AST_in = (AST)_t;
+					AST tmp1744_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -31626,7 +31625,7 @@
 				
 			} while (true);
 			}
-			AST tmp1746_AST_in = (AST)_t;
+			AST tmp1745_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t1303;
@@ -31657,14 +31656,14 @@
 		AST revokestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1309 = _t;
-		AST tmp1747_AST_in = (AST)_t;
+		AST tmp1746_AST_in = (AST)_t;
 		match(_t,REVOKE);
 		_t = _t.getFirstChild();
 		{
 		grant_rev_opt(_t);
 		_t = _retTree;
 		}
-		AST tmp1748_AST_in = (AST)_t;
+		AST tmp1747_AST_in = (AST)_t;
 		match(_t,ON);
 		_t = _t.getNextSibling();
 		{
@@ -31678,7 +31677,7 @@
 		}
 		case ID:
 		{
-			AST tmp1749_AST_in = (AST)_t;
+			AST tmp1748_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31729,7 +31728,7 @@
 			case LEFT:
 			{
 				AST __t2435 = _t;
-				AST tmp1750_AST_in = (AST)_t;
+				AST tmp1749_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
 				{
@@ -31737,7 +31736,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp1751_AST_in = (AST)_t;
+					AST tmp1750_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -31752,12 +31751,12 @@
 				}
 				}
 				}
-				AST tmp1752_AST_in = (AST)_t;
+				AST tmp1751_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1753_AST_in = (AST)_t;
+				AST tmp1752_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31769,7 +31768,7 @@
 			case RIGHT:
 			{
 				AST __t2437 = _t;
-				AST tmp1754_AST_in = (AST)_t;
+				AST tmp1753_AST_in = (AST)_t;
 				match(_t,RIGHT);
 				_t = _t.getFirstChild();
 				{
@@ -31777,7 +31776,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp1755_AST_in = (AST)_t;
+					AST tmp1754_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -31792,12 +31791,12 @@
 				}
 				}
 				}
-				AST tmp1756_AST_in = (AST)_t;
+				AST tmp1755_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1757_AST_in = (AST)_t;
+				AST tmp1756_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31809,15 +31808,15 @@
 			case INNER:
 			{
 				AST __t2439 = _t;
-				AST tmp1758_AST_in = (AST)_t;
+				AST tmp1757_AST_in = (AST)_t;
 				match(_t,INNER);
 				_t = _t.getFirstChild();
-				AST tmp1759_AST_in = (AST)_t;
+				AST tmp1758_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1760_AST_in = (AST)_t;
+				AST tmp1759_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31829,15 +31828,15 @@
 			case OUTER:
 			{
 				AST __t2440 = _t;
-				AST tmp1761_AST_in = (AST)_t;
+				AST tmp1760_AST_in = (AST)_t;
 				match(_t,OUTER);
 				_t = _t.getFirstChild();
-				AST tmp1762_AST_in = (AST)_t;
+				AST tmp1761_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1763_AST_in = (AST)_t;
+				AST tmp1762_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31849,12 +31848,12 @@
 			case JOIN:
 			{
 				AST __t2441 = _t;
-				AST tmp1764_AST_in = (AST)_t;
+				AST tmp1763_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getFirstChild();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp1765_AST_in = (AST)_t;
+				AST tmp1764_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -31876,7 +31875,7 @@
 		case WHERE:
 		{
 			AST __t2444 = _t;
-			AST tmp1766_AST_in = (AST)_t;
+			AST tmp1765_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -31910,14 +31909,14 @@
 		switch ( _t.getType()) {
 		case ASC:
 		{
-			AST tmp1767_AST_in = (AST)_t;
+			AST tmp1766_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESCENDING:
 		{
-			AST tmp1768_AST_in = (AST)_t;
+			AST tmp1767_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
@@ -31938,7 +31937,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1769_AST_in = (AST)_t;
+				AST tmp1768_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -31948,14 +31947,14 @@
 				switch ( _t.getType()) {
 				case ASC:
 				{
-					AST tmp1770_AST_in = (AST)_t;
+					AST tmp1769_AST_in = (AST)_t;
 					match(_t,ASC);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DESCENDING:
 				{
-					AST tmp1771_AST_in = (AST)_t;
+					AST tmp1770_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -31996,7 +31995,7 @@
 		}
 		case ID:
 		{
-			AST tmp1772_AST_in = (AST)_t;
+			AST tmp1771_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -32012,7 +32011,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1773_AST_in = (AST)_t;
+			AST tmp1772_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -32043,7 +32042,7 @@
 		AST sqlupdate_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1366 = _t;
-		AST tmp1774_AST_in = (AST)_t;
+		AST tmp1773_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		fld(_t,CQ.REF);
@@ -32079,7 +32078,7 @@
 		
 		AST sqlaggregatefunc_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1775_AST_in = (AST)_t;
+		AST tmp1774_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -32087,7 +32086,7 @@
 		switch ( _t.getType()) {
 		case DISTINCT:
 		{
-			AST tmp1776_AST_in = (AST)_t;
+			AST tmp1775_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			{
@@ -32095,12 +32094,12 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp1777_AST_in = (AST)_t;
+				AST tmp1776_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				fld(_t,CQ.REF);
 				_t = _retTree;
-				AST tmp1778_AST_in = (AST)_t;
+				AST tmp1777_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -32121,7 +32120,7 @@
 		}
 		case STAR:
 		{
-			AST tmp1779_AST_in = (AST)_t;
+			AST tmp1778_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -32132,7 +32131,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ALL)) {
-					AST tmp1780_AST_in = (AST)_t;
+					AST tmp1779_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 				}
@@ -32151,7 +32150,7 @@
 		}
 		}
 		}
-		AST tmp1781_AST_in = (AST)_t;
+		AST tmp1780_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -32166,7 +32165,7 @@
 		case PLUS:
 		{
 			AST __t2503 = _t;
-			AST tmp1782_AST_in = (AST)_t;
+			AST tmp1781_AST_in = (AST)_t;
 			match(_t,PLUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32180,7 +32179,7 @@
 		case MINUS:
 		{
 			AST __t2504 = _t;
-			AST tmp1783_AST_in = (AST)_t;
+			AST tmp1782_AST_in = (AST)_t;
 			match(_t,MINUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32194,7 +32193,7 @@
 		case MULTIPLY:
 		{
 			AST __t2505 = _t;
-			AST tmp1784_AST_in = (AST)_t;
+			AST tmp1783_AST_in = (AST)_t;
 			match(_t,MULTIPLY);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32208,7 +32207,7 @@
 		case DIVIDE:
 		{
 			AST __t2506 = _t;
-			AST tmp1785_AST_in = (AST)_t;
+			AST tmp1784_AST_in = (AST)_t;
 			match(_t,DIVIDE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32222,7 +32221,7 @@
 		case MODULO:
 		{
 			AST __t2507 = _t;
-			AST tmp1786_AST_in = (AST)_t;
+			AST tmp1785_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -32236,7 +32235,7 @@
 		case UNARY_PLUS:
 		{
 			AST __t2508 = _t;
-			AST tmp1787_AST_in = (AST)_t;
+			AST tmp1786_AST_in = (AST)_t;
 			match(_t,UNARY_PLUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -32248,7 +32247,7 @@
 		case UNARY_MINUS:
 		{
 			AST __t2509 = _t;
-			AST tmp1788_AST_in = (AST)_t;
+			AST tmp1787_AST_in = (AST)_t;
 			match(_t,UNARY_MINUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -32266,7 +32265,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp1789_AST_in = (AST)_t;
+					AST tmp1788_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
@@ -32279,12 +32278,12 @@
 			}
 			if ( synPredMatched2511 ) {
 				AST __t2512 = _t;
-				AST tmp1790_AST_in = (AST)_t;
+				AST tmp1789_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getFirstChild();
 				sqlexpression(_t);
 				_t = _retTree;
-				AST tmp1791_AST_in = (AST)_t;
+				AST tmp1790_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t2512;
@@ -32383,7 +32382,7 @@
 		}
 		case USERID:
 		{
-			AST tmp1792_AST_in = (AST)_t;
+			AST tmp1791_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;
@@ -32401,10 +32400,10 @@
 		AST labeled_block_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1390 = _t;
-		AST tmp1793_AST_in = (AST)_t;
+		AST tmp1792_AST_in = (AST)_t;
 		match(_t,BLOCK_LABEL);
 		_t = _t.getFirstChild();
-		AST tmp1794_AST_in = (AST)_t;
+		AST tmp1793_AST_in = (AST)_t;
 		match(_t,LEXCOLON);
 		_t = _t.getNextSibling();
 		{
@@ -33370,7 +33369,7 @@
 		AST aatracestatement_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1609 = _t;
-		AST tmp1795_AST_in = (AST)_t;
+		AST tmp1794_AST_in = (AST)_t;
 		match(_t,AATRACE);
 		_t = _t.getFirstChild();
 		{
@@ -33378,7 +33377,7 @@
 		switch ( _t.getType()) {
 		case OFF:
 		{
-			AST tmp1796_AST_in = (AST)_t;
+			AST tmp1795_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			state_end(_t);
@@ -33388,7 +33387,7 @@
 		case ON:
 		{
 			AST __t1611 = _t;
-			AST tmp1797_AST_in = (AST)_t;
+			AST tmp1796_AST_in = (AST)_t;
 			match(_t,ON);
 			_t = _t.getFirstChild();
 			{
@@ -33396,7 +33395,7 @@
 			switch ( _t.getType()) {
 			case AALIST:
 			{
-				AST tmp1798_AST_in = (AST)_t;
+				AST tmp1797_AST_in = (AST)_t;
 				match(_t,AALIST);
 				_t = _t.getNextSibling();
 				break;
@@ -33457,21 +33456,21 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp1799_AST_in = (AST)_t;
+					AST tmp1798_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case FROM:
 				{
-					AST tmp1800_AST_in = (AST)_t;
+					AST tmp1799_AST_in = (AST)_t;
 					match(_t,FROM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case THROUGH:
 				{
-					AST tmp1801_AST_in = (AST)_t;
+					AST tmp1800_AST_in = (AST)_t;
 					match(_t,THROUGH);
 					_t = _t.getNextSibling();
 					break;
@@ -33490,7 +33489,7 @@
 			}
 			case CLOSE:
 			{
-				AST tmp1802_AST_in = (AST)_t;
+				AST tmp1801_AST_in = (AST)_t;
 				match(_t,CLOSE);
 				_t = _t.getNextSibling();
 				state_end(_t);
@@ -33521,7 +33520,7 @@
 		AST accumulatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1618 = _t;
-		AST tmp1803_AST_in = (AST)_t;
+		AST tmp1802_AST_in = (AST)_t;
 		match(_t,ACCUMULATE);
 		_t = _t.getFirstChild();
 		{
@@ -33550,7 +33549,7 @@
 		AST analyzestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1630 = _t;
-		AST tmp1804_AST_in = (AST)_t;
+		AST tmp1803_AST_in = (AST)_t;
 		match(_t,ANALYZE);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -33563,7 +33562,7 @@
 		case OUTPUT:
 		{
 			AST __t1632 = _t;
-			AST tmp1805_AST_in = (AST)_t;
+			AST tmp1804_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			filenameorvalue(_t);
@@ -33593,21 +33592,21 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1806_AST_in = (AST)_t;
+				AST tmp1805_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ALL:
 			{
-				AST tmp1807_AST_in = (AST)_t;
+				AST tmp1806_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1808_AST_in = (AST)_t;
+				AST tmp1807_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -33631,7 +33630,7 @@
 		AST applystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1636 = _t;
-		AST tmp1809_AST_in = (AST)_t;
+		AST tmp1808_AST_in = (AST)_t;
 		match(_t,APPLY);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -33642,7 +33641,7 @@
 		case TO:
 		{
 			AST __t1638 = _t;
-			AST tmp1810_AST_in = (AST)_t;
+			AST tmp1809_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			gwidget(_t);
@@ -33674,7 +33673,7 @@
 		AST assignstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1645 = _t;
-		AST tmp1811_AST_in = (AST)_t;
+		AST tmp1810_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		assignment_list(_t);
@@ -33684,7 +33683,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1812_AST_in = (AST)_t;
+			AST tmp1811_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -33712,7 +33711,7 @@
 		AST bellstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1661 = _t;
-		AST tmp1813_AST_in = (AST)_t;
+		AST tmp1812_AST_in = (AST)_t;
 		match(_t,BELL);
 		_t = _t.getFirstChild();
 		state_end(_t);
@@ -33727,7 +33726,7 @@
 		AST callstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1663 = _t;
-		AST tmp1814_AST_in = (AST)_t;
+		AST tmp1813_AST_in = (AST)_t;
 		match(_t,CALL);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -33758,7 +33757,7 @@
 		AST casestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1669 = _t;
-		AST tmp1815_AST_in = (AST)_t;
+		AST tmp1814_AST_in = (AST)_t;
 		match(_t,CASE);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -33766,7 +33765,7 @@
 		block_colon(_t);
 		_t = _retTree;
 		AST __t1670 = _t;
-		AST tmp1816_AST_in = (AST)_t;
+		AST tmp1815_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
@@ -33775,12 +33774,12 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==WHEN)) {
 				AST __t1672 = _t;
-				AST tmp1817_AST_in = (AST)_t;
+				AST tmp1816_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				case_expression(_t);
 				_t = _retTree;
-				AST tmp1818_AST_in = (AST)_t;
+				AST tmp1817_AST_in = (AST)_t;
 				match(_t,THEN);
 				_t = _t.getNextSibling();
 				blockorstate(_t);
@@ -33802,7 +33801,7 @@
 		case OTHERWISE:
 		{
 			AST __t1675 = _t;
-			AST tmp1819_AST_in = (AST)_t;
+			AST tmp1818_AST_in = (AST)_t;
 			match(_t,OTHERWISE);
 			_t = _t.getFirstChild();
 			blockorstate(_t);
@@ -33827,7 +33826,7 @@
 		switch ( _t.getType()) {
 		case EOF:
 		{
-			AST tmp1820_AST_in = (AST)_t;
+			AST tmp1819_AST_in = (AST)_t;
 			match(_t,Token.EOF_TYPE);
 			_t = _t.getNextSibling();
 			break;
@@ -33835,7 +33834,7 @@
 		case END:
 		{
 			AST __t1677 = _t;
-			AST tmp1821_AST_in = (AST)_t;
+			AST tmp1820_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getFirstChild();
 			{
@@ -33843,7 +33842,7 @@
 			switch ( _t.getType()) {
 			case CASE:
 			{
-				AST tmp1822_AST_in = (AST)_t;
+				AST tmp1821_AST_in = (AST)_t;
 				match(_t,CASE);
 				_t = _t.getNextSibling();
 				break;
@@ -33880,10 +33879,10 @@
 		AST closestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2398 = _t;
-		AST tmp1823_AST_in = (AST)_t;
+		AST tmp1822_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp1824_AST_in = (AST)_t;
+		AST tmp1823_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -33898,13 +33897,13 @@
 		AST closequerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1686 = _t;
-		AST tmp1825_AST_in = (AST)_t;
+		AST tmp1824_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getFirstChild();
-		AST tmp1826_AST_in = (AST)_t;
+		AST tmp1825_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
-		AST tmp1827_AST_in = (AST)_t;
+		AST tmp1826_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -33919,7 +33918,7 @@
 		AST compilestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1717 = _t;
-		AST tmp1828_AST_in = (AST)_t;
+		AST tmp1827_AST_in = (AST)_t;
 		match(_t,COMPILE);
 		_t = _t.getFirstChild();
 		filenameorvalue(_t);
@@ -33932,7 +33931,7 @@
 			case ATTRSPACE:
 			{
 				AST __t1719 = _t;
-				AST tmp1829_AST_in = (AST)_t;
+				AST tmp1828_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getFirstChild();
 				{
@@ -33941,7 +33940,7 @@
 				case EQUAL:
 				{
 					AST __t1721 = _t;
-					AST tmp1830_AST_in = (AST)_t;
+					AST tmp1829_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -33966,7 +33965,7 @@
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp1831_AST_in = (AST)_t;
+				AST tmp1830_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
@@ -33974,7 +33973,7 @@
 			case SAVE:
 			{
 				AST __t1722 = _t;
-				AST tmp1832_AST_in = (AST)_t;
+				AST tmp1831_AST_in = (AST)_t;
 				match(_t,SAVE);
 				_t = _t.getFirstChild();
 				{
@@ -33983,7 +33982,7 @@
 				case EQUAL:
 				{
 					AST __t1724 = _t;
-					AST tmp1833_AST_in = (AST)_t;
+					AST tmp1832_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34009,7 +34008,7 @@
 				case INTO:
 				{
 					AST __t1726 = _t;
-					AST tmp1834_AST_in = (AST)_t;
+					AST tmp1833_AST_in = (AST)_t;
 					match(_t,INTO);
 					_t = _t.getFirstChild();
 					filenameorvalue(_t);
@@ -34035,7 +34034,7 @@
 			case LISTING:
 			{
 				AST __t1727 = _t;
-				AST tmp1835_AST_in = (AST)_t;
+				AST tmp1834_AST_in = (AST)_t;
 				match(_t,LISTING);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -34054,7 +34053,7 @@
 					case PAGESIZE_KW:
 					{
 						AST __t1729 = _t;
-						AST tmp1836_AST_in = (AST)_t;
+						AST tmp1835_AST_in = (AST)_t;
 						match(_t,PAGESIZE_KW);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -34066,7 +34065,7 @@
 					case PAGEWIDTH:
 					{
 						AST __t1730 = _t;
-						AST tmp1837_AST_in = (AST)_t;
+						AST tmp1836_AST_in = (AST)_t;
 						match(_t,PAGEWIDTH);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -34089,7 +34088,7 @@
 			case XCODE:
 			{
 				AST __t1732 = _t;
-				AST tmp1838_AST_in = (AST)_t;
+				AST tmp1837_AST_in = (AST)_t;
 				match(_t,XCODE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -34101,7 +34100,7 @@
 			case XREF:
 			{
 				AST __t1733 = _t;
-				AST tmp1839_AST_in = (AST)_t;
+				AST tmp1838_AST_in = (AST)_t;
 				match(_t,XREF);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -34132,7 +34131,7 @@
 			case STRINGXREF:
 			{
 				AST __t1735 = _t;
-				AST tmp1840_AST_in = (AST)_t;
+				AST tmp1839_AST_in = (AST)_t;
 				match(_t,STRINGXREF);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -34163,7 +34162,7 @@
 			case STREAMIO:
 			{
 				AST __t1737 = _t;
-				AST tmp1841_AST_in = (AST)_t;
+				AST tmp1840_AST_in = (AST)_t;
 				match(_t,STREAMIO);
 				_t = _t.getFirstChild();
 				{
@@ -34172,7 +34171,7 @@
 				case EQUAL:
 				{
 					AST __t1739 = _t;
-					AST tmp1842_AST_in = (AST)_t;
+					AST tmp1841_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34198,7 +34197,7 @@
 			case MINSIZE:
 			{
 				AST __t1740 = _t;
-				AST tmp1843_AST_in = (AST)_t;
+				AST tmp1842_AST_in = (AST)_t;
 				match(_t,MINSIZE);
 				_t = _t.getFirstChild();
 				{
@@ -34207,7 +34206,7 @@
 				case EQUAL:
 				{
 					AST __t1742 = _t;
-					AST tmp1844_AST_in = (AST)_t;
+					AST tmp1843_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34233,10 +34232,10 @@
 			case LANGUAGES:
 			{
 				AST __t1743 = _t;
-				AST tmp1845_AST_in = (AST)_t;
+				AST tmp1844_AST_in = (AST)_t;
 				match(_t,LANGUAGES);
 				_t = _t.getFirstChild();
-				AST tmp1846_AST_in = (AST)_t;
+				AST tmp1845_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -34252,7 +34251,7 @@
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==COMMA)) {
-							AST tmp1847_AST_in = (AST)_t;
+							AST tmp1846_AST_in = (AST)_t;
 							match(_t,COMMA);
 							_t = _t.getNextSibling();
 							compile_lang(_t);
@@ -34276,7 +34275,7 @@
 				}
 				}
 				}
-				AST tmp1848_AST_in = (AST)_t;
+				AST tmp1847_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t1743;
@@ -34286,11 +34285,11 @@
 			case TEXTSEGGROW:
 			{
 				AST __t1747 = _t;
-				AST tmp1849_AST_in = (AST)_t;
+				AST tmp1848_AST_in = (AST)_t;
 				match(_t,TEXTSEGGROW);
 				_t = _t.getFirstChild();
 				AST __t1748 = _t;
-				AST tmp1850_AST_in = (AST)_t;
+				AST tmp1849_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -34304,7 +34303,7 @@
 			case DEBUGLIST:
 			{
 				AST __t1749 = _t;
-				AST tmp1851_AST_in = (AST)_t;
+				AST tmp1850_AST_in = (AST)_t;
 				match(_t,DEBUGLIST);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -34316,7 +34315,7 @@
 			case DEFAULTNOXLATE:
 			{
 				AST __t1750 = _t;
-				AST tmp1852_AST_in = (AST)_t;
+				AST tmp1851_AST_in = (AST)_t;
 				match(_t,DEFAULTNOXLATE);
 				_t = _t.getFirstChild();
 				{
@@ -34325,7 +34324,7 @@
 				case EQUAL:
 				{
 					AST __t1752 = _t;
-					AST tmp1853_AST_in = (AST)_t;
+					AST tmp1852_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34351,7 +34350,7 @@
 			case GENERATEMD5:
 			{
 				AST __t1753 = _t;
-				AST tmp1854_AST_in = (AST)_t;
+				AST tmp1853_AST_in = (AST)_t;
 				match(_t,GENERATEMD5);
 				_t = _t.getFirstChild();
 				{
@@ -34360,7 +34359,7 @@
 				case EQUAL:
 				{
 					AST __t1755 = _t;
-					AST tmp1855_AST_in = (AST)_t;
+					AST tmp1854_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34386,7 +34385,7 @@
 			case PREPROCESS:
 			{
 				AST __t1756 = _t;
-				AST tmp1856_AST_in = (AST)_t;
+				AST tmp1855_AST_in = (AST)_t;
 				match(_t,PREPROCESS);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -34398,7 +34397,7 @@
 			case USEREVVIDEO:
 			{
 				AST __t1757 = _t;
-				AST tmp1857_AST_in = (AST)_t;
+				AST tmp1856_AST_in = (AST)_t;
 				match(_t,USEREVVIDEO);
 				_t = _t.getFirstChild();
 				{
@@ -34407,7 +34406,7 @@
 				case EQUAL:
 				{
 					AST __t1759 = _t;
-					AST tmp1858_AST_in = (AST)_t;
+					AST tmp1857_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34433,7 +34432,7 @@
 			case USEUNDERLINE:
 			{
 				AST __t1760 = _t;
-				AST tmp1859_AST_in = (AST)_t;
+				AST tmp1858_AST_in = (AST)_t;
 				match(_t,USEUNDERLINE);
 				_t = _t.getFirstChild();
 				{
@@ -34442,7 +34441,7 @@
 				case EQUAL:
 				{
 					AST __t1762 = _t;
-					AST tmp1860_AST_in = (AST)_t;
+					AST tmp1859_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34468,7 +34467,7 @@
 			case V6FRAME:
 			{
 				AST __t1763 = _t;
-				AST tmp1861_AST_in = (AST)_t;
+				AST tmp1860_AST_in = (AST)_t;
 				match(_t,V6FRAME);
 				_t = _t.getFirstChild();
 				{
@@ -34477,7 +34476,7 @@
 				case EQUAL:
 				{
 					AST __t1765 = _t;
-					AST tmp1862_AST_in = (AST)_t;
+					AST tmp1861_AST_in = (AST)_t;
 					match(_t,EQUAL);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -34502,7 +34501,7 @@
 			}
 			case NOERROR_KW:
 			{
-				AST tmp1863_AST_in = (AST)_t;
+				AST tmp1862_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -34526,7 +34525,7 @@
 		AST connectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1775 = _t;
-		AST tmp1864_AST_in = (AST)_t;
+		AST tmp1863_AST_in = (AST)_t;
 		match(_t,CONNECT);
 		_t = _t.getFirstChild();
 		{
@@ -34536,14 +34535,14 @@
 			switch ( _t.getType()) {
 			case NOERROR_KW:
 			{
-				AST tmp1865_AST_in = (AST)_t;
+				AST tmp1864_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DDE:
 			{
-				AST tmp1866_AST_in = (AST)_t;
+				AST tmp1865_AST_in = (AST)_t;
 				match(_t,DDE);
 				_t = _t.getNextSibling();
 				break;
@@ -34574,13 +34573,13 @@
 		AST copylobstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1789 = _t;
-		AST tmp1867_AST_in = (AST)_t;
+		AST tmp1866_AST_in = (AST)_t;
 		match(_t,COPYLOB);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FROM)) {
-			AST tmp1868_AST_in = (AST)_t;
+			AST tmp1867_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getNextSibling();
 		}
@@ -34594,7 +34593,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FILE)) {
-			AST tmp1869_AST_in = (AST)_t;
+			AST tmp1868_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34604,7 +34603,7 @@
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJECT)) {
-				AST tmp1870_AST_in = (AST)_t;
+				AST tmp1869_AST_in = (AST)_t;
 				match(_t,OBJECT);
 				_t = _t.getNextSibling();
 			}
@@ -34629,10 +34628,10 @@
 		case STARTING:
 		{
 			AST __t1794 = _t;
-			AST tmp1871_AST_in = (AST)_t;
+			AST tmp1870_AST_in = (AST)_t;
 			match(_t,STARTING);
 			_t = _t.getFirstChild();
-			AST tmp1872_AST_in = (AST)_t;
+			AST tmp1871_AST_in = (AST)_t;
 			match(_t,AT);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34658,7 +34657,7 @@
 		case FOR:
 		{
 			AST __t1796 = _t;
-			AST tmp1873_AST_in = (AST)_t;
+			AST tmp1872_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -34677,13 +34676,13 @@
 		}
 		}
 		}
-		AST tmp1874_AST_in = (AST)_t;
+		AST tmp1873_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==FILE)) {
-			AST tmp1875_AST_in = (AST)_t;
+			AST tmp1874_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34693,7 +34692,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1876_AST_in = (AST)_t;
+				AST tmp1875_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -34716,7 +34715,7 @@
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OBJECT)) {
-				AST tmp1877_AST_in = (AST)_t;
+				AST tmp1876_AST_in = (AST)_t;
 				match(_t,OBJECT);
 				_t = _t.getNextSibling();
 			}
@@ -34734,10 +34733,10 @@
 			switch ( _t.getType()) {
 			case OVERLAY:
 			{
-				AST tmp1878_AST_in = (AST)_t;
+				AST tmp1877_AST_in = (AST)_t;
 				match(_t,OVERLAY);
 				_t = _t.getNextSibling();
-				AST tmp1879_AST_in = (AST)_t;
+				AST tmp1878_AST_in = (AST)_t;
 				match(_t,AT);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34747,7 +34746,7 @@
 				switch ( _t.getType()) {
 				case TRIM:
 				{
-					AST tmp1880_AST_in = (AST)_t;
+					AST tmp1879_AST_in = (AST)_t;
 					match(_t,TRIM);
 					_t = _t.getNextSibling();
 					break;
@@ -34791,7 +34790,7 @@
 		switch ( _t.getType()) {
 		case NOCONVERT:
 		{
-			AST tmp1881_AST_in = (AST)_t;
+			AST tmp1880_AST_in = (AST)_t;
 			match(_t,NOCONVERT);
 			_t = _t.getNextSibling();
 			break;
@@ -34818,7 +34817,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1882_AST_in = (AST)_t;
+			AST tmp1881_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -34843,18 +34842,18 @@
 		AST createaliasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1805 = _t;
-		AST tmp1883_AST_in = (AST)_t;
+		AST tmp1882_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1884_AST_in = (AST)_t;
+		AST tmp1883_AST_in = (AST)_t;
 		match(_t,ALIAS);
 		_t = _t.getNextSibling();
 		anyorvalue(_t);
 		_t = _retTree;
-		AST tmp1885_AST_in = (AST)_t;
+		AST tmp1884_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp1886_AST_in = (AST)_t;
+		AST tmp1885_AST_in = (AST)_t;
 		match(_t,DATABASE);
 		_t = _t.getNextSibling();
 		anyorvalue(_t);
@@ -34864,7 +34863,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1887_AST_in = (AST)_t;
+			AST tmp1886_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -34892,10 +34891,10 @@
 		AST createcallstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1808 = _t;
-		AST tmp1888_AST_in = (AST)_t;
+		AST tmp1887_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1889_AST_in = (AST)_t;
+		AST tmp1888_AST_in = (AST)_t;
 		match(_t,CALL);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -34912,10 +34911,10 @@
 		AST createclientprincipalstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1810 = _t;
-		AST tmp1890_AST_in = (AST)_t;
+		AST tmp1889_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1891_AST_in = (AST)_t;
+		AST tmp1890_AST_in = (AST)_t;
 		match(_t,CLIENTPRINCIPAL);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -34932,10 +34931,10 @@
 		AST createdatabasestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1812 = _t;
-		AST tmp1892_AST_in = (AST)_t;
+		AST tmp1891_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1893_AST_in = (AST)_t;
+		AST tmp1892_AST_in = (AST)_t;
 		match(_t,DATABASE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -34946,7 +34945,7 @@
 		case FROM:
 		{
 			AST __t1814 = _t;
-			AST tmp1894_AST_in = (AST)_t;
+			AST tmp1893_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -34956,7 +34955,7 @@
 			switch ( _t.getType()) {
 			case NEWINSTANCE:
 			{
-				AST tmp1895_AST_in = (AST)_t;
+				AST tmp1894_AST_in = (AST)_t;
 				match(_t,NEWINSTANCE);
 				_t = _t.getNextSibling();
 				break;
@@ -34993,7 +34992,7 @@
 		switch ( _t.getType()) {
 		case REPLACE:
 		{
-			AST tmp1896_AST_in = (AST)_t;
+			AST tmp1895_AST_in = (AST)_t;
 			match(_t,REPLACE);
 			_t = _t.getNextSibling();
 			break;
@@ -35015,7 +35014,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1897_AST_in = (AST)_t;
+			AST tmp1896_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35043,10 +35042,10 @@
 		AST createdatasetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1819 = _t;
-		AST tmp1898_AST_in = (AST)_t;
+		AST tmp1897_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1899_AST_in = (AST)_t;
+		AST tmp1898_AST_in = (AST)_t;
 		match(_t,DATASET);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35063,10 +35062,10 @@
 		AST createdatasourcestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1821 = _t;
-		AST tmp1900_AST_in = (AST)_t;
+		AST tmp1899_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1901_AST_in = (AST)_t;
+		AST tmp1900_AST_in = (AST)_t;
 		match(_t,DATASOURCE);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35083,10 +35082,10 @@
 		AST createquerystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1823 = _t;
-		AST tmp1902_AST_in = (AST)_t;
+		AST tmp1901_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1903_AST_in = (AST)_t;
+		AST tmp1902_AST_in = (AST)_t;
 		match(_t,QUERY);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35103,10 +35102,10 @@
 		AST createsaxreaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1825 = _t;
-		AST tmp1904_AST_in = (AST)_t;
+		AST tmp1903_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1905_AST_in = (AST)_t;
+		AST tmp1904_AST_in = (AST)_t;
 		match(_t,SAXREADER);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35123,10 +35122,10 @@
 		AST createsaxwriterstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1827 = _t;
-		AST tmp1906_AST_in = (AST)_t;
+		AST tmp1905_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1907_AST_in = (AST)_t;
+		AST tmp1906_AST_in = (AST)_t;
 		match(_t,SAXWRITER);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35143,10 +35142,10 @@
 		AST createsoapheaderstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1829 = _t;
-		AST tmp1908_AST_in = (AST)_t;
+		AST tmp1907_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1909_AST_in = (AST)_t;
+		AST tmp1908_AST_in = (AST)_t;
 		match(_t,SOAPHEADER);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35163,10 +35162,10 @@
 		AST createsoapheaderentryrefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1831 = _t;
-		AST tmp1910_AST_in = (AST)_t;
+		AST tmp1909_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1911_AST_in = (AST)_t;
+		AST tmp1910_AST_in = (AST)_t;
 		match(_t,SOAPHEADERENTRYREF);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35183,16 +35182,16 @@
 		AST createtablestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2400 = _t;
-		AST tmp1912_AST_in = (AST)_t;
+		AST tmp1911_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1913_AST_in = (AST)_t;
+		AST tmp1912_AST_in = (AST)_t;
 		match(_t,TABLE);
 		_t = _t.getNextSibling();
-		AST tmp1914_AST_in = (AST)_t;
+		AST tmp1913_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1915_AST_in = (AST)_t;
+		AST tmp1914_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -35207,13 +35206,13 @@
 		case UNIQUE:
 		{
 			AST __t2402 = _t;
-			AST tmp1916_AST_in = (AST)_t;
+			AST tmp1915_AST_in = (AST)_t;
 			match(_t,UNIQUE);
 			_t = _t.getFirstChild();
-			AST tmp1917_AST_in = (AST)_t;
+			AST tmp1916_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp1918_AST_in = (AST)_t;
+			AST tmp1917_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -35221,10 +35220,10 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1919_AST_in = (AST)_t;
+					AST tmp1918_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
-					AST tmp1920_AST_in = (AST)_t;
+					AST tmp1919_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -35234,7 +35233,7 @@
 				
 			} while (true);
 			}
-			AST tmp1921_AST_in = (AST)_t;
+			AST tmp1920_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2402;
@@ -35252,7 +35251,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1922_AST_in = (AST)_t;
+				AST tmp1921_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -35267,13 +35266,13 @@
 				case UNIQUE:
 				{
 					AST __t2407 = _t;
-					AST tmp1923_AST_in = (AST)_t;
+					AST tmp1922_AST_in = (AST)_t;
 					match(_t,UNIQUE);
 					_t = _t.getFirstChild();
-					AST tmp1924_AST_in = (AST)_t;
+					AST tmp1923_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
-					AST tmp1925_AST_in = (AST)_t;
+					AST tmp1924_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 					{
@@ -35281,10 +35280,10 @@
 					do {
 						if (_t==null) _t=ASTNULL;
 						if ((_t.getType()==COMMA)) {
-							AST tmp1926_AST_in = (AST)_t;
+							AST tmp1925_AST_in = (AST)_t;
 							match(_t,COMMA);
 							_t = _t.getNextSibling();
-							AST tmp1927_AST_in = (AST)_t;
+							AST tmp1926_AST_in = (AST)_t;
 							match(_t,ID);
 							_t = _t.getNextSibling();
 						}
@@ -35294,7 +35293,7 @@
 						
 					} while (true);
 					}
-					AST tmp1928_AST_in = (AST)_t;
+					AST tmp1927_AST_in = (AST)_t;
 					match(_t,RIGHTPAREN);
 					_t = _t.getNextSibling();
 					_t = __t2407;
@@ -35314,7 +35313,7 @@
 			
 		} while (true);
 		}
-		AST tmp1929_AST_in = (AST)_t;
+		AST tmp1928_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -35329,10 +35328,10 @@
 		AST createwidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1833 = _t;
-		AST tmp1930_AST_in = (AST)_t;
+		AST tmp1929_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1931_AST_in = (AST)_t;
+		AST tmp1930_AST_in = (AST)_t;
 		match(_t,WIDGETPOOL);
 		_t = _t.getNextSibling();
 		{
@@ -35353,7 +35352,7 @@
 		switch ( _t.getType()) {
 		case PERSISTENT:
 		{
-			AST tmp1932_AST_in = (AST)_t;
+			AST tmp1931_AST_in = (AST)_t;
 			match(_t,PERSISTENT);
 			_t = _t.getNextSibling();
 			break;
@@ -35375,7 +35374,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1933_AST_in = (AST)_t;
+			AST tmp1932_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35403,10 +35402,10 @@
 		AST createxdocumentstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1838 = _t;
-		AST tmp1934_AST_in = (AST)_t;
+		AST tmp1933_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1935_AST_in = (AST)_t;
+		AST tmp1934_AST_in = (AST)_t;
 		match(_t,XDOCUMENT);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35423,10 +35422,10 @@
 		AST createxnoderefstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1840 = _t;
-		AST tmp1936_AST_in = (AST)_t;
+		AST tmp1935_AST_in = (AST)_t;
 		match(_t,CREATE);
 		_t = _t.getFirstChild();
-		AST tmp1937_AST_in = (AST)_t;
+		AST tmp1936_AST_in = (AST)_t;
 		match(_t,XNODEREF);
 		_t = _t.getNextSibling();
 		create_whatever_args(_t);
@@ -35443,10 +35442,10 @@
 		AST ddeadvisestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1851 = _t;
-		AST tmp1938_AST_in = (AST)_t;
+		AST tmp1937_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp1939_AST_in = (AST)_t;
+		AST tmp1938_AST_in = (AST)_t;
 		match(_t,ADVISE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35456,14 +35455,14 @@
 		switch ( _t.getType()) {
 		case START:
 		{
-			AST tmp1940_AST_in = (AST)_t;
+			AST tmp1939_AST_in = (AST)_t;
 			match(_t,START);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case STOP:
 		{
-			AST tmp1941_AST_in = (AST)_t;
+			AST tmp1940_AST_in = (AST)_t;
 			match(_t,STOP);
 			_t = _t.getNextSibling();
 			break;
@@ -35474,7 +35473,7 @@
 		}
 		}
 		}
-		AST tmp1942_AST_in = (AST)_t;
+		AST tmp1941_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35485,7 +35484,7 @@
 		case TIME:
 		{
 			AST __t1854 = _t;
-			AST tmp1943_AST_in = (AST)_t;
+			AST tmp1942_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -35511,7 +35510,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1944_AST_in = (AST)_t;
+			AST tmp1943_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35539,15 +35538,15 @@
 		AST ddeexecutestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1857 = _t;
-		AST tmp1945_AST_in = (AST)_t;
+		AST tmp1944_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp1946_AST_in = (AST)_t;
+		AST tmp1945_AST_in = (AST)_t;
 		match(_t,EXECUTE);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1947_AST_in = (AST)_t;
+		AST tmp1946_AST_in = (AST)_t;
 		match(_t,COMMAND);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35558,7 +35557,7 @@
 		case TIME:
 		{
 			AST __t1859 = _t;
-			AST tmp1948_AST_in = (AST)_t;
+			AST tmp1947_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -35584,7 +35583,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1949_AST_in = (AST)_t;
+			AST tmp1948_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35612,20 +35611,20 @@
 		AST ddesendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1862 = _t;
-		AST tmp1950_AST_in = (AST)_t;
+		AST tmp1949_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp1951_AST_in = (AST)_t;
+		AST tmp1950_AST_in = (AST)_t;
 		match(_t,SEND);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1952_AST_in = (AST)_t;
+		AST tmp1951_AST_in = (AST)_t;
 		match(_t,SOURCE);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1953_AST_in = (AST)_t;
+		AST tmp1952_AST_in = (AST)_t;
 		match(_t,ITEM);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35636,7 +35635,7 @@
 		case TIME:
 		{
 			AST __t1864 = _t;
-			AST tmp1954_AST_in = (AST)_t;
+			AST tmp1953_AST_in = (AST)_t;
 			match(_t,TIME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -35662,7 +35661,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1955_AST_in = (AST)_t;
+			AST tmp1954_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35690,10 +35689,10 @@
 		AST ddeterminatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1867 = _t;
-		AST tmp1956_AST_in = (AST)_t;
+		AST tmp1955_AST_in = (AST)_t;
 		match(_t,DDE);
 		_t = _t.getFirstChild();
-		AST tmp1957_AST_in = (AST)_t;
+		AST tmp1956_AST_in = (AST)_t;
 		match(_t,TERMINATE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35703,7 +35702,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1958_AST_in = (AST)_t;
+			AST tmp1957_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35731,16 +35730,16 @@
 		AST declarecursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2412 = _t;
-		AST tmp1959_AST_in = (AST)_t;
+		AST tmp1958_AST_in = (AST)_t;
 		match(_t,DECLARE);
 		_t = _t.getFirstChild();
-		AST tmp1960_AST_in = (AST)_t;
+		AST tmp1959_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
-		AST tmp1961_AST_in = (AST)_t;
+		AST tmp1960_AST_in = (AST)_t;
 		match(_t,CURSOR);
 		_t = _t.getNextSibling();
-		AST tmp1962_AST_in = (AST)_t;
+		AST tmp1961_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
@@ -35751,7 +35750,7 @@
 		case FOR:
 		{
 			AST __t2414 = _t;
-			AST tmp1963_AST_in = (AST)_t;
+			AST tmp1962_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getFirstChild();
 			{
@@ -35760,7 +35759,7 @@
 			case READ:
 			{
 				AST __t2416 = _t;
-				AST tmp1964_AST_in = (AST)_t;
+				AST tmp1963_AST_in = (AST)_t;
 				match(_t,READ);
 				_t = _t.getFirstChild();
 				{
@@ -35768,7 +35767,7 @@
 				switch ( _t.getType()) {
 				case ONLY:
 				{
-					AST tmp1965_AST_in = (AST)_t;
+					AST tmp1964_AST_in = (AST)_t;
 					match(_t,ONLY);
 					_t = _t.getNextSibling();
 					break;
@@ -35789,7 +35788,7 @@
 			}
 			case UPDATE:
 			{
-				AST tmp1966_AST_in = (AST)_t;
+				AST tmp1965_AST_in = (AST)_t;
 				match(_t,UPDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -35827,7 +35826,7 @@
 		AST dictionarystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1892 = _t;
-		AST tmp1967_AST_in = (AST)_t;
+		AST tmp1966_AST_in = (AST)_t;
 		match(_t,DICTIONARY);
 		_t = _t.getFirstChild();
 		state_end(_t);
@@ -35842,10 +35841,10 @@
 		AST deletealiasstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1875 = _t;
-		AST tmp1968_AST_in = (AST)_t;
+		AST tmp1967_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1969_AST_in = (AST)_t;
+		AST tmp1968_AST_in = (AST)_t;
 		match(_t,ALIAS);
 		_t = _t.getNextSibling();
 		{
@@ -35853,14 +35852,14 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp1970_AST_in = (AST)_t;
+			AST tmp1969_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QSTRING:
 		{
-			AST tmp1971_AST_in = (AST)_t;
+			AST tmp1970_AST_in = (AST)_t;
 			match(_t,QSTRING);
 			_t = _t.getNextSibling();
 			break;
@@ -35889,10 +35888,10 @@
 		AST deleteobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1878 = _t;
-		AST tmp1972_AST_in = (AST)_t;
+		AST tmp1971_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1973_AST_in = (AST)_t;
+		AST tmp1972_AST_in = (AST)_t;
 		match(_t,OBJECT);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35902,7 +35901,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1974_AST_in = (AST)_t;
+			AST tmp1973_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35930,10 +35929,10 @@
 		AST deleteprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1881 = _t;
-		AST tmp1975_AST_in = (AST)_t;
+		AST tmp1974_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1976_AST_in = (AST)_t;
+		AST tmp1975_AST_in = (AST)_t;
 		match(_t,PROCEDURE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -35943,7 +35942,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1977_AST_in = (AST)_t;
+			AST tmp1976_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -35971,10 +35970,10 @@
 		AST deletewidgetstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1884 = _t;
-		AST tmp1978_AST_in = (AST)_t;
+		AST tmp1977_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1979_AST_in = (AST)_t;
+		AST tmp1978_AST_in = (AST)_t;
 		match(_t,WIDGET);
 		_t = _t.getNextSibling();
 		{
@@ -36003,10 +36002,10 @@
 		AST deletewidgetpoolstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1888 = _t;
-		AST tmp1980_AST_in = (AST)_t;
+		AST tmp1979_AST_in = (AST)_t;
 		match(_t,DELETE_KW);
 		_t = _t.getFirstChild();
-		AST tmp1981_AST_in = (AST)_t;
+		AST tmp1980_AST_in = (AST)_t;
 		match(_t,WIDGETPOOL);
 		_t = _t.getNextSibling();
 		{
@@ -36027,7 +36026,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp1982_AST_in = (AST)_t;
+			AST tmp1981_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -36055,13 +36054,13 @@
 		AST dropindexstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2419 = _t;
-		AST tmp1983_AST_in = (AST)_t;
+		AST tmp1982_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp1984_AST_in = (AST)_t;
+		AST tmp1983_AST_in = (AST)_t;
 		match(_t,INDEX);
 		_t = _t.getNextSibling();
-		AST tmp1985_AST_in = (AST)_t;
+		AST tmp1984_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -36076,13 +36075,13 @@
 		AST dropviewstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2421 = _t;
-		AST tmp1986_AST_in = (AST)_t;
+		AST tmp1985_AST_in = (AST)_t;
 		match(_t,DROP);
 		_t = _t.getFirstChild();
-		AST tmp1987_AST_in = (AST)_t;
+		AST tmp1986_AST_in = (AST)_t;
 		match(_t,VIEW);
 		_t = _t.getNextSibling();
-		AST tmp1988_AST_in = (AST)_t;
+		AST tmp1987_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -36097,12 +36096,12 @@
 		AST getstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1929 = _t;
-		AST tmp1989_AST_in = (AST)_t;
+		AST tmp1988_AST_in = (AST)_t;
 		match(_t,GET);
 		_t = _t.getFirstChild();
 		findwhich(_t);
 		_t = _retTree;
-		AST tmp1990_AST_in = (AST)_t;
+		AST tmp1989_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -36120,7 +36119,7 @@
 			}
 			case NOWAIT:
 			{
-				AST tmp1991_AST_in = (AST)_t;
+				AST tmp1990_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
@@ -36144,7 +36143,7 @@
 		AST hidestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1943 = _t;
-		AST tmp1992_AST_in = (AST)_t;
+		AST tmp1991_AST_in = (AST)_t;
 		match(_t,HIDE);
 		_t = _t.getFirstChild();
 		{
@@ -36177,14 +36176,14 @@
 		switch ( _t.getType()) {
 		case MESSAGE:
 		{
-			AST tmp1993_AST_in = (AST)_t;
+			AST tmp1992_AST_in = (AST)_t;
 			match(_t,MESSAGE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp1994_AST_in = (AST)_t;
+			AST tmp1993_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
@@ -36222,7 +36221,7 @@
 		switch ( _t.getType()) {
 		case NOPAUSE:
 		{
-			AST tmp1995_AST_in = (AST)_t;
+			AST tmp1994_AST_in = (AST)_t;
 			match(_t,NOPAUSE);
 			_t = _t.getNextSibling();
 			break;
@@ -36245,10 +36244,10 @@
 		case IN_KW:
 		{
 			AST __t1950 = _t;
-			AST tmp1996_AST_in = (AST)_t;
+			AST tmp1995_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp1997_AST_in = (AST)_t;
+			AST tmp1996_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -36280,12 +36279,12 @@
 		AST ifstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1952 = _t;
-		AST tmp1998_AST_in = (AST)_t;
+		AST tmp1997_AST_in = (AST)_t;
 		match(_t,IF);
 		_t = _t.getFirstChild();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1999_AST_in = (AST)_t;
+		AST tmp1998_AST_in = (AST)_t;
 		match(_t,THEN);
 		_t = _t.getNextSibling();
 		{
@@ -36432,7 +36431,7 @@
 		case ELSE:
 		{
 			AST __t1955 = _t;
-			AST tmp2000_AST_in = (AST)_t;
+			AST tmp1999_AST_in = (AST)_t;
 			match(_t,ELSE);
 			_t = _t.getFirstChild();
 			{
@@ -36596,10 +36595,10 @@
 		AST inputclearstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1974 = _t;
-		AST tmp2001_AST_in = (AST)_t;
+		AST tmp2000_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
-		AST tmp2002_AST_in = (AST)_t;
+		AST tmp2001_AST_in = (AST)_t;
 		match(_t,CLEAR);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -36614,7 +36613,7 @@
 		AST inputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1976 = _t;
-		AST tmp2003_AST_in = (AST)_t;
+		AST tmp2002_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -36636,7 +36635,7 @@
 		}
 		}
 		}
-		AST tmp2004_AST_in = (AST)_t;
+		AST tmp2003_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -36651,7 +36650,7 @@
 		AST inputfromstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1979 = _t;
-		AST tmp2005_AST_in = (AST)_t;
+		AST tmp2004_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -36673,7 +36672,7 @@
 		}
 		}
 		}
-		AST tmp2006_AST_in = (AST)_t;
+		AST tmp2005_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
@@ -36690,7 +36689,7 @@
 		AST inputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1982 = _t;
-		AST tmp2007_AST_in = (AST)_t;
+		AST tmp2006_AST_in = (AST)_t;
 		match(_t,INPUT);
 		_t = _t.getFirstChild();
 		{
@@ -36712,7 +36711,7 @@
 		}
 		}
 		}
-		AST tmp2008_AST_in = (AST)_t;
+		AST tmp2007_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
@@ -36729,7 +36728,7 @@
 		AST inputoutputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1985 = _t;
-		AST tmp2009_AST_in = (AST)_t;
+		AST tmp2008_AST_in = (AST)_t;
 		match(_t,INPUTOUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -36751,7 +36750,7 @@
 		}
 		}
 		}
-		AST tmp2010_AST_in = (AST)_t;
+		AST tmp2009_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -36766,7 +36765,7 @@
 		AST inputoutputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1988 = _t;
-		AST tmp2011_AST_in = (AST)_t;
+		AST tmp2010_AST_in = (AST)_t;
 		match(_t,INPUTOUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -36788,7 +36787,7 @@
 		}
 		}
 		}
-		AST tmp2012_AST_in = (AST)_t;
+		AST tmp2011_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
@@ -36805,10 +36804,10 @@
 		AST interfacestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1991 = _t;
-		AST tmp2013_AST_in = (AST)_t;
+		AST tmp2012_AST_in = (AST)_t;
 		match(_t,INTERFACE);
 		_t = _t.getFirstChild();
-		AST tmp2014_AST_in = (AST)_t;
+		AST tmp2013_AST_in = (AST)_t;
 		match(_t,TYPE_NAME);
 		_t = _t.getNextSibling();
 		block_colon(_t);
@@ -36816,7 +36815,7 @@
 		code_block(_t);
 		_t = _retTree;
 		AST __t1992 = _t;
-		AST tmp2015_AST_in = (AST)_t;
+		AST tmp2014_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -36824,7 +36823,7 @@
 		switch ( _t.getType()) {
 		case INTERFACE:
 		{
-			AST tmp2016_AST_in = (AST)_t;
+			AST tmp2015_AST_in = (AST)_t;
 			match(_t,INTERFACE);
 			_t = _t.getNextSibling();
 			break;
@@ -36853,7 +36852,7 @@
 		AST leavestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2020 = _t;
-		AST tmp2017_AST_in = (AST)_t;
+		AST tmp2016_AST_in = (AST)_t;
 		match(_t,LEAVE);
 		_t = _t.getFirstChild();
 		{
@@ -36861,7 +36860,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp2018_AST_in = (AST)_t;
+			AST tmp2017_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -36889,7 +36888,7 @@
 		AST loadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2025 = _t;
-		AST tmp2019_AST_in = (AST)_t;
+		AST tmp2018_AST_in = (AST)_t;
 		match(_t,LOAD);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -36902,7 +36901,7 @@
 			case DIR:
 			{
 				AST __t2027 = _t;
-				AST tmp2020_AST_in = (AST)_t;
+				AST tmp2019_AST_in = (AST)_t;
 				match(_t,DIR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36913,21 +36912,21 @@
 			}
 			case APPLICATION:
 			{
-				AST tmp2021_AST_in = (AST)_t;
+				AST tmp2020_AST_in = (AST)_t;
 				match(_t,APPLICATION);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DYNAMIC:
 			{
-				AST tmp2022_AST_in = (AST)_t;
+				AST tmp2021_AST_in = (AST)_t;
 				match(_t,DYNAMIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NEW:
 			{
-				AST tmp2023_AST_in = (AST)_t;
+				AST tmp2022_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getNextSibling();
 				break;
@@ -36935,7 +36934,7 @@
 			case BASEKEY:
 			{
 				AST __t2028 = _t;
-				AST tmp2024_AST_in = (AST)_t;
+				AST tmp2023_AST_in = (AST)_t;
 				match(_t,BASEKEY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36946,7 +36945,7 @@
 			}
 			case NOERROR_KW:
 			{
-				AST tmp2025_AST_in = (AST)_t;
+				AST tmp2024_AST_in = (AST)_t;
 				match(_t,NOERROR_KW);
 				_t = _t.getNextSibling();
 				break;
@@ -36970,7 +36969,7 @@
 		AST nextstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2038 = _t;
-		AST tmp2026_AST_in = (AST)_t;
+		AST tmp2025_AST_in = (AST)_t;
 		match(_t,NEXT);
 		_t = _t.getFirstChild();
 		{
@@ -36978,7 +36977,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp2027_AST_in = (AST)_t;
+			AST tmp2026_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -37006,10 +37005,10 @@
 		AST openstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2432 = _t;
-		AST tmp2028_AST_in = (AST)_t;
+		AST tmp2027_AST_in = (AST)_t;
 		match(_t,OPEN);
 		_t = _t.getFirstChild();
-		AST tmp2029_AST_in = (AST)_t;
+		AST tmp2028_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -37024,7 +37023,7 @@
 		AST osappendstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2061 = _t;
-		AST tmp2030_AST_in = (AST)_t;
+		AST tmp2029_AST_in = (AST)_t;
 		match(_t,OSAPPEND);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -37047,7 +37046,7 @@
 		case OS400:
 		{
 			AST __t2063 = _t;
-			AST tmp2031_AST_in = (AST)_t;
+			AST tmp2030_AST_in = (AST)_t;
 			match(_t,OS400);
 			_t = _t.getFirstChild();
 			{
@@ -37055,21 +37054,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2032_AST_in = (AST)_t;
+				AST tmp2031_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2033_AST_in = (AST)_t;
+				AST tmp2032_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2034_AST_in = (AST)_t;
+				AST tmp2033_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37110,7 +37109,7 @@
 		case BTOS:
 		{
 			AST __t2067 = _t;
-			AST tmp2035_AST_in = (AST)_t;
+			AST tmp2034_AST_in = (AST)_t;
 			match(_t,BTOS);
 			_t = _t.getFirstChild();
 			{
@@ -37118,21 +37117,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2036_AST_in = (AST)_t;
+				AST tmp2035_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2037_AST_in = (AST)_t;
+				AST tmp2036_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2038_AST_in = (AST)_t;
+				AST tmp2037_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37173,7 +37172,7 @@
 		case DOS:
 		{
 			AST __t2071 = _t;
-			AST tmp2039_AST_in = (AST)_t;
+			AST tmp2038_AST_in = (AST)_t;
 			match(_t,DOS);
 			_t = _t.getFirstChild();
 			{
@@ -37181,21 +37180,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2040_AST_in = (AST)_t;
+				AST tmp2039_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2041_AST_in = (AST)_t;
+				AST tmp2040_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2042_AST_in = (AST)_t;
+				AST tmp2041_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37236,7 +37235,7 @@
 		case MPE:
 		{
 			AST __t2075 = _t;
-			AST tmp2043_AST_in = (AST)_t;
+			AST tmp2042_AST_in = (AST)_t;
 			match(_t,MPE);
 			_t = _t.getFirstChild();
 			{
@@ -37244,21 +37243,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2044_AST_in = (AST)_t;
+				AST tmp2043_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2045_AST_in = (AST)_t;
+				AST tmp2044_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2046_AST_in = (AST)_t;
+				AST tmp2045_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37299,7 +37298,7 @@
 		case OS2:
 		{
 			AST __t2079 = _t;
-			AST tmp2047_AST_in = (AST)_t;
+			AST tmp2046_AST_in = (AST)_t;
 			match(_t,OS2);
 			_t = _t.getFirstChild();
 			{
@@ -37307,21 +37306,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2048_AST_in = (AST)_t;
+				AST tmp2047_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2049_AST_in = (AST)_t;
+				AST tmp2048_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2050_AST_in = (AST)_t;
+				AST tmp2049_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37362,7 +37361,7 @@
 		case OSCOMMAND:
 		{
 			AST __t2083 = _t;
-			AST tmp2051_AST_in = (AST)_t;
+			AST tmp2050_AST_in = (AST)_t;
 			match(_t,OSCOMMAND);
 			_t = _t.getFirstChild();
 			{
@@ -37370,21 +37369,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2052_AST_in = (AST)_t;
+				AST tmp2051_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2053_AST_in = (AST)_t;
+				AST tmp2052_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2054_AST_in = (AST)_t;
+				AST tmp2053_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37425,7 +37424,7 @@
 		case UNIX:
 		{
 			AST __t2087 = _t;
-			AST tmp2055_AST_in = (AST)_t;
+			AST tmp2054_AST_in = (AST)_t;
 			match(_t,UNIX);
 			_t = _t.getFirstChild();
 			{
@@ -37433,21 +37432,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2056_AST_in = (AST)_t;
+				AST tmp2055_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2057_AST_in = (AST)_t;
+				AST tmp2056_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2058_AST_in = (AST)_t;
+				AST tmp2057_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37488,7 +37487,7 @@
 		case VMS:
 		{
 			AST __t2091 = _t;
-			AST tmp2059_AST_in = (AST)_t;
+			AST tmp2058_AST_in = (AST)_t;
 			match(_t,VMS);
 			_t = _t.getFirstChild();
 			{
@@ -37496,21 +37495,21 @@
 			switch ( _t.getType()) {
 			case SILENT:
 			{
-				AST tmp2060_AST_in = (AST)_t;
+				AST tmp2059_AST_in = (AST)_t;
 				match(_t,SILENT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWAIT:
 			{
-				AST tmp2061_AST_in = (AST)_t;
+				AST tmp2060_AST_in = (AST)_t;
 				match(_t,NOWAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCONSOLE:
 			{
-				AST tmp2062_AST_in = (AST)_t;
+				AST tmp2061_AST_in = (AST)_t;
 				match(_t,NOCONSOLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37561,7 +37560,7 @@
 		AST oscopystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2096 = _t;
-		AST tmp2063_AST_in = (AST)_t;
+		AST tmp2062_AST_in = (AST)_t;
 		match(_t,OSCOPY);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -37580,7 +37579,7 @@
 		AST oscreatedirstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2098 = _t;
-		AST tmp2064_AST_in = (AST)_t;
+		AST tmp2063_AST_in = (AST)_t;
 		match(_t,OSCREATEDIR);
 		_t = _t.getFirstChild();
 		{
@@ -37611,7 +37610,7 @@
 		AST osdeletestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2102 = _t;
-		AST tmp2065_AST_in = (AST)_t;
+		AST tmp2064_AST_in = (AST)_t;
 		match(_t,OSDELETE);
 		_t = _t.getFirstChild();
 		{
@@ -37625,7 +37624,7 @@
 			}
 			else if ((_tokenSet_35.member(_t.getType()))) {
 				{
-				AST tmp2066_AST_in = (AST)_t;
+				AST tmp2065_AST_in = (AST)_t;
 				match(_t,_tokenSet_35);
 				_t = _t.getNextSibling();
 				}
@@ -37642,7 +37641,7 @@
 		switch ( _t.getType()) {
 		case RECURSIVE:
 		{
-			AST tmp2067_AST_in = (AST)_t;
+			AST tmp2066_AST_in = (AST)_t;
 			match(_t,RECURSIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -37670,7 +37669,7 @@
 		AST osrenamestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2108 = _t;
-		AST tmp2068_AST_in = (AST)_t;
+		AST tmp2067_AST_in = (AST)_t;
 		match(_t,OSRENAME);
 		_t = _t.getFirstChild();
 		anyorvalue(_t);
@@ -37689,7 +37688,7 @@
 		AST outputclosestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2110 = _t;
-		AST tmp2069_AST_in = (AST)_t;
+		AST tmp2068_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -37711,7 +37710,7 @@
 		}
 		}
 		}
-		AST tmp2070_AST_in = (AST)_t;
+		AST tmp2069_AST_in = (AST)_t;
 		match(_t,CLOSE);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -37726,7 +37725,7 @@
 		AST outputthroughstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2113 = _t;
-		AST tmp2071_AST_in = (AST)_t;
+		AST tmp2070_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -37748,7 +37747,7 @@
 		}
 		}
 		}
-		AST tmp2072_AST_in = (AST)_t;
+		AST tmp2071_AST_in = (AST)_t;
 		match(_t,THROUGH);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
@@ -37765,7 +37764,7 @@
 		AST outputtostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2116 = _t;
-		AST tmp2073_AST_in = (AST)_t;
+		AST tmp2072_AST_in = (AST)_t;
 		match(_t,OUTPUT);
 		_t = _t.getFirstChild();
 		{
@@ -37787,7 +37786,7 @@
 		}
 		}
 		}
-		AST tmp2074_AST_in = (AST)_t;
+		AST tmp2073_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		io_phrase(_t);
@@ -37804,7 +37803,7 @@
 		AST pagestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2119 = _t;
-		AST tmp2075_AST_in = (AST)_t;
+		AST tmp2074_AST_in = (AST)_t;
 		match(_t,PAGE);
 		_t = _t.getFirstChild();
 		{
@@ -37839,7 +37838,7 @@
 		AST pausestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2122 = _t;
-		AST tmp2076_AST_in = (AST)_t;
+		AST tmp2075_AST_in = (AST)_t;
 		match(_t,PAUSE);
 		_t = _t.getFirstChild();
 		{
@@ -37862,7 +37861,7 @@
 			switch ( _t.getType()) {
 			case BEFOREHIDE:
 			{
-				AST tmp2077_AST_in = (AST)_t;
+				AST tmp2076_AST_in = (AST)_t;
 				match(_t,BEFOREHIDE);
 				_t = _t.getNextSibling();
 				break;
@@ -37870,7 +37869,7 @@
 			case MESSAGE:
 			{
 				AST __t2125 = _t;
-				AST tmp2078_AST_in = (AST)_t;
+				AST tmp2077_AST_in = (AST)_t;
 				match(_t,MESSAGE);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -37881,7 +37880,7 @@
 			}
 			case NOMESSAGE:
 			{
-				AST tmp2079_AST_in = (AST)_t;
+				AST tmp2078_AST_in = (AST)_t;
 				match(_t,NOMESSAGE);
 				_t = _t.getNextSibling();
 				break;
@@ -37889,10 +37888,10 @@
 			case IN_KW:
 			{
 				AST __t2126 = _t;
-				AST tmp2080_AST_in = (AST)_t;
+				AST tmp2079_AST_in = (AST)_t;
 				match(_t,IN_KW);
 				_t = _t.getFirstChild();
-				AST tmp2081_AST_in = (AST)_t;
+				AST tmp2080_AST_in = (AST)_t;
 				match(_t,WINDOW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -37920,10 +37919,10 @@
 		AST processeventsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2129 = _t;
-		AST tmp2082_AST_in = (AST)_t;
+		AST tmp2081_AST_in = (AST)_t;
 		match(_t,PROCESS);
 		_t = _t.getFirstChild();
-		AST tmp2083_AST_in = (AST)_t;
+		AST tmp2082_AST_in = (AST)_t;
 		match(_t,EVENTS);
 		_t = _t.getNextSibling();
 		state_end(_t);
@@ -37938,7 +37937,7 @@
 		AST publishstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2131 = _t;
-		AST tmp2084_AST_in = (AST)_t;
+		AST tmp2083_AST_in = (AST)_t;
 		match(_t,PUBLISH);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -37949,7 +37948,7 @@
 		case FROM:
 		{
 			AST __t2133 = _t;
-			AST tmp2085_AST_in = (AST)_t;
+			AST tmp2084_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -38002,7 +38001,7 @@
 		AST putstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2136 = _t;
-		AST tmp2086_AST_in = (AST)_t;
+		AST tmp2085_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
 		{
@@ -38023,14 +38022,14 @@
 		switch ( _t.getType()) {
 		case CONTROL:
 		{
-			AST tmp2087_AST_in = (AST)_t;
+			AST tmp2086_AST_in = (AST)_t;
 			match(_t,CONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNFORMATTED:
 		{
-			AST tmp2088_AST_in = (AST)_t;
+			AST tmp2087_AST_in = (AST)_t;
 			match(_t,UNFORMATTED);
 			_t = _t.getNextSibling();
 			break;
@@ -38071,7 +38070,7 @@
 					try {
 						{
 						AST __t2141 = _t;
-						AST tmp2089_AST_in = (AST)_t;
+						AST tmp2088_AST_in = (AST)_t;
 						match(_t,NULL_KW);
 						_t = _t.getFirstChild();
 						{
@@ -38079,7 +38078,7 @@
 						switch ( _t.getType()) {
 						case LEFTPAREN:
 						{
-							AST tmp2090_AST_in = (AST)_t;
+							AST tmp2089_AST_in = (AST)_t;
 							match(_t,LEFTPAREN);
 							_t = _t.getNextSibling();
 							break;
@@ -38106,7 +38105,7 @@
 				}
 				if ( synPredMatched2143 ) {
 					AST __t2144 = _t;
-					AST tmp2091_AST_in = (AST)_t;
+					AST tmp2090_AST_in = (AST)_t;
 					match(_t,NULL_KW);
 					_t = _t.getFirstChild();
 					{
@@ -38142,7 +38141,7 @@
 						case FORMAT:
 						{
 							AST __t2147 = _t;
-							AST tmp2092_AST_in = (AST)_t;
+							AST tmp2091_AST_in = (AST)_t;
 							match(_t,FORMAT);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -38154,7 +38153,7 @@
 						case AT:
 						{
 							AST __t2148 = _t;
-							AST tmp2093_AST_in = (AST)_t;
+							AST tmp2092_AST_in = (AST)_t;
 							match(_t,AT);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -38166,7 +38165,7 @@
 						case TO:
 						{
 							AST __t2149 = _t;
-							AST tmp2094_AST_in = (AST)_t;
+							AST tmp2093_AST_in = (AST)_t;
 							match(_t,TO);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -38201,10 +38200,10 @@
 		AST putcursorstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2153 = _t;
-		AST tmp2095_AST_in = (AST)_t;
+		AST tmp2094_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
-		AST tmp2096_AST_in = (AST)_t;
+		AST tmp2095_AST_in = (AST)_t;
 		match(_t,CURSOR);
 		_t = _t.getNextSibling();
 		{
@@ -38212,7 +38211,7 @@
 		switch ( _t.getType()) {
 		case OFF:
 		{
-			AST tmp2097_AST_in = (AST)_t;
+			AST tmp2096_AST_in = (AST)_t;
 			match(_t,OFF);
 			_t = _t.getNextSibling();
 			break;
@@ -38230,7 +38229,7 @@
 				case ROW:
 				{
 					AST __t2156 = _t;
-					AST tmp2098_AST_in = (AST)_t;
+					AST tmp2097_AST_in = (AST)_t;
 					match(_t,ROW);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -38242,7 +38241,7 @@
 				case COLUMN:
 				{
 					AST __t2157 = _t;
-					AST tmp2099_AST_in = (AST)_t;
+					AST tmp2098_AST_in = (AST)_t;
 					match(_t,COLUMN);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -38278,10 +38277,10 @@
 		AST putscreenstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2160 = _t;
-		AST tmp2100_AST_in = (AST)_t;
+		AST tmp2099_AST_in = (AST)_t;
 		match(_t,PUT);
 		_t = _t.getFirstChild();
-		AST tmp2101_AST_in = (AST)_t;
+		AST tmp2100_AST_in = (AST)_t;
 		match(_t,SCREEN);
 		_t = _t.getNextSibling();
 		{
@@ -38291,14 +38290,14 @@
 			switch ( _t.getType()) {
 			case ATTRSPACE:
 			{
-				AST tmp2102_AST_in = (AST)_t;
+				AST tmp2101_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp2103_AST_in = (AST)_t;
+				AST tmp2102_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
@@ -38306,7 +38305,7 @@
 			case COLOR:
 			{
 				AST __t2162 = _t;
-				AST tmp2104_AST_in = (AST)_t;
+				AST tmp2103_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -38318,7 +38317,7 @@
 			case COLUMN:
 			{
 				AST __t2163 = _t;
-				AST tmp2105_AST_in = (AST)_t;
+				AST tmp2104_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38330,7 +38329,7 @@
 			case ROW:
 			{
 				AST __t2164 = _t;
-				AST tmp2106_AST_in = (AST)_t;
+				AST tmp2105_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38363,7 +38362,7 @@
 		AST putkeyvaluestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2167 = _t;
-		AST tmp2107_AST_in = (AST)_t;
+		AST tmp2106_AST_in = (AST)_t;
 		match(_t,PUTKEYVALUE);
 		_t = _t.getFirstChild();
 		{
@@ -38371,18 +38370,18 @@
 		switch ( _t.getType()) {
 		case SECTION:
 		{
-			AST tmp2108_AST_in = (AST)_t;
+			AST tmp2107_AST_in = (AST)_t;
 			match(_t,SECTION);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2109_AST_in = (AST)_t;
+			AST tmp2108_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getNextSibling();
 			{
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==DEFAULT)) {
-				AST tmp2110_AST_in = (AST)_t;
+				AST tmp2109_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getNextSibling();
 			}
@@ -38395,7 +38394,7 @@
 			}
 			
 			}
-			AST tmp2111_AST_in = (AST)_t;
+			AST tmp2110_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -38410,14 +38409,14 @@
 			switch ( _t.getType()) {
 			case COLOR:
 			{
-				AST tmp2112_AST_in = (AST)_t;
+				AST tmp2111_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FONT:
 			{
-				AST tmp2113_AST_in = (AST)_t;
+				AST tmp2112_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getNextSibling();
 				break;
@@ -38435,7 +38434,7 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==ALL)) {
-				AST tmp2114_AST_in = (AST)_t;
+				AST tmp2113_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 			}
@@ -38457,7 +38456,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2115_AST_in = (AST)_t;
+			AST tmp2114_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38485,7 +38484,7 @@
 		AST quitstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2183 = _t;
-		AST tmp2116_AST_in = (AST)_t;
+		AST tmp2115_AST_in = (AST)_t;
 		match(_t,QUIT);
 		_t = _t.getFirstChild();
 		state_end(_t);
@@ -38500,7 +38499,7 @@
 		AST readkeystate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2201 = _t;
-		AST tmp2117_AST_in = (AST)_t;
+		AST tmp2116_AST_in = (AST)_t;
 		match(_t,READKEY);
 		_t = _t.getFirstChild();
 		{
@@ -38530,7 +38529,7 @@
 		case PAUSE:
 		{
 			AST __t2204 = _t;
-			AST tmp2118_AST_in = (AST)_t;
+			AST tmp2117_AST_in = (AST)_t;
 			match(_t,PAUSE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -38562,16 +38561,16 @@
 		AST releaseexternalstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2206 = _t;
-		AST tmp2119_AST_in = (AST)_t;
+		AST tmp2118_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
-		AST tmp2120_AST_in = (AST)_t;
+		AST tmp2119_AST_in = (AST)_t;
 		match(_t,EXTERNAL);
 		_t = _t.getNextSibling();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
-			AST tmp2121_AST_in = (AST)_t;
+			AST tmp2120_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getNextSibling();
 		}
@@ -38589,7 +38588,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2122_AST_in = (AST)_t;
+			AST tmp2121_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38617,10 +38616,10 @@
 		AST releaseobjectstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2210 = _t;
-		AST tmp2123_AST_in = (AST)_t;
+		AST tmp2122_AST_in = (AST)_t;
 		match(_t,RELEASE);
 		_t = _t.getFirstChild();
-		AST tmp2124_AST_in = (AST)_t;
+		AST tmp2123_AST_in = (AST)_t;
 		match(_t,OBJECT);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -38630,7 +38629,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2125_AST_in = (AST)_t;
+			AST tmp2124_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38658,10 +38657,10 @@
 		AST repositionstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2213 = _t;
-		AST tmp2126_AST_in = (AST)_t;
+		AST tmp2125_AST_in = (AST)_t;
 		match(_t,REPOSITION);
 		_t = _t.getFirstChild();
-		AST tmp2127_AST_in = (AST)_t;
+		AST tmp2126_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -38670,7 +38669,7 @@
 		case TO:
 		{
 			AST __t2215 = _t;
-			AST tmp2128_AST_in = (AST)_t;
+			AST tmp2127_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -38678,7 +38677,7 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp2129_AST_in = (AST)_t;
+				AST tmp2128_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -38688,7 +38687,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2130_AST_in = (AST)_t;
+						AST tmp2129_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						expression(_t);
@@ -38704,7 +38703,7 @@
 			}
 			case RECID:
 			{
-				AST tmp2131_AST_in = (AST)_t;
+				AST tmp2130_AST_in = (AST)_t;
 				match(_t,RECID);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -38713,7 +38712,7 @@
 			}
 			case ROW:
 			{
-				AST tmp2132_AST_in = (AST)_t;
+				AST tmp2131_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -38733,7 +38732,7 @@
 		case ROW:
 		{
 			AST __t2219 = _t;
-			AST tmp2133_AST_in = (AST)_t;
+			AST tmp2132_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -38745,7 +38744,7 @@
 		case FORWARDS:
 		{
 			AST __t2220 = _t;
-			AST tmp2134_AST_in = (AST)_t;
+			AST tmp2133_AST_in = (AST)_t;
 			match(_t,FORWARDS);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -38757,7 +38756,7 @@
 		case BACKWARDS:
 		{
 			AST __t2221 = _t;
-			AST tmp2135_AST_in = (AST)_t;
+			AST tmp2134_AST_in = (AST)_t;
 			match(_t,BACKWARDS);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -38777,7 +38776,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2136_AST_in = (AST)_t;
+			AST tmp2135_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38805,7 +38804,7 @@
 		AST returnstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2224 = _t;
-		AST tmp2137_AST_in = (AST)_t;
+		AST tmp2136_AST_in = (AST)_t;
 		match(_t,RETURN);
 		_t = _t.getFirstChild();
 		{
@@ -38833,13 +38832,13 @@
 		AST runstoredprocedurestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2236 = _t;
-		AST tmp2138_AST_in = (AST)_t;
+		AST tmp2137_AST_in = (AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
-		AST tmp2139_AST_in = (AST)_t;
+		AST tmp2138_AST_in = (AST)_t;
 		match(_t,STOREDPROCEDURE);
 		_t = _t.getNextSibling();
-		AST tmp2140_AST_in = (AST)_t;
+		AST tmp2139_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -38869,7 +38868,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2141_AST_in = (AST)_t;
+			AST tmp2140_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38918,10 +38917,10 @@
 		AST runsuperstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2241 = _t;
-		AST tmp2142_AST_in = (AST)_t;
+		AST tmp2141_AST_in = (AST)_t;
 		match(_t,RUN);
 		_t = _t.getFirstChild();
-		AST tmp2143_AST_in = (AST)_t;
+		AST tmp2142_AST_in = (AST)_t;
 		match(_t,SUPER);
 		_t = _t.getNextSibling();
 		{
@@ -38950,7 +38949,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2144_AST_in = (AST)_t;
+			AST tmp2143_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38978,10 +38977,10 @@
 		AST savecachestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2245 = _t;
-		AST tmp2145_AST_in = (AST)_t;
+		AST tmp2144_AST_in = (AST)_t;
 		match(_t,SAVE);
 		_t = _t.getFirstChild();
-		AST tmp2146_AST_in = (AST)_t;
+		AST tmp2145_AST_in = (AST)_t;
 		match(_t,CACHE);
 		_t = _t.getNextSibling();
 		{
@@ -38989,14 +38988,14 @@
 		switch ( _t.getType()) {
 		case CURRENT:
 		{
-			AST tmp2147_AST_in = (AST)_t;
+			AST tmp2146_AST_in = (AST)_t;
 			match(_t,CURRENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPLETE:
 		{
-			AST tmp2148_AST_in = (AST)_t;
+			AST tmp2147_AST_in = (AST)_t;
 			match(_t,COMPLETE);
 			_t = _t.getNextSibling();
 			break;
@@ -39009,7 +39008,7 @@
 		}
 		anyorvalue(_t);
 		_t = _retTree;
-		AST tmp2149_AST_in = (AST)_t;
+		AST tmp2148_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		filenameorvalue(_t);
@@ -39019,7 +39018,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2150_AST_in = (AST)_t;
+			AST tmp2149_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -39047,7 +39046,7 @@
 		AST seekstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2249 = _t;
-		AST tmp2151_AST_in = (AST)_t;
+		AST tmp2150_AST_in = (AST)_t;
 		match(_t,SEEK);
 		_t = _t.getFirstChild();
 		{
@@ -39055,14 +39054,14 @@
 		switch ( _t.getType()) {
 		case INPUT:
 		{
-			AST tmp2152_AST_in = (AST)_t;
+			AST tmp2151_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case OUTPUT:
 		{
-			AST tmp2153_AST_in = (AST)_t;
+			AST tmp2152_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getNextSibling();
 			break;
@@ -39079,7 +39078,7 @@
 		}
 		}
 		}
-		AST tmp2154_AST_in = (AST)_t;
+		AST tmp2153_AST_in = (AST)_t;
 		match(_t,TO);
 		_t = _t.getNextSibling();
 		{
@@ -39089,7 +39088,7 @@
 			_t = _retTree;
 		}
 		else if ((_t.getType()==END)) {
-			AST tmp2155_AST_in = (AST)_t;
+			AST tmp2154_AST_in = (AST)_t;
 			match(_t,END);
 			_t = _t.getNextSibling();
 		}
@@ -39110,7 +39109,7 @@
 		AST showstatsstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2265 = _t;
-		AST tmp2156_AST_in = (AST)_t;
+		AST tmp2155_AST_in = (AST)_t;
 		match(_t,SHOWSTATS);
 		_t = _t.getFirstChild();
 		{
@@ -39118,7 +39117,7 @@
 		switch ( _t.getType()) {
 		case CLEAR:
 		{
-			AST tmp2157_AST_in = (AST)_t;
+			AST tmp2156_AST_in = (AST)_t;
 			match(_t,CLEAR);
 			_t = _t.getNextSibling();
 			break;
@@ -39146,7 +39145,7 @@
 		AST statusstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2289 = _t;
-		AST tmp2158_AST_in = (AST)_t;
+		AST tmp2157_AST_in = (AST)_t;
 		match(_t,STATUS);
 		_t = _t.getFirstChild();
 		{
@@ -39155,7 +39154,7 @@
 		case DEFAULT:
 		{
 			AST __t2291 = _t;
-			AST tmp2159_AST_in = (AST)_t;
+			AST tmp2158_AST_in = (AST)_t;
 			match(_t,DEFAULT);
 			_t = _t.getFirstChild();
 			{
@@ -39178,7 +39177,7 @@
 		case INPUT:
 		{
 			AST __t2293 = _t;
-			AST tmp2160_AST_in = (AST)_t;
+			AST tmp2159_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			{
@@ -39186,7 +39185,7 @@
 			switch ( _t.getType()) {
 			case OFF:
 			{
-				AST tmp2161_AST_in = (AST)_t;
+				AST tmp2160_AST_in = (AST)_t;
 				match(_t,OFF);
 				_t = _t.getNextSibling();
 				break;
@@ -39222,10 +39221,10 @@
 		case IN_KW:
 		{
 			AST __t2296 = _t;
-			AST tmp2162_AST_in = (AST)_t;
+			AST tmp2161_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp2163_AST_in = (AST)_t;
+			AST tmp2162_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -39257,7 +39256,7 @@
 		AST stopstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2298 = _t;
-		AST tmp2164_AST_in = (AST)_t;
+		AST tmp2163_AST_in = (AST)_t;
 		match(_t,STOP);
 		_t = _t.getFirstChild();
 		state_end(_t);
@@ -39272,14 +39271,14 @@
 		AST subscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2302 = _t;
-		AST tmp2165_AST_in = (AST)_t;
+		AST tmp2164_AST_in = (AST)_t;
 		match(_t,SUBSCRIBE);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
 			AST __t2304 = _t;
-			AST tmp2166_AST_in = (AST)_t;
+			AST tmp2165_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39297,7 +39296,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TO)) {
-			AST tmp2167_AST_in = (AST)_t;
+			AST tmp2166_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getNextSibling();
 		}
@@ -39315,7 +39314,7 @@
 		switch ( _t.getType()) {
 		case ANYWHERE:
 		{
-			AST tmp2168_AST_in = (AST)_t;
+			AST tmp2167_AST_in = (AST)_t;
 			match(_t,ANYWHERE);
 			_t = _t.getNextSibling();
 			break;
@@ -39323,7 +39322,7 @@
 		case IN_KW:
 		{
 			AST __t2307 = _t;
-			AST tmp2169_AST_in = (AST)_t;
+			AST tmp2168_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39344,7 +39343,7 @@
 		case RUNPROCEDURE:
 		{
 			AST __t2309 = _t;
-			AST tmp2170_AST_in = (AST)_t;
+			AST tmp2169_AST_in = (AST)_t;
 			match(_t,RUNPROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39370,7 +39369,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2171_AST_in = (AST)_t;
+			AST tmp2170_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -39398,7 +39397,7 @@
 		AST systemhelpstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2314 = _t;
-		AST tmp2172_AST_in = (AST)_t;
+		AST tmp2171_AST_in = (AST)_t;
 		match(_t,SYSTEMHELP);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -39409,7 +39408,7 @@
 		case WINDOWNAME:
 		{
 			AST __t2316 = _t;
-			AST tmp2173_AST_in = (AST)_t;
+			AST tmp2172_AST_in = (AST)_t;
 			match(_t,WINDOWNAME);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39448,7 +39447,7 @@
 		case ALTERNATEKEY:
 		{
 			AST __t2318 = _t;
-			AST tmp2174_AST_in = (AST)_t;
+			AST tmp2173_AST_in = (AST)_t;
 			match(_t,ALTERNATEKEY);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39460,7 +39459,7 @@
 		case CONTEXT:
 		{
 			AST __t2319 = _t;
-			AST tmp2175_AST_in = (AST)_t;
+			AST tmp2174_AST_in = (AST)_t;
 			match(_t,CONTEXT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39471,7 +39470,7 @@
 		}
 		case CONTENTS:
 		{
-			AST tmp2176_AST_in = (AST)_t;
+			AST tmp2175_AST_in = (AST)_t;
 			match(_t,CONTENTS);
 			_t = _t.getNextSibling();
 			break;
@@ -39479,7 +39478,7 @@
 		case SETCONTENTS:
 		{
 			AST __t2320 = _t;
-			AST tmp2177_AST_in = (AST)_t;
+			AST tmp2176_AST_in = (AST)_t;
 			match(_t,SETCONTENTS);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39490,7 +39489,7 @@
 		}
 		case FINDER:
 		{
-			AST tmp2178_AST_in = (AST)_t;
+			AST tmp2177_AST_in = (AST)_t;
 			match(_t,FINDER);
 			_t = _t.getNextSibling();
 			break;
@@ -39498,7 +39497,7 @@
 		case CONTEXTPOPUP:
 		{
 			AST __t2321 = _t;
-			AST tmp2179_AST_in = (AST)_t;
+			AST tmp2178_AST_in = (AST)_t;
 			match(_t,CONTEXTPOPUP);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39510,7 +39509,7 @@
 		case HELPTOPIC:
 		{
 			AST __t2322 = _t;
-			AST tmp2180_AST_in = (AST)_t;
+			AST tmp2179_AST_in = (AST)_t;
 			match(_t,HELPTOPIC);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39522,7 +39521,7 @@
 		case KEY:
 		{
 			AST __t2323 = _t;
-			AST tmp2181_AST_in = (AST)_t;
+			AST tmp2180_AST_in = (AST)_t;
 			match(_t,KEY);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39534,7 +39533,7 @@
 		case PARTIALKEY:
 		{
 			AST __t2324 = _t;
-			AST tmp2182_AST_in = (AST)_t;
+			AST tmp2181_AST_in = (AST)_t;
 			match(_t,PARTIALKEY);
 			_t = _t.getFirstChild();
 			{
@@ -39557,12 +39556,12 @@
 		case MULTIPLEKEY:
 		{
 			AST __t2326 = _t;
-			AST tmp2183_AST_in = (AST)_t;
+			AST tmp2182_AST_in = (AST)_t;
 			match(_t,MULTIPLEKEY);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2184_AST_in = (AST)_t;
+			AST tmp2183_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -39574,7 +39573,7 @@
 		case COMMAND:
 		{
 			AST __t2327 = _t;
-			AST tmp2185_AST_in = (AST)_t;
+			AST tmp2184_AST_in = (AST)_t;
 			match(_t,COMMAND);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39586,7 +39585,7 @@
 		case POSITION:
 		{
 			AST __t2328 = _t;
-			AST tmp2186_AST_in = (AST)_t;
+			AST tmp2185_AST_in = (AST)_t;
 			match(_t,POSITION);
 			_t = _t.getFirstChild();
 			{
@@ -39594,29 +39593,29 @@
 			switch ( _t.getType()) {
 			case MAXIMIZE:
 			{
-				AST tmp2187_AST_in = (AST)_t;
+				AST tmp2186_AST_in = (AST)_t;
 				match(_t,MAXIMIZE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case X:
 			{
-				AST tmp2188_AST_in = (AST)_t;
+				AST tmp2187_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp2189_AST_in = (AST)_t;
+				AST tmp2188_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp2190_AST_in = (AST)_t;
+				AST tmp2189_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getNextSibling();
 				expression(_t);
 				_t = _retTree;
-				AST tmp2191_AST_in = (AST)_t;
+				AST tmp2190_AST_in = (AST)_t;
 				match(_t,HEIGHT);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -39635,21 +39634,21 @@
 		}
 		case FORCEFILE:
 		{
-			AST tmp2192_AST_in = (AST)_t;
+			AST tmp2191_AST_in = (AST)_t;
 			match(_t,FORCEFILE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HELP:
 		{
-			AST tmp2193_AST_in = (AST)_t;
+			AST tmp2192_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUIT:
 		{
-			AST tmp2194_AST_in = (AST)_t;
+			AST tmp2193_AST_in = (AST)_t;
 			match(_t,QUIT);
 			_t = _t.getNextSibling();
 			break;
@@ -39672,10 +39671,10 @@
 		AST transactionmodeautomaticstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2348 = _t;
-		AST tmp2195_AST_in = (AST)_t;
+		AST tmp2194_AST_in = (AST)_t;
 		match(_t,TRANSACTIONMODE);
 		_t = _t.getFirstChild();
-		AST tmp2196_AST_in = (AST)_t;
+		AST tmp2195_AST_in = (AST)_t;
 		match(_t,AUTOMATIC);
 		_t = _t.getNextSibling();
 		{
@@ -39683,7 +39682,7 @@
 		switch ( _t.getType()) {
 		case CHAINED:
 		{
-			AST tmp2197_AST_in = (AST)_t;
+			AST tmp2196_AST_in = (AST)_t;
 			match(_t,CHAINED);
 			_t = _t.getNextSibling();
 			break;
@@ -39711,7 +39710,7 @@
 		AST undostate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2351 = _t;
-		AST tmp2198_AST_in = (AST)_t;
+		AST tmp2197_AST_in = (AST)_t;
 		match(_t,UNDO);
 		_t = _t.getFirstChild();
 		{
@@ -39719,7 +39718,7 @@
 		switch ( _t.getType()) {
 		case BLOCK_LABEL:
 		{
-			AST tmp2199_AST_in = (AST)_t;
+			AST tmp2198_AST_in = (AST)_t;
 			match(_t,BLOCK_LABEL);
 			_t = _t.getNextSibling();
 			break;
@@ -39741,7 +39740,7 @@
 		switch ( _t.getType()) {
 		case COMMA:
 		{
-			AST tmp2200_AST_in = (AST)_t;
+			AST tmp2199_AST_in = (AST)_t;
 			match(_t,COMMA);
 			_t = _t.getNextSibling();
 			{
@@ -39750,7 +39749,7 @@
 			case LEAVE:
 			{
 				AST __t2355 = _t;
-				AST tmp2201_AST_in = (AST)_t;
+				AST tmp2200_AST_in = (AST)_t;
 				match(_t,LEAVE);
 				_t = _t.getFirstChild();
 				{
@@ -39758,7 +39757,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp2202_AST_in = (AST)_t;
+					AST tmp2201_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -39780,7 +39779,7 @@
 			case NEXT:
 			{
 				AST __t2357 = _t;
-				AST tmp2203_AST_in = (AST)_t;
+				AST tmp2202_AST_in = (AST)_t;
 				match(_t,NEXT);
 				_t = _t.getFirstChild();
 				{
@@ -39788,7 +39787,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp2204_AST_in = (AST)_t;
+					AST tmp2203_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -39810,7 +39809,7 @@
 			case RETRY:
 			{
 				AST __t2359 = _t;
-				AST tmp2205_AST_in = (AST)_t;
+				AST tmp2204_AST_in = (AST)_t;
 				match(_t,RETRY);
 				_t = _t.getFirstChild();
 				{
@@ -39818,7 +39817,7 @@
 				switch ( _t.getType()) {
 				case BLOCK_LABEL:
 				{
-					AST tmp2206_AST_in = (AST)_t;
+					AST tmp2205_AST_in = (AST)_t;
 					match(_t,BLOCK_LABEL);
 					_t = _t.getNextSibling();
 					break;
@@ -39840,7 +39839,7 @@
 			case RETURN:
 			{
 				AST __t2361 = _t;
-				AST tmp2207_AST_in = (AST)_t;
+				AST tmp2206_AST_in = (AST)_t;
 				match(_t,RETURN);
 				_t = _t.getFirstChild();
 				{
@@ -39891,7 +39890,7 @@
 		AST unloadstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2364 = _t;
-		AST tmp2208_AST_in = (AST)_t;
+		AST tmp2207_AST_in = (AST)_t;
 		match(_t,UNLOAD);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -39901,7 +39900,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2209_AST_in = (AST)_t;
+			AST tmp2208_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -39929,14 +39928,14 @@
 		AST unsubscribestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2367 = _t;
-		AST tmp2210_AST_in = (AST)_t;
+		AST tmp2209_AST_in = (AST)_t;
 		match(_t,UNSUBSCRIBE);
 		_t = _t.getFirstChild();
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==PROCEDURE)) {
 			AST __t2369 = _t;
-			AST tmp2211_AST_in = (AST)_t;
+			AST tmp2210_AST_in = (AST)_t;
 			match(_t,PROCEDURE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -39954,7 +39953,7 @@
 		{
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==TO)) {
-			AST tmp2212_AST_in = (AST)_t;
+			AST tmp2211_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getNextSibling();
 		}
@@ -39972,7 +39971,7 @@
 			_t = _retTree;
 		}
 		else if ((_t.getType()==ALL)) {
-			AST tmp2213_AST_in = (AST)_t;
+			AST tmp2212_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 		}
@@ -39987,7 +39986,7 @@
 		case IN_KW:
 		{
 			AST __t2373 = _t;
-			AST tmp2214_AST_in = (AST)_t;
+			AST tmp2213_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40019,7 +40018,7 @@
 		AST usestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2375 = _t;
-		AST tmp2215_AST_in = (AST)_t;
+		AST tmp2214_AST_in = (AST)_t;
 		match(_t,USE);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -40029,7 +40028,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2216_AST_in = (AST)_t;
+			AST tmp2215_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -40057,12 +40056,12 @@
 		AST waitforstate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2381 = _t;
-		AST tmp2217_AST_in = (AST)_t;
+		AST tmp2216_AST_in = (AST)_t;
 		match(_t,WAITFOR);
 		_t = _t.getFirstChild();
 		eventlist(_t);
 		_t = _retTree;
-		AST tmp2218_AST_in = (AST)_t;
+		AST tmp2217_AST_in = (AST)_t;
 		match(_t,OF);
 		_t = _t.getNextSibling();
 		widgetlist(_t);
@@ -40073,12 +40072,12 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==OR)) {
 				AST __t2383 = _t;
-				AST tmp2219_AST_in = (AST)_t;
+				AST tmp2218_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
 				eventlist(_t);
 				_t = _retTree;
-				AST tmp2220_AST_in = (AST)_t;
+				AST tmp2219_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				widgetlist(_t);
@@ -40098,7 +40097,7 @@
 		case FOCUS:
 		{
 			AST __t2386 = _t;
-			AST tmp2221_AST_in = (AST)_t;
+			AST tmp2220_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getFirstChild();
 			gwidget(_t);
@@ -40126,7 +40125,7 @@
 		case PAUSE:
 		{
 			AST __t2388 = _t;
-			AST tmp2222_AST_in = (AST)_t;
+			AST tmp2221_AST_in = (AST)_t;
 			match(_t,PAUSE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40152,7 +40151,7 @@
 		switch ( _t.getType()) {
 		case EXCLUSIVEWEBUSER:
 		{
-			AST tmp2223_AST_in = (AST)_t;
+			AST tmp2222_AST_in = (AST)_t;
 			match(_t,EXCLUSIVEWEBUSER);
 			_t = _t.getNextSibling();
 			{
@@ -40218,15 +40217,15 @@
 		case OSDIR:
 		{
 			AST __t1996 = _t;
-			AST tmp2224_AST_in = (AST)_t;
+			AST tmp2223_AST_in = (AST)_t;
 			match(_t,OSDIR);
 			_t = _t.getFirstChild();
-			AST tmp2225_AST_in = (AST)_t;
+			AST tmp2224_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2226_AST_in = (AST)_t;
+			AST tmp2225_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -40234,7 +40233,7 @@
 			switch ( _t.getType()) {
 			case NOATTRLIST:
 			{
-				AST tmp2227_AST_in = (AST)_t;
+				AST tmp2226_AST_in = (AST)_t;
 				match(_t,NOATTRLIST);
 				_t = _t.getNextSibling();
 				break;
@@ -40256,13 +40255,13 @@
 		case PRINTER:
 		{
 			AST __t1998 = _t;
-			AST tmp2228_AST_in = (AST)_t;
+			AST tmp2227_AST_in = (AST)_t;
 			match(_t,PRINTER);
 			_t = _t.getFirstChild();
 			{
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType() >= LEXDATE && _t.getType() <= SYMMETRICENCRYPTIONALGORITHM))) {
-				AST tmp2229_AST_in = (AST)_t;
+				AST tmp2228_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -40279,7 +40278,7 @@
 		}
 		case TERMINAL:
 		{
-			AST tmp2230_AST_in = (AST)_t;
+			AST tmp2229_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
@@ -40319,7 +40318,7 @@
 				}
 				case FILENAME:
 				{
-					AST tmp2231_AST_in = (AST)_t;
+					AST tmp2230_AST_in = (AST)_t;
 					match(_t,FILENAME);
 					_t = _t.getNextSibling();
 					break;
@@ -40346,21 +40345,21 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp2232_AST_in = (AST)_t;
+				AST tmp2231_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BINARY:
 			{
-				AST tmp2233_AST_in = (AST)_t;
+				AST tmp2232_AST_in = (AST)_t;
 				match(_t,BINARY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLLATE:
 			{
-				AST tmp2234_AST_in = (AST)_t;
+				AST tmp2233_AST_in = (AST)_t;
 				match(_t,COLLATE);
 				_t = _t.getNextSibling();
 				break;
@@ -40368,7 +40367,7 @@
 			case CONVERT:
 			{
 				AST __t2003 = _t;
-				AST tmp2235_AST_in = (AST)_t;
+				AST tmp2234_AST_in = (AST)_t;
 				match(_t,CONVERT);
 				_t = _t.getFirstChild();
 				{
@@ -40381,14 +40380,14 @@
 						switch ( _t.getType()) {
 						case SOURCE:
 						{
-							AST tmp2236_AST_in = (AST)_t;
+							AST tmp2235_AST_in = (AST)_t;
 							match(_t,SOURCE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case TARGET:
 						{
-							AST tmp2237_AST_in = (AST)_t;
+							AST tmp2236_AST_in = (AST)_t;
 							match(_t,TARGET);
 							_t = _t.getNextSibling();
 							break;
@@ -40415,7 +40414,7 @@
 			case LOBDIR:
 			{
 				AST __t2007 = _t;
-				AST tmp2238_AST_in = (AST)_t;
+				AST tmp2237_AST_in = (AST)_t;
 				match(_t,LOBDIR);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -40426,35 +40425,35 @@
 			}
 			case NOCONVERT:
 			{
-				AST tmp2239_AST_in = (AST)_t;
+				AST tmp2238_AST_in = (AST)_t;
 				match(_t,NOCONVERT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ECHO:
 			{
-				AST tmp2240_AST_in = (AST)_t;
+				AST tmp2239_AST_in = (AST)_t;
 				match(_t,ECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOECHO:
 			{
-				AST tmp2241_AST_in = (AST)_t;
+				AST tmp2240_AST_in = (AST)_t;
 				match(_t,NOECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case KEEPMESSAGES:
 			{
-				AST tmp2242_AST_in = (AST)_t;
+				AST tmp2241_AST_in = (AST)_t;
 				match(_t,KEEPMESSAGES);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANDSCAPE:
 			{
-				AST tmp2243_AST_in = (AST)_t;
+				AST tmp2242_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
@@ -40462,7 +40461,7 @@
 			case MAP:
 			{
 				AST __t2008 = _t;
-				AST tmp2244_AST_in = (AST)_t;
+				AST tmp2243_AST_in = (AST)_t;
 				match(_t,MAP);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -40473,7 +40472,7 @@
 			}
 			case NOMAP:
 			{
-				AST tmp2245_AST_in = (AST)_t;
+				AST tmp2244_AST_in = (AST)_t;
 				match(_t,NOMAP);
 				_t = _t.getNextSibling();
 				break;
@@ -40481,7 +40480,7 @@
 			case NUMCOPIES:
 			{
 				AST __t2009 = _t;
-				AST tmp2246_AST_in = (AST)_t;
+				AST tmp2245_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -40492,7 +40491,7 @@
 			}
 			case PAGED:
 			{
-				AST tmp2247_AST_in = (AST)_t;
+				AST tmp2246_AST_in = (AST)_t;
 				match(_t,PAGED);
 				_t = _t.getNextSibling();
 				break;
@@ -40500,7 +40499,7 @@
 			case PAGESIZE_KW:
 			{
 				AST __t2010 = _t;
-				AST tmp2248_AST_in = (AST)_t;
+				AST tmp2247_AST_in = (AST)_t;
 				match(_t,PAGESIZE_KW);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -40511,14 +40510,14 @@
 			}
 			case PORTRAIT:
 			{
-				AST tmp2249_AST_in = (AST)_t;
+				AST tmp2248_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UNBUFFERED:
 			{
-				AST tmp2250_AST_in = (AST)_t;
+				AST tmp2249_AST_in = (AST)_t;
 				match(_t,UNBUFFERED);
 				_t = _t.getNextSibling();
 				break;
@@ -40542,7 +40541,7 @@
 		case COLUMN:
 		{
 			AST __t1652 = _t;
-			AST tmp2251_AST_in = (AST)_t;
+			AST tmp2250_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40554,7 +40553,7 @@
 		case COLUMNOF:
 		{
 			AST __t1653 = _t;
-			AST tmp2252_AST_in = (AST)_t;
+			AST tmp2251_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -40566,7 +40565,7 @@
 		case ROW:
 		{
 			AST __t1654 = _t;
-			AST tmp2253_AST_in = (AST)_t;
+			AST tmp2252_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40578,7 +40577,7 @@
 		case ROWOF:
 		{
 			AST __t1655 = _t;
-			AST tmp2254_AST_in = (AST)_t;
+			AST tmp2253_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -40590,7 +40589,7 @@
 		case X:
 		{
 			AST __t1656 = _t;
-			AST tmp2255_AST_in = (AST)_t;
+			AST tmp2254_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40602,7 +40601,7 @@
 		case XOF:
 		{
 			AST __t1657 = _t;
-			AST tmp2256_AST_in = (AST)_t;
+			AST tmp2255_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -40614,7 +40613,7 @@
 		case Y:
 		{
 			AST __t1658 = _t;
-			AST tmp2257_AST_in = (AST)_t;
+			AST tmp2256_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40626,7 +40625,7 @@
 		case YOF:
 		{
 			AST __t1659 = _t;
-			AST tmp2258_AST_in = (AST)_t;
+			AST tmp2257_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -40656,10 +40655,10 @@
 			try {
 				{
 				AST __t1681 = _t;
-				AST tmp2259_AST_in = (AST)_t;
+				AST tmp2258_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
-				AST tmp2260_AST_in = (AST)_t;
+				AST tmp2259_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				_t = __t1681;
@@ -40674,7 +40673,7 @@
 		}
 		if ( synPredMatched1682 ) {
 			AST __t1683 = _t;
-			AST tmp2261_AST_in = (AST)_t;
+			AST tmp2260_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			case_expression(_t);
@@ -40686,7 +40685,7 @@
 		}
 		else if ((_t.getType()==WHEN)) {
 			AST __t1684 = _t;
-			AST tmp2262_AST_in = (AST)_t;
+			AST tmp2261_AST_in = (AST)_t;
 			match(_t,WHEN);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40710,7 +40709,7 @@
 		AST comboboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1703 = _t;
-		AST tmp2263_AST_in = (AST)_t;
+		AST tmp2262_AST_in = (AST)_t;
 		match(_t,COMBOBOX);
 		_t = _t.getFirstChild();
 		{
@@ -40721,7 +40720,7 @@
 			case LISTITEMS:
 			{
 				AST __t1705 = _t;
-				AST tmp2264_AST_in = (AST)_t;
+				AST tmp2263_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -40731,7 +40730,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2265_AST_in = (AST)_t;
+						AST tmp2264_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -40750,7 +40749,7 @@
 			case LISTITEMPAIRS:
 			{
 				AST __t1708 = _t;
-				AST tmp2266_AST_in = (AST)_t;
+				AST tmp2265_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -40760,7 +40759,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2267_AST_in = (AST)_t;
+						AST tmp2266_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -40779,7 +40778,7 @@
 			case INNERLINES:
 			{
 				AST __t1711 = _t;
-				AST tmp2268_AST_in = (AST)_t;
+				AST tmp2267_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -40790,7 +40789,7 @@
 			}
 			case SORT:
 			{
-				AST tmp2269_AST_in = (AST)_t;
+				AST tmp2268_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -40803,21 +40802,21 @@
 			}
 			case SIMPLE:
 			{
-				AST tmp2270_AST_in = (AST)_t;
+				AST tmp2269_AST_in = (AST)_t;
 				match(_t,SIMPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWN:
 			{
-				AST tmp2271_AST_in = (AST)_t;
+				AST tmp2270_AST_in = (AST)_t;
 				match(_t,DROPDOWN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWNLIST:
 			{
-				AST tmp2272_AST_in = (AST)_t;
+				AST tmp2271_AST_in = (AST)_t;
 				match(_t,DROPDOWNLIST);
 				_t = _t.getNextSibling();
 				break;
@@ -40825,10 +40824,10 @@
 			case MAXCHARS:
 			{
 				AST __t1712 = _t;
-				AST tmp2273_AST_in = (AST)_t;
+				AST tmp2272_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
-				AST tmp2274_AST_in = (AST)_t;
+				AST tmp2273_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t1712;
@@ -40838,7 +40837,7 @@
 			case AUTOCOMPLETION:
 			{
 				AST __t1713 = _t;
-				AST tmp2275_AST_in = (AST)_t;
+				AST tmp2274_AST_in = (AST)_t;
 				match(_t,AUTOCOMPLETION);
 				_t = _t.getFirstChild();
 				{
@@ -40846,7 +40845,7 @@
 				switch ( _t.getType()) {
 				case UNIQUEMATCH:
 				{
-					AST tmp2276_AST_in = (AST)_t;
+					AST tmp2275_AST_in = (AST)_t;
 					match(_t,UNIQUEMATCH);
 					_t = _t.getNextSibling();
 					break;
@@ -40890,7 +40889,7 @@
 		AST compile_append_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1771 = _t;
-		AST tmp2277_AST_in = (AST)_t;
+		AST tmp2276_AST_in = (AST)_t;
 		match(_t,APPEND);
 		_t = _t.getFirstChild();
 		{
@@ -40899,7 +40898,7 @@
 		case EQUAL:
 		{
 			AST __t1773 = _t;
-			AST tmp2278_AST_in = (AST)_t;
+			AST tmp2277_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -40937,7 +40936,7 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp2279_AST_in = (AST)_t;
+			AST tmp2278_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			{
@@ -40945,10 +40944,10 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==LEXCOLON)) {
-					AST tmp2280_AST_in = (AST)_t;
+					AST tmp2279_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
-					AST tmp2281_AST_in = (AST)_t;
+					AST tmp2280_AST_in = (AST)_t;
 					match(_t,TYPELESS_TOKEN);
 					_t = _t.getNextSibling();
 				}
@@ -40973,7 +40972,7 @@
 		AST convertphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1779 = _t;
-		AST tmp2282_AST_in = (AST)_t;
+		AST tmp2281_AST_in = (AST)_t;
 		match(_t,CONVERT);
 		_t = _t.getFirstChild();
 		{
@@ -40982,7 +40981,7 @@
 		case SOURCE:
 		{
 			AST __t1781 = _t;
-			AST tmp2283_AST_in = (AST)_t;
+			AST tmp2282_AST_in = (AST)_t;
 			match(_t,SOURCE);
 			_t = _t.getFirstChild();
 			{
@@ -40990,14 +40989,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp2284_AST_in = (AST)_t;
+				AST tmp2283_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp2285_AST_in = (AST)_t;
+				AST tmp2284_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -41007,7 +41006,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp2286_AST_in = (AST)_t;
+					AST tmp2285_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -41051,7 +41050,7 @@
 		case TARGET:
 		{
 			AST __t1785 = _t;
-			AST tmp2287_AST_in = (AST)_t;
+			AST tmp2286_AST_in = (AST)_t;
 			match(_t,TARGET);
 			_t = _t.getFirstChild();
 			{
@@ -41059,14 +41058,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp2288_AST_in = (AST)_t;
+				AST tmp2287_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp2289_AST_in = (AST)_t;
+				AST tmp2288_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -41076,7 +41075,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp2290_AST_in = (AST)_t;
+					AST tmp2289_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -41126,42 +41125,42 @@
 		switch ( _t.getType()) {
 		case BYTE:
 		{
-			AST tmp2291_AST_in = (AST)_t;
+			AST tmp2290_AST_in = (AST)_t;
 			match(_t,BYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOUBLE:
 		{
-			AST tmp2292_AST_in = (AST)_t;
+			AST tmp2291_AST_in = (AST)_t;
 			match(_t,DOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp2293_AST_in = (AST)_t;
+			AST tmp2292_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONG:
 		{
-			AST tmp2294_AST_in = (AST)_t;
+			AST tmp2293_AST_in = (AST)_t;
 			match(_t,LONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHORT:
 		{
-			AST tmp2295_AST_in = (AST)_t;
+			AST tmp2294_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDSHORT:
 		{
-			AST tmp2296_AST_in = (AST)_t;
+			AST tmp2295_AST_in = (AST)_t;
 			match(_t,UNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
@@ -41179,7 +41178,7 @@
 		AST editorphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1901 = _t;
-		AST tmp2297_AST_in = (AST)_t;
+		AST tmp2296_AST_in = (AST)_t;
 		match(_t,EDITOR);
 		_t = _t.getFirstChild();
 		{
@@ -41190,7 +41189,7 @@
 			case INNERCHARS:
 			{
 				AST __t1903 = _t;
-				AST tmp2298_AST_in = (AST)_t;
+				AST tmp2297_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41202,7 +41201,7 @@
 			case INNERLINES:
 			{
 				AST __t1904 = _t;
-				AST tmp2299_AST_in = (AST)_t;
+				AST tmp2298_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41214,7 +41213,7 @@
 			case BUFFERCHARS:
 			{
 				AST __t1905 = _t;
-				AST tmp2300_AST_in = (AST)_t;
+				AST tmp2299_AST_in = (AST)_t;
 				match(_t,BUFFERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41226,7 +41225,7 @@
 			case BUFFERLINES:
 			{
 				AST __t1906 = _t;
-				AST tmp2301_AST_in = (AST)_t;
+				AST tmp2300_AST_in = (AST)_t;
 				match(_t,BUFFERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41237,7 +41236,7 @@
 			}
 			case LARGE:
 			{
-				AST tmp2302_AST_in = (AST)_t;
+				AST tmp2301_AST_in = (AST)_t;
 				match(_t,LARGE);
 				_t = _t.getNextSibling();
 				break;
@@ -41245,7 +41244,7 @@
 			case MAXCHARS:
 			{
 				AST __t1907 = _t;
-				AST tmp2303_AST_in = (AST)_t;
+				AST tmp2302_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41256,28 +41255,28 @@
 			}
 			case NOBOX:
 			{
-				AST tmp2304_AST_in = (AST)_t;
+				AST tmp2303_AST_in = (AST)_t;
 				match(_t,NOBOX);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWORDWRAP:
 			{
-				AST tmp2305_AST_in = (AST)_t;
+				AST tmp2304_AST_in = (AST)_t;
 				match(_t,NOWORDWRAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp2306_AST_in = (AST)_t;
+				AST tmp2305_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp2307_AST_in = (AST)_t;
+				AST tmp2306_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -41313,7 +41312,7 @@
 		AST fillinphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1920 = _t;
-		AST tmp2308_AST_in = (AST)_t;
+		AST tmp2307_AST_in = (AST)_t;
 		match(_t,FILLIN);
 		_t = _t.getFirstChild();
 		{
@@ -41323,7 +41322,7 @@
 			switch ( _t.getType()) {
 			case NATIVE:
 			{
-				AST tmp2309_AST_in = (AST)_t;
+				AST tmp2308_AST_in = (AST)_t;
 				match(_t,NATIVE);
 				_t = _t.getNextSibling();
 				break;
@@ -41359,7 +41358,7 @@
 		AST goon_elem_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		{
-		AST tmp2310_AST_in = (AST)_t;
+		AST tmp2309_AST_in = (AST)_t;
 		match(_t,_tokenSet_9);
 		_t = _t.getNextSibling();
 		}
@@ -41372,7 +41371,7 @@
 			inputState.guessing++;
 			try {
 				{
-				AST tmp2311_AST_in = (AST)_t;
+				AST tmp2310_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				}
@@ -41384,7 +41383,7 @@
 inputState.guessing--;
 		}
 		if ( synPredMatched1941 ) {
-			AST tmp2312_AST_in = (AST)_t;
+			AST tmp2311_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			gwidget(_t);
@@ -41405,7 +41404,7 @@
 		AST loadpicturefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2031 = _t;
-		AST tmp2313_AST_in = (AST)_t;
+		AST tmp2312_AST_in = (AST)_t;
 		match(_t,LOADPICTURE);
 		_t = _t.getFirstChild();
 		{
@@ -41446,16 +41445,16 @@
 			try {
 				{
 				AST __t2229 = _t;
-				AST tmp2314_AST_in = (AST)_t;
+				AST tmp2313_AST_in = (AST)_t;
 				match(_t,ERROR);
 				_t = _t.getFirstChild();
-				AST tmp2315_AST_in = (AST)_t;
+				AST tmp2314_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
-				AST tmp2316_AST_in = (AST)_t;
+				AST tmp2315_AST_in = (AST)_t;
 				match(_t,RECORD_NAME);
 				_t = _t.getNextSibling();
-				AST tmp2317_AST_in = (AST)_t;
+				AST tmp2316_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t2229;
@@ -41481,7 +41480,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp2318_AST_in = (AST)_t;
+					AST tmp2317_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					}
@@ -41493,7 +41492,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched2232 ) {
-				AST tmp2319_AST_in = (AST)_t;
+				AST tmp2318_AST_in = (AST)_t;
 				match(_t,ERROR);
 				_t = _t.getNextSibling();
 				{
@@ -41511,7 +41510,7 @@
 				}
 			}
 			else if ((_t.getType()==NOAPPLY)) {
-				AST tmp2320_AST_in = (AST)_t;
+				AST tmp2319_AST_in = (AST)_t;
 				match(_t,NOAPPLY);
 				_t = _t.getNextSibling();
 				{
@@ -41545,7 +41544,7 @@
 		AST radiosetphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2185 = _t;
-		AST tmp2321_AST_in = (AST)_t;
+		AST tmp2320_AST_in = (AST)_t;
 		match(_t,RADIOSET);
 		_t = _t.getFirstChild();
 		{
@@ -41556,7 +41555,7 @@
 			case HORIZONTAL:
 			{
 				AST __t2187 = _t;
-				AST tmp2322_AST_in = (AST)_t;
+				AST tmp2321_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getFirstChild();
 				{
@@ -41564,7 +41563,7 @@
 				switch ( _t.getType()) {
 				case EXPAND:
 				{
-					AST tmp2323_AST_in = (AST)_t;
+					AST tmp2322_AST_in = (AST)_t;
 					match(_t,EXPAND);
 					_t = _t.getNextSibling();
 					break;
@@ -41585,7 +41584,7 @@
 			}
 			case VERTICAL:
 			{
-				AST tmp2324_AST_in = (AST)_t;
+				AST tmp2323_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -41603,7 +41602,7 @@
 			case RADIOBUTTONS:
 			{
 				AST __t2190 = _t;
-				AST tmp2325_AST_in = (AST)_t;
+				AST tmp2324_AST_in = (AST)_t;
 				match(_t,RADIOBUTTONS);
 				_t = _t.getFirstChild();
 				{
@@ -41611,14 +41610,14 @@
 				switch ( _t.getType()) {
 				case QSTRING:
 				{
-					AST tmp2326_AST_in = (AST)_t;
+					AST tmp2325_AST_in = (AST)_t;
 					match(_t,QSTRING);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case UNQUOTEDSTRING:
 				{
-					AST tmp2327_AST_in = (AST)_t;
+					AST tmp2326_AST_in = (AST)_t;
 					match(_t,UNQUOTEDSTRING);
 					_t = _t.getNextSibling();
 					break;
@@ -41629,7 +41628,7 @@
 				}
 				}
 				}
-				AST tmp2328_AST_in = (AST)_t;
+				AST tmp2327_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -41684,7 +41683,7 @@
 				}
 				case TODAY:
 				{
-					AST tmp2329_AST_in = (AST)_t;
+					AST tmp2328_AST_in = (AST)_t;
 					match(_t,TODAY);
 					_t = _t.getNextSibling();
 					break;
@@ -41700,7 +41699,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2330_AST_in = (AST)_t;
+						AST tmp2329_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -41708,14 +41707,14 @@
 						switch ( _t.getType()) {
 						case QSTRING:
 						{
-							AST tmp2331_AST_in = (AST)_t;
+							AST tmp2330_AST_in = (AST)_t;
 							match(_t,QSTRING);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case UNQUOTEDSTRING:
 						{
-							AST tmp2332_AST_in = (AST)_t;
+							AST tmp2331_AST_in = (AST)_t;
 							match(_t,UNQUOTEDSTRING);
 							_t = _t.getNextSibling();
 							break;
@@ -41726,7 +41725,7 @@
 						}
 						}
 						}
-						AST tmp2333_AST_in = (AST)_t;
+						AST tmp2332_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -41781,7 +41780,7 @@
 						}
 						case TODAY:
 						{
-							AST tmp2334_AST_in = (AST)_t;
+							AST tmp2333_AST_in = (AST)_t;
 							match(_t,TODAY);
 							_t = _t.getNextSibling();
 							break;
@@ -41826,7 +41825,7 @@
 		AST selectionlistphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2253 = _t;
-		AST tmp2335_AST_in = (AST)_t;
+		AST tmp2334_AST_in = (AST)_t;
 		match(_t,SELECTIONLIST);
 		_t = _t.getFirstChild();
 		{
@@ -41836,21 +41835,21 @@
 			switch ( _t.getType()) {
 			case SINGLE:
 			{
-				AST tmp2336_AST_in = (AST)_t;
+				AST tmp2335_AST_in = (AST)_t;
 				match(_t,SINGLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MULTIPLE:
 			{
-				AST tmp2337_AST_in = (AST)_t;
+				AST tmp2336_AST_in = (AST)_t;
 				match(_t,MULTIPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NODRAG:
 			{
-				AST tmp2338_AST_in = (AST)_t;
+				AST tmp2337_AST_in = (AST)_t;
 				match(_t,NODRAG);
 				_t = _t.getNextSibling();
 				break;
@@ -41858,7 +41857,7 @@
 			case LISTITEMS:
 			{
 				AST __t2255 = _t;
-				AST tmp2339_AST_in = (AST)_t;
+				AST tmp2338_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -41868,7 +41867,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2340_AST_in = (AST)_t;
+						AST tmp2339_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -41887,7 +41886,7 @@
 			case LISTITEMPAIRS:
 			{
 				AST __t2258 = _t;
-				AST tmp2341_AST_in = (AST)_t;
+				AST tmp2340_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -41897,7 +41896,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2342_AST_in = (AST)_t;
+						AST tmp2341_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -41915,14 +41914,14 @@
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp2343_AST_in = (AST)_t;
+				AST tmp2342_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp2344_AST_in = (AST)_t;
+				AST tmp2343_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -41930,7 +41929,7 @@
 			case INNERCHARS:
 			{
 				AST __t2261 = _t;
-				AST tmp2345_AST_in = (AST)_t;
+				AST tmp2344_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41942,7 +41941,7 @@
 			case INNERLINES:
 			{
 				AST __t2262 = _t;
-				AST tmp2346_AST_in = (AST)_t;
+				AST tmp2345_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -41953,7 +41952,7 @@
 			}
 			case SORT:
 			{
-				AST tmp2347_AST_in = (AST)_t;
+				AST tmp2346_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -41989,7 +41988,7 @@
 		AST sliderphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2275 = _t;
-		AST tmp2348_AST_in = (AST)_t;
+		AST tmp2347_AST_in = (AST)_t;
 		match(_t,SLIDER);
 		_t = _t.getFirstChild();
 		{
@@ -41999,7 +41998,7 @@
 			switch ( _t.getType()) {
 			case HORIZONTAL:
 			{
-				AST tmp2349_AST_in = (AST)_t;
+				AST tmp2348_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
@@ -42007,7 +42006,7 @@
 			case MAXVALUE:
 			{
 				AST __t2277 = _t;
-				AST tmp2350_AST_in = (AST)_t;
+				AST tmp2349_AST_in = (AST)_t;
 				match(_t,MAXVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -42019,7 +42018,7 @@
 			case MINVALUE:
 			{
 				AST __t2278 = _t;
-				AST tmp2351_AST_in = (AST)_t;
+				AST tmp2350_AST_in = (AST)_t;
 				match(_t,MINVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -42030,21 +42029,21 @@
 			}
 			case VERTICAL:
 			{
-				AST tmp2352_AST_in = (AST)_t;
+				AST tmp2351_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCURRENTVALUE:
 			{
-				AST tmp2353_AST_in = (AST)_t;
+				AST tmp2352_AST_in = (AST)_t;
 				match(_t,NOCURRENTVALUE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LARGETOSMALL:
 			{
-				AST tmp2354_AST_in = (AST)_t;
+				AST tmp2353_AST_in = (AST)_t;
 				match(_t,LARGETOSMALL);
 				_t = _t.getNextSibling();
 				break;
@@ -42052,7 +42051,7 @@
 			case TICMARKS:
 			{
 				AST __t2279 = _t;
-				AST tmp2355_AST_in = (AST)_t;
+				AST tmp2354_AST_in = (AST)_t;
 				match(_t,TICMARKS);
 				_t = _t.getFirstChild();
 				{
@@ -42060,42 +42059,42 @@
 				switch ( _t.getType()) {
 				case NONE:
 				{
-					AST tmp2356_AST_in = (AST)_t;
+					AST tmp2355_AST_in = (AST)_t;
 					match(_t,NONE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOP:
 				{
-					AST tmp2357_AST_in = (AST)_t;
+					AST tmp2356_AST_in = (AST)_t;
 					match(_t,TOP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTTOM:
 				{
-					AST tmp2358_AST_in = (AST)_t;
+					AST tmp2357_AST_in = (AST)_t;
 					match(_t,BOTTOM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case LEFT:
 				{
-					AST tmp2359_AST_in = (AST)_t;
+					AST tmp2358_AST_in = (AST)_t;
 					match(_t,LEFT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case RIGHT:
 				{
-					AST tmp2360_AST_in = (AST)_t;
+					AST tmp2359_AST_in = (AST)_t;
 					match(_t,RIGHT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTH:
 				{
-					AST tmp2361_AST_in = (AST)_t;
+					AST tmp2360_AST_in = (AST)_t;
 					match(_t,BOTH);
 					_t = _t.getNextSibling();
 					break;
@@ -42112,7 +42111,7 @@
 				case FREQUENCY:
 				{
 					AST __t2282 = _t;
-					AST tmp2362_AST_in = (AST)_t;
+					AST tmp2361_AST_in = (AST)_t;
 					match(_t,FREQUENCY);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -42166,7 +42165,7 @@
 		AST textphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2331 = _t;
-		AST tmp2363_AST_in = (AST)_t;
+		AST tmp2362_AST_in = (AST)_t;
 		match(_t,TEXT);
 		_t = _t.getFirstChild();
 		{
@@ -42205,7 +42204,7 @@
 		AST toggleboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2341 = _t;
-		AST tmp2364_AST_in = (AST)_t;
+		AST tmp2363_AST_in = (AST)_t;
 		match(_t,TOGGLEBOX);
 		_t = _t.getFirstChild();
 		{
@@ -42244,7 +42243,7 @@
 		AST sql_comp_query_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2500 = _t;
-		AST tmp2365_AST_in = (AST)_t;
+		AST tmp2364_AST_in = (AST)_t;
 		match(_t,Sql_comp_query);
 		_t = _t.getFirstChild();
 		{
@@ -42252,21 +42251,21 @@
 		switch ( _t.getType()) {
 		case ANY:
 		{
-			AST tmp2366_AST_in = (AST)_t;
+			AST tmp2365_AST_in = (AST)_t;
 			match(_t,ANY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp2367_AST_in = (AST)_t;
+			AST tmp2366_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOME:
 		{
-			AST tmp2368_AST_in = (AST)_t;
+			AST tmp2367_AST_in = (AST)_t;
 			match(_t,SOME);
 			_t = _t.getNextSibling();
 			break;
@@ -42281,12 +42280,12 @@
 		}
 		}
 		}
-		AST tmp2369_AST_in = (AST)_t;
+		AST tmp2368_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
 		_t = _retTree;
-		AST tmp2370_AST_in = (AST)_t;
+		AST tmp2369_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t2500;

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser01/treeparser01.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -198,7 +198,7 @@
 	:	(	TABLEHANDLE fld[CQ.INIT] parameter_dataset_options
 		|	TABLE (FOR)? tbl[CQ.TEMPTABLESYMBOL] parameter_dataset_options
 		|	DATASET ID parameter_dataset_options
-		|	DATASETHANDLE ID parameter_dataset_options
+		|	DATASETHANDLE fld[CQ.INIT] parameter_dataset_options
 		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
 		|	expression (AS datatype_com)?
 		)

Deleted: trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -1,2951 +0,0 @@
-/*
-
-JPTreeParser.g - Primary tree parser.
-
-Joanju Proparse Syntax Tree Structure Specification
-
-Copyright (c) 2001-2006 Joanju Software.
-All rights reserved. This program and the accompanying materials 
-are made available under the terms of the Eclipse Public License v1.0
-which accompanies this distribution, and is available at
-http://www.eclipse.org/legal/epl-v10.html
-
-
-This tree parser has no actions. It is the basis for creating new
-tree parsers.
-
-
-Notes:
-	- Token types always start with a capital letter
-	- functions always start with a lowercase letter
-	- ALLCAPS is by convention the name for a real token type
-	- Mixed_case is by convention the name for a synthetic node's token type
-	- This: #(
-	  means that the first node is root, the rest are children of that root.
-	- the pipe symbol "|" represents logical OR, of course
-	- "something" is optional: (something)?
-	- "something" must be present one or more times: (something)+
-	- "something" may be there zero, one, or many times: (something)*
-	- A period represents a token of any type.
-
-*/
-
-
-header {
-	package org.prorefactor.treeparserbase;
-
-	import org.prorefactor.core.IJPNode;
-	import org.prorefactor.treeparser.IJPTreeParser;
-}
-
-
-
-options {
-	language = "Java";
-}
-
-
-
-// Class preamble - this gets inserted near the top of the .java file.
-{
-} // Class preamble
-
-
-
-// class definition options for Antlr
-class JPTreeParser extends TreeParser;
-options {
-	importVocab = ProParser;
-	defaultErrorHandler = false;
-	classHeaderSuffix = IJPTreeParser;
-}
-
-
-
-// This is added to top of the class definitions
-{
-
-	// Where did the tree parser leave off parsing -- might give us at least a bit
-	// of an idea where things left off if an exception was thrown.
-	// See antlr/TreeParser and the generated code.
-	public AST get_retTree() {
-		return _retTree;
-	}
-
-	// Func for grabbing the "state2" attribute from the node at LT(1) 
-	private boolean state2(AST node, int match) {
-		return ((IJPNode)node).getState2() == match;
-	}
-
-}
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// Begin grammar
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-
-program
-	:	#(Program_root (blockorstate)* Program_tail)
-	;
-
-code_block
-	:	#(Code_block (blockorstate)* )
-	;
-
-blockorstate
-	:	(	labeled_block
-		|	statement
-		|	// Expr_statement has a "statehead" node attribute
-			#(Expr_statement expression (NOERROR_KW)? state_end)
-		|	PROPARSEDIRECTIVE
-		|	PERIOD
-		|	DOT_COMMENT
-		|	#(ANNOTATION (.)* )
-		)
-	;
-
-labeled_block
-	:	#(BLOCK_LABEL LEXCOLON (dostate|forstate|repeatstate) )
-	;
-
-
-block_colon
-	:	LEXCOLON | PERIOD
-	;
-block_end
-	:	EOF
-	|	END state_end
-	;
-block_for
-	:	#(FOR RECORD_NAME (COMMA RECORD_NAME)* )
-	;
-block_opt
-	:	#(Block_iterator field EQUAL expression TO expression (BY constant)? )
-	|	querytuningphrase 
-	|	#(WHILE expression )
-	|	TRANSACTION 
-	|	on___phrase 
-	|	framephrase 
-	|	BREAK
-	|	#(BY expression (DESCENDING)? )
-	|	collatephrase
-	|	#(GROUP ( #(BY expression (DESCENDING)? ) )+ )
-	;
-block_preselect
-	:	#(PRESELECT for_record_spec )
-	;
-
-statement
-// All statement first nodes have a node attribute of "statehead".
-// Additionally, for those first statement nodes which are ambiguous
-// (ex: CREATE), there is an additional disambiguating attribute of "state2".
-	:						aatracestatement
-	|						accumulatestate
- 	|						altertablestate
- 	|						analyzestate
-	|						applystate
-	|						assignstate
-	|						bellstate
-	|						buffercomparestate
-	|						buffercopystate
-	|						callstate
-	|						casestate
-	|						choosestate
-	|						classstate
-	|						clearstate
-	|	{state2(_t, 0)}?			closestate			// SQL
-	|	{state2(_t, QUERY)}?			closequerystate
-	|	{state2(_t, STOREDPROCEDURE)}?	closestoredprocedurestate
-	|						colorstate
-	|						compilestate
-	|						connectstate
-	|						constructorstate
-	|						copylobstate
-	|	{state2(_t, 0)}?			createstate
-	|	{state2(_t, ALIAS)}?			createaliasstate
-	|	{state2(_t, Automationobject)}?	createautomationobjectstate
-	|	{state2(_t, BROWSE)}?			createbrowsestate
-	|	{state2(_t, BUFFER)}?			createbufferstate
-	|	{state2(_t, CALL)}?			createcallstate
-	|	{state2(_t, CLIENTPRINCIPAL)}? createclientprincipalstate
-	|	{state2(_t, DATABASE)}?		createdatabasestate
-	|	{state2(_t, DATASET)}?			createdatasetstate
-	|	{state2(_t, DATASOURCE)}?		createdatasourcestate
-	|	{state2(_t, INDEX)}?			createindexstate		// SQL
-	|	{state2(_t, QUERY)}?			createquerystate   
-	|	{state2(_t, SAXREADER)}?		createsaxreaderstate
-	|	{state2(_t, SAXWRITER)}?		createsaxwriterstate
-	|	{state2(_t, SERVER)}?			createserverstate
-	|	{state2(_t, SERVERSOCKET)}?		createserversocketstate
-	|	{state2(_t, SOAPHEADER)}?		createsoapheaderstate
-	|	{state2(_t, SOAPHEADERENTRYREF)}?	createsoapheaderentryrefstate
-	|	{state2(_t, SOCKET)}?			createsocketstate
-	|	{state2(_t, TABLE)}?			createtablestate		// SQL
-	|	{state2(_t, TEMPTABLE)}?		createtemptablestate
-	|	{state2(_t, VIEW)}?			createviewstate			// SQL
-	|	{state2(_t, WIDGET)}?			createwidgetstate
-	|	{state2(_t, WIDGETPOOL)}?		createwidgetpoolstate
-	|	{state2(_t, XDOCUMENT)}?		createxdocumentstate
-	|	{state2(_t, XNODEREF)}?		createxnoderefstate
-	|	{state2(_t, ADVISE)}?			ddeadvisestate
-	|	{state2(_t, EXECUTE)}?		ddeexecutestate
-	|	{state2(_t, GET)}?			ddegetstate
-	|	{state2(_t, INITIATE)}?		ddeinitiatestate
-	|	{state2(_t, REQUEST)}?		dderequeststate
-	|	{state2(_t, SEND)}?			ddesendstate
-	|	{state2(_t, TERMINATE)}?		ddeterminatestate	
-	|						declarecursorstate
-	|	{state2(_t, BROWSE)}?			definebrowsestate
-	|	{state2(_t, BUFFER)}?			definebufferstate
-	|	{state2(_t, BUTTON)}?			definebuttonstate
-	|	{state2(_t, DATASET)}?			definedatasetstate
-	|	{state2(_t, DATASOURCE)}?		definedatasourcestate
-	|	{state2(_t, FRAME)}?			defineframestate
-	|	{state2(_t, IMAGE)}?			defineimagestate
-	|	{state2(_t, MENU)}?			definemenustate
-	|	{state2(_t, PARAMETER)}?		defineparameterstate
-	|	{state2(_t, QUERY)}?			definequerystate
-	|	{state2(_t, RECTANGLE)}?		definerectanglestate
-	|	{state2(_t, STREAM)}?			definestreamstate
-	|	{state2(_t, SUBMENU)}?		definesubmenustate
-	|	{state2(_t, TEMPTABLE)}?		definetemptablestate
-	|	{state2(_t, WORKTABLE)}?		defineworktablestate
-	|	{state2(_t, VARIABLE)}?		definevariablestate
-	|						dictionarystate
-	|	{state2(_t, 0)}?			deletestate
-	|	{state2(_t, ALIAS)}?			deletealiasstate
-	|	{state2(_t, FROM)}?			deletefromstate
-	|	{state2(_t, OBJECT)}?			deleteobjectstate
-	|	{state2(_t, PROCEDURE)}?		deleteprocedurestate
-	|	{state2(_t, WIDGET)}?			deletewidgetstate
-	|	{state2(_t, WIDGETPOOL)}?		deletewidgetpoolstate
-	|						destructorstate
-	|	{state2(_t, 0)}?			disablestate
-	|	{state2(_t, TRIGGERS)}?		disabletriggersstate
-	|						disconnectstate
-	|						displaystate
-	|						dostate
-	|						downstate
-	|	{state2(_t, INDEX)}?			dropindexstate			// SQL
-	|	{state2(_t, TABLE)}?			droptablestate			// SQL
-	|	{state2(_t, VIEW)}?			dropviewstate			// SQL
-	|						emptytemptablestate  
-	|						enablestate
-	|						exportstate
-	|						fetchstate
-	|						findstate
-	|						forstate
-	|						formstate
-	|						functionstate
-	|						getstate
-	|						getkeyvaluestate  
-	|						grantstate
-	|						hidestate
-	|						ifstate
-	|						importstate  
-	|	{state2(_t, CLEAR)}?			inputclearstate
-	|	{state2(_t, CLOSE)}?			inputclosestate
-	|	{state2(_t, FROM)}?			inputfromstate
-	|	{state2(_t, THROUGH)}?		inputthroughstate
-	|	{state2(_t, CLOSE)}?			inputoutputclosestate
-	|	{state2(_t, THROUGH)}?		inputoutputthroughstate
-	|	{state2(_t, INTO)}?			insertintostate			// SQL
-	|	{state2(_t, 0)}?			insertstate
-	|						interfacestate
-	|						leavestate
-	|						loadstate  
-	|						messagestate
-	|						methodstate
-	|						nextstate
-	|						nextpromptstate
-	|						onstate  
-	|	{state2(_t, 0)}?			openstate			// SQL
-	|	{state2(_t, QUERY)}?			openquerystate
-	|						osappendstate
-	|						oscommandstate
-	|						oscopystate
-	|						oscreatedirstate  
-	|						osdeletestate
-	|						osrenamestate
-	|	{state2(_t, CLOSE)}?			outputclosestate
-	|	{state2(_t, THROUGH)}?		outputthroughstate
-	|	{state2(_t, TO)}?			outputtostate
-	|						pagestate  
-	|						pausestate
-	|						procedurestate
-	|						processeventsstate
-	|						promptforstate
-	|						publishstate
-	|	{state2(_t, 0)}?			putstate
-	|	{state2(_t, CURSOR)}?			putcursorstate
-	|	{state2(_t, SCREEN)}?			putscreenstate
-	|						putkeyvaluestate
-	|						quitstate
-	|						rawtransferstate
-	|						readkeystate
-	|	{state2(_t, 0)}?			releasestate
-	|	{state2(_t, EXTERNAL)}?		releaseexternalstate
-	|	{state2(_t, OBJECT)}?			releaseobjectstate
-	|						repeatstate
-	|						repositionstate  
-	|						returnstate
-	|						revokestate
-	|	{state2(_t, 0)}?			runstate
-	|	{state2(_t, STOREDPROCEDURE)}?	runstoredprocedurestate
-	|	{state2(_t, SUPER)}?			runsuperstate
-	|						savecachestate
-	|						scrollstate
-	|						seekstate  
-	|						selectstate
-	|						setstate
-	|						showstatsstate
-	|						statusstate  
-	|						stopstate
-	|						subscribestate
-	|	{state2(_t, COLOR)}?			systemdialogcolorstate
-	|	{state2(_t, FONT)}?			systemdialogfontstate
-	|	{state2(_t, GETDIR)}?		systemdialoggetdirstate
-	|	{state2(_t, GETFILE)}?		systemdialoggetfilestate
-	|	{state2(_t, PRINTERSETUP)}?		systemdialogprintersetupstate
-	|						systemhelpstate
-	|						transactionmodeautomaticstate
-	|						triggerprocedurestate
-	|						underlinestate  
-	|						undostate
-	|						unloadstate
-	|						unsubscribestate
-	|						upstate  
-	|						updatestatement
-	|						usestate
-	|						validatestate
-	|						viewstate
-	|						waitforstate
-	;
-
-
-pseudfn
-// See PSC's grammar for <pseudfn> and for <asignmt>.
-// These are functions that can (or, in some cases, must) be an l-value.
-	:	#(FIXCODEPAGE funargs )
-	|	#(OVERLAY funargs )
-	|	#(PUTBITS funargs )
-	|	#(PUTBYTE funargs )
-	|	#(PUTBYTES funargs )
-	|	#(PUTDOUBLE funargs )
-	|	#(PUTFLOAT funargs )
-	|	#(PUTLONG funargs )
-	|	#(PUTSHORT funargs )
-	|	#(PUTSTRING funargs )
-	|	#(PUTUNSIGNEDSHORT funargs )
-	|	#(SETBYTEORDER funargs )
-	|	#(SETPOINTERVALUE funargs )
-	|	#(SETSIZE funargs )
-	|	AAMSG // not the whole func - we don't want its arguments here
-	|	currentvaluefunc
-	|	CURRENTWINDOW
-	|	dynamiccurrentvaluefunc
-	|	entryfunc
-	|	lengthfunc
-	|	nextvaluefunc
-	|	rawfunc
-	|	substringfunc
-	|	widattr
-	// Keywords from <optargfn> and <noargfn>. Assignments to those
-	// are accepted by the compiler, however, assignment to them seems to have
-	// no affect at runtime.
-	// The following are from <optargfn>
-	| PAGESIZE_KW | LINECOUNTER | PAGENUMBER | FRAMECOL
-	| FRAMEDOWN | FRAMELINE | FRAMEROW | USERID | ETIME_KW
-	// The following are from <noargfn>
-	| DBNAME | TIME | OPSYS | RETRY | AASERIAL | AACONTROL
-	| MESSAGELINES | TERMINAL | PROPATH | CURRENTLANGUAGE | PROMSGS
-	| SCREENLINES | LASTKEY
-	| FRAMEFIELD | FRAMEFILE | FRAMEVALUE | GOPENDING
-	| PROGRESS | FRAMEINDEX | FRAMEDB | FRAMENAME | DATASERVERS
-	| NUMDBS | NUMALIASES | ISATTRSPACE | PROCSTATUS
-	| PROCHANDLE | CURSOR | OSERROR | RETURNVALUE | OSDRIVES
-	| PROVERSION | TRANSACTION | MACHINECLASS 
-	| AAPCONTROL | GETCODEPAGES | COMSELF
-	;
-
-functioncall
-	:	#(ACCUMULATE accum_what (#(BY expression (DESCENDING)?))? expression )
-	|	#(ADDINTERVAL LEFTPAREN expression COMMA expression COMMA expression RIGHTPAREN )
-	|	#(AUDITENABLED LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(CANFIND LEFTPAREN (findwhich)? recordphrase RIGHTPAREN )
-	|	#(CAST LEFTPAREN field COMMA TYPE_NAME RIGHTPAREN )
-	|	currentvaluefunc // is also a pseudfn.
-	|	dynamiccurrentvaluefunc // is also a pseudfn.
-	|	#(DYNAMICFUNCTION LEFTPAREN expression (#(IN_KW expression))? (COMMA parameter)* RIGHTPAREN (NOERROR_KW)? )
-		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
-	|	entryfunc // is also a pseudfn.
-	|	#(ETIME_KW (funargs)? )
-	|	#(EXTENT LEFTPAREN field RIGHTPAREN )
-	|	#(FRAMECOL (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMEDOWN (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMELINE (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(FRAMEROW (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(GETCODEPAGES (funargs)? )
-	|	#(GUID LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(IF expression THEN expression ELSE expression )
-	|	ldbnamefunc 
-	|	lengthfunc // is also a pseudfn.
-	|	#(LINECOUNTER (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(MTIME LEFTPAREN (expression)? RIGHTPAREN )
-	|	nextvaluefunc // is also a pseudfn.
-		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
-	|	#(PAGENUMBER (LEFTPAREN ID RIGHTPAREN)? )
-	|	#(PAGESIZE_KW (LEFTPAREN ID RIGHTPAREN)? )
-	|	rawfunc // is also a pseudfn.
-	|	#(SEEK LEFTPAREN (INPUT|OUTPUT|ID) RIGHTPAREN )
-	|	substringfunc // is also a pseudfn.
-	|	#(SUPER (parameterlist)? )
-	|	#(TIMEZONE LEFTPAREN (expression)? RIGHTPAREN )
-	|	#(USERID (funargs)? )
-	|	#(USER (funargs)? )
-	|	sqlaggregatefunc  
-	|	argfunc
-	|	noargfunc
-	|	recordfunc
-	;
-
-argfunc
-	:	#(AACBIT funargs )
-	|	#(AAMSG funargs )
-	|	#(ABSOLUTE funargs )
-	|	#(ALIAS funargs )
-	|	#(ASC funargs )
-	|	#(BASE64DECODE funargs )
-	|	#(BASE64ENCODE funargs )
-	|	#(CANDO funargs )
-	|	#(CANQUERY funargs )
-	|	#(CANSET funargs )
-	|	#(CAPS funargs )
-	|	#(CHR funargs )
-	|	#(CODEPAGECONVERT funargs )
-	|	#(COLLATE funargs ) // See docs for BY phrase in FOR, PRESELECT, etc.
-	|	#(COMPARE funargs )
-	|	#(CONNECTED funargs )
-	|	#(COUNTOF funargs )
-	|	#(CURRENTRESULTROW funargs )
-	|	#(DATE funargs )
-	|	#(DATETIME funargs )
-	|	#(DATETIMETZ funargs )
-	|	#(DAY funargs )
-	|	#(DBCODEPAGE funargs )
-	|	#(DBCOLLATION funargs )
-	|	#(DBPARAM funargs )
-	|	#(DBRESTRICTIONS funargs )
-	|	#(DBTASKID funargs )
-	|	#(DBTYPE funargs )
-	|	#(DBVERSION funargs )
-	|	#(DECIMAL funargs )
-	|	#(DECRYPT funargs )
-	|	#(DYNAMICNEXTVALUE funargs )
-	|	#(ENCODE funargs )
-	|	#(ENCRYPT funargs )
-	|	#(EXP funargs )
-	|	#(FILL funargs )
-	|	#(FIRST funargs )
-	|	#(FIRSTOF funargs )
-	|	#(GENERATEPBEKEY funargs )
-	|	#(GETBITS funargs )
-	|	#(GETBYTE funargs )
-	|	#(GETBYTEORDER funargs )
-	|	#(GETBYTES funargs )
-	|	#(GETCOLLATIONS funargs )
-	|	#(GETDOUBLE funargs )
-	|	#(GETFLOAT funargs )
-	|	#(GETLICENSE funargs )
-	|	#(GETLONG funargs )
-	|	#(GETPOINTERVALUE funargs )
-	|	#(GETSHORT funargs )
-	|	#(GETSIZE funargs )
-	|	#(GETSTRING funargs )
-	|	#(GETUNSIGNEDSHORT funargs )
-	|	#(HEXDECODE funargs )
-	|	#(HEXENCODE funargs )
-	|	#(INDEX funargs )
-	|	#(INTEGER funargs )
-	|	#(INTERVAL funargs )
-	|	#(ISCODEPAGEFIXED funargs )
-	|	#(ISCOLUMNCODEPAGE funargs )
-	|	#(ISLEADBYTE funargs )
-	|	#(ISODATE funargs )
-	|	#(KBLABEL funargs )
-	|	#(KEYCODE funargs )
-	|	#(KEYFUNCTION funargs )
-	|	#(KEYLABEL funargs )
-	|	#(KEYWORD funargs )
-	|	#(KEYWORDALL funargs )
-	|	#(LAST funargs )
-	|	#(LASTOF funargs )
-	|	#(LC funargs )
-	|	#(LEFTTRIM funargs )
-	|	#(LIBRARY funargs )
-	|	#(LISTEVENTS funargs )
-	|	#(LISTQUERYATTRS funargs )
-	|	#(LISTSETATTRS funargs )
-	|	#(LISTWIDGETS funargs )
-	|	#(LOADPICTURE funargs )
-	|	#(LOG funargs )
-	|	#(LOGICAL funargs )
-	|	#(LOOKUP funargs )
-	|	#(MAXIMUM funargs )
-	|	#(MD5DIGEST funargs )
-	|	#(MEMBER funargs )
-	|	#(MINIMUM funargs )
-	|	#(MONTH funargs )
-	|	#(NORMALIZE funargs )
-	|	#(NUMENTRIES funargs )
-	|	#(NUMRESULTS funargs )
-	|	#(OSGETENV funargs )
-	|	#(PDBNAME funargs )
-	|	#(PROGRAMNAME funargs )
-	|	#(QUERYOFFEND funargs )
-	|	#(QUOTER funargs )
-	|	#(RINDEX funargs )
-	|	#(RANDOM funargs )
-	|	#(REPLACE funargs )
-	|	#(RGBVALUE funargs )
-	|	#(RIGHTTRIM funargs )
-	|	#(ROUND funargs )
-	|	#(SDBNAME funargs )
-	|	#(SEARCH funargs )
-	|	#(SETDBCLIENT funargs )
-	|	#(SETUSERID funargs )
-	|	#(SHA1DIGEST funargs )
-	|	#(SQRT funargs )
-	|	#(SSLSERVERNAME funargs )
-	|	#(STRING funargs )
-	|	#(SUBSTITUTE funargs )
-	|	#(TOROWID funargs )
-	|	#(TRIM funargs )
-	|	#(TRUNCATE funargs )
-	|	#(TYPEOF funargs )
-	|	#(VALIDEVENT funargs )
-	|	#(VALIDHANDLE funargs )
-	|	#(VALIDOBJECT funargs )
-	|	#(WEEKDAY funargs )
-	|	#(WIDGETHANDLE funargs )
-	|	#(YEAR funargs )
-	;
-
-recordfunc
-	:	#(AMBIGUOUS recordfunargs )
-	|	#(AVAILABLE recordfunargs )
-	|	#(CURRENTCHANGED recordfunargs )
-	|	#(DATASOURCEMODIFIED recordfunargs )
-	|	#(ERROR recordfunargs )
-	|	#(LOCKED recordfunargs )
-	|	#(NEW recordfunargs )
-	|	#(RECID recordfunargs )
-	|	#(RECORDLENGTH recordfunargs )
-	|	#(REJECTED recordfunargs )
-	|	#(ROWID recordfunargs )
-	|	#(ROWSTATE recordfunargs )
-	;
-recordfunargs
-	:	(LEFTPAREN RECORD_NAME RIGHTPAREN | RECORD_NAME)
-	;
-
-noargfunc
-	:	AACONTROL
-	|	AAPCONTROL
-	|	AASERIAL
-	|	CURRENTLANGUAGE
-	|	CURSOR
-	|	DATASERVERS
-	|	DBNAME
-	|	FRAMEDB
-	|	FRAMEFIELD
-	|	FRAMEFILE
-	|	FRAMEINDEX
-	|	FRAMENAME
-	|	FRAMEVALUE
-	|	GENERATEPBESALT
-	|	GENERATERANDOMKEY
-	|	GENERATEUUID
-	|	GATEWAYS
-	|	GOPENDING
-	|	ISATTRSPACE
-	|	LASTKEY
-	|	MACHINECLASS
-	|	MESSAGELINES
-	|	NOW
-	|	NUMALIASES
-	|	NUMDBS
-	|	OPSYS
-	|	OSDRIVES
-	|	OSERROR
-	|	PROCHANDLE
-	|	PROCSTATUS
-	|	PROGRESS
-	|	PROMSGS
-	|	PROPATH
-	|	PROVERSION
-	|	RETRY
-	|	RETURNVALUE
-	|	SCREENLINES
-	|	TERMINAL
-	|	TIME
-	|	TODAY
-	|	TRANSACTION
-	;
-
-
-parameter
-	:	#(BUFFER (RECORD_NAME | ID FOR RECORD_NAME ) )
-	|	#(PARAMETER expression EQUAL expression )
-	|	#(OUTPUT parameter_arg )
-	|	#(INPUTOUTPUT parameter_arg )
-	|	#(INPUT parameter_arg )
-	;
-parameter_arg
-	:	(	TABLEHANDLE field parameter_dataset_options
-		|	TABLE (FOR)? RECORD_NAME parameter_dataset_options
-		|	DATASET ID parameter_dataset_options
-		|	DATASETHANDLE ID parameter_dataset_options
-		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
-		|	expression (AS datatype_com)?
-		)
-		(BYPOINTER|BYVARIANTPOINTER)?
-	;
-parameter_dataset_options
-	: (APPEND)? (BYVALUE|BYREFERENCE|BIND)?
-	;
-
-parameterlist
-	:	#(Parameter_list parameterlist_noroot )
-	;
-parameterlist_noroot
-	:	LEFTPAREN (parameter)? (COMMA parameter)* RIGHTPAREN
-	;
-
-eventlist
-	:	#(Event_list . (COMMA .)* )
-	;
-
-funargs
-	:	LEFTPAREN expression (COMMA expression)* RIGHTPAREN
-	;
-
-anyorvalue
-	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
-	|	TYPELESS_TOKEN
-	;
-filenameorvalue
-	:	valueexpression | FILENAME
-	;
-valueexpression
-	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
-	;
-expressionorvalue
-	:	valueexpression | expression
-	;
-
-findwhich
-	:	CURRENT | EACH | FIRST | LAST | NEXT | PREV
-	;
-
-lockhow
-	:	SHARELOCK | EXCLUSIVELOCK | NOLOCK
-	;
-
-
-expression
-	:	#(OR expression expression )
-	|	#(AND expression expression )
-	|	#(NOT expression )
-	|	#(MATCHES expression expression )
-	|	#(BEGINS expression expression )
-	|	#(CONTAINS expression expression )
-	|	#(EQ expression expression )
-	|	#(NE expression expression )
-	|	#(GTHAN expression expression )
-	|	#(GE expression expression )
-	|	#(LTHAN expression expression )
-	|	#(LE expression expression )
-	|	#(PLUS expression expression )
-	|	#(MINUS expression expression )
-	|	#(MULTIPLY expression expression )
-	|	#(DIVIDE expression expression )
-	|	#(MODULO expression expression )
-	|	#(UNARY_MINUS exprt )
-	|	#(UNARY_PLUS exprt )
-	|	exprt
-	;
-
-exprt
-	:	#(LEFTPAREN expression RIGHTPAREN )
-	|	constant
-	|	widattr
-	|	#(USER_FUNC parameterlist_noroot )
-	|	#(LOCAL_METHOD_REF parameterlist_noroot )
-	|	( #(NEW TYPE_NAME) )=> #(NEW TYPE_NAME parameterlist )
-	|	// SUPER is amibiguous between functioncall and systemhandlename
-		(	options{generateAmbigWarnings=false;}
-		:	functioncall
-		|	systemhandlename
-		)
-	|	field
-	|	#(Entered_func field (NOT)? ENTERED )
-	|	RECORD_NAME // for DISPLAY buffername, etc.
-	;
-
-widattr
-	:	#(	Widget_ref
-			(NORETURNVALUE)?
-			s_widget
-			(OBJCOLON . (array_subscript)? (method_param_list)? )+
-			(#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? (AS .)?
-		)
-	;
-
-gwidget
-	:	#(Widget_ref s_widget (#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? )
-	;
-
-widgetlist
-	:	gwidget (COMMA gwidget)*
-	;
-
-s_widget
-	:	widname	| (FIELD)? field
-	;
-
-widname
-	:	systemhandlename
-	|	DATASET ID
-	|	DATASOURCE ID
-	|	FRAME ID
-	|	MENU ID
-	|	SUBMENU ID
-	|	MENUITEM ID
-	|	BROWSE ID
-	|	QUERY ID
-	|	TEMPTABLE ID
-	|	BUFFER ID
-	|	XDOCUMENT ID
-	|	XNODEREF ID
-	|	SOCKET ID
-	;
-
-field
-	:	#(Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? ID (array_subscript)? )
-	;
-
-array_subscript
-	:	#(Array_subscript LEFTBRACE expression (FOR expression)? RIGHTBRACE )
-	;
-
-method_param_list
-	:	#(Method_param_list LEFTPAREN (parameter)? (COMMA (parameter)?)* RIGHTPAREN )
-	;
-
-constant
-	:	TRUE_KW | FALSE_KW | YES | NO | UNKNOWNVALUE | QSTRING | LEXDATE | NUMBER | NULL_KW
-	|	NOWAIT | SHARELOCK | EXCLUSIVELOCK | NOLOCK
-	|	BIGENDIAN
-	|	FINDCASESENSITIVE | FINDGLOBAL | FINDNEXTOCCURRENCE | FINDPREVOCCURRENCE | FINDSELECT | FINDWRAPAROUND
-	|	FUNCTIONCALLTYPE | GETATTRCALLTYPE | PROCEDURECALLTYPE | SETATTRCALLTYPE
-	|	HOSTBYTEORDER | LITTLEENDIAN
-	|	READAVAILABLE | READEXACTNUM
-	|	ROWUNMODIFIED | ROWDELETED | ROWMODIFIED | ROWCREATED
-	|	SAXCOMPLETE | SAXPARSERERROR | SAXRUNNING | SAXUNINITIALIZED
-	|	SEARCHSELF | SEARCHTARGET
-	|	WINDOWDELAYEDMINIMIZE | WINDOWMINIMIZED | WINDOWNORMAL | WINDOWMAXIMIZED
-	;
-
-systemhandlename
-	:	AAMEMORY | ACTIVEWINDOW | AUDITCONTROL | AUDITPOLICY | CLIPBOARD | CODEBASELOCATOR | COLORTABLE | COMPILER 
-	|	COMSELF | CURRENTWINDOW | DEBUGGER | DEFAULTWINDOW
-	|	ERRORSTATUS | FILEINFORMATION | FOCUS | FONTTABLE | LASTEVENT | LOGMANAGER
-	|	MOUSE | PROFILER | RCODEINFORMATION | SECURITYPOLICY | SELF | SESSION
-	|	SOURCEPROCEDURE | SUPER | TARGETPROCEDURE | TEXTCURSOR | THISOBJECT | THISPROCEDURE | WEBCONTEXT
-	;
-
-
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//                   begin PROGRESS syntax features, in alphabetical order
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-//////////////////////////////////////////////////////////////////////////////////////////////////////
-
-
-
-aatracestatement
-	:	#(	AATRACE
-			(	OFF state_end
-			|	#(ON (AALIST)? ) state_end
-			|	(stream_name)?
-				(	(TO|FROM|THROUGH) io_phrase state_end
-				|	CLOSE state_end
-				)
-			)
-		)
-	;
-
-accum_what
-	:	AVERAGE|COUNT|MAXIMUM|MINIMUM|TOTAL|SUBAVERAGE|SUBCOUNT|SUBMAXIMUM|SUBMINIMUM|SUBTOTAL
-	;
-
-accumulatestate
-	:	#(ACCUMULATE (display_item)* state_end )
-	;
-
-aggregatephrase
-	:	#(Aggregate_phrase LEFTPAREN (aggregate_opt)+ ( #(BY expression (DESCENDING)? ) )* RIGHTPAREN )
-	;
-aggregate_opt
-	:	#(AVERAGE (label_constant)? )
-	|	#(COUNT (label_constant)? )
-	|	#(MAXIMUM (label_constant)? )
-	|	#(MINIMUM (label_constant)? )
-	|	#(TOTAL (label_constant)? )
-	|	#(SUBAVERAGE (label_constant)? )
-	|	#(SUBCOUNT (label_constant)? )
-	|	#(SUBMAXIMUM (label_constant)? )
-	|	#(SUBMINIMUM (label_constant)? )
-	|	#(SUBTOTAL (label_constant)? )
-	;
-
-analyzestate
-	:	#(	ANALYZE filenameorvalue filenameorvalue
-			( #(OUTPUT filenameorvalue ) )?
-			(APPEND | ALL | NOERROR_KW)* state_end
-		)
-	;
-
-applystate
-	:	#(APPLY expression (#(TO gwidget ))? state_end )
-	;
-
-assign_opt
-	:	#(ASSIGN ( #(EQUAL . expression ) )+ )
-	;
-
-assignstate
-	:	#(ASSIGN assignment_list (NOERROR_KW)? state_end )
-	;
-assignment_list
-	:	RECORD_NAME (#(EXCEPT (field)*))?
-	|	(	assign_equal (#(WHEN expression))?
-		|	#(Assign_from_buffer field ) (#(WHEN expression))?
-		)*
-	;
-assign_equal
-	:	#(EQUAL (pseudfn|field) expression )
-	;
-
-atphrase
-	:	#(	AT
-			(	atphraseab atphraseab
-			|	expression
-			)
-			(COLONALIGNED|LEFTALIGNED|RIGHTALIGNED)?
-		)
-	;
-atphraseab
-	:	#(COLUMN expression )
-	|	#(COLUMNOF referencepoint )
-	|	#(ROW expression )
-	|	#(ROWOF referencepoint )
-	|	#(X expression )
-	|	#(XOF referencepoint )
-	|	#(Y expression )
-	|	#(YOF referencepoint )
-	;
-referencepoint
-	:	field ((PLUS|MINUS) expression)?
-	;
-
-bellstate
-	:	#(BELL state_end )
-	;
-
-buffercomparestate
-	:	#(	BUFFERCOMPARE
-			RECORD_NAME
-			(	#(EXCEPT (field)*)
-			|	#(USING (field)+)
-			)?
-			TO RECORD_NAME
-			(CASESENSITIVE|BINARY)?
-			( #(SAVE ( #(RESULT IN_KW) )? field ) )?
-			(EXPLICIT)?
-			(	COMPARES
-				(NOERROR_KW)?
-				block_colon
-				#(Code_block ( #(WHEN expression THEN blockorstate ) )* )
-				#(END (COMPARES)? )
-			)?
-			(NOLOBS)?
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-
-buffercopystate
-	:	#(	BUFFERCOPY RECORD_NAME
-			(	#(EXCEPT (field)*)
-			|	#(USING (field)+)
-			)?
-			TO RECORD_NAME
-			( #(ASSIGN assignment_list ) )?
-			(NOLOBS)?
-			(NOERROR_KW)?
-			state_end 
-		)
-	;
-
-callstate
-	:	#(CALL filenameorvalue (expressionorvalue)* state_end )
-	;
-
-casesens_or_not
-	:	#(Not_casesens NOT CASESENSITIVE )
-	|	CASESENSITIVE
-	;
-
-casestate
-	:	#(	CASE expression block_colon
-			#(	Code_block
-				(	#(WHEN case_expression THEN blockorstate )
-				)*
-			)
-			( #(OTHERWISE blockorstate ) )?
-			(EOF | #(END (CASE)? ) state_end)
-		)
-	;
-case_expression
-	:	(#(OR .))=> #(OR case_expression case_expression )
-	|	#(WHEN expression)
-	|	expression
-	;
-
-choosestate
-	:	#(	CHOOSE (ROW|FIELD)
-			( #(Form_item field (#(HELP constant))? ) )+
-			(	AUTORETURN 
-			|	#(COLOR anyorvalue) 
-			|	goonphrase
-			|	#(KEYS field )
-			|	NOERROR_KW 
-			|	#(PAUSE expression)
-			)*
-			(framephrase)?
-			state_end
-		)
-	;
-
-classstate
-	:	#(	CLASS TYPE_NAME
-			( #(INHERITS TYPE_NAME) )?
-			( #(IMPLEMENTS TYPE_NAME (COMMA TYPE_NAME)* ) )?
-			( FINAL )?
-			block_colon
-			code_block
-			#(END (CLASS)? )
-			state_end
-		)
-	;
-
-clearstate
-	:	#(CLEAR (#(FRAME ID))? (ALL)? (NOPAUSE)? state_end )
-	;
-
-closequerystate
-	:	#(CLOSE QUERY ID state_end )
-	;
-
-closestoredprocedurestate
-	:	#(	CLOSE
-			STOREDPROCEDURE ID
-			( #(EQUAL field PROCSTATUS ) )?
-			( #(WHERE PROCHANDLE EQ field ) )?
-			state_end
-		)
-	;
-
-collatephrase
-	:	#(COLLATE funargs (DESCENDING)? )
-	;
-
-color_expr
-	:	#(BGCOLOR expression )
-	|	#(DCOLOR expression )
-	|	#(FGCOLOR expression )
-	|	#(PFCOLOR expression )
-	;
-
-colorspecification
-	:	(options{greedy=true;}:color_expr)+
-	|	#(	COLOR (DISPLAY)? anyorvalue
-			( #(PROMPT anyorvalue) )?
-		)
-	;
-
-colorstate
-	:	#(	COLOR
-			(	( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )
-				( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )?
-			)?
-			(#(Form_item field (formatphrase)? ))*
-			(framephrase)? state_end
-		)
-	;
-
-columnformat
-	:	#(	Format_phrase
-			(	#(FORMAT expression)
-			|	label_constant
-			|	NOLABELS
-			|	#(COLUMNFONT expression )
-			|	#(COLUMNDCOLOR expression )
-			|	#(COLUMNBGCOLOR expression )
-			|	#(COLUMNFGCOLOR expression )
-			|	#(COLUMNPFCOLOR expression )
-			|	#(LABELFONT expression )
-			|	#(LABELDCOLOR expression )
-			|	#(LABELBGCOLOR expression )
-			|	#(LABELFGCOLOR expression )
-			|	#(LEXAT field (columnformat)? )
-			|	#(WIDTH NUMBER )
-			|	#(WIDTHPIXELS NUMBER )
-			|	#(WIDTHCHARS NUMBER )
-			)+ 
-		)
-	;
-
-comboboxphrase
-	:	#(	COMBOBOX
-			(	#(LISTITEMS constant (COMMA constant)* )
-			|	#(LISTITEMPAIRS constant (COMMA constant)* )
-			|	#(INNERLINES expression )
-			|	SORT
-			|	tooltip_expr
-			|	SIMPLE
-			|	DROPDOWN
-			|	DROPDOWNLIST
-			|	#(MAXCHARS NUMBER )
-			|	#(AUTOCOMPLETION (UNIQUEMATCH)? )
-			|	sizephrase
-			)*
-		)
-	;
-
-compilestate
-	:	#(	COMPILE filenameorvalue
-			(	#(ATTRSPACE (#(EQUAL expression))? )
-			|	NOATTRSPACE
-			|	#(SAVE (#(EQUAL expression))? ( #(INTO filenameorvalue ) )? )
-			|	#(	LISTING filenameorvalue
-					(	compile_append
-					|	#(PAGESIZE_KW expression)
-					|	#(PAGEWIDTH expression)
-					)*
-				)
-			|	#(XCODE expression )
-			|	#(XREF filenameorvalue (compile_append)? )
-			|	#(STRINGXREF filenameorvalue (compile_append)? )
-			|	#(STREAMIO (#(EQUAL expression))? )
-			|	#(MINSIZE (#(EQUAL expression))? )
-			|	#(LANGUAGES LEFTPAREN (compile_lang (COMMA compile_lang)*)? RIGHTPAREN )
-			|	#(TEXTSEGGROW #(EQUAL expression) )
-			|	#(DEBUGLIST filenameorvalue )
-			|	#(DEFAULTNOXLATE (#(EQUAL expression))? )
-			|	#(GENERATEMD5 (#(EQUAL expression))? )
-			|	#(PREPROCESS filenameorvalue )
-			|	#(USEREVVIDEO (#(EQUAL expression))? )
-			|	#(USEUNDERLINE (#(EQUAL expression))? )
-			|	#(V6FRAME (#(EQUAL expression))? )
-			|	NOERROR_KW
-			)*
-			state_end
-		)
-	;
-compile_lang
-	:	valueexpression | TYPELESS_TOKEN (LEXCOLON TYPELESS_TOKEN)*
-	;
-compile_append
-	:	#(APPEND (#(EQUAL expression))? )
-	;
-
-connectstate
-	:	#(CONNECT (NOERROR_KW|DDE|filenameorvalue)* state_end )
-	;
-	
-constructorstate
-	:	#(	CONSTRUCTOR (PUBLIC|PROTECTED) TYPE_NAME function_params
-			block_colon code_block #(END (CONSTRUCTOR)? ) state_end
-		)
-	;
-	
-convertphrase
-	:	#(	CONVERT 
-			( #(SOURCE (BASE64 | CODEPAGE expression (BASE64)?) ) )?
-			( #(TARGET (BASE64 | CODEPAGE expression (BASE64)?) ) )?
-		)
-	;
-	
-copylobstate
-	:	#(	COPYLOB (FROM)?
-			( FILE expression | (OBJECT)? expression )
-			( #(STARTING AT expression) )?
-			( #(FOR expression) )?
-			TO
-			(	FILE expression (APPEND)?
-			|	(OBJECT)? expression (OVERLAY AT expression (TRIM)?)?
-			)
-			( NOCONVERT | convertphrase )?
-			( NOERROR_KW )?
-		)
-	;
-
-createstate
-	:	#(CREATE RECORD_NAME (#(USING (ROWID|RECID) expression))? (NOERROR_KW)? state_end )
-	;
-
-create_whatever_args
-	:	field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)?
-	;
-
-createaliasstate
-	:	#(CREATE ALIAS anyorvalue FOR DATABASE anyorvalue (NOERROR_KW)? state_end )
-	;
-
-createautomationobjectstate
-	:	#(CREATE QSTRING field (#(CONNECT (#(TO expression))?))? (NOERROR_KW)? state_end )
-	;
-
-createbrowsestate
-	:	#(CREATE BROWSE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end )
-	;
-
-createbufferstate
-	:	#(	CREATE BUFFER field FOR TABLE expression
-			( #(BUFFERNAME expression) )?
-			(#(IN_KW WIDGETPOOL expression))?
-			(NOERROR_KW)? state_end
-		)
-	;
-
-createcallstate
-	:	#(CREATE CALL create_whatever_args state_end )
-	;
-
-createclientprincipalstate
-	:	#(CREATE CLIENTPRINCIPAL create_whatever_args state_end )
-	;
-
-createdatabasestate
-	:	#(	CREATE DATABASE expression 
-			( #(FROM expression (NEWINSTANCE)? ) )?
-			(REPLACE)? (NOERROR_KW)? state_end
-		)
-	;
-
-createdatasetstate
-	:	#(CREATE DATASET create_whatever_args state_end )
-	;
-
-createdatasourcestate
-	:	#(CREATE DATASOURCE create_whatever_args state_end )
-	;
-
-createquerystate
-	:	#(CREATE QUERY create_whatever_args state_end )
-	;
-
-createsaxreaderstate
-	:	#(CREATE SAXREADER create_whatever_args state_end )
-	;
-
-createsaxwriterstate
-	:	#(CREATE SAXWRITER create_whatever_args state_end )
-	;
-
-createserverstate
-	:	#(CREATE SERVER field (assign_opt)? state_end )
-	;
-
-createserversocketstate
-	:	#(CREATE SERVERSOCKET field (NOERROR_KW)? state_end )
-	;
-
-createsoapheaderstate
-	:	#(CREATE SOAPHEADER create_whatever_args state_end )
-	;
-
-createsoapheaderentryrefstate
-	:	#(CREATE SOAPHEADERENTRYREF create_whatever_args state_end )
-	;
-
-createsocketstate
-	:	#(CREATE SOCKET field (NOERROR_KW)? state_end )
-	;
-
-createtemptablestate
-	:	#(CREATE TEMPTABLE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? state_end )
-	;
-
-createwidgetstate
-	:	#(	CREATE
-			(	valueexpression
-			|	BUTTON | COMBOBOX | CONTROLFRAME | DIALOGBOX | EDITOR | FILLIN | FRAME | IMAGE
-			|	MENU | MENUITEM | RADIOSET | RECTANGLE | SELECTIONLIST | SLIDER
-			|	SUBMENU | TEXT | TOGGLEBOX | WINDOW
-			)
-			field
-			(#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end
-		)
-	;
-
-createwidgetpoolstate
-	:	#(CREATE WIDGETPOOL (expression)? (PERSISTENT)? (NOERROR_KW)? state_end )
-	;
-
-createxdocumentstate
-	:	#(CREATE XDOCUMENT create_whatever_args state_end )
-	;
-
-createxnoderefstate
-	:	#(CREATE XNODEREF create_whatever_args state_end )
-	;
-
-currentvaluefunc
-	:	#(CURRENTVALUE LEFTPAREN ID (COMMA ID)? RIGHTPAREN )
-	;
-
-datatype_com
-	:	SHORT | FLOAT | CURRENCY | UNSIGNEDBYTE | ERRORCODE | IUNKNOWN
-	;
-
-datatype_dll
-	:	CHARACTER | datatype_dll_native  
-	;
-
-datatype_dll_native
-	:	BYTE | DOUBLE | FLOAT | LONG | SHORT | UNSIGNEDSHORT
-	;
-
-datatype_field
-	:	BLOB | CLOB | datatype_var
-	;
-
-datatype_param
-	:	datatype_dll_native | datatype_var
-	;
-
-datatype_var
-	:	CHARACTER | COMHANDLE | DATE | DATETIME | DATETIMETZ
-		| DECIMAL | HANDLE | INTEGER | LOGICAL | LONGCHAR | MEMPTR
-		| RAW | RECID | ROWID | TYPE_NAME | WIDGETHANDLE
-	;
-
-ddeadvisestate
-	:	#(DDE ADVISE expression (START|STOP) ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeexecutestate
-	:	#(DDE EXECUTE expression COMMAND expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddegetstate
-	:	#(DDE GET expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeinitiatestate
-	:	#(DDE INITIATE field FRAME expression APPLICATION expression TOPIC expression (NOERROR_KW)? state_end )
-	;
-
-dderequeststate
-	:	#(DDE REQUEST expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddesendstate
-	:	#(DDE SEND expression SOURCE expression ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
-	;
-
-ddeterminatestate
-	:	#(DDE TERMINATE expression (NOERROR_KW)? state_end )
-	;
-
-def_shared
-	:	SHARED
-	|	#(NEW (GLOBAL)? SHARED )
-	;
-
-def_visib
-	:	( PRIVATE | PROTECTED | PUBLIC )
-	;
-
-definebrowsestate
-	:	#(	DEFINE (def_shared)? (def_visib)? BROWSE ID
-			(#(QUERY ID))? (lockhow|NOWAIT)*
-			(	#(	DISPLAY
-					(	#(	Form_item
-							(	(RECORD_NAME)=> RECORD_NAME
-							|	expression (columnformat)?
-							|	spacephrase
-							)
-						)
-					)*
-					(#(EXCEPT (field)*))?
-				)
-				(	#(	ENABLE
-						(	#(ALL (#(EXCEPT (field)*))?)
-						|	(	#(	Form_item field
-									(	#(HELP constant)
-									|	#(VALIDATE funargs)
-									|	AUTORETURN
-									|	DISABLEAUTOZAP
-									)*
-								)
-							)*
-						)
-					)
-				)?
-			)?
-			(display_with)*
-			(tooltip_expr)?
-			(#(CONTEXTHELPID expression))?
-			state_end
-		)
-	;
-
-definebufferstate
-	:	#(	DEFINE (def_shared)? (def_visib)? BUFFER ID
-			FOR (TEMPTABLE)? RECORD_NAME (PRESELECT)? (label_constant)? (namespace_uri)? (namespace_prefix)?
-			(#(FIELDS (field)* ))? state_end
-		)
-	;
-
-definebuttonstate
-	:	#(	DEFINE (def_shared)? (def_visib)? BUTTON ID
-			(	AUTOGO
-			|	AUTOENDKEY
-			|	DEFAULT
-			|	color_expr
-			|	#(CONTEXTHELPID expression)
-			|	DROPTARGET
-			|	#(FONT expression)
-			|	#(IMAGEDOWN (imagephrase_opt)+ )
-			|	#(IMAGE (imagephrase_opt)+ )
-			|	#(IMAGEUP (imagephrase_opt)+ )
-			|	#(IMAGEINSENSITIVE (imagephrase_opt)+ )
-			|	#(MOUSEPOINTER expression )
-			|	label_constant
-			|	#(LIKE field (VALIDATE)?)
-			|	FLATBUTTON
-			|	#(NOFOCUS (FLATBUTTON)? )
-			|	NOCONVERT3DCOLORS
-			|	tooltip_expr
-			|	sizephrase (MARGINEXTRA)?
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definedatasetstate
-	:	#(	DEFINE (def_shared)? (def_visib)? DATASET ID (namespace_uri)? (namespace_prefix)? (REFERENCEONLY)?
-			FOR RECORD_NAME (COMMA RECORD_NAME)*
-			( data_relation ( (COMMA)? data_relation)* )?
-			state_end
-		)
-	;
-data_relation
-	:	#(	DATARELATION (ID)?
-			FOR RECORD_NAME COMMA RECORD_NAME (field_mapping_phrase)? (REPOSITION)?
-		)
-	;
-field_mapping_phrase
-	:	#(RELATIONFIELDS LEFTPAREN field COMMA field ( COMMA field COMMA field )* RIGHTPAREN )
-	;
-
-definedatasourcestate
-	:	#(	DEFINE (def_shared)? (def_visib)? DATASOURCE ID
-			FOR (#(QUERY ID))?
-			(source_buffer_phrase)? (COMMA source_buffer_phrase)*
-			state_end
-		)
-	;
-source_buffer_phrase
-	:	#(RECORD_NAME ( KEYS LEFTPAREN ( ROWID | field (COMMA field)* ) RIGHTPAREN )? )
-	;
-
-defineframestate
-	:	#(	DEFINE (def_shared)? (def_visib)? FRAME ID
-			(form_item)*
-			(	#(HEADER (display_item)+ )
-			|	#(BACKGROUND (display_item)+ )
-			)?
-			(#(EXCEPT (field)*))?  (framephrase)?  state_end
-		)
-	;
-
-defineimagestate
-	:	#(	DEFINE (def_shared)? (def_visib)? IMAGE ID
-			(	#(LIKE field (VALIDATE)?)
-			|	imagephrase_opt 
-			|	sizephrase
-			|	color_expr
-			|	CONVERT3DCOLORS
-			|	tooltip_expr
-			|	#(STRETCHTOFIT (RETAINSHAPE)? )
-			|	TRANSPARENT
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definemenustate
-	:	#(	DEFINE (def_shared)? (def_visib)? MENU ID
-			(menu_opt)* (menu_list_item)* state_end
-		)
-	;
-menu_opt
-	:	color_expr
-	|	#(FONT expression)
-	|	#(LIKE field (VALIDATE)?)
-	|	#(TITLE expression)
-	|	MENUBAR
-	|	PINNABLE
-	|	SUBMENUHELP
-	;
-menu_list_item
-	:	(	#(	MENUITEM ID
-				(	#(ACCELERATOR expression )
-				|	color_expr
-				|	DISABLED
-				|	#(FONT expression)
-				|	label_constant
-				|	READONLY
-				|	TOGGLEBOX
-				)*
-				(triggerphrase)? 
-			)
-		|	#(SUBMENU ID (DISABLED | label_constant | #(FONT expression) | color_expr)* )
-		|	#(RULE (#(FONT expression) | color_expr)* )
-		|	SKIP
-		)
-		// You can have PERIOD between menu items.
-		((PERIOD (RULE|SKIP|SUBMENU|MENUITEM))=> PERIOD)?
-	;
-
-defineparameterstate
-	:	#(	DEFINE (def_shared)? (def_visib)?
-			(	PARAMETER BUFFER ID FOR RECORD_NAME (PRESELECT)? (label_constant)? (#(FIELDS (field)* ))?
-			|	(INPUT|OUTPUT|INPUTOUTPUT|RETURN) PARAMETER
-				(	TABLE FOR RECORD_NAME (APPEND|BIND)*
-				|	TABLEHANDLE (FOR)? ID (APPEND|BIND)*
-				|	DATASET FOR ID (APPEND|BYVALUE|BIND)*
-				|	DATASETHANDLE ID (APPEND|BYVALUE|BIND)*
-				|	ID defineparam_var (triggerphrase)?
-				)
-			)
-			state_end
-		)
-	;
-defineparam_var
-	:	(	#(	AS
-				(	(HANDLE (TO)? datatype_dll)=> HANDLE (TO)? datatype_dll
-				|	CLASS TYPE_NAME
-				|	datatype_param
-				)
-			)
-		)?
-		(	options{greedy=true;}
-		:	casesens_or_not | #(FORMAT expression) | #(DECIMALS expression ) | #(LIKE field (VALIDATE)?)
-		|	initial_constant | label_constant | NOUNDO | extentphrase
-		)*
-	;
-
-definequerystate
-	:	#(	DEFINE (def_shared)? (def_visib)? QUERY ID
-			FOR RECORD_NAME (record_fields)?
-			(COMMA RECORD_NAME (record_fields)?)*
-			( #(CACHE expression) | SCROLLING | RCODEINFORMATION)*
-			state_end
-		)
-	;
-
-definerectanglestate
-	:	#(	DEFINE (def_shared)? (def_visib)? RECTANGLE ID
-			(	NOFILL
-			|	#(EDGECHARS expression )
-			|	#(EDGEPIXELS expression )
-			|	color_expr
-			|	GRAPHICEDGE
-			|	#(LIKE field (VALIDATE)?)
-			|	sizephrase
-			|	tooltip_expr
-			)*
-			(triggerphrase)?
-			state_end
-		)
-	;
-
-definestreamstate
-	:	#(	DEFINE (def_shared)? (def_visib)? STREAM ID state_end )
-	;
-
-definesubmenustate
-	:	#(	DEFINE (def_shared)? (def_visib)? SUBMENU ID
-			(menu_opt)* (menu_list_item)* state_end
-		)
-	;
-   
-definetemptablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? TEMPTABLE ID
-			(UNDO|NOUNDO)?
-			(namespace_uri)? (namespace_prefix)?
-			(REFERENCEONLY)?
-			(def_table_like)?
-			(label_constant)?
-			(#(BEFORETABLE ID))?
-			(RCODEINFORMATION)?
-			(def_table_field)*
-			(	#(	INDEX ID ( (AS|IS)? (UNIQUE|PRIMARY|WORDINDEX) )*
-					( ID (ASCENDING|DESCENDING|CASESENSITIVE)* )+
-				)
-			)*
-			state_end
-		)
-	;
-def_table_like
-	:	#(	LIKE RECORD_NAME (VALIDATE)?
-			( #(USEINDEX ID ((AS|IS) PRIMARY)? ) )*
-		)
-	;
-def_table_field
-	:	#(FIELD ID (fieldoption)* )
-	;
-   
-defineworktablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? WORKTABLE ID
-			(NOUNDO)? (def_table_like)? (label_constant)? (def_table_field)* state_end
-		)
-	;
-
-definevariablestate
-	:	#(	DEFINE (def_shared)? (def_visib)? VARIABLE ID
-			(fieldoption)* (triggerphrase)? state_end
-		)
-	;
-
-deletestate
-	:	#(DELETE_KW RECORD_NAME (#(VALIDATE funargs))? (NOERROR_KW)? state_end )
-	;
-
-deletealiasstate
-	:	#(DELETE_KW ALIAS (ID|QSTRING|valueexpression) state_end )
-	;
-
-deleteobjectstate
-	:	#(DELETE_KW OBJECT expression (NOERROR_KW)? state_end )
-	;
-
-deleteprocedurestate
-	:	#(DELETE_KW PROCEDURE expression (NOERROR_KW)? state_end )
-	;
-
-deletewidgetstate
-	:	#(DELETE_KW WIDGET (gwidget)* state_end )
-	;
-
-deletewidgetpoolstate
-	:	#(DELETE_KW WIDGETPOOL (expression)? (NOERROR_KW)? state_end )
-	;
-	
-destructorstate
-	:	#(	DESTRUCTOR PUBLIC TYPE_NAME LEFTPAREN RIGHTPAREN block_colon
-			code_block #(END (DESTRUCTOR)? ) state_end
-		)
-	;
-	
-dictionarystate
-	:	#(DICTIONARY state_end )
-	;
-
-disablestate
-	:	#(DISABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (framephrase)? state_end )
-	;
-
-disabletriggersstate
-	:	#(DISABLE TRIGGERS FOR (DUMP|LOAD) OF RECORD_NAME (ALLOWREPLICATION)? state_end )
-	;
-
-disconnectstate
-	:	#(DISCONNECT filenameorvalue (NOERROR_KW)? state_end )
-	;
-
-displaystate
-	:	#(	DISPLAY (stream_name)? (UNLESSHIDDEN)? (display_item)*
-			(#(EXCEPT (field)*))? (#(IN_KW WINDOW expression))?
-			(display_with)*
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-display_item
-	:	#(	Form_item
-			(	skipphrase
-			|	spacephrase
-			|	(expression|ID) (aggregatephrase|formatphrase)*
-			)
-		)
-	;
-display_with
-	:	(#(WITH BROWSE ID))=> #(WITH BROWSE ID )
-	|	framephrase
-	;
-
-dostate
-	:	#(DO (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
-	;
-
-downstate
-	:	#(DOWN ((stream_name (expression)?) | (expression (stream_name)?))? (framephrase)? state_end )
-	;
-
-// drop - see SQL grammar
-
-dynamiccurrentvaluefunc
-	:	#(DYNAMICCURRENTVALUE funargs)
-	;
-
-editorphrase
-	:	#(	EDITOR
-			(	#(INNERCHARS expression )
-			|	#(INNERLINES expression )
-			|	#(BUFFERCHARS expression )
-			|	#(BUFFERLINES expression )
-			|	LARGE
-			|	#(MAXCHARS expression )
-			|	NOBOX
-			|	NOWORDWRAP
-			|	SCROLLBARHORIZONTAL
-			|	SCROLLBARVERTICAL
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-emptytemptablestate
-	:	#(EMPTY TEMPTABLE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-enablestate
-	:	#(ENABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (#(IN_KW WINDOW expression))? (framephrase)? state_end )
-	;
-
-editingphrase
-	:	#(Editing_phrase (ID LEXCOLON)? EDITING block_colon (blockorstate)* END )
-	;
-
-entryfunc
-	:	#(ENTRY funargs )
-	;
-
-exportstate
-	:	#(EXPORT (stream_name)? (#(DELIMITER constant))? (display_item)* (#(EXCEPT (field)*))? (NOLOBS)? state_end )
-	;
-
-extentphrase
-	:	#(EXTENT (expression)? )
-	;
-
-fieldoption
-	:	#(	AS
-			(	CLASS TYPE_NAME
-			|	datatype_field
-			)
-		)
-	|	casesens_or_not
-	|	color_expr
-	|	#(COLUMNCODEPAGE expression )
-	|	#(CONTEXTHELPID expression)
-	|	#(DECIMALS expression )
-	|	DROPTARGET
-	|	extentphrase
-	|	#(FONT expression)
-	|	#(FORMAT expression)
-	|	#(HELP constant)
-	|	initial_constant
-	|	label_constant
-	|	#(LIKE field (VALIDATE)? )
-	|	#(MOUSEPOINTER expression )
-	|	NOUNDO
-	|	viewasphrase
-	|	TTCODEPAGE
-	|	xml_data_type
-	|	xml_node_type
-	;
-
-fillinphrase
-	:	#(FILLIN (NATIVE | sizephrase | tooltip_expr)* )
-	;
-
-findstate
-	:	#(FIND (findwhich)? recordphrase (NOWAIT|NOPREFETCH|NOERROR_KW)* state_end )
-	;
-
-forstate
-	:	#(FOR for_record_spec (block_opt)* block_colon code_block block_end )
-	;
-for_record_spec
-	:	(findwhich)? recordphrase (COMMA (findwhich)? recordphrase)*
-	;
-
-form_item
-	:	#(	Form_item
-			(	RECORD_NAME
-			|	#(TEXT LEFTPAREN (form_item)* RIGHTPAREN )
-			|	constant (formatphrase)?
-			|	spacephrase
-			|	skipphrase
-			|	widget_id
-			|	CARET
-			|	field (aggregatephrase|formatphrase)*
-			|	assign_equal
-			)
-		)
-	;
-
-formstate
-	:	#(	FORMAT
-			(form_item)*
-			(	#(HEADER (display_item)+ )
-			|	#(BACKGROUND (display_item)+ )
-			)?
-			( #(EXCEPT (field)*) )?
-			(framephrase)?
-			state_end
-		)
-	;
-
-formatphrase
-	:	#(	Format_phrase
-			(	#(AS datatype_var )
-			|	atphrase
-			|	ATTRSPACE
-			|	NOATTRSPACE
-			|	AUTORETURN
-			|	color_expr
-			|	#(CONTEXTHELPID expression)
-			|	BLANK 
-			|	#(COLON expression )
-			|	#(TO expression)
-			|	DEBLANK 
-			|	DISABLEAUTOZAP 
-			|	#(FONT expression ) 
-			|	#(FORMAT expression)
-			|	#(HELP constant)
-			|	label_constant
-			|	#(LEXAT field (formatphrase)? )
-			|	#(LIKE field )
-			|	NOLABELS
-			|	NOTABSTOP 
-			|	#(VALIDATE funargs)
-			|	#(WHEN expression)
-			|	viewasphrase
-			|	widget_id
-			)+
-		)
-	;
-
-framephrase
-	:	#(	WITH
-			(	#(ACCUMULATE (expression)? )
-			|	ATTRSPACE | NOATTRSPACE
-			|	#(CANCELBUTTON field )
-			|	CENTERED 
-			|	#(COLUMN expression )
-			|	CONTEXTHELP | CONTEXTHELPFILE expression
-			|	#(DEFAULTBUTTON field )
-			|	EXPORT
-			|	FITLASTCOLUMN
-			|	#(FONT expression )
-			|	FONTBASEDLAYOUT
-			|	#(FRAME ID)
-			|	#(LABELFONT expression )
-			|	#(LABELDCOLOR expression )
-			|	#(LABELFGCOLOR expression )
-			|	#(LABELBGCOLOR expression )
-			|	MULTIPLE | SINGLE | SEPARATORS | NOSEPARATORS | NOASSIGN| NOROWMARKERS
-			|	NOSCROLLBARVERTICAL | SCROLLBARVERTICAL
-			|	#(ROWHEIGHTCHARS expression )
-			|	#(ROWHEIGHTPIXELS expression )
-			|	EXPANDABLE | DROPTARGET | NOAUTOVALIDATE | NOCOLUMNSCROLLING
-			|	KEEPTABORDER | NOBOX | NOEMPTYSPACE | NOHIDE | NOLABELS | USEDICTEXPS | NOVALIDATE 
-			|	NOHELP | NOUNDERLINE | OVERLAY | PAGEBOTTOM | PAGETOP | NOTABSTOP
-			|	#(RETAIN expression  )
-			|	#(ROW expression )
-			|	SCREENIO | STREAMIO
-			|	#(SCROLL expression )
-			|	SCROLLABLE | SIDELABELS 
-			|	stream_name | THREED
-			|	tooltip_expr
-			|	TOPONLY | USETEXT
-			|	V6FRAME | USEREVVIDEO | USEUNDERLINE
-			|	#(	VIEWAS
-					(	#(DIALOGBOX (DIALOGHELP (expression)?)? )
-					|	MESSAGELINE
-					|	STATUSBAR
-					|	#(TOOLBAR (ATTACHMENT (TOP|BOTTOM|LEFT|RIGHT))? )
-					)
-				)
-			|	#(WIDTH expression )
-			|	#(IN_KW WINDOW expression)
-			|	colorspecification | atphrase | sizephrase | titlephrase 
-			|	#(With_columns expression COLUMNS )
-			|	#(With_down expression DOWN )
-			|	DOWN
-			|	widget_id
-			|	WITH
-			)*
-		)
-	;
-
-functionstate
-	:	#(	FUNCTION ID
-			(RETURNS|RETURN)?
-			( CLASS TYPE_NAME | datatype_var ) 
-			(PRIVATE)?
-			( function_params )?
-			(	FORWARDS (LEXCOLON|PERIOD|EOF)
-			|	(IN_KW SUPER)=> IN_KW SUPER (LEXCOLON|PERIOD|EOF)
-			|	(MAP (TO)? ID)? IN_KW expression (LEXCOLON|PERIOD|EOF)
-			|	block_colon
-				code_block
-				(	EOF
-				|	#(END (FUNCTION)? ) state_end
-				)
-			)
-		)
-	;
-function_params
-	:	#(Parameter_list LEFTPAREN (function_param)? (COMMA function_param)* RIGHTPAREN )
-	;
-function_param
-	:	#(BUFFER (ID)? FOR RECORD_NAME (PRESELECT)? )
-	|	#(INPUT function_param_arg )
-	|	#(OUTPUT function_param_arg )
-	|	#(INPUTOUTPUT function_param_arg )
-	;
-function_param_arg
-	:	TABLE (FOR)? RECORD_NAME (APPEND)? (BIND)?
-	|	TABLEHANDLE (FOR)? ID (APPEND)? (BIND)?
-	|	(DATASET|DATASETHANDLE) ID (APPEND)? (BIND)?
-	|	(ID AS)? (CLASS TYPE_NAME | datatype_var) (extentphrase)?
-	;
-
-getstate
-	:	#(GET findwhich ID (lockhow|NOWAIT)* state_end )
-	;
-
-getkeyvaluestate
-	:	#(GETKEYVALUE SECTION expression KEY (DEFAULT|expression) VALUE field state_end )
-	;
-
-goonphrase
-	:	#(GOON LEFTPAREN goon_elem ((options{greedy=true;}:COMMA)? goon_elem)* RIGHTPAREN )
-	;
-goon_elem
-	:	~(RIGHTPAREN) ( (OF)=> OF gwidget)?
-	;
-
-hidestate
-	:	#(HIDE (stream_name)? (MESSAGE|ALL|(gwidget)*) (NOPAUSE)? (#(IN_KW WINDOW expression))? state_end )
-	;
-
-ifstate
-	:	#(	IF expression THEN (blockorstate)?
-			( #(ELSE (blockorstate)? ) )?
-		)
-	;
-
-imagephrase_opt
-	:	#(FILE expression )
-	|	#(IMAGESIZE expression BY expression )
-	|	#(IMAGESIZECHARS expression BY expression )
-	|	#(IMAGESIZEPIXELS expression BY expression )
-	|	#(	FROM
-			( X expression | Y expression | ROW expression | COLUMN expression )
-			( X expression | Y expression | ROW expression | COLUMN expression )
-		)
-	;
-
-importstate
-	:	#(	IMPORT (stream_name)?
-			( #(DELIMITER constant) | UNFORMATTED )?
-			(	RECORD_NAME (#(EXCEPT (field)*))?
-			|	(field|CARET)+
-			)?
-			(NOLOBS)? (NOERROR_KW)? state_end
-		)
-	;
-
-initial_constant
-	:	#(	INITIAL
-			(	LEFTBRACE (TODAY|constant) (COMMA (TODAY|constant))* RIGHTBRACE
-			|	(TODAY|constant)
-			)
-		)
-	;
-
-inputclearstate
-	:	#(INPUT CLEAR state_end )
-	;
-
-inputclosestate
-	:	#(INPUT (stream_name)? CLOSE state_end )
-	;
-
-inputfromstate
-	:	#(INPUT (stream_name)? FROM io_phrase state_end )
-	;
-   
-inputthroughstate
-	:	#(INPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-inputoutputclosestate
-	:	#(INPUTOUTPUT (stream_name)? CLOSE state_end )
-	;
-
-inputoutputthroughstate
-	:	#(INPUTOUTPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-insertstate
-	:	#(INSERT RECORD_NAME (#(EXCEPT (field)*))? (#(USING (ROWID|RECID) expression))? (framephrase)? (NOERROR_KW)? state_end )
-	;
-	
-interfacestate
-	:	#(INTERFACE TYPE_NAME block_colon code_block #(END (INTERFACE)?) state_end )
-	;
-	
-io_phrase
-	:	(	#(OSDIR LEFTPAREN expression RIGHTPAREN (NOATTRLIST)? )
-		|	#(PRINTER  (.)? )
-		|	TERMINAL
-		|	(valueexpression | FILENAME) *
-		)
-		(	APPEND
-		|	BINARY
-		|	COLLATE
-		|	#(CONVERT ((SOURCE|TARGET) expression)* )
-		|	#(LOBDIR filenameorvalue )
-		|	NOCONVERT
-		|	ECHO | NOECHO
-		|	KEEPMESSAGES 
-		|	LANDSCAPE
-		|	#(MAP anyorvalue )
-		|	NOMAP
-		|	#(NUMCOPIES anyorvalue )
-		|	PAGED
-		|	#(PAGESIZE_KW anyorvalue )
-		|	PORTRAIT
-		|	UNBUFFERED 
-		)*
-	;
-
-label_constant
-	:	#(COLUMNLABEL constant (COMMA constant)* )
-	|	#(LABEL constant (COMMA constant)* )
-	;
-
-ldbnamefunc
-	:	#(LDBNAME LEFTPAREN (#(BUFFER RECORD_NAME) | expression) RIGHTPAREN )
-	;
-
-leavestate
-	:	#(LEAVE (BLOCK_LABEL)? state_end )
-	;
-
-lengthfunc
-	:	#(LENGTH funargs )
-	;
-
-loadstate
-	:	#(	LOAD expression
-			(	#(DIR expression )
-			|	APPLICATION
-			|	DYNAMIC
-			|	NEW
-			|	#(BASEKEY expression )
-			|	NOERROR_KW
-			)*
-			state_end
-		)
-	;
-
-loadpicturefunc 
-	:	#(LOADPICTURE (funargs)? )
-	;
-
-messagestate
-	:	#(	MESSAGE
-			( #(COLOR anyorvalue) )?
-			( #(Form_item (skipphrase | expression) ) )*
-			(	#(	VIEWAS ALERTBOX
-					(MESSAGE|QUESTION|INFORMATION|ERROR|WARNING)?
-					(BUTTONS (YESNO|YESNOCANCEL|OK|OKCANCEL|RETRYCANCEL) )?
-					(#(TITLE expression))?
-				)
-			|	#(SET field (formatphrase)? )
-			|	#(UPDATE field (formatphrase)? )
-			)*
-			( #(IN_KW WINDOW expression) )?
-			state_end
-		)
-	;
-
-methodstate
-	:	#(	METHOD (PRIVATE|PROTECTED|PUBLIC|OVERRIDE|FINAL)*
-			(	VOID
-			|	CLASS TYPE_NAME
-			|	datatype_var
-			)
-			ID
-			function_params
-			(	// Ambiguous on PERIOD, since a block_colon may be a period, and we may also
-				// be at the end of the method declaration for an INTERFACE.
-				// We predicate on the next node being Code_block.
-				// (Upper/lowercase matters. Node: Code_block. Rule/branch: code_block.)
-				(block_colon Code_block)=> block_colon code_block #(END (METHOD)? ) state_end
-			|	state_end
-			)
-		)
-	;
-
-namespace_prefix
-	:	#(NAMESPACEPREFIX constant )
-	;
-namespace_uri
-	:	#(NAMESPACEURI constant )
-	;
-
-nextstate
-	:	#(NEXT (BLOCK_LABEL)? state_end )
-	;
-
-nextpromptstate
-	:	#(NEXTPROMPT field (framephrase)? state_end )
-	;
-
-nextvaluefunc
-	:	#(NEXTVALUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN )
-	;
-
-onstate
-	:	#(	ON
-			(	(ASSIGN|CREATE|DELETE_KW|FIND|WRITE)=>
-				(	(CREATE|DELETE_KW|FIND) OF RECORD_NAME (label_constant)?
-				|	WRITE OF RECORD_NAME (label_constant)?
-					((NEW (BUFFER)? ID) (label_constant)?)?
-					((OLD (BUFFER)? ID) (label_constant)?)? 
-				|	ASSIGN OF field
-					(#(TABLE LABEL constant))?
-					(OLD (VALUE)? ID (options{greedy=true;}:defineparam_var)?)?
-		 		)
-				(OVERRIDE)?
-				(	REVERT state_end
-				|	PERSISTENT runstate
-				|	blockorstate
-				)
-			|	// ON keylabel keyfunction.
-				(. . state_end)=> . . state_end
-			|	eventlist
-				(	ANYWHERE
-				|	OF widgetlist
-					(OR eventlist OF widgetlist)*
-					(ANYWHERE)?
-				)
-				(	REVERT state_end
-				|	PERSISTENT RUN filenameorvalue
-					( #(IN_KW expression) )?
-					(	#(	Parameter_list
-							LEFTPAREN (INPUT)? expression
-							(COMMA (INPUT)? expression)*
-							RIGHTPAREN
-						)
-					)?
-					state_end
-				|	blockorstate
-				)
-			)
-		)
-	;
-
-on___phrase
-	:	#(	ON (ENDKEY|ERROR|STOP|QUIT)
-			( #(UNDO (BLOCK_LABEL)? ) )?
-			(	COMMA
-				(	#(LEAVE (BLOCK_LABEL)? )
-				|	#(NEXT (BLOCK_LABEL)? )
-				|	#(RETRY (BLOCK_LABEL)? )
-				|	#(RETURN (return_options)? )
-				)
-			)?
-		)
-	;
-
-openquerystate
-	:	#(	OPEN QUERY ID (FOR|PRESELECT) for_record_spec
-			(	querytuningphrase
-			|	#(BY expression (DESCENDING)? )
-			|	collatephrase
-			|	INDEXEDREPOSITION
-			|	#(MAXROWS expression )
-			)*
-			state_end
-		)
-	;
-
-osappendstate
-	:	#(OSAPPEND anyorvalue anyorvalue state_end )
-	;
-
-oscommandstate
-	:	#(OS400		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(BTOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(DOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(MPE		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(OS2		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(OSCOMMAND	(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(UNIX		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	|	#(VMS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
-	;
-
-oscopystate
-	:	#(OSCOPY anyorvalue anyorvalue state_end )
-	;
-
-oscreatedirstate
-	:	#(OSCREATEDIR (anyorvalue)+ state_end )
-	;
-
-osdeletestate
-	:	#(OSDELETE (valueexpression | ~(VALUE|RECURSIVE|PERIOD) )+ (RECURSIVE)? state_end )
-	;
-
-osrenamestate
-	:	#(OSRENAME anyorvalue anyorvalue state_end )
-	;
-
-outputclosestate
-	:	#(OUTPUT (stream_name)? CLOSE state_end )
-	;
-
-outputthroughstate
-	:	#(OUTPUT (stream_name)? THROUGH io_phrase state_end )
-	;
-
-outputtostate
-	:	#(OUTPUT (stream_name)? TO io_phrase state_end )
-	;
-
-pagestate
-	:	#(PAGE (stream_name)? state_end )
-	;
-
-pausestate
-	:	#(	PAUSE (expression)?
-			(	BEFOREHIDE
-			|	#(MESSAGE constant )
-			|	NOMESSAGE
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-procedurestate
-	:	#(	PROCEDURE ID
-			(	#(	EXTERNAL constant
-					(	CDECL_KW
-					|	PASCAL_KW
-					|	STDCALL_KW
-					|	#(ORDINAL expression )
-					|	PERSISTENT
-					)*
-				)
-			|	PRIVATE
-			|	IN_KW SUPER
-			)?
-			block_colon code_block (EOF | #(END (PROCEDURE)?) state_end)
-		)
-	;
-
-processeventsstate
-	:	#(PROCESS EVENTS state_end )
-	;
-
-promptforstate
-	:	#(	PROMPTFOR (stream_name)? (UNLESSHIDDEN)? (form_item)*
-			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?
-			state_end
-		)
-	;
-
-publishstate
-	:	#(PUBLISH expression (#(FROM expression) )? (parameterlist)? state_end )
-	;
-
-putstate
-	:	#(	PUT	
-			(stream_name)? (CONTROL|UNFORMATTED)?
-			(	( #(NULL_KW (LEFTPAREN)? ) )=> #(NULL_KW (funargs)? )
-			|	skipphrase
-			|	spacephrase
-			|	expression (#(FORMAT expression)|#(AT expression )|#(TO expression))*
-			)*
-			state_end
-		)
-	;
-
-putcursorstate
-	:	#(PUT CURSOR (OFF | (#(ROW expression)|#(COLUMN expression))* ) state_end )
-	;
-
-putscreenstate
-	:	#(	PUT SCREEN
-			( ATTRSPACE | NOATTRSPACE | #(COLOR anyorvalue) | #(COLUMN expression) | #(ROW expression) | expression )*
-			state_end
-		)
-	;
-
-putkeyvaluestate
-	:	#(	PUTKEYVALUE
-			(	SECTION expression KEY (DEFAULT|expression) VALUE expression
-			|	(COLOR|FONT) (expression|ALL)
-			)
-			(NOERROR_KW)? state_end
-		)
-	;
-
-querytuningphrase
-	:	#(	QUERYTUNING LEFTPAREN
-			(	ARRAYMESSAGE | NOARRAYMESSAGE
-			|	BINDWHERE | NOBINDWHERE
-			|	#(CACHESIZE NUMBER (ROW|BYTE)? )
-			|	#(DEBUG (SQL|EXTENDED|CURSOR|DATABIND|PERFORMANCE|VERBOSE|SUMMARY|NUMBER)? )
-			|	NODEBUG
-			|	DEFERLOBFETCH
-			|	#(HINT expression )
-			|	INDEXHINT | NOINDEXHINT
-			|	JOINBYSQLDB | NOJOINBYSQLDB
-			|	LOOKAHEAD | NOLOOKAHEAD
-			|	ORDEREDJOIN
-			|	REVERSEFROM
-			|	SEPARATECONNECTION | NOSEPARATECONNECTION
-			)*
-			RIGHTPAREN
-		)
-	;
-
-quitstate
-	:	#(QUIT state_end )
-	;
-
-radiosetphrase
-	:	#(	RADIOSET
-			(	#(HORIZONTAL (EXPAND)? )
-			|	VERTICAL
-			|	(sizephrase)
-			|	#(RADIOBUTTONS 
-					(QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY)
-					(COMMA (QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY))*
-				)
-			|	tooltip_expr
-			)*
-		)
-	;
-
-rawfunc
-	:	#(RAW funargs )
-	;
-
-rawtransferstate
-	:	#(RAWTRANSFER (BUFFER|FIELD)? (RECORD_NAME|field) TO (BUFFER|FIELD)? (RECORD_NAME|field) (NOERROR_KW)? state_end )
-	;
-
-readkeystate
-	:	#(READKEY (stream_name)? (#(PAUSE expression))? state_end )
-	;
-
-repeatstate
-	:	#(REPEAT (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
-	;
-
-record_fields
-	:	#(FIELDS (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
-	|	#(EXCEPT (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
-	;
-
-recordphrase
-	:	#(	RECORD_NAME (record_fields)? (options{greedy=true;}:TODAY|constant)?
-			(	#(LEFT OUTERJOIN )
-			|	OUTERJOIN
-			|	#(OF RECORD_NAME )
-			|	#(WHERE (expression)? )
-			|	#(USEINDEX ID )
-			|	#(USING field (AND field)* )
-			|	lockhow
-			|	NOWAIT
-			|	NOPREFETCH
-			|	NOERROR_KW
-			)*
-		)
-	;
-
-releasestate
-	:	#(RELEASE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-releaseexternalstate
-	:	#(RELEASE EXTERNAL (PROCEDURE)? expression (NOERROR_KW)? state_end )
-	;
-
-releaseobjectstate
-	:	#(RELEASE OBJECT expression (NOERROR_KW)? state_end )
-	;
-
-repositionstate
-	:	#(	REPOSITION ID
-			(	#(	TO
-					(	ROWID expression (COMMA expression)* 
-					|	RECID expression
-					|	ROW expression
-					)
-				)
-			|	#(ROW expression )
-			|	#(FORWARDS expression )
-			|	#(BACKWARDS expression )
-			)
-			(NOERROR_KW)? state_end
-		)
-	;
-
-returnstate
-	:	#(RETURN (return_options)? state_end )
-	;
-
-return_options
-	:	(	( #(ERROR LEFTPAREN RECORD_NAME RIGHTPAREN) )=> expression
-		|	(ERROR)=> ERROR (expression)?
-		|	NOAPPLY (expression)?
-		|	expression
-		)
-	;
-
-runstate
-	:	#(	RUN filenameorvalue
-			(LEFTANGLE LEFTANGLE filenameorvalue RIGHTANGLE RIGHTANGLE)?
-			(	#(PERSISTENT ( #(SET (field)? ) )? )
-			|	#(SET (field)? )
-			|	#(ON (SERVER)? expression (TRANSACTION (DISTINCT)?)? )
-			|	#(IN_KW expression)
-			|	#(	ASYNCHRONOUS ( #(SET (field)? ) )?
-					( #(EVENTPROCEDURE expression ) )?
-					(#(IN_KW expression))?
-				)
-			)*
-			(parameterlist)?
-			(NOERROR_KW|anyorvalue)*
-			state_end
-		)
-	;
-
-runstoredprocedurestate
-	:	#(RUN STOREDPROCEDURE ID (assign_equal)? (NOERROR_KW)? (parameterlist)? state_end )
-	;
-
-runsuperstate
-	:	#(RUN SUPER (parameterlist)? (NOERROR_KW)? state_end )
-	;
-
-savecachestate
-	:	#(SAVE CACHE (CURRENT|COMPLETE) anyorvalue TO filenameorvalue (NOERROR_KW)? state_end )
-	;
-
-scrollstate
-	:	#(SCROLL (FROMCURRENT)? (UP)? (DOWN)? (framephrase)? state_end )
-	;
-
-seekstate
-	:	#(SEEK (INPUT|OUTPUT|stream_name) TO (expression|END) state_end )
-	;
-
-selectionlistphrase
-	:	#(	SELECTIONLIST
-			(	SINGLE
-			|	MULTIPLE
-			|	NODRAG
-			|	#(LISTITEMS constant (COMMA constant)* )
-			|	#(LISTITEMPAIRS constant (COMMA constant)* )
-			|	SCROLLBARHORIZONTAL
-			|	SCROLLBARVERTICAL
-			|	#(INNERCHARS expression )
-			|	#(INNERLINES expression )
-			|	SORT
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-setstate
-	:	#(	SET
-			(stream_name)? (UNLESSHIDDEN)? (form_item)*
-			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?  (NOERROR_KW)?
-			state_end
-		)
-	;
-
-showstatsstate
-	:	#(SHOWSTATS (CLEAR)? state_end )
-	;
-
-sizephrase
-	:	#(SIZE expression BY expression )
-	|	#(SIZECHARS expression BY expression )
-	|	#(SIZEPIXELS expression BY expression )
-	;
-
-skipphrase
-	:	#(SKIP (funargs)? )
-	;
-
-sliderphrase
-	:	#(	SLIDER
-			(	HORIZONTAL
-			|	#(MAXVALUE expression )
-			|	#(MINVALUE expression )
-			|	VERTICAL
-			|	NOCURRENTVALUE
-			|	LARGETOSMALL
-			|	#(TICMARKS (NONE|TOP|BOTTOM|LEFT|RIGHT|BOTH) (#(FREQUENCY expression))? )
-			|	tooltip_expr
-			|	sizephrase
-			)*
-		)
-	;
-
-spacephrase
-	:	#(SPACE (funargs)? )
-	;
-
-state_end
-	:	PERIOD | EOF
-	;
-
-statusstate
-	:	#(	STATUS
-			(	#(DEFAULT (expression)? )
-			|	#(INPUT (OFF|expression)? )
-			)
-			(#(IN_KW WINDOW expression))?
-		state_end
-		)
-	;
-
-stopstate
-	:	#(STOP state_end )
-	;
-
-stream_name
-	:	#(STREAM ID )
-	;
-
-subscribestate
-	:	#(	SUBSCRIBE ( #(PROCEDURE expression) )? (TO)? expression
-			(ANYWHERE | #(IN_KW expression) )
-			( #(RUNPROCEDURE expression) )?
-			(NOERROR_KW)? state_end
-		)
-	;
-   
-substringfunc
-	:	#(SUBSTRING funargs )
-	;
-
-systemdialogcolorstate
-	:	#(SYSTEMDIALOG COLOR expression ( #(UPDATE field) )? (#(IN_KW WINDOW expression))? state_end )
-	;
-
-systemdialogfontstate
-	:	#(	SYSTEMDIALOG FONT expression
-			(	ANSIONLY
-			|	FIXEDONLY
-			|	#(MAXSIZE expression )
-			|	#(MINSIZE expression )
-			|	#(UPDATE field )
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialoggetdirstate
-	:	#(	SYSTEMDIALOG GETDIR field
-			(	#(INITIALDIR expression)
-			|	RETURNTOSTARTDIR
-			|	#(TITLE expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialoggetfilestate
-	:	#(	SYSTEMDIALOG GETFILE field
-			(	#(	FILTERS expression expression (COMMA expression expression)*
-					( #(INITIALFILTER expression ) )?
-				)
-			|	ASKOVERWRITE
-			|	CREATETESTFILE
-			|	#(DEFAULTEXTENSION expression )
-			|	#(INITIALDIR expression )
-			|	MUSTEXIST
-			|	RETURNTOSTARTDIR
-			|	SAVEAS
-			|	#(TITLE expression)
-			|	USEFILENAME
-			|	#(UPDATE field )
-			|	#(IN_KW WINDOW expression)
-			)*
-			state_end
-		)
-	;
-
-systemdialogprintersetupstate
-	:	#(	SYSTEMDIALOG PRINTERSETUP
-			( #(NUMCOPIES expression) | #(UPDATE field) | LANDSCAPE | PORTRAIT | #(IN_KW WINDOW expression) )*
-			state_end
-		)
-	;
-
-systemhelpstate
-	:	#(	SYSTEMHELP expression
-			( #(WINDOWNAME expression) )?
-			(	#(ALTERNATEKEY expression )
-			|	#(CONTEXT expression )
-			|	CONTENTS 
-			|	#(SETCONTENTS expression )
-			|	FINDER
-			|	#(CONTEXTPOPUP expression )
-			|	#(HELPTOPIC expression )
-			|	#(KEY expression )
-			|	#(PARTIALKEY (expression)? )
-			|	#(MULTIPLEKEY expression TEXT expression )
-			|	#(COMMAND expression )
-			|	#(POSITION (MAXIMIZE | X expression Y expression WIDTH expression HEIGHT expression) )
-			|	FORCEFILE
-			|	HELP
-			|	QUIT
-			)
-			state_end
-		)
-	;
-
-textphrase
-	:	#(TEXT (sizephrase | tooltip_expr)* )
-	;
-
-titlephrase
-	:	#(TITLE (color_expr | #(COLOR anyorvalue) | #(FONT expression) )* expression )
-	;
-
-toggleboxphrase
-	:	#(TOGGLEBOX (sizephrase | tooltip_expr)* )
-	;
-
-tooltip_expr
-	:	#(TOOLTIP (valueexpression | constant) )
-	;
-
-transactionmodeautomaticstate
-	:	#(TRANSACTIONMODE AUTOMATIC (CHAINED)? state_end )
-	;
-
-triggerphrase
-	:	#(	TRIGGERS block_colon
-			#(	Code_block
-				( #(ON eventlist (ANYWHERE)? (PERSISTENT runstate | blockorstate) ) )*
-			)
-			#(END (TRIGGERS)? )
-		)
-	;
-
-triggerprocedurestate
-	:	#(	TRIGGER PROCEDURE FOR
-			(	(CREATE|DELETE_KW|FIND|REPLICATIONCREATE|REPLICATIONDELETE)
-				OF RECORD_NAME (label_constant)?
-			|	(WRITE|REPLICATIONWRITE) OF RECORD_NAME (label_constant)?
-				(NEW (BUFFER)? ID (label_constant)?)?
-				(OLD (BUFFER)? ID (label_constant)?)? 
-			|	ASSIGN
-				(	#(OF field (#(TABLE LABEL constant))? )
-				|	#(NEW (VALUE)? id:ID defineparam_var )
-				)? 
-				(	#(OLD (VALUE)? id2:ID defineparam_var )
-				)?
-			)
-			state_end
-		)
-	;
-
-underlinestate
-	:	#(UNDERLINE (stream_name)? (#(Form_item field (formatphrase)? ))* (framephrase)? state_end )
-	;
-
-undostate
-	:	#(	UNDO (BLOCK_LABEL)?
-			(	COMMA
-				(	#(LEAVE (BLOCK_LABEL)? )
-				|	#(NEXT (BLOCK_LABEL)? )
-				|	#(RETRY (BLOCK_LABEL)? )
-				|	#(RETURN (return_options)? )
-				)
-			)?
-			state_end
-		)
-	;
-
-unloadstate
-	:	#(UNLOAD expression (NOERROR_KW)? state_end )
-	;
-
-unsubscribestate
-	:	#(UNSUBSCRIBE (#(PROCEDURE expression))? (TO)? (expression|ALL) (#(IN_KW expression))? state_end )
-	;
-
-upstate
-	:	#(UP (options{greedy=true;}:stream_name)? (expression)? (stream_name)? (framephrase)? state_end )
-	;
-
-updatestatement
-	:	(#(UPDATE RECORD_NAME SET))=> sqlupdatestate
-	|	updatestate
-	;
-
-updatestate
-	:	#(	UPDATE
-			(UNLESSHIDDEN)?	
-			(form_item)*
-			(goonphrase)?
-			(#(EXCEPT (field)*))?
-			(#(IN_KW WINDOW expression))?
-			(framephrase)?
-			(editingphrase)?
-			(NOERROR_KW)?
-			state_end
-		)
-	;
-
-usestate
-	:	#(USE expression (NOERROR_KW)? state_end )
-	;
-
-validatestate
-	:	#(VALIDATE RECORD_NAME (NOERROR_KW)? state_end )
-	;
-
-viewstate
-	:	#(VIEW (stream_name)? (gwidget)* (#(IN_KW WINDOW expression))? state_end )
-	;
-
-viewasphrase
-	:	#(	VIEWAS
-			(	comboboxphrase
-			|	editorphrase
-			|	fillinphrase
-			|	radiosetphrase
-			|	selectionlistphrase
-			|	sliderphrase
-			|	textphrase
-			|	toggleboxphrase
-			)
-		)
-	;
-
-waitforstate
-	:	#(	WAITFOR
-			eventlist OF widgetlist
-			(#(OR eventlist OF widgetlist))*
-			(#(FOCUS gwidget))?
-			(#(PAUSE expression))?
-			(EXCLUSIVEWEBUSER (expression)?)?
-			state_end
-		)
-	;
-
-widget_id: #(WIDGETID expression ) ;
-
-xml_data_type: #(XMLDATATYPE constant ) ;
-xml_node_type: #(XMLNODETYPE constant ) ;
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// Begin SQL
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-altertablestate
-	:	#(	ALTER TABLE RECORD_NAME
-			(	ADD COLUMN sql_col_def
-			|	DROP COLUMN field
-			|	ALTER COLUMN field
-				(  	#(FORMAT expression)
-				|	label_constant
-     				|	#(DEFAULT expression )
-				| 	casesens_or_not
-   				)*
-			)
-			state_end
-		)
-	;
-
-closestate
-	:	#(CLOSE ID state_end )
-	;
-
-createindexstate
-	:	#(CREATE (UNIQUE)? INDEX ID ON RECORD_NAME #(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ) state_end )
-	;
-
-createtablestate
-	:	#(	CREATE TABLE ID 
-			LEFTPAREN
-			(	sql_col_def
-			|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
-			)
-			(	COMMA
-				(	sql_col_def
-				|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
-				)
-			)*
-			RIGHTPAREN
-			state_end
-		)
-	;
-
-createviewstate
-	:	#(CREATE VIEW ID (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? AS selectstatea state_end )
-	;
-
-declarecursorstate
-	:	#(DECLARE ID CURSOR FOR selectstatea (#(FOR (#(READ (ONLY)?) | UPDATE)))? state_end )
-	;
-
-deletefromstate
-	:	#(	DELETE_KW FROM RECORD_NAME
-			( #(WHERE (sqlexpression | #(CURRENT OF ID))? ) )?
-			state_end
-		)
-	;
-
-dropindexstate
-	:	#(DROP INDEX ID state_end )
-	;
-
-droptablestate
-	:	#(DROP TABLE RECORD_NAME state_end )
-	;
-
-dropviewstate
-	:	#(DROP VIEW ID state_end )
-	;
-
-fetchstate
-	:	#(FETCH ID INTO field (fetch_indicator)? (COMMA field (fetch_indicator)? )* state_end )
-	;
-fetch_indicator
-	:	#(INDICATOR field )
-	|	field
-	;
-
-grantstate
-	: 	#(GRANT (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to (WITH GRANT OPTION)? state_end )
-	;
-grant_rev_opt
-	:	#(ALL (PRIVILEGES)? )
-	|	(	SELECT | INSERT | DELETE_KW
-		|	#(UPDATE (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? )
-		|	COMMA
-		)+
-	;
-grant_rev_to
-	:	#(TO (PUBLIC | FILENAME (COMMA FILENAME)*) )
-	|	#(FROM (PUBLIC | FILENAME (COMMA FILENAME)*) )
-	;
-
-insertintostate
-	:	#(	INSERT INTO RECORD_NAME
-			(#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))?
-			(	#(	VALUES LEFTPAREN sqlexpression (fetch_indicator)?
-					(COMMA sqlexpression (fetch_indicator)?)* RIGHTPAREN
-				)
-			|	selectstatea
-			)
-			state_end
-		)
-	;
-
-openstate
-	: 	#(OPEN ID state_end )
-	;
-
-revokestate
-	: 	#(REVOKE (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to state_end )
-	;
-
-selectstate
-	: 	selectstatea state_end
-	;
-
-selectstatea
-	:	#(	SELECT
-			(ALL | DISTINCT)?
-			(	STAR
-			|	#(	Sql_select_what
-					(	(LEFTPAREN)=> LEFTPAREN sqlexpression (formatphrase)? RIGHTPAREN (formatphrase)?
-					|	sqlexpression (formatphrase)?
-					)
-					(COMMA sqlexpression (formatphrase)?)*
-				)
-			)
-			( #(INTO field (fetch_indicator)? (COMMA field (fetch_indicator)?)* ) )?
-			#(FROM select_from_spec (COMMA select_from_spec)* )
-			( #(GROUP BY expression (COMMA expression)* ) )?
-			( #(HAVING sqlexpression) )?
-			(	#(ORDER BY select_order_expr )
-			|	#(BY select_order_expr )
-			)?
-			// Ick. I had trouble convincing antlr not to check the syntactic predicate
-			// if next token _t was null.
-			(	{_t != null}? ( ( #(WITH CHECK OPTION ) )=>{_t != null}? #(WITH CHECK OPTION ) | )
-			|	// empty alt
-			)
-			(framephrase)?
-			( #(UNION (ALL)? selectstatea) )?
-		)
-	;
-select_from_spec
-	:	select_sqltableref
-		(	#(LEFT (OUTER)? JOIN select_sqltableref ON sqlexpression )
-		|	#(RIGHT (OUTER)? JOIN select_sqltableref ON sqlexpression )
-		|	#(INNER JOIN select_sqltableref ON sqlexpression )
-		|	#(OUTER JOIN select_sqltableref ON sqlexpression )
-		|	#(JOIN select_sqltableref ON sqlexpression )
-		)*
-		( #(WHERE sqlexpression) )?
-	;
-select_sqltableref
-	:	(RECORD_NAME | ID) (ID)?
-	;
-select_order_expr
-	:	sqlscalar (ASC|DESCENDING)? (COMMA sqlscalar (ASC|DESCENDING)?)*
-	;
-
-sqlupdatestate
-	: 	#(	UPDATE RECORD_NAME SET sqlupdate_equal (COMMA sqlupdate_equal)*
-			( #(WHERE (sqlexpression | CURRENT OF ID) ) )?
-			state_end
-		)
-	;
-sqlupdate_equal
-	:	#(EQUAL field sqlexpression (fetch_indicator)? )
-	;
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// sql functions and phrases
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-sqlaggregatefunc
-// also see maximumfunc and minimumfunc
-	:	#(AVG sqlaggregatefunc_arg )
-	|	#(COUNT sqlaggregatefunc_arg )
-	|	#(SUM sqlaggregatefunc_arg )
-	;
-sqlaggregatefunc_arg
-	:	LEFTPAREN
-		(	DISTINCT
-			(	LEFTPAREN field RIGHTPAREN
-			|	field
-			)
-		|	STAR
-		|	(ALL)? sqlscalar
-		)
-		RIGHTPAREN
-	;
-
-sql_col_def
-	:	#(	ID
-			. // datatype
-			(PRECISION)?
-			(LEFTPAREN NUMBER (COMMA NUMBER)? RIGHTPAREN)?
-			( #(Not_null NOT NULL_KW (UNIQUE)? ) )?
-			(	label_constant
-			|	#(DEFAULT expression )
-			|  	#(FORMAT expression)
-			| 	casesens_or_not
-			)*
-		)
-	;
-
-
-
-///////////////////////////////////////////////////////////////////////////////////////////////////
-// sqlexpression 
-///////////////////////////////////////////////////////////////////////////////////////////////////
-
-sqlexpression
-	:	#(OR sqlexpression sqlexpression )
-	|	#(AND sqlexpression sqlexpression )
-	|	#(NOT sqlexpression )
-	|	#(MATCHES	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(BEGINS	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(CONTAINS	sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(EQ		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(NE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(GTHAN		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(GE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(LTHAN		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(LE		sqlscalar (sqlscalar | sql_comp_query) )
-	|	#(EXISTS LEFTPAREN selectstatea RIGHTPAREN )
-	|	#(Sql_begins (NOT)? BEGINS sqlscalar )
-	|	#(Sql_between (NOT)? BETWEEN sqlscalar AND sqlscalar )
-	|	#(Sql_in (NOT)? IN_KW LEFTPAREN (selectstatea | sql_in_val (COMMA sql_in_val)*) RIGHTPAREN )
-	|	#(Sql_like (NOT)? LIKE sqlscalar (ESCAPE sqlscalar)? )
-	|	#(Sql_null_test IS (NOT)? NULL_KW )
-	|	sqlscalar
-	;
-sql_comp_query
-	:	#(Sql_comp_query (ANY|ALL|SOME)? LEFTPAREN selectstatea RIGHTPAREN )
-	;
-sql_in_val
-	:	field (fetch_indicator)? | constant | USERID
-	;
-sqlscalar
-	:	#(PLUS sqlscalar sqlscalar )
-	|	#(MINUS sqlscalar sqlscalar )
-	|	#(MULTIPLY sqlscalar sqlscalar )
-	|	#(DIVIDE sqlscalar sqlscalar )
-	|	#(MODULO sqlscalar sqlscalar )
-	|	#(UNARY_PLUS exprt )
-	|	#(UNARY_MINUS exprt )
-	|	(LEFTPAREN)=> #(LEFTPAREN sqlexpression RIGHTPAREN )
-	|	exprt
-	;
-
-

Added: trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparser03/JPTreeParser.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -0,0 +1,2951 @@
+/*
+
+JPTreeParser.g - Primary tree parser.
+
+Joanju Proparse Syntax Tree Structure Specification
+
+Copyright (c) 2001-2006 Joanju Software.
+All rights reserved. This program and the accompanying materials 
+are made available under the terms of the Eclipse Public License v1.0
+which accompanies this distribution, and is available at
+http://www.eclipse.org/legal/epl-v10.html
+
+
+This tree parser has no actions. It is the basis for creating new
+tree parsers.
+
+
+Notes:
+	- Token types always start with a capital letter
+	- functions always start with a lowercase letter
+	- ALLCAPS is by convention the name for a real token type
+	- Mixed_case is by convention the name for a synthetic node's token type
+	- This: #(
+	  means that the first node is root, the rest are children of that root.
+	- the pipe symbol "|" represents logical OR, of course
+	- "something" is optional: (something)?
+	- "something" must be present one or more times: (something)+
+	- "something" may be there zero, one, or many times: (something)*
+	- A period represents a token of any type.
+
+*/
+
+
+header {
+	package org.prorefactor.treeparserbase;
+
+	import org.prorefactor.core.IJPNode;
+	import org.prorefactor.treeparser.IJPTreeParser;
+}
+
+
+
+options {
+	language = "Java";
+}
+
+
+
+// Class preamble - this gets inserted near the top of the .java file.
+{
+} // Class preamble
+
+
+
+// class definition options for Antlr
+class JPTreeParser extends TreeParser;
+options {
+	importVocab = ProParser;
+	defaultErrorHandler = false;
+	classHeaderSuffix = IJPTreeParser;
+}
+
+
+
+// This is added to top of the class definitions
+{
+
+	// Where did the tree parser leave off parsing -- might give us at least a bit
+	// of an idea where things left off if an exception was thrown.
+	// See antlr/TreeParser and the generated code.
+	public AST get_retTree() {
+		return _retTree;
+	}
+
+	// Func for grabbing the "state2" attribute from the node at LT(1) 
+	private boolean state2(AST node, int match) {
+		return ((IJPNode)node).getState2() == match;
+	}
+
+}
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Begin grammar
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+program
+	:	#(Program_root (blockorstate)* Program_tail)
+	;
+
+code_block
+	:	#(Code_block (blockorstate)* )
+	;
+
+blockorstate
+	:	(	labeled_block
+		|	statement
+		|	// Expr_statement has a "statehead" node attribute
+			#(Expr_statement expression (NOERROR_KW)? state_end)
+		|	PROPARSEDIRECTIVE
+		|	PERIOD
+		|	DOT_COMMENT
+		|	#(ANNOTATION (.)* )
+		)
+	;
+
+labeled_block
+	:	#(BLOCK_LABEL LEXCOLON (dostate|forstate|repeatstate) )
+	;
+
+
+block_colon
+	:	LEXCOLON | PERIOD
+	;
+block_end
+	:	EOF
+	|	END state_end
+	;
+block_for
+	:	#(FOR RECORD_NAME (COMMA RECORD_NAME)* )
+	;
+block_opt
+	:	#(Block_iterator field EQUAL expression TO expression (BY constant)? )
+	|	querytuningphrase 
+	|	#(WHILE expression )
+	|	TRANSACTION 
+	|	on___phrase 
+	|	framephrase 
+	|	BREAK
+	|	#(BY expression (DESCENDING)? )
+	|	collatephrase
+	|	#(GROUP ( #(BY expression (DESCENDING)? ) )+ )
+	;
+block_preselect
+	:	#(PRESELECT for_record_spec )
+	;
+
+statement
+// All statement first nodes have a node attribute of "statehead".
+// Additionally, for those first statement nodes which are ambiguous
+// (ex: CREATE), there is an additional disambiguating attribute of "state2".
+	:						aatracestatement
+	|						accumulatestate
+ 	|						altertablestate
+ 	|						analyzestate
+	|						applystate
+	|						assignstate
+	|						bellstate
+	|						buffercomparestate
+	|						buffercopystate
+	|						callstate
+	|						casestate
+	|						choosestate
+	|						classstate
+	|						clearstate
+	|	{state2(_t, 0)}?			closestate			// SQL
+	|	{state2(_t, QUERY)}?			closequerystate
+	|	{state2(_t, STOREDPROCEDURE)}?	closestoredprocedurestate
+	|						colorstate
+	|						compilestate
+	|						connectstate
+	|						constructorstate
+	|						copylobstate
+	|	{state2(_t, 0)}?			createstate
+	|	{state2(_t, ALIAS)}?			createaliasstate
+	|	{state2(_t, Automationobject)}?	createautomationobjectstate
+	|	{state2(_t, BROWSE)}?			createbrowsestate
+	|	{state2(_t, BUFFER)}?			createbufferstate
+	|	{state2(_t, CALL)}?			createcallstate
+	|	{state2(_t, CLIENTPRINCIPAL)}? createclientprincipalstate
+	|	{state2(_t, DATABASE)}?		createdatabasestate
+	|	{state2(_t, DATASET)}?			createdatasetstate
+	|	{state2(_t, DATASOURCE)}?		createdatasourcestate
+	|	{state2(_t, INDEX)}?			createindexstate		// SQL
+	|	{state2(_t, QUERY)}?			createquerystate   
+	|	{state2(_t, SAXREADER)}?		createsaxreaderstate
+	|	{state2(_t, SAXWRITER)}?		createsaxwriterstate
+	|	{state2(_t, SERVER)}?			createserverstate
+	|	{state2(_t, SERVERSOCKET)}?		createserversocketstate
+	|	{state2(_t, SOAPHEADER)}?		createsoapheaderstate
+	|	{state2(_t, SOAPHEADERENTRYREF)}?	createsoapheaderentryrefstate
+	|	{state2(_t, SOCKET)}?			createsocketstate
+	|	{state2(_t, TABLE)}?			createtablestate		// SQL
+	|	{state2(_t, TEMPTABLE)}?		createtemptablestate
+	|	{state2(_t, VIEW)}?			createviewstate			// SQL
+	|	{state2(_t, WIDGET)}?			createwidgetstate
+	|	{state2(_t, WIDGETPOOL)}?		createwidgetpoolstate
+	|	{state2(_t, XDOCUMENT)}?		createxdocumentstate
+	|	{state2(_t, XNODEREF)}?		createxnoderefstate
+	|	{state2(_t, ADVISE)}?			ddeadvisestate
+	|	{state2(_t, EXECUTE)}?		ddeexecutestate
+	|	{state2(_t, GET)}?			ddegetstate
+	|	{state2(_t, INITIATE)}?		ddeinitiatestate
+	|	{state2(_t, REQUEST)}?		dderequeststate
+	|	{state2(_t, SEND)}?			ddesendstate
+	|	{state2(_t, TERMINATE)}?		ddeterminatestate	
+	|						declarecursorstate
+	|	{state2(_t, BROWSE)}?			definebrowsestate
+	|	{state2(_t, BUFFER)}?			definebufferstate
+	|	{state2(_t, BUTTON)}?			definebuttonstate
+	|	{state2(_t, DATASET)}?			definedatasetstate
+	|	{state2(_t, DATASOURCE)}?		definedatasourcestate
+	|	{state2(_t, FRAME)}?			defineframestate
+	|	{state2(_t, IMAGE)}?			defineimagestate
+	|	{state2(_t, MENU)}?			definemenustate
+	|	{state2(_t, PARAMETER)}?		defineparameterstate
+	|	{state2(_t, QUERY)}?			definequerystate
+	|	{state2(_t, RECTANGLE)}?		definerectanglestate
+	|	{state2(_t, STREAM)}?			definestreamstate
+	|	{state2(_t, SUBMENU)}?		definesubmenustate
+	|	{state2(_t, TEMPTABLE)}?		definetemptablestate
+	|	{state2(_t, WORKTABLE)}?		defineworktablestate
+	|	{state2(_t, VARIABLE)}?		definevariablestate
+	|						dictionarystate
+	|	{state2(_t, 0)}?			deletestate
+	|	{state2(_t, ALIAS)}?			deletealiasstate
+	|	{state2(_t, FROM)}?			deletefromstate
+	|	{state2(_t, OBJECT)}?			deleteobjectstate
+	|	{state2(_t, PROCEDURE)}?		deleteprocedurestate
+	|	{state2(_t, WIDGET)}?			deletewidgetstate
+	|	{state2(_t, WIDGETPOOL)}?		deletewidgetpoolstate
+	|						destructorstate
+	|	{state2(_t, 0)}?			disablestate
+	|	{state2(_t, TRIGGERS)}?		disabletriggersstate
+	|						disconnectstate
+	|						displaystate
+	|						dostate
+	|						downstate
+	|	{state2(_t, INDEX)}?			dropindexstate			// SQL
+	|	{state2(_t, TABLE)}?			droptablestate			// SQL
+	|	{state2(_t, VIEW)}?			dropviewstate			// SQL
+	|						emptytemptablestate  
+	|						enablestate
+	|						exportstate
+	|						fetchstate
+	|						findstate
+	|						forstate
+	|						formstate
+	|						functionstate
+	|						getstate
+	|						getkeyvaluestate  
+	|						grantstate
+	|						hidestate
+	|						ifstate
+	|						importstate  
+	|	{state2(_t, CLEAR)}?			inputclearstate
+	|	{state2(_t, CLOSE)}?			inputclosestate
+	|	{state2(_t, FROM)}?			inputfromstate
+	|	{state2(_t, THROUGH)}?		inputthroughstate
+	|	{state2(_t, CLOSE)}?			inputoutputclosestate
+	|	{state2(_t, THROUGH)}?		inputoutputthroughstate
+	|	{state2(_t, INTO)}?			insertintostate			// SQL
+	|	{state2(_t, 0)}?			insertstate
+	|						interfacestate
+	|						leavestate
+	|						loadstate  
+	|						messagestate
+	|						methodstate
+	|						nextstate
+	|						nextpromptstate
+	|						onstate  
+	|	{state2(_t, 0)}?			openstate			// SQL
+	|	{state2(_t, QUERY)}?			openquerystate
+	|						osappendstate
+	|						oscommandstate
+	|						oscopystate
+	|						oscreatedirstate  
+	|						osdeletestate
+	|						osrenamestate
+	|	{state2(_t, CLOSE)}?			outputclosestate
+	|	{state2(_t, THROUGH)}?		outputthroughstate
+	|	{state2(_t, TO)}?			outputtostate
+	|						pagestate  
+	|						pausestate
+	|						procedurestate
+	|						processeventsstate
+	|						promptforstate
+	|						publishstate
+	|	{state2(_t, 0)}?			putstate
+	|	{state2(_t, CURSOR)}?			putcursorstate
+	|	{state2(_t, SCREEN)}?			putscreenstate
+	|						putkeyvaluestate
+	|						quitstate
+	|						rawtransferstate
+	|						readkeystate
+	|	{state2(_t, 0)}?			releasestate
+	|	{state2(_t, EXTERNAL)}?		releaseexternalstate
+	|	{state2(_t, OBJECT)}?			releaseobjectstate
+	|						repeatstate
+	|						repositionstate  
+	|						returnstate
+	|						revokestate
+	|	{state2(_t, 0)}?			runstate
+	|	{state2(_t, STOREDPROCEDURE)}?	runstoredprocedurestate
+	|	{state2(_t, SUPER)}?			runsuperstate
+	|						savecachestate
+	|						scrollstate
+	|						seekstate  
+	|						selectstate
+	|						setstate
+	|						showstatsstate
+	|						statusstate  
+	|						stopstate
+	|						subscribestate
+	|	{state2(_t, COLOR)}?			systemdialogcolorstate
+	|	{state2(_t, FONT)}?			systemdialogfontstate
+	|	{state2(_t, GETDIR)}?		systemdialoggetdirstate
+	|	{state2(_t, GETFILE)}?		systemdialoggetfilestate
+	|	{state2(_t, PRINTERSETUP)}?		systemdialogprintersetupstate
+	|						systemhelpstate
+	|						transactionmodeautomaticstate
+	|						triggerprocedurestate
+	|						underlinestate  
+	|						undostate
+	|						unloadstate
+	|						unsubscribestate
+	|						upstate  
+	|						updatestatement
+	|						usestate
+	|						validatestate
+	|						viewstate
+	|						waitforstate
+	;
+
+
+pseudfn
+// See PSC's grammar for <pseudfn> and for <asignmt>.
+// These are functions that can (or, in some cases, must) be an l-value.
+	:	#(FIXCODEPAGE funargs )
+	|	#(OVERLAY funargs )
+	|	#(PUTBITS funargs )
+	|	#(PUTBYTE funargs )
+	|	#(PUTBYTES funargs )
+	|	#(PUTDOUBLE funargs )
+	|	#(PUTFLOAT funargs )
+	|	#(PUTLONG funargs )
+	|	#(PUTSHORT funargs )
+	|	#(PUTSTRING funargs )
+	|	#(PUTUNSIGNEDSHORT funargs )
+	|	#(SETBYTEORDER funargs )
+	|	#(SETPOINTERVALUE funargs )
+	|	#(SETSIZE funargs )
+	|	AAMSG // not the whole func - we don't want its arguments here
+	|	currentvaluefunc
+	|	CURRENTWINDOW
+	|	dynamiccurrentvaluefunc
+	|	entryfunc
+	|	lengthfunc
+	|	nextvaluefunc
+	|	rawfunc
+	|	substringfunc
+	|	widattr
+	// Keywords from <optargfn> and <noargfn>. Assignments to those
+	// are accepted by the compiler, however, assignment to them seems to have
+	// no affect at runtime.
+	// The following are from <optargfn>
+	| PAGESIZE_KW | LINECOUNTER | PAGENUMBER | FRAMECOL
+	| FRAMEDOWN | FRAMELINE | FRAMEROW | USERID | ETIME_KW
+	// The following are from <noargfn>
+	| DBNAME | TIME | OPSYS | RETRY | AASERIAL | AACONTROL
+	| MESSAGELINES | TERMINAL | PROPATH | CURRENTLANGUAGE | PROMSGS
+	| SCREENLINES | LASTKEY
+	| FRAMEFIELD | FRAMEFILE | FRAMEVALUE | GOPENDING
+	| PROGRESS | FRAMEINDEX | FRAMEDB | FRAMENAME | DATASERVERS
+	| NUMDBS | NUMALIASES | ISATTRSPACE | PROCSTATUS
+	| PROCHANDLE | CURSOR | OSERROR | RETURNVALUE | OSDRIVES
+	| PROVERSION | TRANSACTION | MACHINECLASS 
+	| AAPCONTROL | GETCODEPAGES | COMSELF
+	;
+
+functioncall
+	:	#(ACCUMULATE accum_what (#(BY expression (DESCENDING)?))? expression )
+	|	#(ADDINTERVAL LEFTPAREN expression COMMA expression COMMA expression RIGHTPAREN )
+	|	#(AUDITENABLED LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(CANFIND LEFTPAREN (findwhich)? recordphrase RIGHTPAREN )
+	|	#(CAST LEFTPAREN field COMMA TYPE_NAME RIGHTPAREN )
+	|	currentvaluefunc // is also a pseudfn.
+	|	dynamiccurrentvaluefunc // is also a pseudfn.
+	|	#(DYNAMICFUNCTION LEFTPAREN expression (#(IN_KW expression))? (COMMA parameter)* RIGHTPAREN (NOERROR_KW)? )
+		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
+	|	entryfunc // is also a pseudfn.
+	|	#(ETIME_KW (funargs)? )
+	|	#(EXTENT LEFTPAREN field RIGHTPAREN )
+	|	#(FRAMECOL (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMEDOWN (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMELINE (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(FRAMEROW (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(GETCODEPAGES (funargs)? )
+	|	#(GUID LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(IF expression THEN expression ELSE expression )
+	|	ldbnamefunc 
+	|	lengthfunc // is also a pseudfn.
+	|	#(LINECOUNTER (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(MTIME LEFTPAREN (expression)? RIGHTPAREN )
+	|	nextvaluefunc // is also a pseudfn.
+		// ENTERED and NOTENTERED are only dealt with as part of an expression term. See: exprt.
+	|	#(PAGENUMBER (LEFTPAREN ID RIGHTPAREN)? )
+	|	#(PAGESIZE_KW (LEFTPAREN ID RIGHTPAREN)? )
+	|	rawfunc // is also a pseudfn.
+	|	#(SEEK LEFTPAREN (INPUT|OUTPUT|ID) RIGHTPAREN )
+	|	substringfunc // is also a pseudfn.
+	|	#(SUPER (parameterlist)? )
+	|	#(TIMEZONE LEFTPAREN (expression)? RIGHTPAREN )
+	|	#(USERID (funargs)? )
+	|	#(USER (funargs)? )
+	|	sqlaggregatefunc  
+	|	argfunc
+	|	noargfunc
+	|	recordfunc
+	;
+
+argfunc
+	:	#(AACBIT funargs )
+	|	#(AAMSG funargs )
+	|	#(ABSOLUTE funargs )
+	|	#(ALIAS funargs )
+	|	#(ASC funargs )
+	|	#(BASE64DECODE funargs )
+	|	#(BASE64ENCODE funargs )
+	|	#(CANDO funargs )
+	|	#(CANQUERY funargs )
+	|	#(CANSET funargs )
+	|	#(CAPS funargs )
+	|	#(CHR funargs )
+	|	#(CODEPAGECONVERT funargs )
+	|	#(COLLATE funargs ) // See docs for BY phrase in FOR, PRESELECT, etc.
+	|	#(COMPARE funargs )
+	|	#(CONNECTED funargs )
+	|	#(COUNTOF funargs )
+	|	#(CURRENTRESULTROW funargs )
+	|	#(DATE funargs )
+	|	#(DATETIME funargs )
+	|	#(DATETIMETZ funargs )
+	|	#(DAY funargs )
+	|	#(DBCODEPAGE funargs )
+	|	#(DBCOLLATION funargs )
+	|	#(DBPARAM funargs )
+	|	#(DBRESTRICTIONS funargs )
+	|	#(DBTASKID funargs )
+	|	#(DBTYPE funargs )
+	|	#(DBVERSION funargs )
+	|	#(DECIMAL funargs )
+	|	#(DECRYPT funargs )
+	|	#(DYNAMICNEXTVALUE funargs )
+	|	#(ENCODE funargs )
+	|	#(ENCRYPT funargs )
+	|	#(EXP funargs )
+	|	#(FILL funargs )
+	|	#(FIRST funargs )
+	|	#(FIRSTOF funargs )
+	|	#(GENERATEPBEKEY funargs )
+	|	#(GETBITS funargs )
+	|	#(GETBYTE funargs )
+	|	#(GETBYTEORDER funargs )
+	|	#(GETBYTES funargs )
+	|	#(GETCOLLATIONS funargs )
+	|	#(GETDOUBLE funargs )
+	|	#(GETFLOAT funargs )
+	|	#(GETLICENSE funargs )
+	|	#(GETLONG funargs )
+	|	#(GETPOINTERVALUE funargs )
+	|	#(GETSHORT funargs )
+	|	#(GETSIZE funargs )
+	|	#(GETSTRING funargs )
+	|	#(GETUNSIGNEDSHORT funargs )
+	|	#(HEXDECODE funargs )
+	|	#(HEXENCODE funargs )
+	|	#(INDEX funargs )
+	|	#(INTEGER funargs )
+	|	#(INTERVAL funargs )
+	|	#(ISCODEPAGEFIXED funargs )
+	|	#(ISCOLUMNCODEPAGE funargs )
+	|	#(ISLEADBYTE funargs )
+	|	#(ISODATE funargs )
+	|	#(KBLABEL funargs )
+	|	#(KEYCODE funargs )
+	|	#(KEYFUNCTION funargs )
+	|	#(KEYLABEL funargs )
+	|	#(KEYWORD funargs )
+	|	#(KEYWORDALL funargs )
+	|	#(LAST funargs )
+	|	#(LASTOF funargs )
+	|	#(LC funargs )
+	|	#(LEFTTRIM funargs )
+	|	#(LIBRARY funargs )
+	|	#(LISTEVENTS funargs )
+	|	#(LISTQUERYATTRS funargs )
+	|	#(LISTSETATTRS funargs )
+	|	#(LISTWIDGETS funargs )
+	|	#(LOADPICTURE funargs )
+	|	#(LOG funargs )
+	|	#(LOGICAL funargs )
+	|	#(LOOKUP funargs )
+	|	#(MAXIMUM funargs )
+	|	#(MD5DIGEST funargs )
+	|	#(MEMBER funargs )
+	|	#(MINIMUM funargs )
+	|	#(MONTH funargs )
+	|	#(NORMALIZE funargs )
+	|	#(NUMENTRIES funargs )
+	|	#(NUMRESULTS funargs )
+	|	#(OSGETENV funargs )
+	|	#(PDBNAME funargs )
+	|	#(PROGRAMNAME funargs )
+	|	#(QUERYOFFEND funargs )
+	|	#(QUOTER funargs )
+	|	#(RINDEX funargs )
+	|	#(RANDOM funargs )
+	|	#(REPLACE funargs )
+	|	#(RGBVALUE funargs )
+	|	#(RIGHTTRIM funargs )
+	|	#(ROUND funargs )
+	|	#(SDBNAME funargs )
+	|	#(SEARCH funargs )
+	|	#(SETDBCLIENT funargs )
+	|	#(SETUSERID funargs )
+	|	#(SHA1DIGEST funargs )
+	|	#(SQRT funargs )
+	|	#(SSLSERVERNAME funargs )
+	|	#(STRING funargs )
+	|	#(SUBSTITUTE funargs )
+	|	#(TOROWID funargs )
+	|	#(TRIM funargs )
+	|	#(TRUNCATE funargs )
+	|	#(TYPEOF funargs )
+	|	#(VALIDEVENT funargs )
+	|	#(VALIDHANDLE funargs )
+	|	#(VALIDOBJECT funargs )
+	|	#(WEEKDAY funargs )
+	|	#(WIDGETHANDLE funargs )
+	|	#(YEAR funargs )
+	;
+
+recordfunc
+	:	#(AMBIGUOUS recordfunargs )
+	|	#(AVAILABLE recordfunargs )
+	|	#(CURRENTCHANGED recordfunargs )
+	|	#(DATASOURCEMODIFIED recordfunargs )
+	|	#(ERROR recordfunargs )
+	|	#(LOCKED recordfunargs )
+	|	#(NEW recordfunargs )
+	|	#(RECID recordfunargs )
+	|	#(RECORDLENGTH recordfunargs )
+	|	#(REJECTED recordfunargs )
+	|	#(ROWID recordfunargs )
+	|	#(ROWSTATE recordfunargs )
+	;
+recordfunargs
+	:	(LEFTPAREN RECORD_NAME RIGHTPAREN | RECORD_NAME)
+	;
+
+noargfunc
+	:	AACONTROL
+	|	AAPCONTROL
+	|	AASERIAL
+	|	CURRENTLANGUAGE
+	|	CURSOR
+	|	DATASERVERS
+	|	DBNAME
+	|	FRAMEDB
+	|	FRAMEFIELD
+	|	FRAMEFILE
+	|	FRAMEINDEX
+	|	FRAMENAME
+	|	FRAMEVALUE
+	|	GENERATEPBESALT
+	|	GENERATERANDOMKEY
+	|	GENERATEUUID
+	|	GATEWAYS
+	|	GOPENDING
+	|	ISATTRSPACE
+	|	LASTKEY
+	|	MACHINECLASS
+	|	MESSAGELINES
+	|	NOW
+	|	NUMALIASES
+	|	NUMDBS
+	|	OPSYS
+	|	OSDRIVES
+	|	OSERROR
+	|	PROCHANDLE
+	|	PROCSTATUS
+	|	PROGRESS
+	|	PROMSGS
+	|	PROPATH
+	|	PROVERSION
+	|	RETRY
+	|	RETURNVALUE
+	|	SCREENLINES
+	|	TERMINAL
+	|	TIME
+	|	TODAY
+	|	TRANSACTION
+	;
+
+
+parameter
+	:	#(BUFFER (RECORD_NAME | ID FOR RECORD_NAME ) )
+	|	#(PARAMETER expression EQUAL expression )
+	|	#(OUTPUT parameter_arg )
+	|	#(INPUTOUTPUT parameter_arg )
+	|	#(INPUT parameter_arg )
+	;
+parameter_arg
+	:	(	TABLEHANDLE field parameter_dataset_options
+		|	TABLE (FOR)? RECORD_NAME parameter_dataset_options
+		|	DATASET ID parameter_dataset_options
+		|	DATASETHANDLE field parameter_dataset_options
+		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
+		|	expression (AS datatype_com)?
+		)
+		(BYPOINTER|BYVARIANTPOINTER)?
+	;
+parameter_dataset_options
+	: (APPEND)? (BYVALUE|BYREFERENCE|BIND)?
+	;
+
+parameterlist
+	:	#(Parameter_list parameterlist_noroot )
+	;
+parameterlist_noroot
+	:	LEFTPAREN (parameter)? (COMMA parameter)* RIGHTPAREN
+	;
+
+eventlist
+	:	#(Event_list . (COMMA .)* )
+	;
+
+funargs
+	:	LEFTPAREN expression (COMMA expression)* RIGHTPAREN
+	;
+
+anyorvalue
+	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
+	|	TYPELESS_TOKEN
+	;
+filenameorvalue
+	:	valueexpression | FILENAME
+	;
+valueexpression
+	:	#(VALUE LEFTPAREN expression RIGHTPAREN )
+	;
+expressionorvalue
+	:	valueexpression | expression
+	;
+
+findwhich
+	:	CURRENT | EACH | FIRST | LAST | NEXT | PREV
+	;
+
+lockhow
+	:	SHARELOCK | EXCLUSIVELOCK | NOLOCK
+	;
+
+
+expression
+	:	#(OR expression expression )
+	|	#(AND expression expression )
+	|	#(NOT expression )
+	|	#(MATCHES expression expression )
+	|	#(BEGINS expression expression )
+	|	#(CONTAINS expression expression )
+	|	#(EQ expression expression )
+	|	#(NE expression expression )
+	|	#(GTHAN expression expression )
+	|	#(GE expression expression )
+	|	#(LTHAN expression expression )
+	|	#(LE expression expression )
+	|	#(PLUS expression expression )
+	|	#(MINUS expression expression )
+	|	#(MULTIPLY expression expression )
+	|	#(DIVIDE expression expression )
+	|	#(MODULO expression expression )
+	|	#(UNARY_MINUS exprt )
+	|	#(UNARY_PLUS exprt )
+	|	exprt
+	;
+
+exprt
+	:	#(LEFTPAREN expression RIGHTPAREN )
+	|	constant
+	|	widattr
+	|	#(USER_FUNC parameterlist_noroot )
+	|	#(LOCAL_METHOD_REF parameterlist_noroot )
+	|	( #(NEW TYPE_NAME) )=> #(NEW TYPE_NAME parameterlist )
+	|	// SUPER is amibiguous between functioncall and systemhandlename
+		(	options{generateAmbigWarnings=false;}
+		:	functioncall
+		|	systemhandlename
+		)
+	|	field
+	|	#(Entered_func field (NOT)? ENTERED )
+	|	RECORD_NAME // for DISPLAY buffername, etc.
+	;
+
+widattr
+	:	#(	Widget_ref
+			(NORETURNVALUE)?
+			s_widget
+			(OBJCOLON . (array_subscript)? (method_param_list)? )+
+			(#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? (AS .)?
+		)
+	;
+
+gwidget
+	:	#(Widget_ref s_widget (#(IN_KW (MENU|FRAME|BROWSE|SUBMENU|BUFFER) ID ))? )
+	;
+
+widgetlist
+	:	gwidget (COMMA gwidget)*
+	;
+
+s_widget
+	:	widname	| (FIELD)? field
+	;
+
+widname
+	:	systemhandlename
+	|	DATASET ID
+	|	DATASOURCE ID
+	|	FRAME ID
+	|	MENU ID
+	|	SUBMENU ID
+	|	MENUITEM ID
+	|	BROWSE ID
+	|	QUERY ID
+	|	TEMPTABLE ID
+	|	BUFFER ID
+	|	XDOCUMENT ID
+	|	XNODEREF ID
+	|	SOCKET ID
+	;
+
+field
+	:	#(Field_ref (INPUT)? (#(FRAME ID) | #(BROWSE ID))? ID (array_subscript)? )
+	;
+
+array_subscript
+	:	#(Array_subscript LEFTBRACE expression (FOR expression)? RIGHTBRACE )
+	;
+
+method_param_list
+	:	#(Method_param_list LEFTPAREN (parameter)? (COMMA (parameter)?)* RIGHTPAREN )
+	;
+
+constant
+	:	TRUE_KW | FALSE_KW | YES | NO | UNKNOWNVALUE | QSTRING | LEXDATE | NUMBER | NULL_KW
+	|	NOWAIT | SHARELOCK | EXCLUSIVELOCK | NOLOCK
+	|	BIGENDIAN
+	|	FINDCASESENSITIVE | FINDGLOBAL | FINDNEXTOCCURRENCE | FINDPREVOCCURRENCE | FINDSELECT | FINDWRAPAROUND
+	|	FUNCTIONCALLTYPE | GETATTRCALLTYPE | PROCEDURECALLTYPE | SETATTRCALLTYPE
+	|	HOSTBYTEORDER | LITTLEENDIAN
+	|	READAVAILABLE | READEXACTNUM
+	|	ROWUNMODIFIED | ROWDELETED | ROWMODIFIED | ROWCREATED
+	|	SAXCOMPLETE | SAXPARSERERROR | SAXRUNNING | SAXUNINITIALIZED
+	|	SEARCHSELF | SEARCHTARGET
+	|	WINDOWDELAYEDMINIMIZE | WINDOWMINIMIZED | WINDOWNORMAL | WINDOWMAXIMIZED
+	;
+
+systemhandlename
+	:	AAMEMORY | ACTIVEWINDOW | AUDITCONTROL | AUDITPOLICY | CLIPBOARD | CODEBASELOCATOR | COLORTABLE | COMPILER 
+	|	COMSELF | CURRENTWINDOW | DEBUGGER | DEFAULTWINDOW
+	|	ERRORSTATUS | FILEINFORMATION | FOCUS | FONTTABLE | LASTEVENT | LOGMANAGER
+	|	MOUSE | PROFILER | RCODEINFORMATION | SECURITYPOLICY | SELF | SESSION
+	|	SOURCEPROCEDURE | SUPER | TARGETPROCEDURE | TEXTCURSOR | THISOBJECT | THISPROCEDURE | WEBCONTEXT
+	;
+
+
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//                   begin PROGRESS syntax features, in alphabetical order
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+//////////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+
+aatracestatement
+	:	#(	AATRACE
+			(	OFF state_end
+			|	#(ON (AALIST)? ) state_end
+			|	(stream_name)?
+				(	(TO|FROM|THROUGH) io_phrase state_end
+				|	CLOSE state_end
+				)
+			)
+		)
+	;
+
+accum_what
+	:	AVERAGE|COUNT|MAXIMUM|MINIMUM|TOTAL|SUBAVERAGE|SUBCOUNT|SUBMAXIMUM|SUBMINIMUM|SUBTOTAL
+	;
+
+accumulatestate
+	:	#(ACCUMULATE (display_item)* state_end )
+	;
+
+aggregatephrase
+	:	#(Aggregate_phrase LEFTPAREN (aggregate_opt)+ ( #(BY expression (DESCENDING)? ) )* RIGHTPAREN )
+	;
+aggregate_opt
+	:	#(AVERAGE (label_constant)? )
+	|	#(COUNT (label_constant)? )
+	|	#(MAXIMUM (label_constant)? )
+	|	#(MINIMUM (label_constant)? )
+	|	#(TOTAL (label_constant)? )
+	|	#(SUBAVERAGE (label_constant)? )
+	|	#(SUBCOUNT (label_constant)? )
+	|	#(SUBMAXIMUM (label_constant)? )
+	|	#(SUBMINIMUM (label_constant)? )
+	|	#(SUBTOTAL (label_constant)? )
+	;
+
+analyzestate
+	:	#(	ANALYZE filenameorvalue filenameorvalue
+			( #(OUTPUT filenameorvalue ) )?
+			(APPEND | ALL | NOERROR_KW)* state_end
+		)
+	;
+
+applystate
+	:	#(APPLY expression (#(TO gwidget ))? state_end )
+	;
+
+assign_opt
+	:	#(ASSIGN ( #(EQUAL . expression ) )+ )
+	;
+
+assignstate
+	:	#(ASSIGN assignment_list (NOERROR_KW)? state_end )
+	;
+assignment_list
+	:	RECORD_NAME (#(EXCEPT (field)*))?
+	|	(	assign_equal (#(WHEN expression))?
+		|	#(Assign_from_buffer field ) (#(WHEN expression))?
+		)*
+	;
+assign_equal
+	:	#(EQUAL (pseudfn|field) expression )
+	;
+
+atphrase
+	:	#(	AT
+			(	atphraseab atphraseab
+			|	expression
+			)
+			(COLONALIGNED|LEFTALIGNED|RIGHTALIGNED)?
+		)
+	;
+atphraseab
+	:	#(COLUMN expression )
+	|	#(COLUMNOF referencepoint )
+	|	#(ROW expression )
+	|	#(ROWOF referencepoint )
+	|	#(X expression )
+	|	#(XOF referencepoint )
+	|	#(Y expression )
+	|	#(YOF referencepoint )
+	;
+referencepoint
+	:	field ((PLUS|MINUS) expression)?
+	;
+
+bellstate
+	:	#(BELL state_end )
+	;
+
+buffercomparestate
+	:	#(	BUFFERCOMPARE
+			RECORD_NAME
+			(	#(EXCEPT (field)*)
+			|	#(USING (field)+)
+			)?
+			TO RECORD_NAME
+			(CASESENSITIVE|BINARY)?
+			( #(SAVE ( #(RESULT IN_KW) )? field ) )?
+			(EXPLICIT)?
+			(	COMPARES
+				(NOERROR_KW)?
+				block_colon
+				#(Code_block ( #(WHEN expression THEN blockorstate ) )* )
+				#(END (COMPARES)? )
+			)?
+			(NOLOBS)?
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+
+buffercopystate
+	:	#(	BUFFERCOPY RECORD_NAME
+			(	#(EXCEPT (field)*)
+			|	#(USING (field)+)
+			)?
+			TO RECORD_NAME
+			( #(ASSIGN assignment_list ) )?
+			(NOLOBS)?
+			(NOERROR_KW)?
+			state_end 
+		)
+	;
+
+callstate
+	:	#(CALL filenameorvalue (expressionorvalue)* state_end )
+	;
+
+casesens_or_not
+	:	#(Not_casesens NOT CASESENSITIVE )
+	|	CASESENSITIVE
+	;
+
+casestate
+	:	#(	CASE expression block_colon
+			#(	Code_block
+				(	#(WHEN case_expression THEN blockorstate )
+				)*
+			)
+			( #(OTHERWISE blockorstate ) )?
+			(EOF | #(END (CASE)? ) state_end)
+		)
+	;
+case_expression
+	:	(#(OR .))=> #(OR case_expression case_expression )
+	|	#(WHEN expression)
+	|	expression
+	;
+
+choosestate
+	:	#(	CHOOSE (ROW|FIELD)
+			( #(Form_item field (#(HELP constant))? ) )+
+			(	AUTORETURN 
+			|	#(COLOR anyorvalue) 
+			|	goonphrase
+			|	#(KEYS field )
+			|	NOERROR_KW 
+			|	#(PAUSE expression)
+			)*
+			(framephrase)?
+			state_end
+		)
+	;
+
+classstate
+	:	#(	CLASS TYPE_NAME
+			( #(INHERITS TYPE_NAME) )?
+			( #(IMPLEMENTS TYPE_NAME (COMMA TYPE_NAME)* ) )?
+			( FINAL )?
+			block_colon
+			code_block
+			#(END (CLASS)? )
+			state_end
+		)
+	;
+
+clearstate
+	:	#(CLEAR (#(FRAME ID))? (ALL)? (NOPAUSE)? state_end )
+	;
+
+closequerystate
+	:	#(CLOSE QUERY ID state_end )
+	;
+
+closestoredprocedurestate
+	:	#(	CLOSE
+			STOREDPROCEDURE ID
+			( #(EQUAL field PROCSTATUS ) )?
+			( #(WHERE PROCHANDLE EQ field ) )?
+			state_end
+		)
+	;
+
+collatephrase
+	:	#(COLLATE funargs (DESCENDING)? )
+	;
+
+color_expr
+	:	#(BGCOLOR expression )
+	|	#(DCOLOR expression )
+	|	#(FGCOLOR expression )
+	|	#(PFCOLOR expression )
+	;
+
+colorspecification
+	:	(options{greedy=true;}:color_expr)+
+	|	#(	COLOR (DISPLAY)? anyorvalue
+			( #(PROMPT anyorvalue) )?
+		)
+	;
+
+colorstate
+	:	#(	COLOR
+			(	( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )
+				( #(DISPLAY anyorvalue) | #(PROMPT anyorvalue) )?
+			)?
+			(#(Form_item field (formatphrase)? ))*
+			(framephrase)? state_end
+		)
+	;
+
+columnformat
+	:	#(	Format_phrase
+			(	#(FORMAT expression)
+			|	label_constant
+			|	NOLABELS
+			|	#(COLUMNFONT expression )
+			|	#(COLUMNDCOLOR expression )
+			|	#(COLUMNBGCOLOR expression )
+			|	#(COLUMNFGCOLOR expression )
+			|	#(COLUMNPFCOLOR expression )
+			|	#(LABELFONT expression )
+			|	#(LABELDCOLOR expression )
+			|	#(LABELBGCOLOR expression )
+			|	#(LABELFGCOLOR expression )
+			|	#(LEXAT field (columnformat)? )
+			|	#(WIDTH NUMBER )
+			|	#(WIDTHPIXELS NUMBER )
+			|	#(WIDTHCHARS NUMBER )
+			)+ 
+		)
+	;
+
+comboboxphrase
+	:	#(	COMBOBOX
+			(	#(LISTITEMS constant (COMMA constant)* )
+			|	#(LISTITEMPAIRS constant (COMMA constant)* )
+			|	#(INNERLINES expression )
+			|	SORT
+			|	tooltip_expr
+			|	SIMPLE
+			|	DROPDOWN
+			|	DROPDOWNLIST
+			|	#(MAXCHARS NUMBER )
+			|	#(AUTOCOMPLETION (UNIQUEMATCH)? )
+			|	sizephrase
+			)*
+		)
+	;
+
+compilestate
+	:	#(	COMPILE filenameorvalue
+			(	#(ATTRSPACE (#(EQUAL expression))? )
+			|	NOATTRSPACE
+			|	#(SAVE (#(EQUAL expression))? ( #(INTO filenameorvalue ) )? )
+			|	#(	LISTING filenameorvalue
+					(	compile_append
+					|	#(PAGESIZE_KW expression)
+					|	#(PAGEWIDTH expression)
+					)*
+				)
+			|	#(XCODE expression )
+			|	#(XREF filenameorvalue (compile_append)? )
+			|	#(STRINGXREF filenameorvalue (compile_append)? )
+			|	#(STREAMIO (#(EQUAL expression))? )
+			|	#(MINSIZE (#(EQUAL expression))? )
+			|	#(LANGUAGES LEFTPAREN (compile_lang (COMMA compile_lang)*)? RIGHTPAREN )
+			|	#(TEXTSEGGROW #(EQUAL expression) )
+			|	#(DEBUGLIST filenameorvalue )
+			|	#(DEFAULTNOXLATE (#(EQUAL expression))? )
+			|	#(GENERATEMD5 (#(EQUAL expression))? )
+			|	#(PREPROCESS filenameorvalue )
+			|	#(USEREVVIDEO (#(EQUAL expression))? )
+			|	#(USEUNDERLINE (#(EQUAL expression))? )
+			|	#(V6FRAME (#(EQUAL expression))? )
+			|	NOERROR_KW
+			)*
+			state_end
+		)
+	;
+compile_lang
+	:	valueexpression | TYPELESS_TOKEN (LEXCOLON TYPELESS_TOKEN)*
+	;
+compile_append
+	:	#(APPEND (#(EQUAL expression))? )
+	;
+
+connectstate
+	:	#(CONNECT (NOERROR_KW|DDE|filenameorvalue)* state_end )
+	;
+	
+constructorstate
+	:	#(	CONSTRUCTOR (PUBLIC|PROTECTED) TYPE_NAME function_params
+			block_colon code_block #(END (CONSTRUCTOR)? ) state_end
+		)
+	;
+	
+convertphrase
+	:	#(	CONVERT 
+			( #(SOURCE (BASE64 | CODEPAGE expression (BASE64)?) ) )?
+			( #(TARGET (BASE64 | CODEPAGE expression (BASE64)?) ) )?
+		)
+	;
+	
+copylobstate
+	:	#(	COPYLOB (FROM)?
+			( FILE expression | (OBJECT)? expression )
+			( #(STARTING AT expression) )?
+			( #(FOR expression) )?
+			TO
+			(	FILE expression (APPEND)?
+			|	(OBJECT)? expression (OVERLAY AT expression (TRIM)?)?
+			)
+			( NOCONVERT | convertphrase )?
+			( NOERROR_KW )?
+		)
+	;
+
+createstate
+	:	#(CREATE RECORD_NAME (#(USING (ROWID|RECID) expression))? (NOERROR_KW)? state_end )
+	;
+
+create_whatever_args
+	:	field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)?
+	;
+
+createaliasstate
+	:	#(CREATE ALIAS anyorvalue FOR DATABASE anyorvalue (NOERROR_KW)? state_end )
+	;
+
+createautomationobjectstate
+	:	#(CREATE QSTRING field (#(CONNECT (#(TO expression))?))? (NOERROR_KW)? state_end )
+	;
+
+createbrowsestate
+	:	#(CREATE BROWSE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end )
+	;
+
+createbufferstate
+	:	#(	CREATE BUFFER field FOR TABLE expression
+			( #(BUFFERNAME expression) )?
+			(#(IN_KW WIDGETPOOL expression))?
+			(NOERROR_KW)? state_end
+		)
+	;
+
+createcallstate
+	:	#(CREATE CALL create_whatever_args state_end )
+	;
+
+createclientprincipalstate
+	:	#(CREATE CLIENTPRINCIPAL create_whatever_args state_end )
+	;
+
+createdatabasestate
+	:	#(	CREATE DATABASE expression 
+			( #(FROM expression (NEWINSTANCE)? ) )?
+			(REPLACE)? (NOERROR_KW)? state_end
+		)
+	;
+
+createdatasetstate
+	:	#(CREATE DATASET create_whatever_args state_end )
+	;
+
+createdatasourcestate
+	:	#(CREATE DATASOURCE create_whatever_args state_end )
+	;
+
+createquerystate
+	:	#(CREATE QUERY create_whatever_args state_end )
+	;
+
+createsaxreaderstate
+	:	#(CREATE SAXREADER create_whatever_args state_end )
+	;
+
+createsaxwriterstate
+	:	#(CREATE SAXWRITER create_whatever_args state_end )
+	;
+
+createserverstate
+	:	#(CREATE SERVER field (assign_opt)? state_end )
+	;
+
+createserversocketstate
+	:	#(CREATE SERVERSOCKET field (NOERROR_KW)? state_end )
+	;
+
+createsoapheaderstate
+	:	#(CREATE SOAPHEADER create_whatever_args state_end )
+	;
+
+createsoapheaderentryrefstate
+	:	#(CREATE SOAPHEADERENTRYREF create_whatever_args state_end )
+	;
+
+createsocketstate
+	:	#(CREATE SOCKET field (NOERROR_KW)? state_end )
+	;
+
+createtemptablestate
+	:	#(CREATE TEMPTABLE field (#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? state_end )
+	;
+
+createwidgetstate
+	:	#(	CREATE
+			(	valueexpression
+			|	BUTTON | COMBOBOX | CONTROLFRAME | DIALOGBOX | EDITOR | FILLIN | FRAME | IMAGE
+			|	MENU | MENUITEM | RADIOSET | RECTANGLE | SELECTIONLIST | SLIDER
+			|	SUBMENU | TEXT | TOGGLEBOX | WINDOW
+			)
+			field
+			(#(IN_KW WIDGETPOOL expression))? (NOERROR_KW)? (assign_opt)? (triggerphrase)? state_end
+		)
+	;
+
+createwidgetpoolstate
+	:	#(CREATE WIDGETPOOL (expression)? (PERSISTENT)? (NOERROR_KW)? state_end )
+	;
+
+createxdocumentstate
+	:	#(CREATE XDOCUMENT create_whatever_args state_end )
+	;
+
+createxnoderefstate
+	:	#(CREATE XNODEREF create_whatever_args state_end )
+	;
+
+currentvaluefunc
+	:	#(CURRENTVALUE LEFTPAREN ID (COMMA ID)? RIGHTPAREN )
+	;
+
+datatype_com
+	:	SHORT | FLOAT | CURRENCY | UNSIGNEDBYTE | ERRORCODE | IUNKNOWN
+	;
+
+datatype_dll
+	:	CHARACTER | datatype_dll_native  
+	;
+
+datatype_dll_native
+	:	BYTE | DOUBLE | FLOAT | LONG | SHORT | UNSIGNEDSHORT
+	;
+
+datatype_field
+	:	BLOB | CLOB | datatype_var
+	;
+
+datatype_param
+	:	datatype_dll_native | datatype_var
+	;
+
+datatype_var
+	:	CHARACTER | COMHANDLE | DATE | DATETIME | DATETIMETZ
+		| DECIMAL | HANDLE | INTEGER | LOGICAL | LONGCHAR | MEMPTR
+		| RAW | RECID | ROWID | TYPE_NAME | WIDGETHANDLE
+	;
+
+ddeadvisestate
+	:	#(DDE ADVISE expression (START|STOP) ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeexecutestate
+	:	#(DDE EXECUTE expression COMMAND expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddegetstate
+	:	#(DDE GET expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeinitiatestate
+	:	#(DDE INITIATE field FRAME expression APPLICATION expression TOPIC expression (NOERROR_KW)? state_end )
+	;
+
+dderequeststate
+	:	#(DDE REQUEST expression TARGET field ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddesendstate
+	:	#(DDE SEND expression SOURCE expression ITEM expression (#(TIME expression))? (NOERROR_KW)? state_end )
+	;
+
+ddeterminatestate
+	:	#(DDE TERMINATE expression (NOERROR_KW)? state_end )
+	;
+
+def_shared
+	:	SHARED
+	|	#(NEW (GLOBAL)? SHARED )
+	;
+
+def_visib
+	:	( PRIVATE | PROTECTED | PUBLIC )
+	;
+
+definebrowsestate
+	:	#(	DEFINE (def_shared)? (def_visib)? BROWSE ID
+			(#(QUERY ID))? (lockhow|NOWAIT)*
+			(	#(	DISPLAY
+					(	#(	Form_item
+							(	(RECORD_NAME)=> RECORD_NAME
+							|	expression (columnformat)?
+							|	spacephrase
+							)
+						)
+					)*
+					(#(EXCEPT (field)*))?
+				)
+				(	#(	ENABLE
+						(	#(ALL (#(EXCEPT (field)*))?)
+						|	(	#(	Form_item field
+									(	#(HELP constant)
+									|	#(VALIDATE funargs)
+									|	AUTORETURN
+									|	DISABLEAUTOZAP
+									)*
+								)
+							)*
+						)
+					)
+				)?
+			)?
+			(display_with)*
+			(tooltip_expr)?
+			(#(CONTEXTHELPID expression))?
+			state_end
+		)
+	;
+
+definebufferstate
+	:	#(	DEFINE (def_shared)? (def_visib)? BUFFER ID
+			FOR (TEMPTABLE)? RECORD_NAME (PRESELECT)? (label_constant)? (namespace_uri)? (namespace_prefix)?
+			(#(FIELDS (field)* ))? state_end
+		)
+	;
+
+definebuttonstate
+	:	#(	DEFINE (def_shared)? (def_visib)? BUTTON ID
+			(	AUTOGO
+			|	AUTOENDKEY
+			|	DEFAULT
+			|	color_expr
+			|	#(CONTEXTHELPID expression)
+			|	DROPTARGET
+			|	#(FONT expression)
+			|	#(IMAGEDOWN (imagephrase_opt)+ )
+			|	#(IMAGE (imagephrase_opt)+ )
+			|	#(IMAGEUP (imagephrase_opt)+ )
+			|	#(IMAGEINSENSITIVE (imagephrase_opt)+ )
+			|	#(MOUSEPOINTER expression )
+			|	label_constant
+			|	#(LIKE field (VALIDATE)?)
+			|	FLATBUTTON
+			|	#(NOFOCUS (FLATBUTTON)? )
+			|	NOCONVERT3DCOLORS
+			|	tooltip_expr
+			|	sizephrase (MARGINEXTRA)?
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definedatasetstate
+	:	#(	DEFINE (def_shared)? (def_visib)? DATASET ID (namespace_uri)? (namespace_prefix)? (REFERENCEONLY)?
+			FOR RECORD_NAME (COMMA RECORD_NAME)*
+			( data_relation ( (COMMA)? data_relation)* )?
+			state_end
+		)
+	;
+data_relation
+	:	#(	DATARELATION (ID)?
+			FOR RECORD_NAME COMMA RECORD_NAME (field_mapping_phrase)? (REPOSITION)?
+		)
+	;
+field_mapping_phrase
+	:	#(RELATIONFIELDS LEFTPAREN field COMMA field ( COMMA field COMMA field )* RIGHTPAREN )
+	;
+
+definedatasourcestate
+	:	#(	DEFINE (def_shared)? (def_visib)? DATASOURCE ID
+			FOR (#(QUERY ID))?
+			(source_buffer_phrase)? (COMMA source_buffer_phrase)*
+			state_end
+		)
+	;
+source_buffer_phrase
+	:	#(RECORD_NAME ( KEYS LEFTPAREN ( ROWID | field (COMMA field)* ) RIGHTPAREN )? )
+	;
+
+defineframestate
+	:	#(	DEFINE (def_shared)? (def_visib)? FRAME ID
+			(form_item)*
+			(	#(HEADER (display_item)+ )
+			|	#(BACKGROUND (display_item)+ )
+			)?
+			(#(EXCEPT (field)*))?  (framephrase)?  state_end
+		)
+	;
+
+defineimagestate
+	:	#(	DEFINE (def_shared)? (def_visib)? IMAGE ID
+			(	#(LIKE field (VALIDATE)?)
+			|	imagephrase_opt 
+			|	sizephrase
+			|	color_expr
+			|	CONVERT3DCOLORS
+			|	tooltip_expr
+			|	#(STRETCHTOFIT (RETAINSHAPE)? )
+			|	TRANSPARENT
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definemenustate
+	:	#(	DEFINE (def_shared)? (def_visib)? MENU ID
+			(menu_opt)* (menu_list_item)* state_end
+		)
+	;
+menu_opt
+	:	color_expr
+	|	#(FONT expression)
+	|	#(LIKE field (VALIDATE)?)
+	|	#(TITLE expression)
+	|	MENUBAR
+	|	PINNABLE
+	|	SUBMENUHELP
+	;
+menu_list_item
+	:	(	#(	MENUITEM ID
+				(	#(ACCELERATOR expression )
+				|	color_expr
+				|	DISABLED
+				|	#(FONT expression)
+				|	label_constant
+				|	READONLY
+				|	TOGGLEBOX
+				)*
+				(triggerphrase)? 
+			)
+		|	#(SUBMENU ID (DISABLED | label_constant | #(FONT expression) | color_expr)* )
+		|	#(RULE (#(FONT expression) | color_expr)* )
+		|	SKIP
+		)
+		// You can have PERIOD between menu items.
+		((PERIOD (RULE|SKIP|SUBMENU|MENUITEM))=> PERIOD)?
+	;
+
+defineparameterstate
+	:	#(	DEFINE (def_shared)? (def_visib)?
+			(	PARAMETER BUFFER ID FOR RECORD_NAME (PRESELECT)? (label_constant)? (#(FIELDS (field)* ))?
+			|	(INPUT|OUTPUT|INPUTOUTPUT|RETURN) PARAMETER
+				(	TABLE FOR RECORD_NAME (APPEND|BIND)*
+				|	TABLEHANDLE (FOR)? ID (APPEND|BIND)*
+				|	DATASET FOR ID (APPEND|BYVALUE|BIND)*
+				|	DATASETHANDLE ID (APPEND|BYVALUE|BIND)*
+				|	ID defineparam_var (triggerphrase)?
+				)
+			)
+			state_end
+		)
+	;
+defineparam_var
+	:	(	#(	AS
+				(	(HANDLE (TO)? datatype_dll)=> HANDLE (TO)? datatype_dll
+				|	CLASS TYPE_NAME
+				|	datatype_param
+				)
+			)
+		)?
+		(	options{greedy=true;}
+		:	casesens_or_not | #(FORMAT expression) | #(DECIMALS expression ) | #(LIKE field (VALIDATE)?)
+		|	initial_constant | label_constant | NOUNDO | extentphrase
+		)*
+	;
+
+definequerystate
+	:	#(	DEFINE (def_shared)? (def_visib)? QUERY ID
+			FOR RECORD_NAME (record_fields)?
+			(COMMA RECORD_NAME (record_fields)?)*
+			( #(CACHE expression) | SCROLLING | RCODEINFORMATION)*
+			state_end
+		)
+	;
+
+definerectanglestate
+	:	#(	DEFINE (def_shared)? (def_visib)? RECTANGLE ID
+			(	NOFILL
+			|	#(EDGECHARS expression )
+			|	#(EDGEPIXELS expression )
+			|	color_expr
+			|	GRAPHICEDGE
+			|	#(LIKE field (VALIDATE)?)
+			|	sizephrase
+			|	tooltip_expr
+			)*
+			(triggerphrase)?
+			state_end
+		)
+	;
+
+definestreamstate
+	:	#(	DEFINE (def_shared)? (def_visib)? STREAM ID state_end )
+	;
+
+definesubmenustate
+	:	#(	DEFINE (def_shared)? (def_visib)? SUBMENU ID
+			(menu_opt)* (menu_list_item)* state_end
+		)
+	;
+   
+definetemptablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? TEMPTABLE ID
+			(UNDO|NOUNDO)?
+			(namespace_uri)? (namespace_prefix)?
+			(REFERENCEONLY)?
+			(def_table_like)?
+			(label_constant)?
+			(#(BEFORETABLE ID))?
+			(RCODEINFORMATION)?
+			(def_table_field)*
+			(	#(	INDEX ID ( (AS|IS)? (UNIQUE|PRIMARY|WORDINDEX) )*
+					( ID (ASCENDING|DESCENDING|CASESENSITIVE)* )+
+				)
+			)*
+			state_end
+		)
+	;
+def_table_like
+	:	#(	LIKE RECORD_NAME (VALIDATE)?
+			( #(USEINDEX ID ((AS|IS) PRIMARY)? ) )*
+		)
+	;
+def_table_field
+	:	#(FIELD ID (fieldoption)* )
+	;
+   
+defineworktablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? WORKTABLE ID
+			(NOUNDO)? (def_table_like)? (label_constant)? (def_table_field)* state_end
+		)
+	;
+
+definevariablestate
+	:	#(	DEFINE (def_shared)? (def_visib)? VARIABLE ID
+			(fieldoption)* (triggerphrase)? state_end
+		)
+	;
+
+deletestate
+	:	#(DELETE_KW RECORD_NAME (#(VALIDATE funargs))? (NOERROR_KW)? state_end )
+	;
+
+deletealiasstate
+	:	#(DELETE_KW ALIAS (ID|QSTRING|valueexpression) state_end )
+	;
+
+deleteobjectstate
+	:	#(DELETE_KW OBJECT expression (NOERROR_KW)? state_end )
+	;
+
+deleteprocedurestate
+	:	#(DELETE_KW PROCEDURE expression (NOERROR_KW)? state_end )
+	;
+
+deletewidgetstate
+	:	#(DELETE_KW WIDGET (gwidget)* state_end )
+	;
+
+deletewidgetpoolstate
+	:	#(DELETE_KW WIDGETPOOL (expression)? (NOERROR_KW)? state_end )
+	;
+	
+destructorstate
+	:	#(	DESTRUCTOR PUBLIC TYPE_NAME LEFTPAREN RIGHTPAREN block_colon
+			code_block #(END (DESTRUCTOR)? ) state_end
+		)
+	;
+	
+dictionarystate
+	:	#(DICTIONARY state_end )
+	;
+
+disablestate
+	:	#(DISABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (framephrase)? state_end )
+	;
+
+disabletriggersstate
+	:	#(DISABLE TRIGGERS FOR (DUMP|LOAD) OF RECORD_NAME (ALLOWREPLICATION)? state_end )
+	;
+
+disconnectstate
+	:	#(DISCONNECT filenameorvalue (NOERROR_KW)? state_end )
+	;
+
+displaystate
+	:	#(	DISPLAY (stream_name)? (UNLESSHIDDEN)? (display_item)*
+			(#(EXCEPT (field)*))? (#(IN_KW WINDOW expression))?
+			(display_with)*
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+display_item
+	:	#(	Form_item
+			(	skipphrase
+			|	spacephrase
+			|	(expression|ID) (aggregatephrase|formatphrase)*
+			)
+		)
+	;
+display_with
+	:	(#(WITH BROWSE ID))=> #(WITH BROWSE ID )
+	|	framephrase
+	;
+
+dostate
+	:	#(DO (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
+	;
+
+downstate
+	:	#(DOWN ((stream_name (expression)?) | (expression (stream_name)?))? (framephrase)? state_end )
+	;
+
+// drop - see SQL grammar
+
+dynamiccurrentvaluefunc
+	:	#(DYNAMICCURRENTVALUE funargs)
+	;
+
+editorphrase
+	:	#(	EDITOR
+			(	#(INNERCHARS expression )
+			|	#(INNERLINES expression )
+			|	#(BUFFERCHARS expression )
+			|	#(BUFFERLINES expression )
+			|	LARGE
+			|	#(MAXCHARS expression )
+			|	NOBOX
+			|	NOWORDWRAP
+			|	SCROLLBARHORIZONTAL
+			|	SCROLLBARVERTICAL
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+emptytemptablestate
+	:	#(EMPTY TEMPTABLE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+enablestate
+	:	#(ENABLE (UNLESSHIDDEN)? (#(ALL (#(EXCEPT (field)*))?) | (form_item)+)? (#(IN_KW WINDOW expression))? (framephrase)? state_end )
+	;
+
+editingphrase
+	:	#(Editing_phrase (ID LEXCOLON)? EDITING block_colon (blockorstate)* END )
+	;
+
+entryfunc
+	:	#(ENTRY funargs )
+	;
+
+exportstate
+	:	#(EXPORT (stream_name)? (#(DELIMITER constant))? (display_item)* (#(EXCEPT (field)*))? (NOLOBS)? state_end )
+	;
+
+extentphrase
+	:	#(EXTENT (expression)? )
+	;
+
+fieldoption
+	:	#(	AS
+			(	CLASS TYPE_NAME
+			|	datatype_field
+			)
+		)
+	|	casesens_or_not
+	|	color_expr
+	|	#(COLUMNCODEPAGE expression )
+	|	#(CONTEXTHELPID expression)
+	|	#(DECIMALS expression )
+	|	DROPTARGET
+	|	extentphrase
+	|	#(FONT expression)
+	|	#(FORMAT expression)
+	|	#(HELP constant)
+	|	initial_constant
+	|	label_constant
+	|	#(LIKE field (VALIDATE)? )
+	|	#(MOUSEPOINTER expression )
+	|	NOUNDO
+	|	viewasphrase
+	|	TTCODEPAGE
+	|	xml_data_type
+	|	xml_node_type
+	;
+
+fillinphrase
+	:	#(FILLIN (NATIVE | sizephrase | tooltip_expr)* )
+	;
+
+findstate
+	:	#(FIND (findwhich)? recordphrase (NOWAIT|NOPREFETCH|NOERROR_KW)* state_end )
+	;
+
+forstate
+	:	#(FOR for_record_spec (block_opt)* block_colon code_block block_end )
+	;
+for_record_spec
+	:	(findwhich)? recordphrase (COMMA (findwhich)? recordphrase)*
+	;
+
+form_item
+	:	#(	Form_item
+			(	RECORD_NAME
+			|	#(TEXT LEFTPAREN (form_item)* RIGHTPAREN )
+			|	constant (formatphrase)?
+			|	spacephrase
+			|	skipphrase
+			|	widget_id
+			|	CARET
+			|	field (aggregatephrase|formatphrase)*
+			|	assign_equal
+			)
+		)
+	;
+
+formstate
+	:	#(	FORMAT
+			(form_item)*
+			(	#(HEADER (display_item)+ )
+			|	#(BACKGROUND (display_item)+ )
+			)?
+			( #(EXCEPT (field)*) )?
+			(framephrase)?
+			state_end
+		)
+	;
+
+formatphrase
+	:	#(	Format_phrase
+			(	#(AS datatype_var )
+			|	atphrase
+			|	ATTRSPACE
+			|	NOATTRSPACE
+			|	AUTORETURN
+			|	color_expr
+			|	#(CONTEXTHELPID expression)
+			|	BLANK 
+			|	#(COLON expression )
+			|	#(TO expression)
+			|	DEBLANK 
+			|	DISABLEAUTOZAP 
+			|	#(FONT expression ) 
+			|	#(FORMAT expression)
+			|	#(HELP constant)
+			|	label_constant
+			|	#(LEXAT field (formatphrase)? )
+			|	#(LIKE field )
+			|	NOLABELS
+			|	NOTABSTOP 
+			|	#(VALIDATE funargs)
+			|	#(WHEN expression)
+			|	viewasphrase
+			|	widget_id
+			)+
+		)
+	;
+
+framephrase
+	:	#(	WITH
+			(	#(ACCUMULATE (expression)? )
+			|	ATTRSPACE | NOATTRSPACE
+			|	#(CANCELBUTTON field )
+			|	CENTERED 
+			|	#(COLUMN expression )
+			|	CONTEXTHELP | CONTEXTHELPFILE expression
+			|	#(DEFAULTBUTTON field )
+			|	EXPORT
+			|	FITLASTCOLUMN
+			|	#(FONT expression )
+			|	FONTBASEDLAYOUT
+			|	#(FRAME ID)
+			|	#(LABELFONT expression )
+			|	#(LABELDCOLOR expression )
+			|	#(LABELFGCOLOR expression )
+			|	#(LABELBGCOLOR expression )
+			|	MULTIPLE | SINGLE | SEPARATORS | NOSEPARATORS | NOASSIGN| NOROWMARKERS
+			|	NOSCROLLBARVERTICAL | SCROLLBARVERTICAL
+			|	#(ROWHEIGHTCHARS expression )
+			|	#(ROWHEIGHTPIXELS expression )
+			|	EXPANDABLE | DROPTARGET | NOAUTOVALIDATE | NOCOLUMNSCROLLING
+			|	KEEPTABORDER | NOBOX | NOEMPTYSPACE | NOHIDE | NOLABELS | USEDICTEXPS | NOVALIDATE 
+			|	NOHELP | NOUNDERLINE | OVERLAY | PAGEBOTTOM | PAGETOP | NOTABSTOP
+			|	#(RETAIN expression  )
+			|	#(ROW expression )
+			|	SCREENIO | STREAMIO
+			|	#(SCROLL expression )
+			|	SCROLLABLE | SIDELABELS 
+			|	stream_name | THREED
+			|	tooltip_expr
+			|	TOPONLY | USETEXT
+			|	V6FRAME | USEREVVIDEO | USEUNDERLINE
+			|	#(	VIEWAS
+					(	#(DIALOGBOX (DIALOGHELP (expression)?)? )
+					|	MESSAGELINE
+					|	STATUSBAR
+					|	#(TOOLBAR (ATTACHMENT (TOP|BOTTOM|LEFT|RIGHT))? )
+					)
+				)
+			|	#(WIDTH expression )
+			|	#(IN_KW WINDOW expression)
+			|	colorspecification | atphrase | sizephrase | titlephrase 
+			|	#(With_columns expression COLUMNS )
+			|	#(With_down expression DOWN )
+			|	DOWN
+			|	widget_id
+			|	WITH
+			)*
+		)
+	;
+
+functionstate
+	:	#(	FUNCTION ID
+			(RETURNS|RETURN)?
+			( CLASS TYPE_NAME | datatype_var ) 
+			(PRIVATE)?
+			( function_params )?
+			(	FORWARDS (LEXCOLON|PERIOD|EOF)
+			|	(IN_KW SUPER)=> IN_KW SUPER (LEXCOLON|PERIOD|EOF)
+			|	(MAP (TO)? ID)? IN_KW expression (LEXCOLON|PERIOD|EOF)
+			|	block_colon
+				code_block
+				(	EOF
+				|	#(END (FUNCTION)? ) state_end
+				)
+			)
+		)
+	;
+function_params
+	:	#(Parameter_list LEFTPAREN (function_param)? (COMMA function_param)* RIGHTPAREN )
+	;
+function_param
+	:	#(BUFFER (ID)? FOR RECORD_NAME (PRESELECT)? )
+	|	#(INPUT function_param_arg )
+	|	#(OUTPUT function_param_arg )
+	|	#(INPUTOUTPUT function_param_arg )
+	;
+function_param_arg
+	:	TABLE (FOR)? RECORD_NAME (APPEND)? (BIND)?
+	|	TABLEHANDLE (FOR)? ID (APPEND)? (BIND)?
+	|	(DATASET|DATASETHANDLE) ID (APPEND)? (BIND)?
+	|	(ID AS)? (CLASS TYPE_NAME | datatype_var) (extentphrase)?
+	;
+
+getstate
+	:	#(GET findwhich ID (lockhow|NOWAIT)* state_end )
+	;
+
+getkeyvaluestate
+	:	#(GETKEYVALUE SECTION expression KEY (DEFAULT|expression) VALUE field state_end )
+	;
+
+goonphrase
+	:	#(GOON LEFTPAREN goon_elem ((options{greedy=true;}:COMMA)? goon_elem)* RIGHTPAREN )
+	;
+goon_elem
+	:	~(RIGHTPAREN) ( (OF)=> OF gwidget)?
+	;
+
+hidestate
+	:	#(HIDE (stream_name)? (MESSAGE|ALL|(gwidget)*) (NOPAUSE)? (#(IN_KW WINDOW expression))? state_end )
+	;
+
+ifstate
+	:	#(	IF expression THEN (blockorstate)?
+			( #(ELSE (blockorstate)? ) )?
+		)
+	;
+
+imagephrase_opt
+	:	#(FILE expression )
+	|	#(IMAGESIZE expression BY expression )
+	|	#(IMAGESIZECHARS expression BY expression )
+	|	#(IMAGESIZEPIXELS expression BY expression )
+	|	#(	FROM
+			( X expression | Y expression | ROW expression | COLUMN expression )
+			( X expression | Y expression | ROW expression | COLUMN expression )
+		)
+	;
+
+importstate
+	:	#(	IMPORT (stream_name)?
+			( #(DELIMITER constant) | UNFORMATTED )?
+			(	RECORD_NAME (#(EXCEPT (field)*))?
+			|	(field|CARET)+
+			)?
+			(NOLOBS)? (NOERROR_KW)? state_end
+		)
+	;
+
+initial_constant
+	:	#(	INITIAL
+			(	LEFTBRACE (TODAY|constant) (COMMA (TODAY|constant))* RIGHTBRACE
+			|	(TODAY|constant)
+			)
+		)
+	;
+
+inputclearstate
+	:	#(INPUT CLEAR state_end )
+	;
+
+inputclosestate
+	:	#(INPUT (stream_name)? CLOSE state_end )
+	;
+
+inputfromstate
+	:	#(INPUT (stream_name)? FROM io_phrase state_end )
+	;
+   
+inputthroughstate
+	:	#(INPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+inputoutputclosestate
+	:	#(INPUTOUTPUT (stream_name)? CLOSE state_end )
+	;
+
+inputoutputthroughstate
+	:	#(INPUTOUTPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+insertstate
+	:	#(INSERT RECORD_NAME (#(EXCEPT (field)*))? (#(USING (ROWID|RECID) expression))? (framephrase)? (NOERROR_KW)? state_end )
+	;
+	
+interfacestate
+	:	#(INTERFACE TYPE_NAME block_colon code_block #(END (INTERFACE)?) state_end )
+	;
+	
+io_phrase
+	:	(	#(OSDIR LEFTPAREN expression RIGHTPAREN (NOATTRLIST)? )
+		|	#(PRINTER  (.)? )
+		|	TERMINAL
+		|	(valueexpression | FILENAME) *
+		)
+		(	APPEND
+		|	BINARY
+		|	COLLATE
+		|	#(CONVERT ((SOURCE|TARGET) expression)* )
+		|	#(LOBDIR filenameorvalue )
+		|	NOCONVERT
+		|	ECHO | NOECHO
+		|	KEEPMESSAGES 
+		|	LANDSCAPE
+		|	#(MAP anyorvalue )
+		|	NOMAP
+		|	#(NUMCOPIES anyorvalue )
+		|	PAGED
+		|	#(PAGESIZE_KW anyorvalue )
+		|	PORTRAIT
+		|	UNBUFFERED 
+		)*
+	;
+
+label_constant
+	:	#(COLUMNLABEL constant (COMMA constant)* )
+	|	#(LABEL constant (COMMA constant)* )
+	;
+
+ldbnamefunc
+	:	#(LDBNAME LEFTPAREN (#(BUFFER RECORD_NAME) | expression) RIGHTPAREN )
+	;
+
+leavestate
+	:	#(LEAVE (BLOCK_LABEL)? state_end )
+	;
+
+lengthfunc
+	:	#(LENGTH funargs )
+	;
+
+loadstate
+	:	#(	LOAD expression
+			(	#(DIR expression )
+			|	APPLICATION
+			|	DYNAMIC
+			|	NEW
+			|	#(BASEKEY expression )
+			|	NOERROR_KW
+			)*
+			state_end
+		)
+	;
+
+loadpicturefunc 
+	:	#(LOADPICTURE (funargs)? )
+	;
+
+messagestate
+	:	#(	MESSAGE
+			( #(COLOR anyorvalue) )?
+			( #(Form_item (skipphrase | expression) ) )*
+			(	#(	VIEWAS ALERTBOX
+					(MESSAGE|QUESTION|INFORMATION|ERROR|WARNING)?
+					(BUTTONS (YESNO|YESNOCANCEL|OK|OKCANCEL|RETRYCANCEL) )?
+					(#(TITLE expression))?
+				)
+			|	#(SET field (formatphrase)? )
+			|	#(UPDATE field (formatphrase)? )
+			)*
+			( #(IN_KW WINDOW expression) )?
+			state_end
+		)
+	;
+
+methodstate
+	:	#(	METHOD (PRIVATE|PROTECTED|PUBLIC|OVERRIDE|FINAL)*
+			(	VOID
+			|	CLASS TYPE_NAME
+			|	datatype_var
+			)
+			ID
+			function_params
+			(	// Ambiguous on PERIOD, since a block_colon may be a period, and we may also
+				// be at the end of the method declaration for an INTERFACE.
+				// We predicate on the next node being Code_block.
+				// (Upper/lowercase matters. Node: Code_block. Rule/branch: code_block.)
+				(block_colon Code_block)=> block_colon code_block #(END (METHOD)? ) state_end
+			|	state_end
+			)
+		)
+	;
+
+namespace_prefix
+	:	#(NAMESPACEPREFIX constant )
+	;
+namespace_uri
+	:	#(NAMESPACEURI constant )
+	;
+
+nextstate
+	:	#(NEXT (BLOCK_LABEL)? state_end )
+	;
+
+nextpromptstate
+	:	#(NEXTPROMPT field (framephrase)? state_end )
+	;
+
+nextvaluefunc
+	:	#(NEXTVALUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN )
+	;
+
+onstate
+	:	#(	ON
+			(	(ASSIGN|CREATE|DELETE_KW|FIND|WRITE)=>
+				(	(CREATE|DELETE_KW|FIND) OF RECORD_NAME (label_constant)?
+				|	WRITE OF RECORD_NAME (label_constant)?
+					((NEW (BUFFER)? ID) (label_constant)?)?
+					((OLD (BUFFER)? ID) (label_constant)?)? 
+				|	ASSIGN OF field
+					(#(TABLE LABEL constant))?
+					(OLD (VALUE)? ID (options{greedy=true;}:defineparam_var)?)?
+		 		)
+				(OVERRIDE)?
+				(	REVERT state_end
+				|	PERSISTENT runstate
+				|	blockorstate
+				)
+			|	// ON keylabel keyfunction.
+				(. . state_end)=> . . state_end
+			|	eventlist
+				(	ANYWHERE
+				|	OF widgetlist
+					(OR eventlist OF widgetlist)*
+					(ANYWHERE)?
+				)
+				(	REVERT state_end
+				|	PERSISTENT RUN filenameorvalue
+					( #(IN_KW expression) )?
+					(	#(	Parameter_list
+							LEFTPAREN (INPUT)? expression
+							(COMMA (INPUT)? expression)*
+							RIGHTPAREN
+						)
+					)?
+					state_end
+				|	blockorstate
+				)
+			)
+		)
+	;
+
+on___phrase
+	:	#(	ON (ENDKEY|ERROR|STOP|QUIT)
+			( #(UNDO (BLOCK_LABEL)? ) )?
+			(	COMMA
+				(	#(LEAVE (BLOCK_LABEL)? )
+				|	#(NEXT (BLOCK_LABEL)? )
+				|	#(RETRY (BLOCK_LABEL)? )
+				|	#(RETURN (return_options)? )
+				)
+			)?
+		)
+	;
+
+openquerystate
+	:	#(	OPEN QUERY ID (FOR|PRESELECT) for_record_spec
+			(	querytuningphrase
+			|	#(BY expression (DESCENDING)? )
+			|	collatephrase
+			|	INDEXEDREPOSITION
+			|	#(MAXROWS expression )
+			)*
+			state_end
+		)
+	;
+
+osappendstate
+	:	#(OSAPPEND anyorvalue anyorvalue state_end )
+	;
+
+oscommandstate
+	:	#(OS400		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(BTOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(DOS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(MPE		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(OS2		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(OSCOMMAND	(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(UNIX		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	|	#(VMS		(SILENT|NOWAIT|NOCONSOLE)? (anyorvalue)* state_end )
+	;
+
+oscopystate
+	:	#(OSCOPY anyorvalue anyorvalue state_end )
+	;
+
+oscreatedirstate
+	:	#(OSCREATEDIR (anyorvalue)+ state_end )
+	;
+
+osdeletestate
+	:	#(OSDELETE (valueexpression | ~(VALUE|RECURSIVE|PERIOD) )+ (RECURSIVE)? state_end )
+	;
+
+osrenamestate
+	:	#(OSRENAME anyorvalue anyorvalue state_end )
+	;
+
+outputclosestate
+	:	#(OUTPUT (stream_name)? CLOSE state_end )
+	;
+
+outputthroughstate
+	:	#(OUTPUT (stream_name)? THROUGH io_phrase state_end )
+	;
+
+outputtostate
+	:	#(OUTPUT (stream_name)? TO io_phrase state_end )
+	;
+
+pagestate
+	:	#(PAGE (stream_name)? state_end )
+	;
+
+pausestate
+	:	#(	PAUSE (expression)?
+			(	BEFOREHIDE
+			|	#(MESSAGE constant )
+			|	NOMESSAGE
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+procedurestate
+	:	#(	PROCEDURE ID
+			(	#(	EXTERNAL constant
+					(	CDECL_KW
+					|	PASCAL_KW
+					|	STDCALL_KW
+					|	#(ORDINAL expression )
+					|	PERSISTENT
+					)*
+				)
+			|	PRIVATE
+			|	IN_KW SUPER
+			)?
+			block_colon code_block (EOF | #(END (PROCEDURE)?) state_end)
+		)
+	;
+
+processeventsstate
+	:	#(PROCESS EVENTS state_end )
+	;
+
+promptforstate
+	:	#(	PROMPTFOR (stream_name)? (UNLESSHIDDEN)? (form_item)*
+			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?
+			state_end
+		)
+	;
+
+publishstate
+	:	#(PUBLISH expression (#(FROM expression) )? (parameterlist)? state_end )
+	;
+
+putstate
+	:	#(	PUT	
+			(stream_name)? (CONTROL|UNFORMATTED)?
+			(	( #(NULL_KW (LEFTPAREN)? ) )=> #(NULL_KW (funargs)? )
+			|	skipphrase
+			|	spacephrase
+			|	expression (#(FORMAT expression)|#(AT expression )|#(TO expression))*
+			)*
+			state_end
+		)
+	;
+
+putcursorstate
+	:	#(PUT CURSOR (OFF | (#(ROW expression)|#(COLUMN expression))* ) state_end )
+	;
+
+putscreenstate
+	:	#(	PUT SCREEN
+			( ATTRSPACE | NOATTRSPACE | #(COLOR anyorvalue) | #(COLUMN expression) | #(ROW expression) | expression )*
+			state_end
+		)
+	;
+
+putkeyvaluestate
+	:	#(	PUTKEYVALUE
+			(	SECTION expression KEY (DEFAULT|expression) VALUE expression
+			|	(COLOR|FONT) (expression|ALL)
+			)
+			(NOERROR_KW)? state_end
+		)
+	;
+
+querytuningphrase
+	:	#(	QUERYTUNING LEFTPAREN
+			(	ARRAYMESSAGE | NOARRAYMESSAGE
+			|	BINDWHERE | NOBINDWHERE
+			|	#(CACHESIZE NUMBER (ROW|BYTE)? )
+			|	#(DEBUG (SQL|EXTENDED|CURSOR|DATABIND|PERFORMANCE|VERBOSE|SUMMARY|NUMBER)? )
+			|	NODEBUG
+			|	DEFERLOBFETCH
+			|	#(HINT expression )
+			|	INDEXHINT | NOINDEXHINT
+			|	JOINBYSQLDB | NOJOINBYSQLDB
+			|	LOOKAHEAD | NOLOOKAHEAD
+			|	ORDEREDJOIN
+			|	REVERSEFROM
+			|	SEPARATECONNECTION | NOSEPARATECONNECTION
+			)*
+			RIGHTPAREN
+		)
+	;
+
+quitstate
+	:	#(QUIT state_end )
+	;
+
+radiosetphrase
+	:	#(	RADIOSET
+			(	#(HORIZONTAL (EXPAND)? )
+			|	VERTICAL
+			|	(sizephrase)
+			|	#(RADIOBUTTONS 
+					(QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY)
+					(COMMA (QSTRING|UNQUOTEDSTRING) COMMA (constant|TODAY))*
+				)
+			|	tooltip_expr
+			)*
+		)
+	;
+
+rawfunc
+	:	#(RAW funargs )
+	;
+
+rawtransferstate
+	:	#(RAWTRANSFER (BUFFER|FIELD)? (RECORD_NAME|field) TO (BUFFER|FIELD)? (RECORD_NAME|field) (NOERROR_KW)? state_end )
+	;
+
+readkeystate
+	:	#(READKEY (stream_name)? (#(PAUSE expression))? state_end )
+	;
+
+repeatstate
+	:	#(REPEAT (block_for)? (block_preselect)? (block_opt)* block_colon code_block block_end )
+	;
+
+record_fields
+	:	#(FIELDS (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
+	|	#(EXCEPT (LEFTPAREN (field (#(WHEN expression))?)* RIGHTPAREN)? )
+	;
+
+recordphrase
+	:	#(	RECORD_NAME (record_fields)? (options{greedy=true;}:TODAY|constant)?
+			(	#(LEFT OUTERJOIN )
+			|	OUTERJOIN
+			|	#(OF RECORD_NAME )
+			|	#(WHERE (expression)? )
+			|	#(USEINDEX ID )
+			|	#(USING field (AND field)* )
+			|	lockhow
+			|	NOWAIT
+			|	NOPREFETCH
+			|	NOERROR_KW
+			)*
+		)
+	;
+
+releasestate
+	:	#(RELEASE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+releaseexternalstate
+	:	#(RELEASE EXTERNAL (PROCEDURE)? expression (NOERROR_KW)? state_end )
+	;
+
+releaseobjectstate
+	:	#(RELEASE OBJECT expression (NOERROR_KW)? state_end )
+	;
+
+repositionstate
+	:	#(	REPOSITION ID
+			(	#(	TO
+					(	ROWID expression (COMMA expression)* 
+					|	RECID expression
+					|	ROW expression
+					)
+				)
+			|	#(ROW expression )
+			|	#(FORWARDS expression )
+			|	#(BACKWARDS expression )
+			)
+			(NOERROR_KW)? state_end
+		)
+	;
+
+returnstate
+	:	#(RETURN (return_options)? state_end )
+	;
+
+return_options
+	:	(	( #(ERROR LEFTPAREN RECORD_NAME RIGHTPAREN) )=> expression
+		|	(ERROR)=> ERROR (expression)?
+		|	NOAPPLY (expression)?
+		|	expression
+		)
+	;
+
+runstate
+	:	#(	RUN filenameorvalue
+			(LEFTANGLE LEFTANGLE filenameorvalue RIGHTANGLE RIGHTANGLE)?
+			(	#(PERSISTENT ( #(SET (field)? ) )? )
+			|	#(SET (field)? )
+			|	#(ON (SERVER)? expression (TRANSACTION (DISTINCT)?)? )
+			|	#(IN_KW expression)
+			|	#(	ASYNCHRONOUS ( #(SET (field)? ) )?
+					( #(EVENTPROCEDURE expression ) )?
+					(#(IN_KW expression))?
+				)
+			)*
+			(parameterlist)?
+			(NOERROR_KW|anyorvalue)*
+			state_end
+		)
+	;
+
+runstoredprocedurestate
+	:	#(RUN STOREDPROCEDURE ID (assign_equal)? (NOERROR_KW)? (parameterlist)? state_end )
+	;
+
+runsuperstate
+	:	#(RUN SUPER (parameterlist)? (NOERROR_KW)? state_end )
+	;
+
+savecachestate
+	:	#(SAVE CACHE (CURRENT|COMPLETE) anyorvalue TO filenameorvalue (NOERROR_KW)? state_end )
+	;
+
+scrollstate
+	:	#(SCROLL (FROMCURRENT)? (UP)? (DOWN)? (framephrase)? state_end )
+	;
+
+seekstate
+	:	#(SEEK (INPUT|OUTPUT|stream_name) TO (expression|END) state_end )
+	;
+
+selectionlistphrase
+	:	#(	SELECTIONLIST
+			(	SINGLE
+			|	MULTIPLE
+			|	NODRAG
+			|	#(LISTITEMS constant (COMMA constant)* )
+			|	#(LISTITEMPAIRS constant (COMMA constant)* )
+			|	SCROLLBARHORIZONTAL
+			|	SCROLLBARVERTICAL
+			|	#(INNERCHARS expression )
+			|	#(INNERLINES expression )
+			|	SORT
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+setstate
+	:	#(	SET
+			(stream_name)? (UNLESSHIDDEN)? (form_item)*
+			(goonphrase)?  (#(EXCEPT (field)*))?  (#(IN_KW WINDOW expression))?  (framephrase)?  (editingphrase)?  (NOERROR_KW)?
+			state_end
+		)
+	;
+
+showstatsstate
+	:	#(SHOWSTATS (CLEAR)? state_end )
+	;
+
+sizephrase
+	:	#(SIZE expression BY expression )
+	|	#(SIZECHARS expression BY expression )
+	|	#(SIZEPIXELS expression BY expression )
+	;
+
+skipphrase
+	:	#(SKIP (funargs)? )
+	;
+
+sliderphrase
+	:	#(	SLIDER
+			(	HORIZONTAL
+			|	#(MAXVALUE expression )
+			|	#(MINVALUE expression )
+			|	VERTICAL
+			|	NOCURRENTVALUE
+			|	LARGETOSMALL
+			|	#(TICMARKS (NONE|TOP|BOTTOM|LEFT|RIGHT|BOTH) (#(FREQUENCY expression))? )
+			|	tooltip_expr
+			|	sizephrase
+			)*
+		)
+	;
+
+spacephrase
+	:	#(SPACE (funargs)? )
+	;
+
+state_end
+	:	PERIOD | EOF
+	;
+
+statusstate
+	:	#(	STATUS
+			(	#(DEFAULT (expression)? )
+			|	#(INPUT (OFF|expression)? )
+			)
+			(#(IN_KW WINDOW expression))?
+		state_end
+		)
+	;
+
+stopstate
+	:	#(STOP state_end )
+	;
+
+stream_name
+	:	#(STREAM ID )
+	;
+
+subscribestate
+	:	#(	SUBSCRIBE ( #(PROCEDURE expression) )? (TO)? expression
+			(ANYWHERE | #(IN_KW expression) )
+			( #(RUNPROCEDURE expression) )?
+			(NOERROR_KW)? state_end
+		)
+	;
+   
+substringfunc
+	:	#(SUBSTRING funargs )
+	;
+
+systemdialogcolorstate
+	:	#(SYSTEMDIALOG COLOR expression ( #(UPDATE field) )? (#(IN_KW WINDOW expression))? state_end )
+	;
+
+systemdialogfontstate
+	:	#(	SYSTEMDIALOG FONT expression
+			(	ANSIONLY
+			|	FIXEDONLY
+			|	#(MAXSIZE expression )
+			|	#(MINSIZE expression )
+			|	#(UPDATE field )
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialoggetdirstate
+	:	#(	SYSTEMDIALOG GETDIR field
+			(	#(INITIALDIR expression)
+			|	RETURNTOSTARTDIR
+			|	#(TITLE expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialoggetfilestate
+	:	#(	SYSTEMDIALOG GETFILE field
+			(	#(	FILTERS expression expression (COMMA expression expression)*
+					( #(INITIALFILTER expression ) )?
+				)
+			|	ASKOVERWRITE
+			|	CREATETESTFILE
+			|	#(DEFAULTEXTENSION expression )
+			|	#(INITIALDIR expression )
+			|	MUSTEXIST
+			|	RETURNTOSTARTDIR
+			|	SAVEAS
+			|	#(TITLE expression)
+			|	USEFILENAME
+			|	#(UPDATE field )
+			|	#(IN_KW WINDOW expression)
+			)*
+			state_end
+		)
+	;
+
+systemdialogprintersetupstate
+	:	#(	SYSTEMDIALOG PRINTERSETUP
+			( #(NUMCOPIES expression) | #(UPDATE field) | LANDSCAPE | PORTRAIT | #(IN_KW WINDOW expression) )*
+			state_end
+		)
+	;
+
+systemhelpstate
+	:	#(	SYSTEMHELP expression
+			( #(WINDOWNAME expression) )?
+			(	#(ALTERNATEKEY expression )
+			|	#(CONTEXT expression )
+			|	CONTENTS 
+			|	#(SETCONTENTS expression )
+			|	FINDER
+			|	#(CONTEXTPOPUP expression )
+			|	#(HELPTOPIC expression )
+			|	#(KEY expression )
+			|	#(PARTIALKEY (expression)? )
+			|	#(MULTIPLEKEY expression TEXT expression )
+			|	#(COMMAND expression )
+			|	#(POSITION (MAXIMIZE | X expression Y expression WIDTH expression HEIGHT expression) )
+			|	FORCEFILE
+			|	HELP
+			|	QUIT
+			)
+			state_end
+		)
+	;
+
+textphrase
+	:	#(TEXT (sizephrase | tooltip_expr)* )
+	;
+
+titlephrase
+	:	#(TITLE (color_expr | #(COLOR anyorvalue) | #(FONT expression) )* expression )
+	;
+
+toggleboxphrase
+	:	#(TOGGLEBOX (sizephrase | tooltip_expr)* )
+	;
+
+tooltip_expr
+	:	#(TOOLTIP (valueexpression | constant) )
+	;
+
+transactionmodeautomaticstate
+	:	#(TRANSACTIONMODE AUTOMATIC (CHAINED)? state_end )
+	;
+
+triggerphrase
+	:	#(	TRIGGERS block_colon
+			#(	Code_block
+				( #(ON eventlist (ANYWHERE)? (PERSISTENT runstate | blockorstate) ) )*
+			)
+			#(END (TRIGGERS)? )
+		)
+	;
+
+triggerprocedurestate
+	:	#(	TRIGGER PROCEDURE FOR
+			(	(CREATE|DELETE_KW|FIND|REPLICATIONCREATE|REPLICATIONDELETE)
+				OF RECORD_NAME (label_constant)?
+			|	(WRITE|REPLICATIONWRITE) OF RECORD_NAME (label_constant)?
+				(NEW (BUFFER)? ID (label_constant)?)?
+				(OLD (BUFFER)? ID (label_constant)?)? 
+			|	ASSIGN
+				(	#(OF field (#(TABLE LABEL constant))? )
+				|	#(NEW (VALUE)? id:ID defineparam_var )
+				)? 
+				(	#(OLD (VALUE)? id2:ID defineparam_var )
+				)?
+			)
+			state_end
+		)
+	;
+
+underlinestate
+	:	#(UNDERLINE (stream_name)? (#(Form_item field (formatphrase)? ))* (framephrase)? state_end )
+	;
+
+undostate
+	:	#(	UNDO (BLOCK_LABEL)?
+			(	COMMA
+				(	#(LEAVE (BLOCK_LABEL)? )
+				|	#(NEXT (BLOCK_LABEL)? )
+				|	#(RETRY (BLOCK_LABEL)? )
+				|	#(RETURN (return_options)? )
+				)
+			)?
+			state_end
+		)
+	;
+
+unloadstate
+	:	#(UNLOAD expression (NOERROR_KW)? state_end )
+	;
+
+unsubscribestate
+	:	#(UNSUBSCRIBE (#(PROCEDURE expression))? (TO)? (expression|ALL) (#(IN_KW expression))? state_end )
+	;
+
+upstate
+	:	#(UP (options{greedy=true;}:stream_name)? (expression)? (stream_name)? (framephrase)? state_end )
+	;
+
+updatestatement
+	:	(#(UPDATE RECORD_NAME SET))=> sqlupdatestate
+	|	updatestate
+	;
+
+updatestate
+	:	#(	UPDATE
+			(UNLESSHIDDEN)?	
+			(form_item)*
+			(goonphrase)?
+			(#(EXCEPT (field)*))?
+			(#(IN_KW WINDOW expression))?
+			(framephrase)?
+			(editingphrase)?
+			(NOERROR_KW)?
+			state_end
+		)
+	;
+
+usestate
+	:	#(USE expression (NOERROR_KW)? state_end )
+	;
+
+validatestate
+	:	#(VALIDATE RECORD_NAME (NOERROR_KW)? state_end )
+	;
+
+viewstate
+	:	#(VIEW (stream_name)? (gwidget)* (#(IN_KW WINDOW expression))? state_end )
+	;
+
+viewasphrase
+	:	#(	VIEWAS
+			(	comboboxphrase
+			|	editorphrase
+			|	fillinphrase
+			|	radiosetphrase
+			|	selectionlistphrase
+			|	sliderphrase
+			|	textphrase
+			|	toggleboxphrase
+			)
+		)
+	;
+
+waitforstate
+	:	#(	WAITFOR
+			eventlist OF widgetlist
+			(#(OR eventlist OF widgetlist))*
+			(#(FOCUS gwidget))?
+			(#(PAUSE expression))?
+			(EXCLUSIVEWEBUSER (expression)?)?
+			state_end
+		)
+	;
+
+widget_id: #(WIDGETID expression ) ;
+
+xml_data_type: #(XMLDATATYPE constant ) ;
+xml_node_type: #(XMLNODETYPE constant ) ;
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Begin SQL
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+altertablestate
+	:	#(	ALTER TABLE RECORD_NAME
+			(	ADD COLUMN sql_col_def
+			|	DROP COLUMN field
+			|	ALTER COLUMN field
+				(  	#(FORMAT expression)
+				|	label_constant
+     				|	#(DEFAULT expression )
+				| 	casesens_or_not
+   				)*
+			)
+			state_end
+		)
+	;
+
+closestate
+	:	#(CLOSE ID state_end )
+	;
+
+createindexstate
+	:	#(CREATE (UNIQUE)? INDEX ID ON RECORD_NAME #(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ) state_end )
+	;
+
+createtablestate
+	:	#(	CREATE TABLE ID 
+			LEFTPAREN
+			(	sql_col_def
+			|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
+			)
+			(	COMMA
+				(	sql_col_def
+				|	#(UNIQUE LEFTPAREN ID (COMMA ID)* RIGHTPAREN)
+				)
+			)*
+			RIGHTPAREN
+			state_end
+		)
+	;
+
+createviewstate
+	:	#(CREATE VIEW ID (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? AS selectstatea state_end )
+	;
+
+declarecursorstate
+	:	#(DECLARE ID CURSOR FOR selectstatea (#(FOR (#(READ (ONLY)?) | UPDATE)))? state_end )
+	;
+
+deletefromstate
+	:	#(	DELETE_KW FROM RECORD_NAME
+			( #(WHERE (sqlexpression | #(CURRENT OF ID))? ) )?
+			state_end
+		)
+	;
+
+dropindexstate
+	:	#(DROP INDEX ID state_end )
+	;
+
+droptablestate
+	:	#(DROP TABLE RECORD_NAME state_end )
+	;
+
+dropviewstate
+	:	#(DROP VIEW ID state_end )
+	;
+
+fetchstate
+	:	#(FETCH ID INTO field (fetch_indicator)? (COMMA field (fetch_indicator)? )* state_end )
+	;
+fetch_indicator
+	:	#(INDICATOR field )
+	|	field
+	;
+
+grantstate
+	: 	#(GRANT (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to (WITH GRANT OPTION)? state_end )
+	;
+grant_rev_opt
+	:	#(ALL (PRIVILEGES)? )
+	|	(	SELECT | INSERT | DELETE_KW
+		|	#(UPDATE (#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))? )
+		|	COMMA
+		)+
+	;
+grant_rev_to
+	:	#(TO (PUBLIC | FILENAME (COMMA FILENAME)*) )
+	|	#(FROM (PUBLIC | FILENAME (COMMA FILENAME)*) )
+	;
+
+insertintostate
+	:	#(	INSERT INTO RECORD_NAME
+			(#(Field_list LEFTPAREN field (COMMA field)* RIGHTPAREN ))?
+			(	#(	VALUES LEFTPAREN sqlexpression (fetch_indicator)?
+					(COMMA sqlexpression (fetch_indicator)?)* RIGHTPAREN
+				)
+			|	selectstatea
+			)
+			state_end
+		)
+	;
+
+openstate
+	: 	#(OPEN ID state_end )
+	;
+
+revokestate
+	: 	#(REVOKE (grant_rev_opt) ON (RECORD_NAME|ID) grant_rev_to state_end )
+	;
+
+selectstate
+	: 	selectstatea state_end
+	;
+
+selectstatea
+	:	#(	SELECT
+			(ALL | DISTINCT)?
+			(	STAR
+			|	#(	Sql_select_what
+					(	(LEFTPAREN)=> LEFTPAREN sqlexpression (formatphrase)? RIGHTPAREN (formatphrase)?
+					|	sqlexpression (formatphrase)?
+					)
+					(COMMA sqlexpression (formatphrase)?)*
+				)
+			)
+			( #(INTO field (fetch_indicator)? (COMMA field (fetch_indicator)?)* ) )?
+			#(FROM select_from_spec (COMMA select_from_spec)* )
+			( #(GROUP BY expression (COMMA expression)* ) )?
+			( #(HAVING sqlexpression) )?
+			(	#(ORDER BY select_order_expr )
+			|	#(BY select_order_expr )
+			)?
+			// Ick. I had trouble convincing antlr not to check the syntactic predicate
+			// if next token _t was null.
+			(	{_t != null}? ( ( #(WITH CHECK OPTION ) )=>{_t != null}? #(WITH CHECK OPTION ) | )
+			|	// empty alt
+			)
+			(framephrase)?
+			( #(UNION (ALL)? selectstatea) )?
+		)
+	;
+select_from_spec
+	:	select_sqltableref
+		(	#(LEFT (OUTER)? JOIN select_sqltableref ON sqlexpression )
+		|	#(RIGHT (OUTER)? JOIN select_sqltableref ON sqlexpression )
+		|	#(INNER JOIN select_sqltableref ON sqlexpression )
+		|	#(OUTER JOIN select_sqltableref ON sqlexpression )
+		|	#(JOIN select_sqltableref ON sqlexpression )
+		)*
+		( #(WHERE sqlexpression) )?
+	;
+select_sqltableref
+	:	(RECORD_NAME | ID) (ID)?
+	;
+select_order_expr
+	:	sqlscalar (ASC|DESCENDING)? (COMMA sqlscalar (ASC|DESCENDING)?)*
+	;
+
+sqlupdatestate
+	: 	#(	UPDATE RECORD_NAME SET sqlupdate_equal (COMMA sqlupdate_equal)*
+			( #(WHERE (sqlexpression | CURRENT OF ID) ) )?
+			state_end
+		)
+	;
+sqlupdate_equal
+	:	#(EQUAL field sqlexpression (fetch_indicator)? )
+	;
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// sql functions and phrases
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+sqlaggregatefunc
+// also see maximumfunc and minimumfunc
+	:	#(AVG sqlaggregatefunc_arg )
+	|	#(COUNT sqlaggregatefunc_arg )
+	|	#(SUM sqlaggregatefunc_arg )
+	;
+sqlaggregatefunc_arg
+	:	LEFTPAREN
+		(	DISTINCT
+			(	LEFTPAREN field RIGHTPAREN
+			|	field
+			)
+		|	STAR
+		|	(ALL)? sqlscalar
+		)
+		RIGHTPAREN
+	;
+
+sql_col_def
+	:	#(	ID
+			. // datatype
+			(PRECISION)?
+			(LEFTPAREN NUMBER (COMMA NUMBER)? RIGHTPAREN)?
+			( #(Not_null NOT NULL_KW (UNIQUE)? ) )?
+			(	label_constant
+			|	#(DEFAULT expression )
+			|  	#(FORMAT expression)
+			| 	casesens_or_not
+			)*
+		)
+	;
+
+
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// sqlexpression 
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+sqlexpression
+	:	#(OR sqlexpression sqlexpression )
+	|	#(AND sqlexpression sqlexpression )
+	|	#(NOT sqlexpression )
+	|	#(MATCHES	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(BEGINS	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(CONTAINS	sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(EQ		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(NE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(GTHAN		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(GE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(LTHAN		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(LE		sqlscalar (sqlscalar | sql_comp_query) )
+	|	#(EXISTS LEFTPAREN selectstatea RIGHTPAREN )
+	|	#(Sql_begins (NOT)? BEGINS sqlscalar )
+	|	#(Sql_between (NOT)? BETWEEN sqlscalar AND sqlscalar )
+	|	#(Sql_in (NOT)? IN_KW LEFTPAREN (selectstatea | sql_in_val (COMMA sql_in_val)*) RIGHTPAREN )
+	|	#(Sql_like (NOT)? LIKE sqlscalar (ESCAPE sqlscalar)? )
+	|	#(Sql_null_test IS (NOT)? NULL_KW )
+	|	sqlscalar
+	;
+sql_comp_query
+	:	#(Sql_comp_query (ANY|ALL|SOME)? LEFTPAREN selectstatea RIGHTPAREN )
+	;
+sql_in_val
+	:	field (fetch_indicator)? | constant | USERID
+	;
+sqlscalar
+	:	#(PLUS sqlscalar sqlscalar )
+	|	#(MINUS sqlscalar sqlscalar )
+	|	#(MULTIPLY sqlscalar sqlscalar )
+	|	#(DIVIDE sqlscalar sqlscalar )
+	|	#(MODULO sqlscalar sqlscalar )
+	|	#(UNARY_PLUS exprt )
+	|	#(UNARY_MINUS exprt )
+	|	(LEFTPAREN)=> #(LEFTPAREN sqlexpression RIGHTPAREN )
+	|	exprt
+	;
+
+

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.g
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.g	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.g	2006-03-31 19:19:00 UTC (rev 66)
@@ -607,7 +607,7 @@
 	:	(	TABLEHANDLE field parameter_dataset_options
 		|	TABLE (FOR)? RECORD_NAME parameter_dataset_options
 		|	DATASET ID parameter_dataset_options
-		|	DATASETHANDLE ID parameter_dataset_options
+		|	DATASETHANDLE field parameter_dataset_options
 		|	ID AS (	CLASS TYPE_NAME | datatype_com | datatype_var )
 		|	expression (AS datatype_com)?
 		)

Modified: trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.java
===================================================================
--- trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.java	2006-03-31 04:21:30 UTC (rev 65)
+++ trunk/org.prorefactor.core/src/org/prorefactor/treeparserbase/JPTreeParser.java	2006-03-31 19:19:00 UTC (rev 66)
@@ -29579,19 +29579,18 @@
 			AST tmp1799_AST_in = (AST)_t;
 			match(_t,DATASETHANDLE);
 			_t = _t.getNextSibling();
-			AST tmp1800_AST_in = (AST)_t;
-			match(_t,ID);
-			_t = _t.getNextSibling();
+			field(_t);
+			_t = _retTree;
 			parameter_dataset_options(_t);
 			_t = _retTree;
 			break;
 		}
 		case ID:
 		{
-			AST tmp1801_AST_in = (AST)_t;
+			AST tmp1800_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp1802_AST_in = (AST)_t;
+			AST tmp1801_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getNextSibling();
 			{
@@ -29599,10 +29598,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp1803_AST_in = (AST)_t;
+				AST tmp1802_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp1804_AST_in = (AST)_t;
+				AST tmp1803_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -29657,7 +29656,7 @@
 				switch ( _t.getType()) {
 				case AS:
 				{
-					AST tmp1805_AST_in = (AST)_t;
+					AST tmp1804_AST_in = (AST)_t;
 					match(_t,AS);
 					_t = _t.getNextSibling();
 					datatype_com(_t);
@@ -29687,14 +29686,14 @@
 		switch ( _t.getType()) {
 		case BYPOINTER:
 		{
-			AST tmp1806_AST_in = (AST)_t;
+			AST tmp1805_AST_in = (AST)_t;
 			match(_t,BYPOINTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYVARIANTPOINTER:
 		{
-			AST tmp1807_AST_in = (AST)_t;
+			AST tmp1806_AST_in = (AST)_t;
 			match(_t,BYVARIANTPOINTER);
 			_t = _t.getNextSibling();
 			break;
@@ -29721,7 +29720,7 @@
 		switch ( _t.getType()) {
 		case APPEND:
 		{
-			AST tmp1808_AST_in = (AST)_t;
+			AST tmp1807_AST_in = (AST)_t;
 			match(_t,APPEND);
 			_t = _t.getNextSibling();
 			break;
@@ -29746,21 +29745,21 @@
 		switch ( _t.getType()) {
 		case BYVALUE:
 		{
-			AST tmp1809_AST_in = (AST)_t;
+			AST tmp1808_AST_in = (AST)_t;
 			match(_t,BYVALUE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BYREFERENCE:
 		{
-			AST tmp1810_AST_in = (AST)_t;
+			AST tmp1809_AST_in = (AST)_t;
 			match(_t,BYREFERENCE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BIND:
 		{
-			AST tmp1811_AST_in = (AST)_t;
+			AST tmp1810_AST_in = (AST)_t;
 			match(_t,BIND);
 			_t = _t.getNextSibling();
 			break;
@@ -29788,42 +29787,42 @@
 		switch ( _t.getType()) {
 		case SHORT:
 		{
-			AST tmp1812_AST_in = (AST)_t;
+			AST tmp1811_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp1813_AST_in = (AST)_t;
+			AST tmp1812_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENCY:
 		{
-			AST tmp1814_AST_in = (AST)_t;
+			AST tmp1813_AST_in = (AST)_t;
 			match(_t,CURRENCY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDBYTE:
 		{
-			AST tmp1815_AST_in = (AST)_t;
+			AST tmp1814_AST_in = (AST)_t;
 			match(_t,UNSIGNEDBYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORCODE:
 		{
-			AST tmp1816_AST_in = (AST)_t;
+			AST tmp1815_AST_in = (AST)_t;
 			match(_t,ERRORCODE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case IUNKNOWN:
 		{
-			AST tmp1817_AST_in = (AST)_t;
+			AST tmp1816_AST_in = (AST)_t;
 			match(_t,IUNKNOWN);
 			_t = _t.getNextSibling();
 			break;
@@ -29844,112 +29843,112 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp1818_AST_in = (AST)_t;
+			AST tmp1817_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMHANDLE:
 		{
-			AST tmp1819_AST_in = (AST)_t;
+			AST tmp1818_AST_in = (AST)_t;
 			match(_t,COMHANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATE:
 		{
-			AST tmp1820_AST_in = (AST)_t;
+			AST tmp1819_AST_in = (AST)_t;
 			match(_t,DATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIME:
 		{
-			AST tmp1821_AST_in = (AST)_t;
+			AST tmp1820_AST_in = (AST)_t;
 			match(_t,DATETIME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATETIMETZ:
 		{
-			AST tmp1822_AST_in = (AST)_t;
+			AST tmp1821_AST_in = (AST)_t;
 			match(_t,DATETIMETZ);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DECIMAL:
 		{
-			AST tmp1823_AST_in = (AST)_t;
+			AST tmp1822_AST_in = (AST)_t;
 			match(_t,DECIMAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case HANDLE:
 		{
-			AST tmp1824_AST_in = (AST)_t;
+			AST tmp1823_AST_in = (AST)_t;
 			match(_t,HANDLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case INTEGER:
 		{
-			AST tmp1825_AST_in = (AST)_t;
+			AST tmp1824_AST_in = (AST)_t;
 			match(_t,INTEGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGICAL:
 		{
-			AST tmp1826_AST_in = (AST)_t;
+			AST tmp1825_AST_in = (AST)_t;
 			match(_t,LOGICAL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONGCHAR:
 		{
-			AST tmp1827_AST_in = (AST)_t;
+			AST tmp1826_AST_in = (AST)_t;
 			match(_t,LONGCHAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MEMPTR:
 		{
-			AST tmp1828_AST_in = (AST)_t;
+			AST tmp1827_AST_in = (AST)_t;
 			match(_t,MEMPTR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RAW:
 		{
-			AST tmp1829_AST_in = (AST)_t;
+			AST tmp1828_AST_in = (AST)_t;
 			match(_t,RAW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RECID:
 		{
-			AST tmp1830_AST_in = (AST)_t;
+			AST tmp1829_AST_in = (AST)_t;
 			match(_t,RECID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ROWID:
 		{
-			AST tmp1831_AST_in = (AST)_t;
+			AST tmp1830_AST_in = (AST)_t;
 			match(_t,ROWID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TYPE_NAME:
 		{
-			AST tmp1832_AST_in = (AST)_t;
+			AST tmp1831_AST_in = (AST)_t;
 			match(_t,TYPE_NAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WIDGETHANDLE:
 		{
-			AST tmp1833_AST_in = (AST)_t;
+			AST tmp1832_AST_in = (AST)_t;
 			match(_t,WIDGETHANDLE);
 			_t = _t.getNextSibling();
 			break;
@@ -29966,7 +29965,7 @@
 		
 		AST parameterlist_noroot_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp1834_AST_in = (AST)_t;
+		AST tmp1833_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -29998,7 +29997,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1835_AST_in = (AST)_t;
+				AST tmp1834_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				parameter(_t);
@@ -30010,7 +30009,7 @@
 			
 		} while (true);
 		}
-		AST tmp1836_AST_in = (AST)_t;
+		AST tmp1835_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -30021,10 +30020,10 @@
 		AST eventlist_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t264 = _t;
-		AST tmp1837_AST_in = (AST)_t;
+		AST tmp1836_AST_in = (AST)_t;
 		match(_t,Event_list);
 		_t = _t.getFirstChild();
-		AST tmp1838_AST_in = (AST)_t;
+		AST tmp1837_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -30032,10 +30031,10 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1839_AST_in = (AST)_t;
+				AST tmp1838_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp1840_AST_in = (AST)_t;
+				AST tmp1839_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -30059,15 +30058,15 @@
 		case VALUE:
 		{
 			AST __t271 = _t;
-			AST tmp1841_AST_in = (AST)_t;
+			AST tmp1840_AST_in = (AST)_t;
 			match(_t,VALUE);
 			_t = _t.getFirstChild();
-			AST tmp1842_AST_in = (AST)_t;
+			AST tmp1841_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1843_AST_in = (AST)_t;
+			AST tmp1842_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t271;
@@ -30076,7 +30075,7 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp1844_AST_in = (AST)_t;
+			AST tmp1843_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			break;
@@ -30103,7 +30102,7 @@
 		}
 		case FILENAME:
 		{
-			AST tmp1845_AST_in = (AST)_t;
+			AST tmp1844_AST_in = (AST)_t;
 			match(_t,FILENAME);
 			_t = _t.getNextSibling();
 			break;
@@ -30121,15 +30120,15 @@
 		AST valueexpression_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t274 = _t;
-		AST tmp1846_AST_in = (AST)_t;
+		AST tmp1845_AST_in = (AST)_t;
 		match(_t,VALUE);
 		_t = _t.getFirstChild();
-		AST tmp1847_AST_in = (AST)_t;
+		AST tmp1846_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		expression(_t);
 		_t = _retTree;
-		AST tmp1848_AST_in = (AST)_t;
+		AST tmp1847_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t274;
@@ -30165,21 +30164,21 @@
 		switch ( _t.getType()) {
 		case SHARELOCK:
 		{
-			AST tmp1849_AST_in = (AST)_t;
+			AST tmp1848_AST_in = (AST)_t;
 			match(_t,SHARELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case EXCLUSIVELOCK:
 		{
-			AST tmp1850_AST_in = (AST)_t;
+			AST tmp1849_AST_in = (AST)_t;
 			match(_t,EXCLUSIVELOCK);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case NOLOCK:
 		{
-			AST tmp1851_AST_in = (AST)_t;
+			AST tmp1850_AST_in = (AST)_t;
 			match(_t,NOLOCK);
 			_t = _t.getNextSibling();
 			break;
@@ -30201,12 +30200,12 @@
 		case LEFTPAREN:
 		{
 			AST __t299 = _t;
-			AST tmp1852_AST_in = (AST)_t;
+			AST tmp1851_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1853_AST_in = (AST)_t;
+			AST tmp1852_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t299;
@@ -30269,7 +30268,7 @@
 		case USER_FUNC:
 		{
 			AST __t300 = _t;
-			AST tmp1854_AST_in = (AST)_t;
+			AST tmp1853_AST_in = (AST)_t;
 			match(_t,USER_FUNC);
 			_t = _t.getFirstChild();
 			parameterlist_noroot(_t);
@@ -30281,7 +30280,7 @@
 		case LOCAL_METHOD_REF:
 		{
 			AST __t301 = _t;
-			AST tmp1855_AST_in = (AST)_t;
+			AST tmp1854_AST_in = (AST)_t;
 			match(_t,LOCAL_METHOD_REF);
 			_t = _t.getFirstChild();
 			parameterlist_noroot(_t);
@@ -30299,7 +30298,7 @@
 		case Entered_func:
 		{
 			AST __t307 = _t;
-			AST tmp1856_AST_in = (AST)_t;
+			AST tmp1855_AST_in = (AST)_t;
 			match(_t,Entered_func);
 			_t = _t.getFirstChild();
 			field(_t);
@@ -30309,7 +30308,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp1857_AST_in = (AST)_t;
+				AST tmp1856_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -30324,7 +30323,7 @@
 			}
 			}
 			}
-			AST tmp1858_AST_in = (AST)_t;
+			AST tmp1857_AST_in = (AST)_t;
 			match(_t,ENTERED);
 			_t = _t.getNextSibling();
 			_t = __t307;
@@ -30333,7 +30332,7 @@
 		}
 		case RECORD_NAME:
 		{
-			AST tmp1859_AST_in = (AST)_t;
+			AST tmp1858_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -30348,10 +30347,10 @@
 				try {
 					{
 					AST __t303 = _t;
-					AST tmp1860_AST_in = (AST)_t;
+					AST tmp1859_AST_in = (AST)_t;
 					match(_t,NEW);
 					_t = _t.getFirstChild();
-					AST tmp1861_AST_in = (AST)_t;
+					AST tmp1860_AST_in = (AST)_t;
 					match(_t,TYPE_NAME);
 					_t = _t.getNextSibling();
 					_t = __t303;
@@ -30366,10 +30365,10 @@
 			}
 			if ( synPredMatched304 ) {
 				AST __t305 = _t;
-				AST tmp1862_AST_in = (AST)_t;
+				AST tmp1861_AST_in = (AST)_t;
 				match(_t,NEW);
 				_t = _t.getFirstChild();
-				AST tmp1863_AST_in = (AST)_t;
+				AST tmp1862_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				parameterlist(_t);
@@ -30409,217 +30408,217 @@
 		switch ( _t.getType()) {
 		case AAMEMORY:
 		{
-			AST tmp1864_AST_in = (AST)_t;
+			AST tmp1863_AST_in = (AST)_t;
 			match(_t,AAMEMORY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ACTIVEWINDOW:
 		{
-			AST tmp1865_AST_in = (AST)_t;
+			AST tmp1864_AST_in = (AST)_t;
 			match(_t,ACTIVEWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUDITCONTROL:
 		{
-			AST tmp1866_AST_in = (AST)_t;
+			AST tmp1865_AST_in = (AST)_t;
 			match(_t,AUDITCONTROL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case AUDITPOLICY:
 		{
-			AST tmp1867_AST_in = (AST)_t;
+			AST tmp1866_AST_in = (AST)_t;
 			match(_t,AUDITPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLIPBOARD:
 		{
-			AST tmp1868_AST_in = (AST)_t;
+			AST tmp1867_AST_in = (AST)_t;
 			match(_t,CLIPBOARD);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CODEBASELOCATOR:
 		{
-			AST tmp1869_AST_in = (AST)_t;
+			AST tmp1868_AST_in = (AST)_t;
 			match(_t,CODEBASELOCATOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COLORTABLE:
 		{
-			AST tmp1870_AST_in = (AST)_t;
+			AST tmp1869_AST_in = (AST)_t;
 			match(_t,COLORTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMPILER:
 		{
-			AST tmp1871_AST_in = (AST)_t;
+			AST tmp1870_AST_in = (AST)_t;
 			match(_t,COMPILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case COMSELF:
 		{
-			AST tmp1872_AST_in = (AST)_t;
+			AST tmp1871_AST_in = (AST)_t;
 			match(_t,COMSELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CURRENTWINDOW:
 		{
-			AST tmp1873_AST_in = (AST)_t;
+			AST tmp1872_AST_in = (AST)_t;
 			match(_t,CURRENTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEBUGGER:
 		{
-			AST tmp1874_AST_in = (AST)_t;
+			AST tmp1873_AST_in = (AST)_t;
 			match(_t,DEBUGGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DEFAULTWINDOW:
 		{
-			AST tmp1875_AST_in = (AST)_t;
+			AST tmp1874_AST_in = (AST)_t;
 			match(_t,DEFAULTWINDOW);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ERRORSTATUS:
 		{
-			AST tmp1876_AST_in = (AST)_t;
+			AST tmp1875_AST_in = (AST)_t;
 			match(_t,ERRORSTATUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FILEINFORMATION:
 		{
-			AST tmp1877_AST_in = (AST)_t;
+			AST tmp1876_AST_in = (AST)_t;
 			match(_t,FILEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FOCUS:
 		{
-			AST tmp1878_AST_in = (AST)_t;
+			AST tmp1877_AST_in = (AST)_t;
 			match(_t,FOCUS);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FONTTABLE:
 		{
-			AST tmp1879_AST_in = (AST)_t;
+			AST tmp1878_AST_in = (AST)_t;
 			match(_t,FONTTABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LASTEVENT:
 		{
-			AST tmp1880_AST_in = (AST)_t;
+			AST tmp1879_AST_in = (AST)_t;
 			match(_t,LASTEVENT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LOGMANAGER:
 		{
-			AST tmp1881_AST_in = (AST)_t;
+			AST tmp1880_AST_in = (AST)_t;
 			match(_t,LOGMANAGER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MOUSE:
 		{
-			AST tmp1882_AST_in = (AST)_t;
+			AST tmp1881_AST_in = (AST)_t;
 			match(_t,MOUSE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROFILER:
 		{
-			AST tmp1883_AST_in = (AST)_t;
+			AST tmp1882_AST_in = (AST)_t;
 			match(_t,PROFILER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RCODEINFORMATION:
 		{
-			AST tmp1884_AST_in = (AST)_t;
+			AST tmp1883_AST_in = (AST)_t;
 			match(_t,RCODEINFORMATION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SECURITYPOLICY:
 		{
-			AST tmp1885_AST_in = (AST)_t;
+			AST tmp1884_AST_in = (AST)_t;
 			match(_t,SECURITYPOLICY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SELF:
 		{
-			AST tmp1886_AST_in = (AST)_t;
+			AST tmp1885_AST_in = (AST)_t;
 			match(_t,SELF);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SESSION:
 		{
-			AST tmp1887_AST_in = (AST)_t;
+			AST tmp1886_AST_in = (AST)_t;
 			match(_t,SESSION);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOURCEPROCEDURE:
 		{
-			AST tmp1888_AST_in = (AST)_t;
+			AST tmp1887_AST_in = (AST)_t;
 			match(_t,SOURCEPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUPER:
 		{
-			AST tmp1889_AST_in = (AST)_t;
+			AST tmp1888_AST_in = (AST)_t;
 			match(_t,SUPER);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TARGETPROCEDURE:
 		{
-			AST tmp1890_AST_in = (AST)_t;
+			AST tmp1889_AST_in = (AST)_t;
 			match(_t,TARGETPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEXTCURSOR:
 		{
-			AST tmp1891_AST_in = (AST)_t;
+			AST tmp1890_AST_in = (AST)_t;
 			match(_t,TEXTCURSOR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISOBJECT:
 		{
-			AST tmp1892_AST_in = (AST)_t;
+			AST tmp1891_AST_in = (AST)_t;
 			match(_t,THISOBJECT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case THISPROCEDURE:
 		{
-			AST tmp1893_AST_in = (AST)_t;
+			AST tmp1892_AST_in = (AST)_t;
 			match(_t,THISPROCEDURE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case WEBCONTEXT:
 		{
-			AST tmp1894_AST_in = (AST)_t;
+			AST tmp1893_AST_in = (AST)_t;
 			match(_t,WEBCONTEXT);
 			_t = _t.getNextSibling();
 			break;
@@ -30695,7 +30694,7 @@
 			switch ( _t.getType()) {
 			case FIELD:
 			{
-				AST tmp1895_AST_in = (AST)_t;
+				AST tmp1894_AST_in = (AST)_t;
 				match(_t,FIELD);
 				_t = _t.getNextSibling();
 				break;
@@ -30727,10 +30726,10 @@
 		AST array_subscript_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t339 = _t;
-		AST tmp1896_AST_in = (AST)_t;
+		AST tmp1895_AST_in = (AST)_t;
 		match(_t,Array_subscript);
 		_t = _t.getFirstChild();
-		AST tmp1897_AST_in = (AST)_t;
+		AST tmp1896_AST_in = (AST)_t;
 		match(_t,LEFTBRACE);
 		_t = _t.getNextSibling();
 		expression(_t);
@@ -30740,7 +30739,7 @@
 		switch ( _t.getType()) {
 		case FOR:
 		{
-			AST tmp1898_AST_in = (AST)_t;
+			AST tmp1897_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -30757,7 +30756,7 @@
 		}
 		}
 		}
-		AST tmp1899_AST_in = (AST)_t;
+		AST tmp1898_AST_in = (AST)_t;
 		match(_t,RIGHTBRACE);
 		_t = _t.getNextSibling();
 		_t = __t339;
@@ -30770,10 +30769,10 @@
 		AST method_param_list_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t342 = _t;
-		AST tmp1900_AST_in = (AST)_t;
+		AST tmp1899_AST_in = (AST)_t;
 		match(_t,Method_param_list);
 		_t = _t.getFirstChild();
-		AST tmp1901_AST_in = (AST)_t;
+		AST tmp1900_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -30805,7 +30804,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1902_AST_in = (AST)_t;
+				AST tmp1901_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -30839,7 +30838,7 @@
 			
 		} while (true);
 		}
-		AST tmp1903_AST_in = (AST)_t;
+		AST tmp1902_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t342;
@@ -30852,7 +30851,7 @@
 		AST gwidget_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t321 = _t;
-		AST tmp1904_AST_in = (AST)_t;
+		AST tmp1903_AST_in = (AST)_t;
 		match(_t,Widget_ref);
 		_t = _t.getFirstChild();
 		s_widget(_t);
@@ -30863,7 +30862,7 @@
 		case IN_KW:
 		{
 			AST __t323 = _t;
-			AST tmp1905_AST_in = (AST)_t;
+			AST tmp1904_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
 			{
@@ -30871,35 +30870,35 @@
 			switch ( _t.getType()) {
 			case MENU:
 			{
-				AST tmp1906_AST_in = (AST)_t;
+				AST tmp1905_AST_in = (AST)_t;
 				match(_t,MENU);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FRAME:
 			{
-				AST tmp1907_AST_in = (AST)_t;
+				AST tmp1906_AST_in = (AST)_t;
 				match(_t,FRAME);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BROWSE:
 			{
-				AST tmp1908_AST_in = (AST)_t;
+				AST tmp1907_AST_in = (AST)_t;
 				match(_t,BROWSE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SUBMENU:
 			{
-				AST tmp1909_AST_in = (AST)_t;
+				AST tmp1908_AST_in = (AST)_t;
 				match(_t,SUBMENU);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BUFFER:
 			{
-				AST tmp1910_AST_in = (AST)_t;
+				AST tmp1909_AST_in = (AST)_t;
 				match(_t,BUFFER);
 				_t = _t.getNextSibling();
 				break;
@@ -30910,7 +30909,7 @@
 			}
 			}
 			}
-			AST tmp1911_AST_in = (AST)_t;
+			AST tmp1910_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t323;
@@ -30943,7 +30942,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp1912_AST_in = (AST)_t;
+				AST tmp1911_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				gwidget(_t);
@@ -31002,130 +31001,130 @@
 		}
 		case DATASET:
 		{
-			AST tmp1913_AST_in = (AST)_t;
+			AST tmp1912_AST_in = (AST)_t;
 			match(_t,DATASET);
 			_t = _t.getNextSibling();
-			AST tmp1914_AST_in = (AST)_t;
+			AST tmp1913_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DATASOURCE:
 		{
-			AST tmp1915_AST_in = (AST)_t;
+			AST tmp1914_AST_in = (AST)_t;
 			match(_t,DATASOURCE);
 			_t = _t.getNextSibling();
-			AST tmp1916_AST_in = (AST)_t;
+			AST tmp1915_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FRAME:
 		{
-			AST tmp1917_AST_in = (AST)_t;
+			AST tmp1916_AST_in = (AST)_t;
 			match(_t,FRAME);
 			_t = _t.getNextSibling();
-			AST tmp1918_AST_in = (AST)_t;
+			AST tmp1917_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENU:
 		{
-			AST tmp1919_AST_in = (AST)_t;
+			AST tmp1918_AST_in = (AST)_t;
 			match(_t,MENU);
 			_t = _t.getNextSibling();
-			AST tmp1920_AST_in = (AST)_t;
+			AST tmp1919_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENU:
 		{
-			AST tmp1921_AST_in = (AST)_t;
+			AST tmp1920_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getNextSibling();
-			AST tmp1922_AST_in = (AST)_t;
+			AST tmp1921_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case MENUITEM:
 		{
-			AST tmp1923_AST_in = (AST)_t;
+			AST tmp1922_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getNextSibling();
-			AST tmp1924_AST_in = (AST)_t;
+			AST tmp1923_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BROWSE:
 		{
-			AST tmp1925_AST_in = (AST)_t;
+			AST tmp1924_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp1926_AST_in = (AST)_t;
+			AST tmp1925_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case QUERY:
 		{
-			AST tmp1927_AST_in = (AST)_t;
+			AST tmp1926_AST_in = (AST)_t;
 			match(_t,QUERY);
 			_t = _t.getNextSibling();
-			AST tmp1928_AST_in = (AST)_t;
+			AST tmp1927_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case TEMPTABLE:
 		{
-			AST tmp1929_AST_in = (AST)_t;
+			AST tmp1928_AST_in = (AST)_t;
 			match(_t,TEMPTABLE);
 			_t = _t.getNextSibling();
-			AST tmp1930_AST_in = (AST)_t;
+			AST tmp1929_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case BUFFER:
 		{
-			AST tmp1931_AST_in = (AST)_t;
+			AST tmp1930_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getNextSibling();
-			AST tmp1932_AST_in = (AST)_t;
+			AST tmp1931_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XDOCUMENT:
 		{
-			AST tmp1933_AST_in = (AST)_t;
+			AST tmp1932_AST_in = (AST)_t;
 			match(_t,XDOCUMENT);
 			_t = _t.getNextSibling();
-			AST tmp1934_AST_in = (AST)_t;
+			AST tmp1933_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case XNODEREF:
 		{
-			AST tmp1935_AST_in = (AST)_t;
+			AST tmp1934_AST_in = (AST)_t;
 			match(_t,XNODEREF);
 			_t = _t.getNextSibling();
-			AST tmp1936_AST_in = (AST)_t;
+			AST tmp1935_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOCKET:
 		{
-			AST tmp1937_AST_in = (AST)_t;
+			AST tmp1936_AST_in = (AST)_t;
 			match(_t,SOCKET);
 			_t = _t.getNextSibling();
-			AST tmp1938_AST_in = (AST)_t;
+			AST tmp1937_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -31143,10 +31142,10 @@
 		AST stream_name_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2023 = _t;
-		AST tmp1939_AST_in = (AST)_t;
+		AST tmp1938_AST_in = (AST)_t;
 		match(_t,STREAM);
 		_t = _t.getFirstChild();
-		AST tmp1940_AST_in = (AST)_t;
+		AST tmp1939_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		_t = __t2023;
@@ -31164,15 +31163,15 @@
 		case OSDIR:
 		{
 			AST __t1516 = _t;
-			AST tmp1941_AST_in = (AST)_t;
+			AST tmp1940_AST_in = (AST)_t;
 			match(_t,OSDIR);
 			_t = _t.getFirstChild();
-			AST tmp1942_AST_in = (AST)_t;
+			AST tmp1941_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			expression(_t);
 			_t = _retTree;
-			AST tmp1943_AST_in = (AST)_t;
+			AST tmp1942_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -31180,7 +31179,7 @@
 			switch ( _t.getType()) {
 			case NOATTRLIST:
 			{
-				AST tmp1944_AST_in = (AST)_t;
+				AST tmp1943_AST_in = (AST)_t;
 				match(_t,NOATTRLIST);
 				_t = _t.getNextSibling();
 				break;
@@ -31202,13 +31201,13 @@
 		case PRINTER:
 		{
 			AST __t1518 = _t;
-			AST tmp1945_AST_in = (AST)_t;
+			AST tmp1944_AST_in = (AST)_t;
 			match(_t,PRINTER);
 			_t = _t.getFirstChild();
 			{
 			if (_t==null) _t=ASTNULL;
 			if (((_t.getType() >= LEXDATE && _t.getType() <= SYMMETRICENCRYPTIONALGORITHM))) {
-				AST tmp1946_AST_in = (AST)_t;
+				AST tmp1945_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 			}
@@ -31225,7 +31224,7 @@
 		}
 		case TERMINAL:
 		{
-			AST tmp1947_AST_in = (AST)_t;
+			AST tmp1946_AST_in = (AST)_t;
 			match(_t,TERMINAL);
 			_t = _t.getNextSibling();
 			break;
@@ -31265,7 +31264,7 @@
 				}
 				case FILENAME:
 				{
-					AST tmp1948_AST_in = (AST)_t;
+					AST tmp1947_AST_in = (AST)_t;
 					match(_t,FILENAME);
 					_t = _t.getNextSibling();
 					break;
@@ -31292,21 +31291,21 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp1949_AST_in = (AST)_t;
+				AST tmp1948_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case BINARY:
 			{
-				AST tmp1950_AST_in = (AST)_t;
+				AST tmp1949_AST_in = (AST)_t;
 				match(_t,BINARY);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case COLLATE:
 			{
-				AST tmp1951_AST_in = (AST)_t;
+				AST tmp1950_AST_in = (AST)_t;
 				match(_t,COLLATE);
 				_t = _t.getNextSibling();
 				break;
@@ -31314,7 +31313,7 @@
 			case CONVERT:
 			{
 				AST __t1523 = _t;
-				AST tmp1952_AST_in = (AST)_t;
+				AST tmp1951_AST_in = (AST)_t;
 				match(_t,CONVERT);
 				_t = _t.getFirstChild();
 				{
@@ -31327,14 +31326,14 @@
 						switch ( _t.getType()) {
 						case SOURCE:
 						{
-							AST tmp1953_AST_in = (AST)_t;
+							AST tmp1952_AST_in = (AST)_t;
 							match(_t,SOURCE);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case TARGET:
 						{
-							AST tmp1954_AST_in = (AST)_t;
+							AST tmp1953_AST_in = (AST)_t;
 							match(_t,TARGET);
 							_t = _t.getNextSibling();
 							break;
@@ -31361,7 +31360,7 @@
 			case LOBDIR:
 			{
 				AST __t1527 = _t;
-				AST tmp1955_AST_in = (AST)_t;
+				AST tmp1954_AST_in = (AST)_t;
 				match(_t,LOBDIR);
 				_t = _t.getFirstChild();
 				filenameorvalue(_t);
@@ -31372,35 +31371,35 @@
 			}
 			case NOCONVERT:
 			{
-				AST tmp1956_AST_in = (AST)_t;
+				AST tmp1955_AST_in = (AST)_t;
 				match(_t,NOCONVERT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case ECHO:
 			{
-				AST tmp1957_AST_in = (AST)_t;
+				AST tmp1956_AST_in = (AST)_t;
 				match(_t,ECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOECHO:
 			{
-				AST tmp1958_AST_in = (AST)_t;
+				AST tmp1957_AST_in = (AST)_t;
 				match(_t,NOECHO);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case KEEPMESSAGES:
 			{
-				AST tmp1959_AST_in = (AST)_t;
+				AST tmp1958_AST_in = (AST)_t;
 				match(_t,KEEPMESSAGES);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LANDSCAPE:
 			{
-				AST tmp1960_AST_in = (AST)_t;
+				AST tmp1959_AST_in = (AST)_t;
 				match(_t,LANDSCAPE);
 				_t = _t.getNextSibling();
 				break;
@@ -31408,7 +31407,7 @@
 			case MAP:
 			{
 				AST __t1528 = _t;
-				AST tmp1961_AST_in = (AST)_t;
+				AST tmp1960_AST_in = (AST)_t;
 				match(_t,MAP);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -31419,7 +31418,7 @@
 			}
 			case NOMAP:
 			{
-				AST tmp1962_AST_in = (AST)_t;
+				AST tmp1961_AST_in = (AST)_t;
 				match(_t,NOMAP);
 				_t = _t.getNextSibling();
 				break;
@@ -31427,7 +31426,7 @@
 			case NUMCOPIES:
 			{
 				AST __t1529 = _t;
-				AST tmp1963_AST_in = (AST)_t;
+				AST tmp1962_AST_in = (AST)_t;
 				match(_t,NUMCOPIES);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -31438,7 +31437,7 @@
 			}
 			case PAGED:
 			{
-				AST tmp1964_AST_in = (AST)_t;
+				AST tmp1963_AST_in = (AST)_t;
 				match(_t,PAGED);
 				_t = _t.getNextSibling();
 				break;
@@ -31446,7 +31445,7 @@
 			case PAGESIZE_KW:
 			{
 				AST __t1530 = _t;
-				AST tmp1965_AST_in = (AST)_t;
+				AST tmp1964_AST_in = (AST)_t;
 				match(_t,PAGESIZE_KW);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -31457,14 +31456,14 @@
 			}
 			case PORTRAIT:
 			{
-				AST tmp1966_AST_in = (AST)_t;
+				AST tmp1965_AST_in = (AST)_t;
 				match(_t,PORTRAIT);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case UNBUFFERED:
 			{
-				AST tmp1967_AST_in = (AST)_t;
+				AST tmp1966_AST_in = (AST)_t;
 				match(_t,UNBUFFERED);
 				_t = _t.getNextSibling();
 				break;
@@ -31484,7 +31483,7 @@
 		AST display_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1201 = _t;
-		AST tmp1968_AST_in = (AST)_t;
+		AST tmp1967_AST_in = (AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
 		{
@@ -31512,7 +31511,7 @@
 					_t = _retTree;
 				}
 				else if ((_t.getType()==ID)) {
-					AST tmp1969_AST_in = (AST)_t;
+					AST tmp1968_AST_in = (AST)_t;
 					match(_t,ID);
 					_t = _t.getNextSibling();
 				}
@@ -31561,10 +31560,10 @@
 		AST aggregatephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t363 = _t;
-		AST tmp1970_AST_in = (AST)_t;
+		AST tmp1969_AST_in = (AST)_t;
 		match(_t,Aggregate_phrase);
 		_t = _t.getFirstChild();
-		AST tmp1971_AST_in = (AST)_t;
+		AST tmp1970_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -31589,7 +31588,7 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==BY)) {
 				AST __t367 = _t;
-				AST tmp1972_AST_in = (AST)_t;
+				AST tmp1971_AST_in = (AST)_t;
 				match(_t,BY);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -31599,7 +31598,7 @@
 				switch ( _t.getType()) {
 				case DESCENDING:
 				{
-					AST tmp1973_AST_in = (AST)_t;
+					AST tmp1972_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -31623,7 +31622,7 @@
 			
 		} while (true);
 		}
-		AST tmp1974_AST_in = (AST)_t;
+		AST tmp1973_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t363;
@@ -31640,7 +31639,7 @@
 		case AVERAGE:
 		{
 			AST __t371 = _t;
-			AST tmp1975_AST_in = (AST)_t;
+			AST tmp1974_AST_in = (AST)_t;
 			match(_t,AVERAGE);
 			_t = _t.getFirstChild();
 			{
@@ -31670,7 +31669,7 @@
 		case COUNT:
 		{
 			AST __t373 = _t;
-			AST tmp1976_AST_in = (AST)_t;
+			AST tmp1975_AST_in = (AST)_t;
 			match(_t,COUNT);
 			_t = _t.getFirstChild();
 			{
@@ -31700,7 +31699,7 @@
 		case MAXIMUM:
 		{
 			AST __t375 = _t;
-			AST tmp1977_AST_in = (AST)_t;
+			AST tmp1976_AST_in = (AST)_t;
 			match(_t,MAXIMUM);
 			_t = _t.getFirstChild();
 			{
@@ -31730,7 +31729,7 @@
 		case MINIMUM:
 		{
 			AST __t377 = _t;
-			AST tmp1978_AST_in = (AST)_t;
+			AST tmp1977_AST_in = (AST)_t;
 			match(_t,MINIMUM);
 			_t = _t.getFirstChild();
 			{
@@ -31760,7 +31759,7 @@
 		case TOTAL:
 		{
 			AST __t379 = _t;
-			AST tmp1979_AST_in = (AST)_t;
+			AST tmp1978_AST_in = (AST)_t;
 			match(_t,TOTAL);
 			_t = _t.getFirstChild();
 			{
@@ -31790,7 +31789,7 @@
 		case SUBAVERAGE:
 		{
 			AST __t381 = _t;
-			AST tmp1980_AST_in = (AST)_t;
+			AST tmp1979_AST_in = (AST)_t;
 			match(_t,SUBAVERAGE);
 			_t = _t.getFirstChild();
 			{
@@ -31820,7 +31819,7 @@
 		case SUBCOUNT:
 		{
 			AST __t383 = _t;
-			AST tmp1981_AST_in = (AST)_t;
+			AST tmp1980_AST_in = (AST)_t;
 			match(_t,SUBCOUNT);
 			_t = _t.getFirstChild();
 			{
@@ -31850,7 +31849,7 @@
 		case SUBMAXIMUM:
 		{
 			AST __t385 = _t;
-			AST tmp1982_AST_in = (AST)_t;
+			AST tmp1981_AST_in = (AST)_t;
 			match(_t,SUBMAXIMUM);
 			_t = _t.getFirstChild();
 			{
@@ -31880,7 +31879,7 @@
 		case SUBMINIMUM:
 		{
 			AST __t387 = _t;
-			AST tmp1983_AST_in = (AST)_t;
+			AST tmp1982_AST_in = (AST)_t;
 			match(_t,SUBMINIMUM);
 			_t = _t.getFirstChild();
 			{
@@ -31910,7 +31909,7 @@
 		case SUBTOTAL:
 		{
 			AST __t389 = _t;
-			AST tmp1984_AST_in = (AST)_t;
+			AST tmp1983_AST_in = (AST)_t;
 			match(_t,SUBTOTAL);
 			_t = _t.getFirstChild();
 			{
@@ -31954,7 +31953,7 @@
 		case COLUMNLABEL:
 		{
 			AST __t1533 = _t;
-			AST tmp1985_AST_in = (AST)_t;
+			AST tmp1984_AST_in = (AST)_t;
 			match(_t,COLUMNLABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -31964,7 +31963,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1986_AST_in = (AST)_t;
+					AST tmp1985_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -31983,7 +31982,7 @@
 		case LABEL:
 		{
 			AST __t1536 = _t;
-			AST tmp1987_AST_in = (AST)_t;
+			AST tmp1986_AST_in = (AST)_t;
 			match(_t,LABEL);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -31993,7 +31992,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp1988_AST_in = (AST)_t;
+					AST tmp1987_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					constant(_t);
@@ -32022,7 +32021,7 @@
 		AST assign_opt_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t402 = _t;
-		AST tmp1989_AST_in = (AST)_t;
+		AST tmp1988_AST_in = (AST)_t;
 		match(_t,ASSIGN);
 		_t = _t.getFirstChild();
 		{
@@ -32032,10 +32031,10 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==EQUAL)) {
 				AST __t404 = _t;
-				AST tmp1990_AST_in = (AST)_t;
+				AST tmp1989_AST_in = (AST)_t;
 				match(_t,EQUAL);
 				_t = _t.getFirstChild();
-				AST tmp1991_AST_in = (AST)_t;
+				AST tmp1990_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -32063,7 +32062,7 @@
 		switch ( _t.getType()) {
 		case RECORD_NAME:
 		{
-			AST tmp1992_AST_in = (AST)_t;
+			AST tmp1991_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			{
@@ -32072,7 +32071,7 @@
 			case EXCEPT:
 			{
 				AST __t411 = _t;
-				AST tmp1993_AST_in = (AST)_t;
+				AST tmp1992_AST_in = (AST)_t;
 				match(_t,EXCEPT);
 				_t = _t.getFirstChild();
 				{
@@ -32130,7 +32129,7 @@
 					case WHEN:
 					{
 						AST __t416 = _t;
-						AST tmp1994_AST_in = (AST)_t;
+						AST tmp1993_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -32159,7 +32158,7 @@
 				case Assign_from_buffer:
 				{
 					AST __t417 = _t;
-					AST tmp1995_AST_in = (AST)_t;
+					AST tmp1994_AST_in = (AST)_t;
 					match(_t,Assign_from_buffer);
 					_t = _t.getFirstChild();
 					field(_t);
@@ -32172,7 +32171,7 @@
 					case WHEN:
 					{
 						AST __t419 = _t;
-						AST tmp1996_AST_in = (AST)_t;
+						AST tmp1995_AST_in = (AST)_t;
 						match(_t,WHEN);
 						_t = _t.getFirstChild();
 						expression(_t);
@@ -32220,7 +32219,7 @@
 		AST assign_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t422 = _t;
-		AST tmp1997_AST_in = (AST)_t;
+		AST tmp1996_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		{
@@ -32325,7 +32324,7 @@
 		AST atphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t425 = _t;
-		AST tmp1998_AST_in = (AST)_t;
+		AST tmp1997_AST_in = (AST)_t;
 		match(_t,AT);
 		_t = _t.getFirstChild();
 		{
@@ -32350,21 +32349,21 @@
 		switch ( _t.getType()) {
 		case COLONALIGNED:
 		{
-			AST tmp1999_AST_in = (AST)_t;
+			AST tmp1998_AST_in = (AST)_t;
 			match(_t,COLONALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LEFTALIGNED:
 		{
-			AST tmp2000_AST_in = (AST)_t;
+			AST tmp1999_AST_in = (AST)_t;
 			match(_t,LEFTALIGNED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case RIGHTALIGNED:
 		{
-			AST tmp2001_AST_in = (AST)_t;
+			AST tmp2000_AST_in = (AST)_t;
 			match(_t,RIGHTALIGNED);
 			_t = _t.getNextSibling();
 			break;
@@ -32393,7 +32392,7 @@
 		case COLUMN:
 		{
 			AST __t429 = _t;
-			AST tmp2002_AST_in = (AST)_t;
+			AST tmp2001_AST_in = (AST)_t;
 			match(_t,COLUMN);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32405,7 +32404,7 @@
 		case COLUMNOF:
 		{
 			AST __t430 = _t;
-			AST tmp2003_AST_in = (AST)_t;
+			AST tmp2002_AST_in = (AST)_t;
 			match(_t,COLUMNOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -32417,7 +32416,7 @@
 		case ROW:
 		{
 			AST __t431 = _t;
-			AST tmp2004_AST_in = (AST)_t;
+			AST tmp2003_AST_in = (AST)_t;
 			match(_t,ROW);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32429,7 +32428,7 @@
 		case ROWOF:
 		{
 			AST __t432 = _t;
-			AST tmp2005_AST_in = (AST)_t;
+			AST tmp2004_AST_in = (AST)_t;
 			match(_t,ROWOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -32441,7 +32440,7 @@
 		case X:
 		{
 			AST __t433 = _t;
-			AST tmp2006_AST_in = (AST)_t;
+			AST tmp2005_AST_in = (AST)_t;
 			match(_t,X);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32453,7 +32452,7 @@
 		case XOF:
 		{
 			AST __t434 = _t;
-			AST tmp2007_AST_in = (AST)_t;
+			AST tmp2006_AST_in = (AST)_t;
 			match(_t,XOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -32465,7 +32464,7 @@
 		case Y:
 		{
 			AST __t435 = _t;
-			AST tmp2008_AST_in = (AST)_t;
+			AST tmp2007_AST_in = (AST)_t;
 			match(_t,Y);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32477,7 +32476,7 @@
 		case YOF:
 		{
 			AST __t436 = _t;
-			AST tmp2009_AST_in = (AST)_t;
+			AST tmp2008_AST_in = (AST)_t;
 			match(_t,YOF);
 			_t = _t.getFirstChild();
 			referencepoint(_t);
@@ -32511,14 +32510,14 @@
 			switch ( _t.getType()) {
 			case PLUS:
 			{
-				AST tmp2010_AST_in = (AST)_t;
+				AST tmp2009_AST_in = (AST)_t;
 				match(_t,PLUS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MINUS:
 			{
-				AST tmp2011_AST_in = (AST)_t;
+				AST tmp2010_AST_in = (AST)_t;
 				match(_t,MINUS);
 				_t = _t.getNextSibling();
 				break;
@@ -32555,13 +32554,13 @@
 		case Not_casesens:
 		{
 			AST __t485 = _t;
-			AST tmp2012_AST_in = (AST)_t;
+			AST tmp2011_AST_in = (AST)_t;
 			match(_t,Not_casesens);
 			_t = _t.getFirstChild();
-			AST tmp2013_AST_in = (AST)_t;
+			AST tmp2012_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp2014_AST_in = (AST)_t;
+			AST tmp2013_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			_t = __t485;
@@ -32570,7 +32569,7 @@
 		}
 		case CASESENSITIVE:
 		{
-			AST tmp2015_AST_in = (AST)_t;
+			AST tmp2014_AST_in = (AST)_t;
 			match(_t,CASESENSITIVE);
 			_t = _t.getNextSibling();
 			break;
@@ -32596,10 +32595,10 @@
 			try {
 				{
 				AST __t499 = _t;
-				AST tmp2016_AST_in = (AST)_t;
+				AST tmp2015_AST_in = (AST)_t;
 				match(_t,OR);
 				_t = _t.getFirstChild();
-				AST tmp2017_AST_in = (AST)_t;
+				AST tmp2016_AST_in = (AST)_t;
 				if ( _t==null ) throw new MismatchedTokenException();
 				_t = _t.getNextSibling();
 				_t = __t499;
@@ -32614,7 +32613,7 @@
 		}
 		if ( synPredMatched500 ) {
 			AST __t501 = _t;
-			AST tmp2018_AST_in = (AST)_t;
+			AST tmp2017_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			case_expression(_t);
@@ -32626,7 +32625,7 @@
 		}
 		else if ((_t.getType()==WHEN)) {
 			AST __t502 = _t;
-			AST tmp2019_AST_in = (AST)_t;
+			AST tmp2018_AST_in = (AST)_t;
 			match(_t,WHEN);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32650,10 +32649,10 @@
 		AST goonphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1428 = _t;
-		AST tmp2020_AST_in = (AST)_t;
+		AST tmp2019_AST_in = (AST)_t;
 		match(_t,GOON);
 		_t = _t.getFirstChild();
-		AST tmp2021_AST_in = (AST)_t;
+		AST tmp2020_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		goon_elem(_t);
@@ -32666,7 +32665,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2022_AST_in = (AST)_t;
+					AST tmp2021_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 				}
@@ -32686,7 +32685,7 @@
 			
 		} while (true);
 		}
-		AST tmp2023_AST_in = (AST)_t;
+		AST tmp2022_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1428;
@@ -32703,7 +32702,7 @@
 		case BGCOLOR:
 		{
 			AST __t546 = _t;
-			AST tmp2024_AST_in = (AST)_t;
+			AST tmp2023_AST_in = (AST)_t;
 			match(_t,BGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32715,7 +32714,7 @@
 		case DCOLOR:
 		{
 			AST __t547 = _t;
-			AST tmp2025_AST_in = (AST)_t;
+			AST tmp2024_AST_in = (AST)_t;
 			match(_t,DCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32727,7 +32726,7 @@
 		case FGCOLOR:
 		{
 			AST __t548 = _t;
-			AST tmp2026_AST_in = (AST)_t;
+			AST tmp2025_AST_in = (AST)_t;
 			match(_t,FGCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32739,7 +32738,7 @@
 		case PFCOLOR:
 		{
 			AST __t549 = _t;
-			AST tmp2027_AST_in = (AST)_t;
+			AST tmp2026_AST_in = (AST)_t;
 			match(_t,PFCOLOR);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -32788,7 +32787,7 @@
 		case COLOR:
 		{
 			AST __t553 = _t;
-			AST tmp2028_AST_in = (AST)_t;
+			AST tmp2027_AST_in = (AST)_t;
 			match(_t,COLOR);
 			_t = _t.getFirstChild();
 			{
@@ -32796,7 +32795,7 @@
 			switch ( _t.getType()) {
 			case DISPLAY:
 			{
-				AST tmp2029_AST_in = (AST)_t;
+				AST tmp2028_AST_in = (AST)_t;
 				match(_t,DISPLAY);
 				_t = _t.getNextSibling();
 				break;
@@ -32820,7 +32819,7 @@
 			case PROMPT:
 			{
 				AST __t556 = _t;
-				AST tmp2030_AST_in = (AST)_t;
+				AST tmp2029_AST_in = (AST)_t;
 				match(_t,PROMPT);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -32856,7 +32855,7 @@
 		AST formatphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1331 = _t;
-		AST tmp2031_AST_in = (AST)_t;
+		AST tmp2030_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -32868,7 +32867,7 @@
 			case AS:
 			{
 				AST __t1333 = _t;
-				AST tmp2032_AST_in = (AST)_t;
+				AST tmp2031_AST_in = (AST)_t;
 				match(_t,AS);
 				_t = _t.getFirstChild();
 				datatype_var(_t);
@@ -32885,21 +32884,21 @@
 			}
 			case ATTRSPACE:
 			{
-				AST tmp2033_AST_in = (AST)_t;
+				AST tmp2032_AST_in = (AST)_t;
 				match(_t,ATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOATTRSPACE:
 			{
-				AST tmp2034_AST_in = (AST)_t;
+				AST tmp2033_AST_in = (AST)_t;
 				match(_t,NOATTRSPACE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case AUTORETURN:
 			{
-				AST tmp2035_AST_in = (AST)_t;
+				AST tmp2034_AST_in = (AST)_t;
 				match(_t,AUTORETURN);
 				_t = _t.getNextSibling();
 				break;
@@ -32916,7 +32915,7 @@
 			case CONTEXTHELPID:
 			{
 				AST __t1334 = _t;
-				AST tmp2036_AST_in = (AST)_t;
+				AST tmp2035_AST_in = (AST)_t;
 				match(_t,CONTEXTHELPID);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -32927,7 +32926,7 @@
 			}
 			case BLANK:
 			{
-				AST tmp2037_AST_in = (AST)_t;
+				AST tmp2036_AST_in = (AST)_t;
 				match(_t,BLANK);
 				_t = _t.getNextSibling();
 				break;
@@ -32935,7 +32934,7 @@
 			case COLON:
 			{
 				AST __t1335 = _t;
-				AST tmp2038_AST_in = (AST)_t;
+				AST tmp2037_AST_in = (AST)_t;
 				match(_t,COLON);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -32947,7 +32946,7 @@
 			case TO:
 			{
 				AST __t1336 = _t;
-				AST tmp2039_AST_in = (AST)_t;
+				AST tmp2038_AST_in = (AST)_t;
 				match(_t,TO);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -32958,14 +32957,14 @@
 			}
 			case DEBLANK:
 			{
-				AST tmp2040_AST_in = (AST)_t;
+				AST tmp2039_AST_in = (AST)_t;
 				match(_t,DEBLANK);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DISABLEAUTOZAP:
 			{
-				AST tmp2041_AST_in = (AST)_t;
+				AST tmp2040_AST_in = (AST)_t;
 				match(_t,DISABLEAUTOZAP);
 				_t = _t.getNextSibling();
 				break;
@@ -32973,7 +32972,7 @@
 			case FONT:
 			{
 				AST __t1337 = _t;
-				AST tmp2042_AST_in = (AST)_t;
+				AST tmp2041_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -32985,7 +32984,7 @@
 			case FORMAT:
 			{
 				AST __t1338 = _t;
-				AST tmp2043_AST_in = (AST)_t;
+				AST tmp2042_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -32997,7 +32996,7 @@
 			case HELP:
 			{
 				AST __t1339 = _t;
-				AST tmp2044_AST_in = (AST)_t;
+				AST tmp2043_AST_in = (AST)_t;
 				match(_t,HELP);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -33016,7 +33015,7 @@
 			case LEXAT:
 			{
 				AST __t1340 = _t;
-				AST tmp2045_AST_in = (AST)_t;
+				AST tmp2044_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				field(_t);
@@ -33047,7 +33046,7 @@
 			case LIKE:
 			{
 				AST __t1342 = _t;
-				AST tmp2046_AST_in = (AST)_t;
+				AST tmp2045_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				field(_t);
@@ -33058,14 +33057,14 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp2047_AST_in = (AST)_t;
+				AST tmp2046_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOTABSTOP:
 			{
-				AST tmp2048_AST_in = (AST)_t;
+				AST tmp2047_AST_in = (AST)_t;
 				match(_t,NOTABSTOP);
 				_t = _t.getNextSibling();
 				break;
@@ -33073,7 +33072,7 @@
 			case VALIDATE:
 			{
 				AST __t1343 = _t;
-				AST tmp2049_AST_in = (AST)_t;
+				AST tmp2048_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getFirstChild();
 				funargs(_t);
@@ -33085,7 +33084,7 @@
 			case WHEN:
 			{
 				AST __t1344 = _t;
-				AST tmp2050_AST_in = (AST)_t;
+				AST tmp2049_AST_in = (AST)_t;
 				match(_t,WHEN);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33124,7 +33123,7 @@
 		AST columnformat_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t572 = _t;
-		AST tmp2051_AST_in = (AST)_t;
+		AST tmp2050_AST_in = (AST)_t;
 		match(_t,Format_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -33136,7 +33135,7 @@
 			case FORMAT:
 			{
 				AST __t574 = _t;
-				AST tmp2052_AST_in = (AST)_t;
+				AST tmp2051_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33154,7 +33153,7 @@
 			}
 			case NOLABELS:
 			{
-				AST tmp2053_AST_in = (AST)_t;
+				AST tmp2052_AST_in = (AST)_t;
 				match(_t,NOLABELS);
 				_t = _t.getNextSibling();
 				break;
@@ -33162,7 +33161,7 @@
 			case COLUMNFONT:
 			{
 				AST __t575 = _t;
-				AST tmp2054_AST_in = (AST)_t;
+				AST tmp2053_AST_in = (AST)_t;
 				match(_t,COLUMNFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33174,7 +33173,7 @@
 			case COLUMNDCOLOR:
 			{
 				AST __t576 = _t;
-				AST tmp2055_AST_in = (AST)_t;
+				AST tmp2054_AST_in = (AST)_t;
 				match(_t,COLUMNDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33186,7 +33185,7 @@
 			case COLUMNBGCOLOR:
 			{
 				AST __t577 = _t;
-				AST tmp2056_AST_in = (AST)_t;
+				AST tmp2055_AST_in = (AST)_t;
 				match(_t,COLUMNBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33198,7 +33197,7 @@
 			case COLUMNFGCOLOR:
 			{
 				AST __t578 = _t;
-				AST tmp2057_AST_in = (AST)_t;
+				AST tmp2056_AST_in = (AST)_t;
 				match(_t,COLUMNFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33210,7 +33209,7 @@
 			case COLUMNPFCOLOR:
 			{
 				AST __t579 = _t;
-				AST tmp2058_AST_in = (AST)_t;
+				AST tmp2057_AST_in = (AST)_t;
 				match(_t,COLUMNPFCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33222,7 +33221,7 @@
 			case LABELFONT:
 			{
 				AST __t580 = _t;
-				AST tmp2059_AST_in = (AST)_t;
+				AST tmp2058_AST_in = (AST)_t;
 				match(_t,LABELFONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33234,7 +33233,7 @@
 			case LABELDCOLOR:
 			{
 				AST __t581 = _t;
-				AST tmp2060_AST_in = (AST)_t;
+				AST tmp2059_AST_in = (AST)_t;
 				match(_t,LABELDCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33246,7 +33245,7 @@
 			case LABELBGCOLOR:
 			{
 				AST __t582 = _t;
-				AST tmp2061_AST_in = (AST)_t;
+				AST tmp2060_AST_in = (AST)_t;
 				match(_t,LABELBGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33258,7 +33257,7 @@
 			case LABELFGCOLOR:
 			{
 				AST __t583 = _t;
-				AST tmp2062_AST_in = (AST)_t;
+				AST tmp2061_AST_in = (AST)_t;
 				match(_t,LABELFGCOLOR);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33270,7 +33269,7 @@
 			case LEXAT:
 			{
 				AST __t584 = _t;
-				AST tmp2063_AST_in = (AST)_t;
+				AST tmp2062_AST_in = (AST)_t;
 				match(_t,LEXAT);
 				_t = _t.getFirstChild();
 				field(_t);
@@ -33301,10 +33300,10 @@
 			case WIDTH:
 			{
 				AST __t586 = _t;
-				AST tmp2064_AST_in = (AST)_t;
+				AST tmp2063_AST_in = (AST)_t;
 				match(_t,WIDTH);
 				_t = _t.getFirstChild();
-				AST tmp2065_AST_in = (AST)_t;
+				AST tmp2064_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t586;
@@ -33314,10 +33313,10 @@
 			case WIDTHPIXELS:
 			{
 				AST __t587 = _t;
-				AST tmp2066_AST_in = (AST)_t;
+				AST tmp2065_AST_in = (AST)_t;
 				match(_t,WIDTHPIXELS);
 				_t = _t.getFirstChild();
-				AST tmp2067_AST_in = (AST)_t;
+				AST tmp2066_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t587;
@@ -33327,10 +33326,10 @@
 			case WIDTHCHARS:
 			{
 				AST __t588 = _t;
-				AST tmp2068_AST_in = (AST)_t;
+				AST tmp2067_AST_in = (AST)_t;
 				match(_t,WIDTHCHARS);
 				_t = _t.getFirstChild();
-				AST tmp2069_AST_in = (AST)_t;
+				AST tmp2068_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t588;
@@ -33355,7 +33354,7 @@
 		AST comboboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t591 = _t;
-		AST tmp2070_AST_in = (AST)_t;
+		AST tmp2069_AST_in = (AST)_t;
 		match(_t,COMBOBOX);
 		_t = _t.getFirstChild();
 		{
@@ -33366,7 +33365,7 @@
 			case LISTITEMS:
 			{
 				AST __t593 = _t;
-				AST tmp2071_AST_in = (AST)_t;
+				AST tmp2070_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -33376,7 +33375,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2072_AST_in = (AST)_t;
+						AST tmp2071_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -33395,7 +33394,7 @@
 			case LISTITEMPAIRS:
 			{
 				AST __t596 = _t;
-				AST tmp2073_AST_in = (AST)_t;
+				AST tmp2072_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -33405,7 +33404,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2074_AST_in = (AST)_t;
+						AST tmp2073_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -33424,7 +33423,7 @@
 			case INNERLINES:
 			{
 				AST __t599 = _t;
-				AST tmp2075_AST_in = (AST)_t;
+				AST tmp2074_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -33435,7 +33434,7 @@
 			}
 			case SORT:
 			{
-				AST tmp2076_AST_in = (AST)_t;
+				AST tmp2075_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -33448,21 +33447,21 @@
 			}
 			case SIMPLE:
 			{
-				AST tmp2077_AST_in = (AST)_t;
+				AST tmp2076_AST_in = (AST)_t;
 				match(_t,SIMPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWN:
 			{
-				AST tmp2078_AST_in = (AST)_t;
+				AST tmp2077_AST_in = (AST)_t;
 				match(_t,DROPDOWN);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DROPDOWNLIST:
 			{
-				AST tmp2079_AST_in = (AST)_t;
+				AST tmp2078_AST_in = (AST)_t;
 				match(_t,DROPDOWNLIST);
 				_t = _t.getNextSibling();
 				break;
@@ -33470,10 +33469,10 @@
 			case MAXCHARS:
 			{
 				AST __t600 = _t;
-				AST tmp2080_AST_in = (AST)_t;
+				AST tmp2079_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
-				AST tmp2081_AST_in = (AST)_t;
+				AST tmp2080_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				_t = __t600;
@@ -33483,7 +33482,7 @@
 			case AUTOCOMPLETION:
 			{
 				AST __t601 = _t;
-				AST tmp2082_AST_in = (AST)_t;
+				AST tmp2081_AST_in = (AST)_t;
 				match(_t,AUTOCOMPLETION);
 				_t = _t.getFirstChild();
 				{
@@ -33491,7 +33490,7 @@
 				switch ( _t.getType()) {
 				case UNIQUEMATCH:
 				{
-					AST tmp2083_AST_in = (AST)_t;
+					AST tmp2082_AST_in = (AST)_t;
 					match(_t,UNIQUEMATCH);
 					_t = _t.getNextSibling();
 					break;
@@ -33535,7 +33534,7 @@
 		AST tooltip_expr_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2109 = _t;
-		AST tmp2084_AST_in = (AST)_t;
+		AST tmp2083_AST_in = (AST)_t;
 		match(_t,TOOLTIP);
 		_t = _t.getFirstChild();
 		{
@@ -33614,12 +33613,12 @@
 		case SIZE:
 		{
 			AST __t1991 = _t;
-			AST tmp2085_AST_in = (AST)_t;
+			AST tmp2084_AST_in = (AST)_t;
 			match(_t,SIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2086_AST_in = (AST)_t;
+			AST tmp2085_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -33631,12 +33630,12 @@
 		case SIZECHARS:
 		{
 			AST __t1992 = _t;
-			AST tmp2087_AST_in = (AST)_t;
+			AST tmp2086_AST_in = (AST)_t;
 			match(_t,SIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2088_AST_in = (AST)_t;
+			AST tmp2087_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -33648,12 +33647,12 @@
 		case SIZEPIXELS:
 		{
 			AST __t1993 = _t;
-			AST tmp2089_AST_in = (AST)_t;
+			AST tmp2088_AST_in = (AST)_t;
 			match(_t,SIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2090_AST_in = (AST)_t;
+			AST tmp2089_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -33675,7 +33674,7 @@
 		AST compile_append_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t659 = _t;
-		AST tmp2091_AST_in = (AST)_t;
+		AST tmp2090_AST_in = (AST)_t;
 		match(_t,APPEND);
 		_t = _t.getFirstChild();
 		{
@@ -33684,7 +33683,7 @@
 		case EQUAL:
 		{
 			AST __t661 = _t;
-			AST tmp2092_AST_in = (AST)_t;
+			AST tmp2091_AST_in = (AST)_t;
 			match(_t,EQUAL);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -33722,7 +33721,7 @@
 		}
 		case TYPELESS_TOKEN:
 		{
-			AST tmp2093_AST_in = (AST)_t;
+			AST tmp2092_AST_in = (AST)_t;
 			match(_t,TYPELESS_TOKEN);
 			_t = _t.getNextSibling();
 			{
@@ -33730,10 +33729,10 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==LEXCOLON)) {
-					AST tmp2094_AST_in = (AST)_t;
+					AST tmp2093_AST_in = (AST)_t;
 					match(_t,LEXCOLON);
 					_t = _t.getNextSibling();
-					AST tmp2095_AST_in = (AST)_t;
+					AST tmp2094_AST_in = (AST)_t;
 					match(_t,TYPELESS_TOKEN);
 					_t = _t.getNextSibling();
 				}
@@ -33758,10 +33757,10 @@
 		AST function_params_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1396 = _t;
-		AST tmp2096_AST_in = (AST)_t;
+		AST tmp2095_AST_in = (AST)_t;
 		match(_t,Parameter_list);
 		_t = _t.getFirstChild();
-		AST tmp2097_AST_in = (AST)_t;
+		AST tmp2096_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -33792,7 +33791,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp2098_AST_in = (AST)_t;
+				AST tmp2097_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				function_param(_t);
@@ -33804,7 +33803,7 @@
 			
 		} while (true);
 		}
-		AST tmp2099_AST_in = (AST)_t;
+		AST tmp2098_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t1396;
@@ -33817,7 +33816,7 @@
 		AST convertphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t672 = _t;
-		AST tmp2100_AST_in = (AST)_t;
+		AST tmp2099_AST_in = (AST)_t;
 		match(_t,CONVERT);
 		_t = _t.getFirstChild();
 		{
@@ -33826,7 +33825,7 @@
 		case SOURCE:
 		{
 			AST __t674 = _t;
-			AST tmp2101_AST_in = (AST)_t;
+			AST tmp2100_AST_in = (AST)_t;
 			match(_t,SOURCE);
 			_t = _t.getFirstChild();
 			{
@@ -33834,14 +33833,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp2102_AST_in = (AST)_t;
+				AST tmp2101_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp2103_AST_in = (AST)_t;
+				AST tmp2102_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -33851,7 +33850,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp2104_AST_in = (AST)_t;
+					AST tmp2103_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -33895,7 +33894,7 @@
 		case TARGET:
 		{
 			AST __t678 = _t;
-			AST tmp2105_AST_in = (AST)_t;
+			AST tmp2104_AST_in = (AST)_t;
 			match(_t,TARGET);
 			_t = _t.getFirstChild();
 			{
@@ -33903,14 +33902,14 @@
 			switch ( _t.getType()) {
 			case BASE64:
 			{
-				AST tmp2106_AST_in = (AST)_t;
+				AST tmp2105_AST_in = (AST)_t;
 				match(_t,BASE64);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case CODEPAGE:
 			{
-				AST tmp2107_AST_in = (AST)_t;
+				AST tmp2106_AST_in = (AST)_t;
 				match(_t,CODEPAGE);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -33920,7 +33919,7 @@
 				switch ( _t.getType()) {
 				case BASE64:
 				{
-					AST tmp2108_AST_in = (AST)_t;
+					AST tmp2107_AST_in = (AST)_t;
 					match(_t,BASE64);
 					_t = _t.getNextSibling();
 					break;
@@ -33974,10 +33973,10 @@
 		case IN_KW:
 		{
 			AST __t705 = _t;
-			AST tmp2109_AST_in = (AST)_t;
+			AST tmp2108_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp2110_AST_in = (AST)_t;
+			AST tmp2109_AST_in = (AST)_t;
 			match(_t,WIDGETPOOL);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34003,7 +34002,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2111_AST_in = (AST)_t;
+			AST tmp2110_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -34027,13 +34026,13 @@
 		AST triggerphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2115 = _t;
-		AST tmp2112_AST_in = (AST)_t;
+		AST tmp2111_AST_in = (AST)_t;
 		match(_t,TRIGGERS);
 		_t = _t.getFirstChild();
 		block_colon(_t);
 		_t = _retTree;
 		AST __t2116 = _t;
-		AST tmp2113_AST_in = (AST)_t;
+		AST tmp2112_AST_in = (AST)_t;
 		match(_t,Code_block);
 		_t = _t.getFirstChild();
 		{
@@ -34042,7 +34041,7 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==ON)) {
 				AST __t2118 = _t;
-				AST tmp2114_AST_in = (AST)_t;
+				AST tmp2113_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getFirstChild();
 				eventlist(_t);
@@ -34052,7 +34051,7 @@
 				switch ( _t.getType()) {
 				case ANYWHERE:
 				{
-					AST tmp2115_AST_in = (AST)_t;
+					AST tmp2114_AST_in = (AST)_t;
 					match(_t,ANYWHERE);
 					_t = _t.getNextSibling();
 					break;
@@ -34191,7 +34190,7 @@
 				switch ( _t.getType()) {
 				case PERSISTENT:
 				{
-					AST tmp2116_AST_in = (AST)_t;
+					AST tmp2115_AST_in = (AST)_t;
 					match(_t,PERSISTENT);
 					_t = _t.getNextSibling();
 					runstate(_t);
@@ -34340,7 +34339,7 @@
 		_t = __t2116;
 		_t = _t.getNextSibling();
 		AST __t2122 = _t;
-		AST tmp2117_AST_in = (AST)_t;
+		AST tmp2116_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getFirstChild();
 		{
@@ -34348,7 +34347,7 @@
 		switch ( _t.getType()) {
 		case TRIGGERS:
 		{
-			AST tmp2118_AST_in = (AST)_t;
+			AST tmp2117_AST_in = (AST)_t;
 			match(_t,TRIGGERS);
 			_t = _t.getNextSibling();
 			break;
@@ -34378,7 +34377,7 @@
 		switch ( _t.getType()) {
 		case CHARACTER:
 		{
-			AST tmp2119_AST_in = (AST)_t;
+			AST tmp2118_AST_in = (AST)_t;
 			match(_t,CHARACTER);
 			_t = _t.getNextSibling();
 			break;
@@ -34410,42 +34409,42 @@
 		switch ( _t.getType()) {
 		case BYTE:
 		{
-			AST tmp2120_AST_in = (AST)_t;
+			AST tmp2119_AST_in = (AST)_t;
 			match(_t,BYTE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DOUBLE:
 		{
-			AST tmp2121_AST_in = (AST)_t;
+			AST tmp2120_AST_in = (AST)_t;
 			match(_t,DOUBLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case FLOAT:
 		{
-			AST tmp2122_AST_in = (AST)_t;
+			AST tmp2121_AST_in = (AST)_t;
 			match(_t,FLOAT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case LONG:
 		{
-			AST tmp2123_AST_in = (AST)_t;
+			AST tmp2122_AST_in = (AST)_t;
 			match(_t,LONG);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SHORT:
 		{
-			AST tmp2124_AST_in = (AST)_t;
+			AST tmp2123_AST_in = (AST)_t;
 			match(_t,SHORT);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case UNSIGNEDSHORT:
 		{
-			AST tmp2125_AST_in = (AST)_t;
+			AST tmp2124_AST_in = (AST)_t;
 			match(_t,UNSIGNEDSHORT);
 			_t = _t.getNextSibling();
 			break;
@@ -34466,14 +34465,14 @@
 		switch ( _t.getType()) {
 		case BLOB:
 		{
-			AST tmp2126_AST_in = (AST)_t;
+			AST tmp2125_AST_in = (AST)_t;
 			match(_t,BLOB);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case CLOB:
 		{
-			AST tmp2127_AST_in = (AST)_t;
+			AST tmp2126_AST_in = (AST)_t;
 			match(_t,CLOB);
 			_t = _t.getNextSibling();
 			break;
@@ -34561,7 +34560,7 @@
 		switch ( _t.getType()) {
 		case SHARED:
 		{
-			AST tmp2128_AST_in = (AST)_t;
+			AST tmp2127_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			break;
@@ -34569,7 +34568,7 @@
 		case NEW:
 		{
 			AST __t829 = _t;
-			AST tmp2129_AST_in = (AST)_t;
+			AST tmp2128_AST_in = (AST)_t;
 			match(_t,NEW);
 			_t = _t.getFirstChild();
 			{
@@ -34577,7 +34576,7 @@
 			switch ( _t.getType()) {
 			case GLOBAL:
 			{
-				AST tmp2130_AST_in = (AST)_t;
+				AST tmp2129_AST_in = (AST)_t;
 				match(_t,GLOBAL);
 				_t = _t.getNextSibling();
 				break;
@@ -34592,7 +34591,7 @@
 			}
 			}
 			}
-			AST tmp2131_AST_in = (AST)_t;
+			AST tmp2130_AST_in = (AST)_t;
 			match(_t,SHARED);
 			_t = _t.getNextSibling();
 			_t = __t829;
@@ -34616,21 +34615,21 @@
 		switch ( _t.getType()) {
 		case PRIVATE:
 		{
-			AST tmp2132_AST_in = (AST)_t;
+			AST tmp2131_AST_in = (AST)_t;
 			match(_t,PRIVATE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PROTECTED:
 		{
-			AST tmp2133_AST_in = (AST)_t;
+			AST tmp2132_AST_in = (AST)_t;
 			match(_t,PROTECTED);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PUBLIC:
 		{
-			AST tmp2134_AST_in = (AST)_t;
+			AST tmp2133_AST_in = (AST)_t;
 			match(_t,PUBLIC);
 			_t = _t.getNextSibling();
 			break;
@@ -34649,7 +34648,7 @@
 		AST spacephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2008 = _t;
-		AST tmp2135_AST_in = (AST)_t;
+		AST tmp2134_AST_in = (AST)_t;
 		match(_t,SPACE);
 		_t = _t.getFirstChild();
 		{
@@ -34689,13 +34688,13 @@
 			try {
 				{
 				AST __t1208 = _t;
-				AST tmp2136_AST_in = (AST)_t;
+				AST tmp2135_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp2137_AST_in = (AST)_t;
+				AST tmp2136_AST_in = (AST)_t;
 				match(_t,BROWSE);
 				_t = _t.getNextSibling();
-				AST tmp2138_AST_in = (AST)_t;
+				AST tmp2137_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				_t = __t1208;
@@ -34710,13 +34709,13 @@
 		}
 		if ( synPredMatched1209 ) {
 			AST __t1210 = _t;
-			AST tmp2139_AST_in = (AST)_t;
+			AST tmp2138_AST_in = (AST)_t;
 			match(_t,WITH);
 			_t = _t.getFirstChild();
-			AST tmp2140_AST_in = (AST)_t;
+			AST tmp2139_AST_in = (AST)_t;
 			match(_t,BROWSE);
 			_t = _t.getNextSibling();
-			AST tmp2141_AST_in = (AST)_t;
+			AST tmp2140_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			_t = __t1210;
@@ -34738,7 +34737,7 @@
 		AST namespace_uri_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1592 = _t;
-		AST tmp2142_AST_in = (AST)_t;
+		AST tmp2141_AST_in = (AST)_t;
 		match(_t,NAMESPACEURI);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -34753,7 +34752,7 @@
 		AST namespace_prefix_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1590 = _t;
-		AST tmp2143_AST_in = (AST)_t;
+		AST tmp2142_AST_in = (AST)_t;
 		match(_t,NAMESPACEPREFIX);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -34772,7 +34771,7 @@
 		case FILE:
 		{
 			AST __t1453 = _t;
-			AST tmp2144_AST_in = (AST)_t;
+			AST tmp2143_AST_in = (AST)_t;
 			match(_t,FILE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -34784,12 +34783,12 @@
 		case IMAGESIZE:
 		{
 			AST __t1454 = _t;
-			AST tmp2145_AST_in = (AST)_t;
+			AST tmp2144_AST_in = (AST)_t;
 			match(_t,IMAGESIZE);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2146_AST_in = (AST)_t;
+			AST tmp2145_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34801,12 +34800,12 @@
 		case IMAGESIZECHARS:
 		{
 			AST __t1455 = _t;
-			AST tmp2147_AST_in = (AST)_t;
+			AST tmp2146_AST_in = (AST)_t;
 			match(_t,IMAGESIZECHARS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2148_AST_in = (AST)_t;
+			AST tmp2147_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34818,12 +34817,12 @@
 		case IMAGESIZEPIXELS:
 		{
 			AST __t1456 = _t;
-			AST tmp2149_AST_in = (AST)_t;
+			AST tmp2148_AST_in = (AST)_t;
 			match(_t,IMAGESIZEPIXELS);
 			_t = _t.getFirstChild();
 			expression(_t);
 			_t = _retTree;
-			AST tmp2150_AST_in = (AST)_t;
+			AST tmp2149_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -34835,7 +34834,7 @@
 		case FROM:
 		{
 			AST __t1457 = _t;
-			AST tmp2151_AST_in = (AST)_t;
+			AST tmp2150_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -34843,7 +34842,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp2152_AST_in = (AST)_t;
+				AST tmp2151_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34852,7 +34851,7 @@
 			}
 			case Y:
 			{
-				AST tmp2153_AST_in = (AST)_t;
+				AST tmp2152_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34861,7 +34860,7 @@
 			}
 			case ROW:
 			{
-				AST tmp2154_AST_in = (AST)_t;
+				AST tmp2153_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34870,7 +34869,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp2155_AST_in = (AST)_t;
+				AST tmp2154_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34888,7 +34887,7 @@
 			switch ( _t.getType()) {
 			case X:
 			{
-				AST tmp2156_AST_in = (AST)_t;
+				AST tmp2155_AST_in = (AST)_t;
 				match(_t,X);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34897,7 +34896,7 @@
 			}
 			case Y:
 			{
-				AST tmp2157_AST_in = (AST)_t;
+				AST tmp2156_AST_in = (AST)_t;
 				match(_t,Y);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34906,7 +34905,7 @@
 			}
 			case ROW:
 			{
-				AST tmp2158_AST_in = (AST)_t;
+				AST tmp2157_AST_in = (AST)_t;
 				match(_t,ROW);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34915,7 +34914,7 @@
 			}
 			case COLUMN:
 			{
-				AST tmp2159_AST_in = (AST)_t;
+				AST tmp2158_AST_in = (AST)_t;
 				match(_t,COLUMN);
 				_t = _t.getNextSibling();
 				expression(_t);
@@ -34945,7 +34944,7 @@
 		AST data_relation_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t928 = _t;
-		AST tmp2160_AST_in = (AST)_t;
+		AST tmp2159_AST_in = (AST)_t;
 		match(_t,DATARELATION);
 		_t = _t.getFirstChild();
 		{
@@ -34953,7 +34952,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp2161_AST_in = (AST)_t;
+			AST tmp2160_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -34968,16 +34967,16 @@
 		}
 		}
 		}
-		AST tmp2162_AST_in = (AST)_t;
+		AST tmp2161_AST_in = (AST)_t;
 		match(_t,FOR);
 		_t = _t.getNextSibling();
-		AST tmp2163_AST_in = (AST)_t;
+		AST tmp2162_AST_in = (AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getNextSibling();
-		AST tmp2164_AST_in = (AST)_t;
+		AST tmp2163_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
-		AST tmp2165_AST_in = (AST)_t;
+		AST tmp2164_AST_in = (AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getNextSibling();
 		{
@@ -35005,7 +35004,7 @@
 		switch ( _t.getType()) {
 		case REPOSITION:
 		{
-			AST tmp2166_AST_in = (AST)_t;
+			AST tmp2165_AST_in = (AST)_t;
 			match(_t,REPOSITION);
 			_t = _t.getNextSibling();
 			break;
@@ -35030,15 +35029,15 @@
 		AST field_mapping_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t933 = _t;
-		AST tmp2167_AST_in = (AST)_t;
+		AST tmp2166_AST_in = (AST)_t;
 		match(_t,RELATIONFIELDS);
 		_t = _t.getFirstChild();
-		AST tmp2168_AST_in = (AST)_t;
+		AST tmp2167_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		field(_t);
 		_t = _retTree;
-		AST tmp2169_AST_in = (AST)_t;
+		AST tmp2168_AST_in = (AST)_t;
 		match(_t,COMMA);
 		_t = _t.getNextSibling();
 		field(_t);
@@ -35048,12 +35047,12 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp2170_AST_in = (AST)_t;
+				AST tmp2169_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				field(_t);
 				_t = _retTree;
-				AST tmp2171_AST_in = (AST)_t;
+				AST tmp2170_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				field(_t);
@@ -35065,7 +35064,7 @@
 			
 		} while (true);
 		}
-		AST tmp2172_AST_in = (AST)_t;
+		AST tmp2171_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t933;
@@ -35078,7 +35077,7 @@
 		AST source_buffer_phrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t946 = _t;
-		AST tmp2173_AST_in = (AST)_t;
+		AST tmp2172_AST_in = (AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getFirstChild();
 		{
@@ -35086,10 +35085,10 @@
 		switch ( _t.getType()) {
 		case KEYS:
 		{
-			AST tmp2174_AST_in = (AST)_t;
+			AST tmp2173_AST_in = (AST)_t;
 			match(_t,KEYS);
 			_t = _t.getNextSibling();
-			AST tmp2175_AST_in = (AST)_t;
+			AST tmp2174_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -35097,7 +35096,7 @@
 			switch ( _t.getType()) {
 			case ROWID:
 			{
-				AST tmp2176_AST_in = (AST)_t;
+				AST tmp2175_AST_in = (AST)_t;
 				match(_t,ROWID);
 				_t = _t.getNextSibling();
 				break;
@@ -35111,7 +35110,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2177_AST_in = (AST)_t;
+						AST tmp2176_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						field(_t);
@@ -35131,7 +35130,7 @@
 			}
 			}
 			}
-			AST tmp2178_AST_in = (AST)_t;
+			AST tmp2177_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -35156,7 +35155,7 @@
 		AST form_item_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1306 = _t;
-		AST tmp2179_AST_in = (AST)_t;
+		AST tmp2178_AST_in = (AST)_t;
 		match(_t,Form_item);
 		_t = _t.getFirstChild();
 		{
@@ -35164,7 +35163,7 @@
 		switch ( _t.getType()) {
 		case RECORD_NAME:
 		{
-			AST tmp2180_AST_in = (AST)_t;
+			AST tmp2179_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			break;
@@ -35172,10 +35171,10 @@
 		case TEXT:
 		{
 			AST __t1308 = _t;
-			AST tmp2181_AST_in = (AST)_t;
+			AST tmp2180_AST_in = (AST)_t;
 			match(_t,TEXT);
 			_t = _t.getFirstChild();
-			AST tmp2182_AST_in = (AST)_t;
+			AST tmp2181_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -35192,7 +35191,7 @@
 				
 			} while (true);
 			}
-			AST tmp2183_AST_in = (AST)_t;
+			AST tmp2182_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t1308;
@@ -35285,7 +35284,7 @@
 		}
 		case CARET:
 		{
-			AST tmp2184_AST_in = (AST)_t;
+			AST tmp2183_AST_in = (AST)_t;
 			match(_t,CARET);
 			_t = _t.getNextSibling();
 			break;
@@ -35355,7 +35354,7 @@
 		case FONT:
 		{
 			AST __t989 = _t;
-			AST tmp2185_AST_in = (AST)_t;
+			AST tmp2184_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -35367,7 +35366,7 @@
 		case LIKE:
 		{
 			AST __t990 = _t;
-			AST tmp2186_AST_in = (AST)_t;
+			AST tmp2185_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
 			field(_t);
@@ -35377,7 +35376,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp2187_AST_in = (AST)_t;
+				AST tmp2186_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -35399,7 +35398,7 @@
 		case TITLE:
 		{
 			AST __t992 = _t;
-			AST tmp2188_AST_in = (AST)_t;
+			AST tmp2187_AST_in = (AST)_t;
 			match(_t,TITLE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -35410,21 +35409,21 @@
 		}
 		case MENUBAR:
 		{
-			AST tmp2189_AST_in = (AST)_t;
+			AST tmp2188_AST_in = (AST)_t;
 			match(_t,MENUBAR);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case PINNABLE:
 		{
-			AST tmp2190_AST_in = (AST)_t;
+			AST tmp2189_AST_in = (AST)_t;
 			match(_t,PINNABLE);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SUBMENUHELP:
 		{
-			AST tmp2191_AST_in = (AST)_t;
+			AST tmp2190_AST_in = (AST)_t;
 			match(_t,SUBMENUHELP);
 			_t = _t.getNextSibling();
 			break;
@@ -35447,10 +35446,10 @@
 		case MENUITEM:
 		{
 			AST __t995 = _t;
-			AST tmp2192_AST_in = (AST)_t;
+			AST tmp2191_AST_in = (AST)_t;
 			match(_t,MENUITEM);
 			_t = _t.getFirstChild();
-			AST tmp2193_AST_in = (AST)_t;
+			AST tmp2192_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -35461,7 +35460,7 @@
 				case ACCELERATOR:
 				{
 					AST __t997 = _t;
-					AST tmp2194_AST_in = (AST)_t;
+					AST tmp2193_AST_in = (AST)_t;
 					match(_t,ACCELERATOR);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -35481,7 +35480,7 @@
 				}
 				case DISABLED:
 				{
-					AST tmp2195_AST_in = (AST)_t;
+					AST tmp2194_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -35489,7 +35488,7 @@
 				case FONT:
 				{
 					AST __t998 = _t;
-					AST tmp2196_AST_in = (AST)_t;
+					AST tmp2195_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -35507,14 +35506,14 @@
 				}
 				case READONLY:
 				{
-					AST tmp2197_AST_in = (AST)_t;
+					AST tmp2196_AST_in = (AST)_t;
 					match(_t,READONLY);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOGGLEBOX:
 				{
-					AST tmp2198_AST_in = (AST)_t;
+					AST tmp2197_AST_in = (AST)_t;
 					match(_t,TOGGLEBOX);
 					_t = _t.getNextSibling();
 					break;
@@ -35552,10 +35551,10 @@
 		case SUBMENU:
 		{
 			AST __t1001 = _t;
-			AST tmp2199_AST_in = (AST)_t;
+			AST tmp2198_AST_in = (AST)_t;
 			match(_t,SUBMENU);
 			_t = _t.getFirstChild();
-			AST tmp2200_AST_in = (AST)_t;
+			AST tmp2199_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -35565,7 +35564,7 @@
 				switch ( _t.getType()) {
 				case DISABLED:
 				{
-					AST tmp2201_AST_in = (AST)_t;
+					AST tmp2200_AST_in = (AST)_t;
 					match(_t,DISABLED);
 					_t = _t.getNextSibling();
 					break;
@@ -35580,7 +35579,7 @@
 				case FONT:
 				{
 					AST __t1003 = _t;
-					AST tmp2202_AST_in = (AST)_t;
+					AST tmp2201_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -35612,7 +35611,7 @@
 		case RULE:
 		{
 			AST __t1005 = _t;
-			AST tmp2203_AST_in = (AST)_t;
+			AST tmp2202_AST_in = (AST)_t;
 			match(_t,RULE);
 			_t = _t.getFirstChild();
 			{
@@ -35623,7 +35622,7 @@
 				case FONT:
 				{
 					AST __t1007 = _t;
-					AST tmp2204_AST_in = (AST)_t;
+					AST tmp2203_AST_in = (AST)_t;
 					match(_t,FONT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -35654,7 +35653,7 @@
 		}
 		case SKIP:
 		{
-			AST tmp2205_AST_in = (AST)_t;
+			AST tmp2204_AST_in = (AST)_t;
 			match(_t,SKIP);
 			_t = _t.getNextSibling();
 			break;
@@ -35674,7 +35673,7 @@
 			inputState.guessing++;
 			try {
 				{
-				AST tmp2206_AST_in = (AST)_t;
+				AST tmp2205_AST_in = (AST)_t;
 				match(_t,PERIOD);
 				_t = _t.getNextSibling();
 				{
@@ -35682,28 +35681,28 @@
 				switch ( _t.getType()) {
 				case RULE:
 				{
-					AST tmp2207_AST_in = (AST)_t;
+					AST tmp2206_AST_in = (AST)_t;
 					match(_t,RULE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SKIP:
 				{
-					AST tmp2208_AST_in = (AST)_t;
+					AST tmp2207_AST_in = (AST)_t;
 					match(_t,SKIP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case SUBMENU:
 				{
-					AST tmp2209_AST_in = (AST)_t;
+					AST tmp2208_AST_in = (AST)_t;
 					match(_t,SUBMENU);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case MENUITEM:
 				{
-					AST tmp2210_AST_in = (AST)_t;
+					AST tmp2209_AST_in = (AST)_t;
 					match(_t,MENUITEM);
 					_t = _t.getNextSibling();
 					break;
@@ -35723,7 +35722,7 @@
 inputState.guessing--;
 		}
 		if ( synPredMatched1012 ) {
-			AST tmp2211_AST_in = (AST)_t;
+			AST tmp2210_AST_in = (AST)_t;
 			match(_t,PERIOD);
 			_t = _t.getNextSibling();
 		}
@@ -35745,7 +35744,7 @@
 		if (_t==null) _t=ASTNULL;
 		if ((_t.getType()==AS)) {
 			AST __t1038 = _t;
-			AST tmp2212_AST_in = (AST)_t;
+			AST tmp2211_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
 			{
@@ -35757,7 +35756,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp2213_AST_in = (AST)_t;
+					AST tmp2212_AST_in = (AST)_t;
 					match(_t,HANDLE);
 					_t = _t.getNextSibling();
 					{
@@ -35765,7 +35764,7 @@
 					switch ( _t.getType()) {
 					case TO:
 					{
-						AST tmp2214_AST_in = (AST)_t;
+						AST tmp2213_AST_in = (AST)_t;
 						match(_t,TO);
 						_t = _t.getNextSibling();
 						break;
@@ -35797,7 +35796,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched1042 ) {
-				AST tmp2215_AST_in = (AST)_t;
+				AST tmp2214_AST_in = (AST)_t;
 				match(_t,HANDLE);
 				_t = _t.getNextSibling();
 				{
@@ -35805,7 +35804,7 @@
 				switch ( _t.getType()) {
 				case TO:
 				{
-					AST tmp2216_AST_in = (AST)_t;
+					AST tmp2215_AST_in = (AST)_t;
 					match(_t,TO);
 					_t = _t.getNextSibling();
 					break;
@@ -35830,10 +35829,10 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CLASS)) {
-				AST tmp2217_AST_in = (AST)_t;
+				AST tmp2216_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp2218_AST_in = (AST)_t;
+				AST tmp2217_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 			}
@@ -35871,7 +35870,7 @@
 			case DECIMALS:
 			{
 				AST __t1046 = _t;
-				AST tmp2219_AST_in = (AST)_t;
+				AST tmp2218_AST_in = (AST)_t;
 				match(_t,DECIMALS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -35883,7 +35882,7 @@
 			case LIKE:
 			{
 				AST __t1047 = _t;
-				AST tmp2220_AST_in = (AST)_t;
+				AST tmp2219_AST_in = (AST)_t;
 				match(_t,LIKE);
 				_t = _t.getFirstChild();
 				field(_t);
@@ -35893,7 +35892,7 @@
 				switch ( _t.getType()) {
 				case VALIDATE:
 				{
-					AST tmp2221_AST_in = (AST)_t;
+					AST tmp2220_AST_in = (AST)_t;
 					match(_t,VALIDATE);
 					_t = _t.getNextSibling();
 					break;
@@ -35927,7 +35926,7 @@
 			}
 			case NOUNDO:
 			{
-				AST tmp2222_AST_in = (AST)_t;
+				AST tmp2221_AST_in = (AST)_t;
 				match(_t,NOUNDO);
 				_t = _t.getNextSibling();
 				break;
@@ -35942,7 +35941,7 @@
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==FORMAT)) {
 					AST __t1045 = _t;
-					AST tmp2223_AST_in = (AST)_t;
+					AST tmp2222_AST_in = (AST)_t;
 					match(_t,FORMAT);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -35964,7 +35963,7 @@
 		AST initial_constant_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1475 = _t;
-		AST tmp2224_AST_in = (AST)_t;
+		AST tmp2223_AST_in = (AST)_t;
 		match(_t,INITIAL);
 		_t = _t.getFirstChild();
 		{
@@ -35972,7 +35971,7 @@
 		switch ( _t.getType()) {
 		case LEFTBRACE:
 		{
-			AST tmp2225_AST_in = (AST)_t;
+			AST tmp2224_AST_in = (AST)_t;
 			match(_t,LEFTBRACE);
 			_t = _t.getNextSibling();
 			{
@@ -35980,7 +35979,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp2226_AST_in = (AST)_t;
+				AST tmp2225_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -36043,7 +36042,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2227_AST_in = (AST)_t;
+					AST tmp2226_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					{
@@ -36051,7 +36050,7 @@
 					switch ( _t.getType()) {
 					case TODAY:
 					{
-						AST tmp2228_AST_in = (AST)_t;
+						AST tmp2227_AST_in = (AST)_t;
 						match(_t,TODAY);
 						_t = _t.getNextSibling();
 						break;
@@ -36116,7 +36115,7 @@
 				
 			} while (true);
 			}
-			AST tmp2229_AST_in = (AST)_t;
+			AST tmp2228_AST_in = (AST)_t;
 			match(_t,RIGHTBRACE);
 			_t = _t.getNextSibling();
 			break;
@@ -36170,7 +36169,7 @@
 			switch ( _t.getType()) {
 			case TODAY:
 			{
-				AST tmp2230_AST_in = (AST)_t;
+				AST tmp2229_AST_in = (AST)_t;
 				match(_t,TODAY);
 				_t = _t.getNextSibling();
 				break;
@@ -36246,7 +36245,7 @@
 		AST extentphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1273 = _t;
-		AST tmp2231_AST_in = (AST)_t;
+		AST tmp2230_AST_in = (AST)_t;
 		match(_t,EXTENT);
 		_t = _t.getFirstChild();
 		{
@@ -36276,7 +36275,7 @@
 		case FIELDS:
 		{
 			AST __t1850 = _t;
-			AST tmp2232_AST_in = (AST)_t;
+			AST tmp2231_AST_in = (AST)_t;
 			match(_t,FIELDS);
 			_t = _t.getFirstChild();
 			{
@@ -36284,7 +36283,7 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp2233_AST_in = (AST)_t;
+				AST tmp2232_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -36300,7 +36299,7 @@
 						case WHEN:
 						{
 							AST __t1854 = _t;
-							AST tmp2234_AST_in = (AST)_t;
+							AST tmp2233_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -36327,7 +36326,7 @@
 					
 				} while (true);
 				}
-				AST tmp2235_AST_in = (AST)_t;
+				AST tmp2234_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -36349,7 +36348,7 @@
 		case EXCEPT:
 		{
 			AST __t1856 = _t;
-			AST tmp2236_AST_in = (AST)_t;
+			AST tmp2235_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -36357,7 +36356,7 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp2237_AST_in = (AST)_t;
+				AST tmp2236_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -36373,7 +36372,7 @@
 						case WHEN:
 						{
 							AST __t1860 = _t;
-							AST tmp2238_AST_in = (AST)_t;
+							AST tmp2237_AST_in = (AST)_t;
 							match(_t,WHEN);
 							_t = _t.getFirstChild();
 							expression(_t);
@@ -36400,7 +36399,7 @@
 					
 				} while (true);
 				}
-				AST tmp2239_AST_in = (AST)_t;
+				AST tmp2238_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -36432,10 +36431,10 @@
 		AST def_table_like_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1111 = _t;
-		AST tmp2240_AST_in = (AST)_t;
+		AST tmp2239_AST_in = (AST)_t;
 		match(_t,LIKE);
 		_t = _t.getFirstChild();
-		AST tmp2241_AST_in = (AST)_t;
+		AST tmp2240_AST_in = (AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getNextSibling();
 		{
@@ -36443,7 +36442,7 @@
 		switch ( _t.getType()) {
 		case VALIDATE:
 		{
-			AST tmp2242_AST_in = (AST)_t;
+			AST tmp2241_AST_in = (AST)_t;
 			match(_t,VALIDATE);
 			_t = _t.getNextSibling();
 			break;
@@ -36465,10 +36464,10 @@
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==USEINDEX)) {
 				AST __t1114 = _t;
-				AST tmp2243_AST_in = (AST)_t;
+				AST tmp2242_AST_in = (AST)_t;
 				match(_t,USEINDEX);
 				_t = _t.getFirstChild();
-				AST tmp2244_AST_in = (AST)_t;
+				AST tmp2243_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				{
@@ -36482,14 +36481,14 @@
 					switch ( _t.getType()) {
 					case AS:
 					{
-						AST tmp2245_AST_in = (AST)_t;
+						AST tmp2244_AST_in = (AST)_t;
 						match(_t,AS);
 						_t = _t.getNextSibling();
 						break;
 					}
 					case IS:
 					{
-						AST tmp2246_AST_in = (AST)_t;
+						AST tmp2245_AST_in = (AST)_t;
 						match(_t,IS);
 						_t = _t.getNextSibling();
 						break;
@@ -36500,7 +36499,7 @@
 					}
 					}
 					}
-					AST tmp2247_AST_in = (AST)_t;
+					AST tmp2246_AST_in = (AST)_t;
 					match(_t,PRIMARY);
 					_t = _t.getNextSibling();
 					break;
@@ -36534,10 +36533,10 @@
 		AST def_table_field_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1119 = _t;
-		AST tmp2248_AST_in = (AST)_t;
+		AST tmp2247_AST_in = (AST)_t;
 		match(_t,FIELD);
 		_t = _t.getFirstChild();
-		AST tmp2249_AST_in = (AST)_t;
+		AST tmp2248_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getNextSibling();
 		{
@@ -36568,7 +36567,7 @@
 		case AS:
 		{
 			AST __t1276 = _t;
-			AST tmp2250_AST_in = (AST)_t;
+			AST tmp2249_AST_in = (AST)_t;
 			match(_t,AS);
 			_t = _t.getFirstChild();
 			{
@@ -36576,10 +36575,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp2251_AST_in = (AST)_t;
+				AST tmp2250_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp2252_AST_in = (AST)_t;
+				AST tmp2251_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -36636,7 +36635,7 @@
 		case COLUMNCODEPAGE:
 		{
 			AST __t1278 = _t;
-			AST tmp2253_AST_in = (AST)_t;
+			AST tmp2252_AST_in = (AST)_t;
 			match(_t,COLUMNCODEPAGE);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36648,7 +36647,7 @@
 		case CONTEXTHELPID:
 		{
 			AST __t1279 = _t;
-			AST tmp2254_AST_in = (AST)_t;
+			AST tmp2253_AST_in = (AST)_t;
 			match(_t,CONTEXTHELPID);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36660,7 +36659,7 @@
 		case DECIMALS:
 		{
 			AST __t1280 = _t;
-			AST tmp2255_AST_in = (AST)_t;
+			AST tmp2254_AST_in = (AST)_t;
 			match(_t,DECIMALS);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36671,7 +36670,7 @@
 		}
 		case DROPTARGET:
 		{
-			AST tmp2256_AST_in = (AST)_t;
+			AST tmp2255_AST_in = (AST)_t;
 			match(_t,DROPTARGET);
 			_t = _t.getNextSibling();
 			break;
@@ -36685,7 +36684,7 @@
 		case FONT:
 		{
 			AST __t1281 = _t;
-			AST tmp2257_AST_in = (AST)_t;
+			AST tmp2256_AST_in = (AST)_t;
 			match(_t,FONT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36697,7 +36696,7 @@
 		case FORMAT:
 		{
 			AST __t1282 = _t;
-			AST tmp2258_AST_in = (AST)_t;
+			AST tmp2257_AST_in = (AST)_t;
 			match(_t,FORMAT);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36709,7 +36708,7 @@
 		case HELP:
 		{
 			AST __t1283 = _t;
-			AST tmp2259_AST_in = (AST)_t;
+			AST tmp2258_AST_in = (AST)_t;
 			match(_t,HELP);
 			_t = _t.getFirstChild();
 			constant(_t);
@@ -36734,7 +36733,7 @@
 		case LIKE:
 		{
 			AST __t1284 = _t;
-			AST tmp2260_AST_in = (AST)_t;
+			AST tmp2259_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getFirstChild();
 			field(_t);
@@ -36744,7 +36743,7 @@
 			switch ( _t.getType()) {
 			case VALIDATE:
 			{
-				AST tmp2261_AST_in = (AST)_t;
+				AST tmp2260_AST_in = (AST)_t;
 				match(_t,VALIDATE);
 				_t = _t.getNextSibling();
 				break;
@@ -36766,7 +36765,7 @@
 		case MOUSEPOINTER:
 		{
 			AST __t1286 = _t;
-			AST tmp2262_AST_in = (AST)_t;
+			AST tmp2261_AST_in = (AST)_t;
 			match(_t,MOUSEPOINTER);
 			_t = _t.getFirstChild();
 			expression(_t);
@@ -36777,7 +36776,7 @@
 		}
 		case NOUNDO:
 		{
-			AST tmp2263_AST_in = (AST)_t;
+			AST tmp2262_AST_in = (AST)_t;
 			match(_t,NOUNDO);
 			_t = _t.getNextSibling();
 			break;
@@ -36790,7 +36789,7 @@
 		}
 		case TTCODEPAGE:
 		{
-			AST tmp2264_AST_in = (AST)_t;
+			AST tmp2263_AST_in = (AST)_t;
 			match(_t,TTCODEPAGE);
 			_t = _t.getNextSibling();
 			break;
@@ -36820,7 +36819,7 @@
 		AST skipphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1995 = _t;
-		AST tmp2265_AST_in = (AST)_t;
+		AST tmp2264_AST_in = (AST)_t;
 		match(_t,SKIP);
 		_t = _t.getFirstChild();
 		{
@@ -36852,7 +36851,7 @@
 		AST editorphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1228 = _t;
-		AST tmp2266_AST_in = (AST)_t;
+		AST tmp2265_AST_in = (AST)_t;
 		match(_t,EDITOR);
 		_t = _t.getFirstChild();
 		{
@@ -36863,7 +36862,7 @@
 			case INNERCHARS:
 			{
 				AST __t1230 = _t;
-				AST tmp2267_AST_in = (AST)_t;
+				AST tmp2266_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36875,7 +36874,7 @@
 			case INNERLINES:
 			{
 				AST __t1231 = _t;
-				AST tmp2268_AST_in = (AST)_t;
+				AST tmp2267_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36887,7 +36886,7 @@
 			case BUFFERCHARS:
 			{
 				AST __t1232 = _t;
-				AST tmp2269_AST_in = (AST)_t;
+				AST tmp2268_AST_in = (AST)_t;
 				match(_t,BUFFERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36899,7 +36898,7 @@
 			case BUFFERLINES:
 			{
 				AST __t1233 = _t;
-				AST tmp2270_AST_in = (AST)_t;
+				AST tmp2269_AST_in = (AST)_t;
 				match(_t,BUFFERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36910,7 +36909,7 @@
 			}
 			case LARGE:
 			{
-				AST tmp2271_AST_in = (AST)_t;
+				AST tmp2270_AST_in = (AST)_t;
 				match(_t,LARGE);
 				_t = _t.getNextSibling();
 				break;
@@ -36918,7 +36917,7 @@
 			case MAXCHARS:
 			{
 				AST __t1234 = _t;
-				AST tmp2272_AST_in = (AST)_t;
+				AST tmp2271_AST_in = (AST)_t;
 				match(_t,MAXCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -36929,28 +36928,28 @@
 			}
 			case NOBOX:
 			{
-				AST tmp2273_AST_in = (AST)_t;
+				AST tmp2272_AST_in = (AST)_t;
 				match(_t,NOBOX);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOWORDWRAP:
 			{
-				AST tmp2274_AST_in = (AST)_t;
+				AST tmp2273_AST_in = (AST)_t;
 				match(_t,NOWORDWRAP);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp2275_AST_in = (AST)_t;
+				AST tmp2274_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp2276_AST_in = (AST)_t;
+				AST tmp2275_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -36986,7 +36985,7 @@
 		AST editingphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1254 = _t;
-		AST tmp2277_AST_in = (AST)_t;
+		AST tmp2276_AST_in = (AST)_t;
 		match(_t,Editing_phrase);
 		_t = _t.getFirstChild();
 		{
@@ -36994,10 +36993,10 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp2278_AST_in = (AST)_t;
+			AST tmp2277_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
-			AST tmp2279_AST_in = (AST)_t;
+			AST tmp2278_AST_in = (AST)_t;
 			match(_t,LEXCOLON);
 			_t = _t.getNextSibling();
 			break;
@@ -37012,7 +37011,7 @@
 		}
 		}
 		}
-		AST tmp2280_AST_in = (AST)_t;
+		AST tmp2279_AST_in = (AST)_t;
 		match(_t,EDITING);
 		_t = _t.getNextSibling();
 		block_colon(_t);
@@ -37031,7 +37030,7 @@
 			
 		} while (true);
 		}
-		AST tmp2281_AST_in = (AST)_t;
+		AST tmp2280_AST_in = (AST)_t;
 		match(_t,END);
 		_t = _t.getNextSibling();
 		_t = __t1254;
@@ -37044,7 +37043,7 @@
 		AST viewasphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2217 = _t;
-		AST tmp2282_AST_in = (AST)_t;
+		AST tmp2281_AST_in = (AST)_t;
 		match(_t,VIEWAS);
 		_t = _t.getFirstChild();
 		{
@@ -37114,7 +37113,7 @@
 		AST xml_data_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2233 = _t;
-		AST tmp2283_AST_in = (AST)_t;
+		AST tmp2282_AST_in = (AST)_t;
 		match(_t,XMLDATATYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -37129,7 +37128,7 @@
 		AST xml_node_type_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2235 = _t;
-		AST tmp2284_AST_in = (AST)_t;
+		AST tmp2283_AST_in = (AST)_t;
 		match(_t,XMLNODETYPE);
 		_t = _t.getFirstChild();
 		constant(_t);
@@ -37144,7 +37143,7 @@
 		AST fillinphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1288 = _t;
-		AST tmp2285_AST_in = (AST)_t;
+		AST tmp2284_AST_in = (AST)_t;
 		match(_t,FILLIN);
 		_t = _t.getFirstChild();
 		{
@@ -37154,7 +37153,7 @@
 			switch ( _t.getType()) {
 			case NATIVE:
 			{
-				AST tmp2286_AST_in = (AST)_t;
+				AST tmp2285_AST_in = (AST)_t;
 				match(_t,NATIVE);
 				_t = _t.getNextSibling();
 				break;
@@ -37190,7 +37189,7 @@
 		AST widget_id_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2231 = _t;
-		AST tmp2287_AST_in = (AST)_t;
+		AST tmp2286_AST_in = (AST)_t;
 		match(_t,WIDGETID);
 		_t = _t.getFirstChild();
 		expression(_t);
@@ -37205,7 +37204,7 @@
 		AST titlephrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2099 = _t;
-		AST tmp2288_AST_in = (AST)_t;
+		AST tmp2287_AST_in = (AST)_t;
 		match(_t,TITLE);
 		_t = _t.getFirstChild();
 		{
@@ -37225,7 +37224,7 @@
 			case COLOR:
 			{
 				AST __t2101 = _t;
-				AST tmp2289_AST_in = (AST)_t;
+				AST tmp2288_AST_in = (AST)_t;
 				match(_t,COLOR);
 				_t = _t.getFirstChild();
 				anyorvalue(_t);
@@ -37237,7 +37236,7 @@
 			case FONT:
 			{
 				AST __t2102 = _t;
-				AST tmp2290_AST_in = (AST)_t;
+				AST tmp2289_AST_in = (AST)_t;
 				match(_t,FONT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -37269,7 +37268,7 @@
 		case BUFFER:
 		{
 			AST __t1401 = _t;
-			AST tmp2291_AST_in = (AST)_t;
+			AST tmp2290_AST_in = (AST)_t;
 			match(_t,BUFFER);
 			_t = _t.getFirstChild();
 			{
@@ -37277,7 +37276,7 @@
 			switch ( _t.getType()) {
 			case ID:
 			{
-				AST tmp2292_AST_in = (AST)_t;
+				AST tmp2291_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 				break;
@@ -37292,10 +37291,10 @@
 			}
 			}
 			}
-			AST tmp2293_AST_in = (AST)_t;
+			AST tmp2292_AST_in = (AST)_t;
 			match(_t,FOR);
 			_t = _t.getNextSibling();
-			AST tmp2294_AST_in = (AST)_t;
+			AST tmp2293_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			{
@@ -37303,7 +37302,7 @@
 			switch ( _t.getType()) {
 			case PRESELECT:
 			{
-				AST tmp2295_AST_in = (AST)_t;
+				AST tmp2294_AST_in = (AST)_t;
 				match(_t,PRESELECT);
 				_t = _t.getNextSibling();
 				break;
@@ -37325,7 +37324,7 @@
 		case INPUT:
 		{
 			AST __t1404 = _t;
-			AST tmp2296_AST_in = (AST)_t;
+			AST tmp2295_AST_in = (AST)_t;
 			match(_t,INPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -37337,7 +37336,7 @@
 		case OUTPUT:
 		{
 			AST __t1405 = _t;
-			AST tmp2297_AST_in = (AST)_t;
+			AST tmp2296_AST_in = (AST)_t;
 			match(_t,OUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -37349,7 +37348,7 @@
 		case INPUTOUTPUT:
 		{
 			AST __t1406 = _t;
-			AST tmp2298_AST_in = (AST)_t;
+			AST tmp2297_AST_in = (AST)_t;
 			match(_t,INPUTOUTPUT);
 			_t = _t.getFirstChild();
 			function_param_arg(_t);
@@ -37374,7 +37373,7 @@
 		switch ( _t.getType()) {
 		case TABLE:
 		{
-			AST tmp2299_AST_in = (AST)_t;
+			AST tmp2298_AST_in = (AST)_t;
 			match(_t,TABLE);
 			_t = _t.getNextSibling();
 			{
@@ -37382,7 +37381,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp2300_AST_in = (AST)_t;
+				AST tmp2299_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -37397,7 +37396,7 @@
 			}
 			}
 			}
-			AST tmp2301_AST_in = (AST)_t;
+			AST tmp2300_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			{
@@ -37405,7 +37404,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp2302_AST_in = (AST)_t;
+				AST tmp2301_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -37426,7 +37425,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp2303_AST_in = (AST)_t;
+				AST tmp2302_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -37445,7 +37444,7 @@
 		}
 		case TABLEHANDLE:
 		{
-			AST tmp2304_AST_in = (AST)_t;
+			AST tmp2303_AST_in = (AST)_t;
 			match(_t,TABLEHANDLE);
 			_t = _t.getNextSibling();
 			{
@@ -37453,7 +37452,7 @@
 			switch ( _t.getType()) {
 			case FOR:
 			{
-				AST tmp2305_AST_in = (AST)_t;
+				AST tmp2304_AST_in = (AST)_t;
 				match(_t,FOR);
 				_t = _t.getNextSibling();
 				break;
@@ -37468,7 +37467,7 @@
 			}
 			}
 			}
-			AST tmp2306_AST_in = (AST)_t;
+			AST tmp2305_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -37476,7 +37475,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp2307_AST_in = (AST)_t;
+				AST tmp2306_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -37497,7 +37496,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp2308_AST_in = (AST)_t;
+				AST tmp2307_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -37522,14 +37521,14 @@
 			switch ( _t.getType()) {
 			case DATASET:
 			{
-				AST tmp2309_AST_in = (AST)_t;
+				AST tmp2308_AST_in = (AST)_t;
 				match(_t,DATASET);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case DATASETHANDLE:
 			{
-				AST tmp2310_AST_in = (AST)_t;
+				AST tmp2309_AST_in = (AST)_t;
 				match(_t,DATASETHANDLE);
 				_t = _t.getNextSibling();
 				break;
@@ -37540,7 +37539,7 @@
 			}
 			}
 			}
-			AST tmp2311_AST_in = (AST)_t;
+			AST tmp2310_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			{
@@ -37548,7 +37547,7 @@
 			switch ( _t.getType()) {
 			case APPEND:
 			{
-				AST tmp2312_AST_in = (AST)_t;
+				AST tmp2311_AST_in = (AST)_t;
 				match(_t,APPEND);
 				_t = _t.getNextSibling();
 				break;
@@ -37569,7 +37568,7 @@
 			switch ( _t.getType()) {
 			case BIND:
 			{
-				AST tmp2313_AST_in = (AST)_t;
+				AST tmp2312_AST_in = (AST)_t;
 				match(_t,BIND);
 				_t = _t.getNextSibling();
 				break;
@@ -37610,10 +37609,10 @@
 			switch ( _t.getType()) {
 			case ID:
 			{
-				AST tmp2314_AST_in = (AST)_t;
+				AST tmp2313_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
-				AST tmp2315_AST_in = (AST)_t;
+				AST tmp2314_AST_in = (AST)_t;
 				match(_t,AS);
 				_t = _t.getNextSibling();
 				break;
@@ -37649,10 +37648,10 @@
 			switch ( _t.getType()) {
 			case CLASS:
 			{
-				AST tmp2316_AST_in = (AST)_t;
+				AST tmp2315_AST_in = (AST)_t;
 				match(_t,CLASS);
 				_t = _t.getNextSibling();
-				AST tmp2317_AST_in = (AST)_t;
+				AST tmp2316_AST_in = (AST)_t;
 				match(_t,TYPE_NAME);
 				_t = _t.getNextSibling();
 				break;
@@ -37718,7 +37717,7 @@
 		AST goon_elem_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		{
-		AST tmp2318_AST_in = (AST)_t;
+		AST tmp2317_AST_in = (AST)_t;
 		match(_t,_tokenSet_35);
 		_t = _t.getNextSibling();
 		}
@@ -37731,7 +37730,7 @@
 			inputState.guessing++;
 			try {
 				{
-				AST tmp2319_AST_in = (AST)_t;
+				AST tmp2318_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
 				}
@@ -37743,7 +37742,7 @@
 inputState.guessing--;
 		}
 		if ( synPredMatched1436 ) {
-			AST tmp2320_AST_in = (AST)_t;
+			AST tmp2319_AST_in = (AST)_t;
 			match(_t,OF);
 			_t = _t.getNextSibling();
 			gwidget(_t);
@@ -37764,7 +37763,7 @@
 		AST loadpicturefunc_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1555 = _t;
-		AST tmp2321_AST_in = (AST)_t;
+		AST tmp2320_AST_in = (AST)_t;
 		match(_t,LOADPICTURE);
 		_t = _t.getFirstChild();
 		{
@@ -37805,16 +37804,16 @@
 			try {
 				{
 				AST __t1903 = _t;
-				AST tmp2322_AST_in = (AST)_t;
+				AST tmp2321_AST_in = (AST)_t;
 				match(_t,ERROR);
 				_t = _t.getFirstChild();
-				AST tmp2323_AST_in = (AST)_t;
+				AST tmp2322_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
-				AST tmp2324_AST_in = (AST)_t;
+				AST tmp2323_AST_in = (AST)_t;
 				match(_t,RECORD_NAME);
 				_t = _t.getNextSibling();
-				AST tmp2325_AST_in = (AST)_t;
+				AST tmp2324_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t1903;
@@ -37840,7 +37839,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp2326_AST_in = (AST)_t;
+					AST tmp2325_AST_in = (AST)_t;
 					match(_t,ERROR);
 					_t = _t.getNextSibling();
 					}
@@ -37852,7 +37851,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched1906 ) {
-				AST tmp2327_AST_in = (AST)_t;
+				AST tmp2326_AST_in = (AST)_t;
 				match(_t,ERROR);
 				_t = _t.getNextSibling();
 				{
@@ -37870,7 +37869,7 @@
 				}
 			}
 			else if ((_t.getType()==NOAPPLY)) {
-				AST tmp2328_AST_in = (AST)_t;
+				AST tmp2327_AST_in = (AST)_t;
 				match(_t,NOAPPLY);
 				_t = _t.getNextSibling();
 				{
@@ -37904,7 +37903,7 @@
 		AST radiosetphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1816 = _t;
-		AST tmp2329_AST_in = (AST)_t;
+		AST tmp2328_AST_in = (AST)_t;
 		match(_t,RADIOSET);
 		_t = _t.getFirstChild();
 		{
@@ -37915,7 +37914,7 @@
 			case HORIZONTAL:
 			{
 				AST __t1818 = _t;
-				AST tmp2330_AST_in = (AST)_t;
+				AST tmp2329_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getFirstChild();
 				{
@@ -37923,7 +37922,7 @@
 				switch ( _t.getType()) {
 				case EXPAND:
 				{
-					AST tmp2331_AST_in = (AST)_t;
+					AST tmp2330_AST_in = (AST)_t;
 					match(_t,EXPAND);
 					_t = _t.getNextSibling();
 					break;
@@ -37944,7 +37943,7 @@
 			}
 			case VERTICAL:
 			{
-				AST tmp2332_AST_in = (AST)_t;
+				AST tmp2331_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -37962,7 +37961,7 @@
 			case RADIOBUTTONS:
 			{
 				AST __t1821 = _t;
-				AST tmp2333_AST_in = (AST)_t;
+				AST tmp2332_AST_in = (AST)_t;
 				match(_t,RADIOBUTTONS);
 				_t = _t.getFirstChild();
 				{
@@ -37970,14 +37969,14 @@
 				switch ( _t.getType()) {
 				case QSTRING:
 				{
-					AST tmp2334_AST_in = (AST)_t;
+					AST tmp2333_AST_in = (AST)_t;
 					match(_t,QSTRING);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case UNQUOTEDSTRING:
 				{
-					AST tmp2335_AST_in = (AST)_t;
+					AST tmp2334_AST_in = (AST)_t;
 					match(_t,UNQUOTEDSTRING);
 					_t = _t.getNextSibling();
 					break;
@@ -37988,7 +37987,7 @@
 				}
 				}
 				}
-				AST tmp2336_AST_in = (AST)_t;
+				AST tmp2335_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				{
@@ -38043,7 +38042,7 @@
 				}
 				case TODAY:
 				{
-					AST tmp2337_AST_in = (AST)_t;
+					AST tmp2336_AST_in = (AST)_t;
 					match(_t,TODAY);
 					_t = _t.getNextSibling();
 					break;
@@ -38059,7 +38058,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2338_AST_in = (AST)_t;
+						AST tmp2337_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -38067,14 +38066,14 @@
 						switch ( _t.getType()) {
 						case QSTRING:
 						{
-							AST tmp2339_AST_in = (AST)_t;
+							AST tmp2338_AST_in = (AST)_t;
 							match(_t,QSTRING);
 							_t = _t.getNextSibling();
 							break;
 						}
 						case UNQUOTEDSTRING:
 						{
-							AST tmp2340_AST_in = (AST)_t;
+							AST tmp2339_AST_in = (AST)_t;
 							match(_t,UNQUOTEDSTRING);
 							_t = _t.getNextSibling();
 							break;
@@ -38085,7 +38084,7 @@
 						}
 						}
 						}
-						AST tmp2341_AST_in = (AST)_t;
+						AST tmp2340_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						{
@@ -38140,7 +38139,7 @@
 						}
 						case TODAY:
 						{
-							AST tmp2342_AST_in = (AST)_t;
+							AST tmp2341_AST_in = (AST)_t;
 							match(_t,TODAY);
 							_t = _t.getNextSibling();
 							break;
@@ -38185,7 +38184,7 @@
 		AST selectionlistphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1960 = _t;
-		AST tmp2343_AST_in = (AST)_t;
+		AST tmp2342_AST_in = (AST)_t;
 		match(_t,SELECTIONLIST);
 		_t = _t.getFirstChild();
 		{
@@ -38195,21 +38194,21 @@
 			switch ( _t.getType()) {
 			case SINGLE:
 			{
-				AST tmp2344_AST_in = (AST)_t;
+				AST tmp2343_AST_in = (AST)_t;
 				match(_t,SINGLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case MULTIPLE:
 			{
-				AST tmp2345_AST_in = (AST)_t;
+				AST tmp2344_AST_in = (AST)_t;
 				match(_t,MULTIPLE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NODRAG:
 			{
-				AST tmp2346_AST_in = (AST)_t;
+				AST tmp2345_AST_in = (AST)_t;
 				match(_t,NODRAG);
 				_t = _t.getNextSibling();
 				break;
@@ -38217,7 +38216,7 @@
 			case LISTITEMS:
 			{
 				AST __t1962 = _t;
-				AST tmp2347_AST_in = (AST)_t;
+				AST tmp2346_AST_in = (AST)_t;
 				match(_t,LISTITEMS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -38227,7 +38226,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2348_AST_in = (AST)_t;
+						AST tmp2347_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -38246,7 +38245,7 @@
 			case LISTITEMPAIRS:
 			{
 				AST __t1965 = _t;
-				AST tmp2349_AST_in = (AST)_t;
+				AST tmp2348_AST_in = (AST)_t;
 				match(_t,LISTITEMPAIRS);
 				_t = _t.getFirstChild();
 				constant(_t);
@@ -38256,7 +38255,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2350_AST_in = (AST)_t;
+						AST tmp2349_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						constant(_t);
@@ -38274,14 +38273,14 @@
 			}
 			case SCROLLBARHORIZONTAL:
 			{
-				AST tmp2351_AST_in = (AST)_t;
+				AST tmp2350_AST_in = (AST)_t;
 				match(_t,SCROLLBARHORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case SCROLLBARVERTICAL:
 			{
-				AST tmp2352_AST_in = (AST)_t;
+				AST tmp2351_AST_in = (AST)_t;
 				match(_t,SCROLLBARVERTICAL);
 				_t = _t.getNextSibling();
 				break;
@@ -38289,7 +38288,7 @@
 			case INNERCHARS:
 			{
 				AST __t1968 = _t;
-				AST tmp2353_AST_in = (AST)_t;
+				AST tmp2352_AST_in = (AST)_t;
 				match(_t,INNERCHARS);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38301,7 +38300,7 @@
 			case INNERLINES:
 			{
 				AST __t1969 = _t;
-				AST tmp2354_AST_in = (AST)_t;
+				AST tmp2353_AST_in = (AST)_t;
 				match(_t,INNERLINES);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38312,7 +38311,7 @@
 			}
 			case SORT:
 			{
-				AST tmp2355_AST_in = (AST)_t;
+				AST tmp2354_AST_in = (AST)_t;
 				match(_t,SORT);
 				_t = _t.getNextSibling();
 				break;
@@ -38348,7 +38347,7 @@
 		AST sliderphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t1998 = _t;
-		AST tmp2356_AST_in = (AST)_t;
+		AST tmp2355_AST_in = (AST)_t;
 		match(_t,SLIDER);
 		_t = _t.getFirstChild();
 		{
@@ -38358,7 +38357,7 @@
 			switch ( _t.getType()) {
 			case HORIZONTAL:
 			{
-				AST tmp2357_AST_in = (AST)_t;
+				AST tmp2356_AST_in = (AST)_t;
 				match(_t,HORIZONTAL);
 				_t = _t.getNextSibling();
 				break;
@@ -38366,7 +38365,7 @@
 			case MAXVALUE:
 			{
 				AST __t2000 = _t;
-				AST tmp2358_AST_in = (AST)_t;
+				AST tmp2357_AST_in = (AST)_t;
 				match(_t,MAXVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38378,7 +38377,7 @@
 			case MINVALUE:
 			{
 				AST __t2001 = _t;
-				AST tmp2359_AST_in = (AST)_t;
+				AST tmp2358_AST_in = (AST)_t;
 				match(_t,MINVALUE);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -38389,21 +38388,21 @@
 			}
 			case VERTICAL:
 			{
-				AST tmp2360_AST_in = (AST)_t;
+				AST tmp2359_AST_in = (AST)_t;
 				match(_t,VERTICAL);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case NOCURRENTVALUE:
 			{
-				AST tmp2361_AST_in = (AST)_t;
+				AST tmp2360_AST_in = (AST)_t;
 				match(_t,NOCURRENTVALUE);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case LARGETOSMALL:
 			{
-				AST tmp2362_AST_in = (AST)_t;
+				AST tmp2361_AST_in = (AST)_t;
 				match(_t,LARGETOSMALL);
 				_t = _t.getNextSibling();
 				break;
@@ -38411,7 +38410,7 @@
 			case TICMARKS:
 			{
 				AST __t2002 = _t;
-				AST tmp2363_AST_in = (AST)_t;
+				AST tmp2362_AST_in = (AST)_t;
 				match(_t,TICMARKS);
 				_t = _t.getFirstChild();
 				{
@@ -38419,42 +38418,42 @@
 				switch ( _t.getType()) {
 				case NONE:
 				{
-					AST tmp2364_AST_in = (AST)_t;
+					AST tmp2363_AST_in = (AST)_t;
 					match(_t,NONE);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case TOP:
 				{
-					AST tmp2365_AST_in = (AST)_t;
+					AST tmp2364_AST_in = (AST)_t;
 					match(_t,TOP);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTTOM:
 				{
-					AST tmp2366_AST_in = (AST)_t;
+					AST tmp2365_AST_in = (AST)_t;
 					match(_t,BOTTOM);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case LEFT:
 				{
-					AST tmp2367_AST_in = (AST)_t;
+					AST tmp2366_AST_in = (AST)_t;
 					match(_t,LEFT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case RIGHT:
 				{
-					AST tmp2368_AST_in = (AST)_t;
+					AST tmp2367_AST_in = (AST)_t;
 					match(_t,RIGHT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case BOTH:
 				{
-					AST tmp2369_AST_in = (AST)_t;
+					AST tmp2368_AST_in = (AST)_t;
 					match(_t,BOTH);
 					_t = _t.getNextSibling();
 					break;
@@ -38471,7 +38470,7 @@
 				case FREQUENCY:
 				{
 					AST __t2005 = _t;
-					AST tmp2370_AST_in = (AST)_t;
+					AST tmp2369_AST_in = (AST)_t;
 					match(_t,FREQUENCY);
 					_t = _t.getFirstChild();
 					expression(_t);
@@ -38525,7 +38524,7 @@
 		AST textphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2095 = _t;
-		AST tmp2371_AST_in = (AST)_t;
+		AST tmp2370_AST_in = (AST)_t;
 		match(_t,TEXT);
 		_t = _t.getFirstChild();
 		{
@@ -38564,7 +38563,7 @@
 		AST toggleboxphrase_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2105 = _t;
-		AST tmp2372_AST_in = (AST)_t;
+		AST tmp2371_AST_in = (AST)_t;
 		match(_t,TOGGLEBOX);
 		_t = _t.getFirstChild();
 		{
@@ -38603,13 +38602,13 @@
 		AST sqlupdatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2402 = _t;
-		AST tmp2373_AST_in = (AST)_t;
+		AST tmp2372_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
-		AST tmp2374_AST_in = (AST)_t;
+		AST tmp2373_AST_in = (AST)_t;
 		match(_t,RECORD_NAME);
 		_t = _t.getNextSibling();
-		AST tmp2375_AST_in = (AST)_t;
+		AST tmp2374_AST_in = (AST)_t;
 		match(_t,SET);
 		_t = _t.getNextSibling();
 		sqlupdate_equal(_t);
@@ -38619,7 +38618,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp2376_AST_in = (AST)_t;
+				AST tmp2375_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlupdate_equal(_t);
@@ -38637,7 +38636,7 @@
 		case WHERE:
 		{
 			AST __t2406 = _t;
-			AST tmp2377_AST_in = (AST)_t;
+			AST tmp2376_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			{
@@ -38647,13 +38646,13 @@
 				_t = _retTree;
 			}
 			else if ((_t.getType()==CURRENT)) {
-				AST tmp2378_AST_in = (AST)_t;
+				AST tmp2377_AST_in = (AST)_t;
 				match(_t,CURRENT);
 				_t = _t.getNextSibling();
-				AST tmp2379_AST_in = (AST)_t;
+				AST tmp2378_AST_in = (AST)_t;
 				match(_t,OF);
 				_t = _t.getNextSibling();
-				AST tmp2380_AST_in = (AST)_t;
+				AST tmp2379_AST_in = (AST)_t;
 				match(_t,ID);
 				_t = _t.getNextSibling();
 			}
@@ -38689,7 +38688,7 @@
 		AST updatestate_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2189 = _t;
-		AST tmp2381_AST_in = (AST)_t;
+		AST tmp2380_AST_in = (AST)_t;
 		match(_t,UPDATE);
 		_t = _t.getFirstChild();
 		{
@@ -38697,7 +38696,7 @@
 		switch ( _t.getType()) {
 		case UNLESSHIDDEN:
 		{
-			AST tmp2382_AST_in = (AST)_t;
+			AST tmp2381_AST_in = (AST)_t;
 			match(_t,UNLESSHIDDEN);
 			_t = _t.getNextSibling();
 			break;
@@ -38765,7 +38764,7 @@
 		case EXCEPT:
 		{
 			AST __t2195 = _t;
-			AST tmp2383_AST_in = (AST)_t;
+			AST tmp2382_AST_in = (AST)_t;
 			match(_t,EXCEPT);
 			_t = _t.getFirstChild();
 			{
@@ -38807,10 +38806,10 @@
 		case IN_KW:
 		{
 			AST __t2199 = _t;
-			AST tmp2384_AST_in = (AST)_t;
+			AST tmp2383_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getFirstChild();
-			AST tmp2385_AST_in = (AST)_t;
+			AST tmp2384_AST_in = (AST)_t;
 			match(_t,WINDOW);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -38881,7 +38880,7 @@
 		switch ( _t.getType()) {
 		case NOERROR_KW:
 		{
-			AST tmp2386_AST_in = (AST)_t;
+			AST tmp2385_AST_in = (AST)_t;
 			match(_t,NOERROR_KW);
 			_t = _t.getNextSibling();
 			break;
@@ -38909,10 +38908,10 @@
 		AST sql_col_def_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2420 = _t;
-		AST tmp2387_AST_in = (AST)_t;
+		AST tmp2386_AST_in = (AST)_t;
 		match(_t,ID);
 		_t = _t.getFirstChild();
-		AST tmp2388_AST_in = (AST)_t;
+		AST tmp2387_AST_in = (AST)_t;
 		if ( _t==null ) throw new MismatchedTokenException();
 		_t = _t.getNextSibling();
 		{
@@ -38920,7 +38919,7 @@
 		switch ( _t.getType()) {
 		case PRECISION:
 		{
-			AST tmp2389_AST_in = (AST)_t;
+			AST tmp2388_AST_in = (AST)_t;
 			match(_t,PRECISION);
 			_t = _t.getNextSibling();
 			break;
@@ -38948,10 +38947,10 @@
 		switch ( _t.getType()) {
 		case LEFTPAREN:
 		{
-			AST tmp2390_AST_in = (AST)_t;
+			AST tmp2389_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
-			AST tmp2391_AST_in = (AST)_t;
+			AST tmp2390_AST_in = (AST)_t;
 			match(_t,NUMBER);
 			_t = _t.getNextSibling();
 			{
@@ -38959,10 +38958,10 @@
 			switch ( _t.getType()) {
 			case COMMA:
 			{
-				AST tmp2392_AST_in = (AST)_t;
+				AST tmp2391_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
-				AST tmp2393_AST_in = (AST)_t;
+				AST tmp2392_AST_in = (AST)_t;
 				match(_t,NUMBER);
 				_t = _t.getNextSibling();
 				break;
@@ -38977,7 +38976,7 @@
 			}
 			}
 			}
-			AST tmp2394_AST_in = (AST)_t;
+			AST tmp2393_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			break;
@@ -39005,13 +39004,13 @@
 		case Not_null:
 		{
 			AST __t2425 = _t;
-			AST tmp2395_AST_in = (AST)_t;
+			AST tmp2394_AST_in = (AST)_t;
 			match(_t,Not_null);
 			_t = _t.getFirstChild();
-			AST tmp2396_AST_in = (AST)_t;
+			AST tmp2395_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getNextSibling();
-			AST tmp2397_AST_in = (AST)_t;
+			AST tmp2396_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			{
@@ -39019,7 +39018,7 @@
 			switch ( _t.getType()) {
 			case UNIQUE:
 			{
-				AST tmp2398_AST_in = (AST)_t;
+				AST tmp2397_AST_in = (AST)_t;
 				match(_t,UNIQUE);
 				_t = _t.getNextSibling();
 				break;
@@ -39069,7 +39068,7 @@
 			case DEFAULT:
 			{
 				AST __t2428 = _t;
-				AST tmp2399_AST_in = (AST)_t;
+				AST tmp2398_AST_in = (AST)_t;
 				match(_t,DEFAULT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -39081,7 +39080,7 @@
 			case FORMAT:
 			{
 				AST __t2429 = _t;
-				AST tmp2400_AST_in = (AST)_t;
+				AST tmp2399_AST_in = (AST)_t;
 				match(_t,FORMAT);
 				_t = _t.getFirstChild();
 				expression(_t);
@@ -39114,7 +39113,7 @@
 		AST selectstatea_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2340 = _t;
-		AST tmp2401_AST_in = (AST)_t;
+		AST tmp2400_AST_in = (AST)_t;
 		match(_t,SELECT);
 		_t = _t.getFirstChild();
 		{
@@ -39122,14 +39121,14 @@
 		switch ( _t.getType()) {
 		case ALL:
 		{
-			AST tmp2402_AST_in = (AST)_t;
+			AST tmp2401_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DISTINCT:
 		{
-			AST tmp2403_AST_in = (AST)_t;
+			AST tmp2402_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			break;
@@ -39150,7 +39149,7 @@
 		switch ( _t.getType()) {
 		case STAR:
 		{
-			AST tmp2404_AST_in = (AST)_t;
+			AST tmp2403_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -39158,7 +39157,7 @@
 		case Sql_select_what:
 		{
 			AST __t2343 = _t;
-			AST tmp2405_AST_in = (AST)_t;
+			AST tmp2404_AST_in = (AST)_t;
 			match(_t,Sql_select_what);
 			_t = _t.getFirstChild();
 			{
@@ -39170,7 +39169,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp2406_AST_in = (AST)_t;
+					AST tmp2405_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
@@ -39182,7 +39181,7 @@
 inputState.guessing--;
 			}
 			if ( synPredMatched2346 ) {
-				AST tmp2407_AST_in = (AST)_t;
+				AST tmp2406_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -39206,7 +39205,7 @@
 				}
 				}
 				}
-				AST tmp2408_AST_in = (AST)_t;
+				AST tmp2407_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				{
@@ -39264,7 +39263,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2409_AST_in = (AST)_t;
+					AST tmp2408_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					sqlexpression(_t);
@@ -39312,7 +39311,7 @@
 		case INTO:
 		{
 			AST __t2354 = _t;
-			AST tmp2410_AST_in = (AST)_t;
+			AST tmp2409_AST_in = (AST)_t;
 			match(_t,INTO);
 			_t = _t.getFirstChild();
 			field(_t);
@@ -39343,7 +39342,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2411_AST_in = (AST)_t;
+					AST tmp2410_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					field(_t);
@@ -39391,7 +39390,7 @@
 		}
 		}
 		AST __t2359 = _t;
-		AST tmp2412_AST_in = (AST)_t;
+		AST tmp2411_AST_in = (AST)_t;
 		match(_t,FROM);
 		_t = _t.getFirstChild();
 		select_from_spec(_t);
@@ -39401,7 +39400,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp2413_AST_in = (AST)_t;
+				AST tmp2412_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				select_from_spec(_t);
@@ -39421,10 +39420,10 @@
 		case GROUP:
 		{
 			AST __t2363 = _t;
-			AST tmp2414_AST_in = (AST)_t;
+			AST tmp2413_AST_in = (AST)_t;
 			match(_t,GROUP);
 			_t = _t.getFirstChild();
-			AST tmp2415_AST_in = (AST)_t;
+			AST tmp2414_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			expression(_t);
@@ -39434,7 +39433,7 @@
 			do {
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==COMMA)) {
-					AST tmp2416_AST_in = (AST)_t;
+					AST tmp2415_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					expression(_t);
@@ -39471,7 +39470,7 @@
 		case HAVING:
 		{
 			AST __t2367 = _t;
-			AST tmp2417_AST_in = (AST)_t;
+			AST tmp2416_AST_in = (AST)_t;
 			match(_t,HAVING);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -39500,10 +39499,10 @@
 		case ORDER:
 		{
 			AST __t2369 = _t;
-			AST tmp2418_AST_in = (AST)_t;
+			AST tmp2417_AST_in = (AST)_t;
 			match(_t,ORDER);
 			_t = _t.getFirstChild();
-			AST tmp2419_AST_in = (AST)_t;
+			AST tmp2418_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getNextSibling();
 			select_order_expr(_t);
@@ -39515,7 +39514,7 @@
 		case BY:
 		{
 			AST __t2370 = _t;
-			AST tmp2420_AST_in = (AST)_t;
+			AST tmp2419_AST_in = (AST)_t;
 			match(_t,BY);
 			_t = _t.getFirstChild();
 			select_order_expr(_t);
@@ -39549,13 +39548,13 @@
 				try {
 					{
 					AST __t2374 = _t;
-					AST tmp2421_AST_in = (AST)_t;
+					AST tmp2420_AST_in = (AST)_t;
 					match(_t,WITH);
 					_t = _t.getFirstChild();
-					AST tmp2422_AST_in = (AST)_t;
+					AST tmp2421_AST_in = (AST)_t;
 					match(_t,CHECK);
 					_t = _t.getNextSibling();
-					AST tmp2423_AST_in = (AST)_t;
+					AST tmp2422_AST_in = (AST)_t;
 					match(_t,OPTION);
 					_t = _t.getNextSibling();
 					_t = __t2374;
@@ -39570,13 +39569,13 @@
 			}
 			if ( synPredMatched2375 ) {
 				AST __t2376 = _t;
-				AST tmp2424_AST_in = (AST)_t;
+				AST tmp2423_AST_in = (AST)_t;
 				match(_t,WITH);
 				_t = _t.getFirstChild();
-				AST tmp2425_AST_in = (AST)_t;
+				AST tmp2424_AST_in = (AST)_t;
 				match(_t,CHECK);
 				_t = _t.getNextSibling();
-				AST tmp2426_AST_in = (AST)_t;
+				AST tmp2425_AST_in = (AST)_t;
 				match(_t,OPTION);
 				_t = _t.getNextSibling();
 				_t = __t2376;
@@ -39623,7 +39622,7 @@
 		case UNION:
 		{
 			AST __t2379 = _t;
-			AST tmp2427_AST_in = (AST)_t;
+			AST tmp2426_AST_in = (AST)_t;
 			match(_t,UNION);
 			_t = _t.getFirstChild();
 			{
@@ -39631,7 +39630,7 @@
 			switch ( _t.getType()) {
 			case ALL:
 			{
-				AST tmp2428_AST_in = (AST)_t;
+				AST tmp2427_AST_in = (AST)_t;
 				match(_t,ALL);
 				_t = _t.getNextSibling();
 				break;
@@ -39676,7 +39675,7 @@
 		case OR:
 		{
 			AST __t2432 = _t;
-			AST tmp2429_AST_in = (AST)_t;
+			AST tmp2428_AST_in = (AST)_t;
 			match(_t,OR);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -39690,7 +39689,7 @@
 		case AND:
 		{
 			AST __t2433 = _t;
-			AST tmp2430_AST_in = (AST)_t;
+			AST tmp2429_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -39704,7 +39703,7 @@
 		case NOT:
 		{
 			AST __t2434 = _t;
-			AST tmp2431_AST_in = (AST)_t;
+			AST tmp2430_AST_in = (AST)_t;
 			match(_t,NOT);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -39716,7 +39715,7 @@
 		case MATCHES:
 		{
 			AST __t2435 = _t;
-			AST tmp2432_AST_in = (AST)_t;
+			AST tmp2431_AST_in = (AST)_t;
 			match(_t,MATCHES);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39743,7 +39742,7 @@
 		case BEGINS:
 		{
 			AST __t2437 = _t;
-			AST tmp2433_AST_in = (AST)_t;
+			AST tmp2432_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39770,7 +39769,7 @@
 		case CONTAINS:
 		{
 			AST __t2439 = _t;
-			AST tmp2434_AST_in = (AST)_t;
+			AST tmp2433_AST_in = (AST)_t;
 			match(_t,CONTAINS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39797,7 +39796,7 @@
 		case EQ:
 		{
 			AST __t2441 = _t;
-			AST tmp2435_AST_in = (AST)_t;
+			AST tmp2434_AST_in = (AST)_t;
 			match(_t,EQ);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39824,7 +39823,7 @@
 		case NE:
 		{
 			AST __t2443 = _t;
-			AST tmp2436_AST_in = (AST)_t;
+			AST tmp2435_AST_in = (AST)_t;
 			match(_t,NE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39851,7 +39850,7 @@
 		case GTHAN:
 		{
 			AST __t2445 = _t;
-			AST tmp2437_AST_in = (AST)_t;
+			AST tmp2436_AST_in = (AST)_t;
 			match(_t,GTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39878,7 +39877,7 @@
 		case GE:
 		{
 			AST __t2447 = _t;
-			AST tmp2438_AST_in = (AST)_t;
+			AST tmp2437_AST_in = (AST)_t;
 			match(_t,GE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39905,7 +39904,7 @@
 		case LTHAN:
 		{
 			AST __t2449 = _t;
-			AST tmp2439_AST_in = (AST)_t;
+			AST tmp2438_AST_in = (AST)_t;
 			match(_t,LTHAN);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39932,7 +39931,7 @@
 		case LE:
 		{
 			AST __t2451 = _t;
-			AST tmp2440_AST_in = (AST)_t;
+			AST tmp2439_AST_in = (AST)_t;
 			match(_t,LE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -39959,15 +39958,15 @@
 		case EXISTS:
 		{
 			AST __t2453 = _t;
-			AST tmp2441_AST_in = (AST)_t;
+			AST tmp2440_AST_in = (AST)_t;
 			match(_t,EXISTS);
 			_t = _t.getFirstChild();
-			AST tmp2442_AST_in = (AST)_t;
+			AST tmp2441_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			selectstatea(_t);
 			_t = _retTree;
-			AST tmp2443_AST_in = (AST)_t;
+			AST tmp2442_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2453;
@@ -39977,7 +39976,7 @@
 		case Sql_begins:
 		{
 			AST __t2454 = _t;
-			AST tmp2444_AST_in = (AST)_t;
+			AST tmp2443_AST_in = (AST)_t;
 			match(_t,Sql_begins);
 			_t = _t.getFirstChild();
 			{
@@ -39985,7 +39984,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp2445_AST_in = (AST)_t;
+				AST tmp2444_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -40000,7 +39999,7 @@
 			}
 			}
 			}
-			AST tmp2446_AST_in = (AST)_t;
+			AST tmp2445_AST_in = (AST)_t;
 			match(_t,BEGINS);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -40012,7 +40011,7 @@
 		case Sql_between:
 		{
 			AST __t2456 = _t;
-			AST tmp2447_AST_in = (AST)_t;
+			AST tmp2446_AST_in = (AST)_t;
 			match(_t,Sql_between);
 			_t = _t.getFirstChild();
 			{
@@ -40020,7 +40019,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp2448_AST_in = (AST)_t;
+				AST tmp2447_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -40035,12 +40034,12 @@
 			}
 			}
 			}
-			AST tmp2449_AST_in = (AST)_t;
+			AST tmp2448_AST_in = (AST)_t;
 			match(_t,BETWEEN);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
 			_t = _retTree;
-			AST tmp2450_AST_in = (AST)_t;
+			AST tmp2449_AST_in = (AST)_t;
 			match(_t,AND);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -40052,7 +40051,7 @@
 		case Sql_in:
 		{
 			AST __t2458 = _t;
-			AST tmp2451_AST_in = (AST)_t;
+			AST tmp2450_AST_in = (AST)_t;
 			match(_t,Sql_in);
 			_t = _t.getFirstChild();
 			{
@@ -40060,7 +40059,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp2452_AST_in = (AST)_t;
+				AST tmp2451_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -40075,10 +40074,10 @@
 			}
 			}
 			}
-			AST tmp2453_AST_in = (AST)_t;
+			AST tmp2452_AST_in = (AST)_t;
 			match(_t,IN_KW);
 			_t = _t.getNextSibling();
-			AST tmp2454_AST_in = (AST)_t;
+			AST tmp2453_AST_in = (AST)_t;
 			match(_t,LEFTPAREN);
 			_t = _t.getNextSibling();
 			{
@@ -40142,7 +40141,7 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2455_AST_in = (AST)_t;
+						AST tmp2454_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
 						sql_in_val(_t);
@@ -40162,7 +40161,7 @@
 			}
 			}
 			}
-			AST tmp2456_AST_in = (AST)_t;
+			AST tmp2455_AST_in = (AST)_t;
 			match(_t,RIGHTPAREN);
 			_t = _t.getNextSibling();
 			_t = __t2458;
@@ -40172,7 +40171,7 @@
 		case Sql_like:
 		{
 			AST __t2463 = _t;
-			AST tmp2457_AST_in = (AST)_t;
+			AST tmp2456_AST_in = (AST)_t;
 			match(_t,Sql_like);
 			_t = _t.getFirstChild();
 			{
@@ -40180,7 +40179,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp2458_AST_in = (AST)_t;
+				AST tmp2457_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -40195,7 +40194,7 @@
 			}
 			}
 			}
-			AST tmp2459_AST_in = (AST)_t;
+			AST tmp2458_AST_in = (AST)_t;
 			match(_t,LIKE);
 			_t = _t.getNextSibling();
 			sqlscalar(_t);
@@ -40205,7 +40204,7 @@
 			switch ( _t.getType()) {
 			case ESCAPE:
 			{
-				AST tmp2460_AST_in = (AST)_t;
+				AST tmp2459_AST_in = (AST)_t;
 				match(_t,ESCAPE);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -40229,10 +40228,10 @@
 		case Sql_null_test:
 		{
 			AST __t2466 = _t;
-			AST tmp2461_AST_in = (AST)_t;
+			AST tmp2460_AST_in = (AST)_t;
 			match(_t,Sql_null_test);
 			_t = _t.getFirstChild();
-			AST tmp2462_AST_in = (AST)_t;
+			AST tmp2461_AST_in = (AST)_t;
 			match(_t,IS);
 			_t = _t.getNextSibling();
 			{
@@ -40240,7 +40239,7 @@
 			switch ( _t.getType()) {
 			case NOT:
 			{
-				AST tmp2463_AST_in = (AST)_t;
+				AST tmp2462_AST_in = (AST)_t;
 				match(_t,NOT);
 				_t = _t.getNextSibling();
 				break;
@@ -40255,7 +40254,7 @@
 			}
 			}
 			}
-			AST tmp2464_AST_in = (AST)_t;
+			AST tmp2463_AST_in = (AST)_t;
 			match(_t,NULL_KW);
 			_t = _t.getNextSibling();
 			_t = __t2466;
@@ -40284,7 +40283,7 @@
 		case INDICATOR:
 		{
 			AST __t2295 = _t;
-			AST tmp2465_AST_in = (AST)_t;
+			AST tmp2464_AST_in = (AST)_t;
 			match(_t,INDICATOR);
 			_t = _t.getFirstChild();
 			field(_t);
@@ -40316,7 +40315,7 @@
 		case ALL:
 		{
 			AST __t2302 = _t;
-			AST tmp2466_AST_in = (AST)_t;
+			AST tmp2465_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getFirstChild();
 			{
@@ -40324,7 +40323,7 @@
 			switch ( _t.getType()) {
 			case PRIVILEGES:
 			{
-				AST tmp2467_AST_in = (AST)_t;
+				AST tmp2466_AST_in = (AST)_t;
 				match(_t,PRIVILEGES);
 				_t = _t.getNextSibling();
 				break;
@@ -40357,21 +40356,21 @@
 				switch ( _t.getType()) {
 				case SELECT:
 				{
-					AST tmp2468_AST_in = (AST)_t;
+					AST tmp2467_AST_in = (AST)_t;
 					match(_t,SELECT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case INSERT:
 				{
-					AST tmp2469_AST_in = (AST)_t;
+					AST tmp2468_AST_in = (AST)_t;
 					match(_t,INSERT);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DELETE_KW:
 				{
-					AST tmp2470_AST_in = (AST)_t;
+					AST tmp2469_AST_in = (AST)_t;
 					match(_t,DELETE_KW);
 					_t = _t.getNextSibling();
 					break;
@@ -40379,7 +40378,7 @@
 				case UPDATE:
 				{
 					AST __t2305 = _t;
-					AST tmp2471_AST_in = (AST)_t;
+					AST tmp2470_AST_in = (AST)_t;
 					match(_t,UPDATE);
 					_t = _t.getFirstChild();
 					{
@@ -40388,10 +40387,10 @@
 					case Field_list:
 					{
 						AST __t2307 = _t;
-						AST tmp2472_AST_in = (AST)_t;
+						AST tmp2471_AST_in = (AST)_t;
 						match(_t,Field_list);
 						_t = _t.getFirstChild();
-						AST tmp2473_AST_in = (AST)_t;
+						AST tmp2472_AST_in = (AST)_t;
 						match(_t,LEFTPAREN);
 						_t = _t.getNextSibling();
 						field(_t);
@@ -40401,7 +40400,7 @@
 						do {
 							if (_t==null) _t=ASTNULL;
 							if ((_t.getType()==COMMA)) {
-								AST tmp2474_AST_in = (AST)_t;
+								AST tmp2473_AST_in = (AST)_t;
 								match(_t,COMMA);
 								_t = _t.getNextSibling();
 								field(_t);
@@ -40413,7 +40412,7 @@
 							
 						} while (true);
 						}
-						AST tmp2475_AST_in = (AST)_t;
+						AST tmp2474_AST_in = (AST)_t;
 						match(_t,RIGHTPAREN);
 						_t = _t.getNextSibling();
 						_t = __t2307;
@@ -40436,7 +40435,7 @@
 				}
 				case COMMA:
 				{
-					AST tmp2476_AST_in = (AST)_t;
+					AST tmp2475_AST_in = (AST)_t;
 					match(_t,COMMA);
 					_t = _t.getNextSibling();
 					break;
@@ -40468,7 +40467,7 @@
 		case TO:
 		{
 			AST __t2312 = _t;
-			AST tmp2477_AST_in = (AST)_t;
+			AST tmp2476_AST_in = (AST)_t;
 			match(_t,TO);
 			_t = _t.getFirstChild();
 			{
@@ -40476,14 +40475,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp2478_AST_in = (AST)_t;
+				AST tmp2477_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp2479_AST_in = (AST)_t;
+				AST tmp2478_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -40491,10 +40490,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2480_AST_in = (AST)_t;
+						AST tmp2479_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp2481_AST_in = (AST)_t;
+						AST tmp2480_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -40519,7 +40518,7 @@
 		case FROM:
 		{
 			AST __t2316 = _t;
-			AST tmp2482_AST_in = (AST)_t;
+			AST tmp2481_AST_in = (AST)_t;
 			match(_t,FROM);
 			_t = _t.getFirstChild();
 			{
@@ -40527,14 +40526,14 @@
 			switch ( _t.getType()) {
 			case PUBLIC:
 			{
-				AST tmp2483_AST_in = (AST)_t;
+				AST tmp2482_AST_in = (AST)_t;
 				match(_t,PUBLIC);
 				_t = _t.getNextSibling();
 				break;
 			}
 			case FILENAME:
 			{
-				AST tmp2484_AST_in = (AST)_t;
+				AST tmp2483_AST_in = (AST)_t;
 				match(_t,FILENAME);
 				_t = _t.getNextSibling();
 				{
@@ -40542,10 +40541,10 @@
 				do {
 					if (_t==null) _t=ASTNULL;
 					if ((_t.getType()==COMMA)) {
-						AST tmp2485_AST_in = (AST)_t;
+						AST tmp2484_AST_in = (AST)_t;
 						match(_t,COMMA);
 						_t = _t.getNextSibling();
-						AST tmp2486_AST_in = (AST)_t;
+						AST tmp2485_AST_in = (AST)_t;
 						match(_t,FILENAME);
 						_t = _t.getNextSibling();
 					}
@@ -40589,7 +40588,7 @@
 			case LEFT:
 			{
 				AST __t2383 = _t;
-				AST tmp2487_AST_in = (AST)_t;
+				AST tmp2486_AST_in = (AST)_t;
 				match(_t,LEFT);
 				_t = _t.getFirstChild();
 				{
@@ -40597,7 +40596,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp2488_AST_in = (AST)_t;
+					AST tmp2487_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -40612,12 +40611,12 @@
 				}
 				}
 				}
-				AST tmp2489_AST_in = (AST)_t;
+				AST tmp2488_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp2490_AST_in = (AST)_t;
+				AST tmp2489_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -40629,7 +40628,7 @@
 			case RIGHT:
 			{
 				AST __t2385 = _t;
-				AST tmp2491_AST_in = (AST)_t;
+				AST tmp2490_AST_in = (AST)_t;
 				match(_t,RIGHT);
 				_t = _t.getFirstChild();
 				{
@@ -40637,7 +40636,7 @@
 				switch ( _t.getType()) {
 				case OUTER:
 				{
-					AST tmp2492_AST_in = (AST)_t;
+					AST tmp2491_AST_in = (AST)_t;
 					match(_t,OUTER);
 					_t = _t.getNextSibling();
 					break;
@@ -40652,12 +40651,12 @@
 				}
 				}
 				}
-				AST tmp2493_AST_in = (AST)_t;
+				AST tmp2492_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp2494_AST_in = (AST)_t;
+				AST tmp2493_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -40669,15 +40668,15 @@
 			case INNER:
 			{
 				AST __t2387 = _t;
-				AST tmp2495_AST_in = (AST)_t;
+				AST tmp2494_AST_in = (AST)_t;
 				match(_t,INNER);
 				_t = _t.getFirstChild();
-				AST tmp2496_AST_in = (AST)_t;
+				AST tmp2495_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp2497_AST_in = (AST)_t;
+				AST tmp2496_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -40689,15 +40688,15 @@
 			case OUTER:
 			{
 				AST __t2388 = _t;
-				AST tmp2498_AST_in = (AST)_t;
+				AST tmp2497_AST_in = (AST)_t;
 				match(_t,OUTER);
 				_t = _t.getFirstChild();
-				AST tmp2499_AST_in = (AST)_t;
+				AST tmp2498_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getNextSibling();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp2500_AST_in = (AST)_t;
+				AST tmp2499_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -40709,12 +40708,12 @@
 			case JOIN:
 			{
 				AST __t2389 = _t;
-				AST tmp2501_AST_in = (AST)_t;
+				AST tmp2500_AST_in = (AST)_t;
 				match(_t,JOIN);
 				_t = _t.getFirstChild();
 				select_sqltableref(_t);
 				_t = _retTree;
-				AST tmp2502_AST_in = (AST)_t;
+				AST tmp2501_AST_in = (AST)_t;
 				match(_t,ON);
 				_t = _t.getNextSibling();
 				sqlexpression(_t);
@@ -40736,7 +40735,7 @@
 		case WHERE:
 		{
 			AST __t2392 = _t;
-			AST tmp2503_AST_in = (AST)_t;
+			AST tmp2502_AST_in = (AST)_t;
 			match(_t,WHERE);
 			_t = _t.getFirstChild();
 			sqlexpression(_t);
@@ -40770,14 +40769,14 @@
 		switch ( _t.getType()) {
 		case ASC:
 		{
-			AST tmp2504_AST_in = (AST)_t;
+			AST tmp2503_AST_in = (AST)_t;
 			match(_t,ASC);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case DESCENDING:
 		{
-			AST tmp2505_AST_in = (AST)_t;
+			AST tmp2504_AST_in = (AST)_t;
 			match(_t,DESCENDING);
 			_t = _t.getNextSibling();
 			break;
@@ -40798,7 +40797,7 @@
 		do {
 			if (_t==null) _t=ASTNULL;
 			if ((_t.getType()==COMMA)) {
-				AST tmp2506_AST_in = (AST)_t;
+				AST tmp2505_AST_in = (AST)_t;
 				match(_t,COMMA);
 				_t = _t.getNextSibling();
 				sqlscalar(_t);
@@ -40808,14 +40807,14 @@
 				switch ( _t.getType()) {
 				case ASC:
 				{
-					AST tmp2507_AST_in = (AST)_t;
+					AST tmp2506_AST_in = (AST)_t;
 					match(_t,ASC);
 					_t = _t.getNextSibling();
 					break;
 				}
 				case DESCENDING:
 				{
-					AST tmp2508_AST_in = (AST)_t;
+					AST tmp2507_AST_in = (AST)_t;
 					match(_t,DESCENDING);
 					_t = _t.getNextSibling();
 					break;
@@ -40850,14 +40849,14 @@
 		switch ( _t.getType()) {
 		case RECORD_NAME:
 		{
-			AST tmp2509_AST_in = (AST)_t;
+			AST tmp2508_AST_in = (AST)_t;
 			match(_t,RECORD_NAME);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ID:
 		{
-			AST tmp2510_AST_in = (AST)_t;
+			AST tmp2509_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -40873,7 +40872,7 @@
 		switch ( _t.getType()) {
 		case ID:
 		{
-			AST tmp2511_AST_in = (AST)_t;
+			AST tmp2510_AST_in = (AST)_t;
 			match(_t,ID);
 			_t = _t.getNextSibling();
 			break;
@@ -40908,7 +40907,7 @@
 		case PLUS:
 		{
 			AST __t2474 = _t;
-			AST tmp2512_AST_in = (AST)_t;
+			AST tmp2511_AST_in = (AST)_t;
 			match(_t,PLUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -40922,7 +40921,7 @@
 		case MINUS:
 		{
 			AST __t2475 = _t;
-			AST tmp2513_AST_in = (AST)_t;
+			AST tmp2512_AST_in = (AST)_t;
 			match(_t,MINUS);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -40936,7 +40935,7 @@
 		case MULTIPLY:
 		{
 			AST __t2476 = _t;
-			AST tmp2514_AST_in = (AST)_t;
+			AST tmp2513_AST_in = (AST)_t;
 			match(_t,MULTIPLY);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -40950,7 +40949,7 @@
 		case DIVIDE:
 		{
 			AST __t2477 = _t;
-			AST tmp2515_AST_in = (AST)_t;
+			AST tmp2514_AST_in = (AST)_t;
 			match(_t,DIVIDE);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -40964,7 +40963,7 @@
 		case MODULO:
 		{
 			AST __t2478 = _t;
-			AST tmp2516_AST_in = (AST)_t;
+			AST tmp2515_AST_in = (AST)_t;
 			match(_t,MODULO);
 			_t = _t.getFirstChild();
 			sqlscalar(_t);
@@ -40978,7 +40977,7 @@
 		case UNARY_PLUS:
 		{
 			AST __t2479 = _t;
-			AST tmp2517_AST_in = (AST)_t;
+			AST tmp2516_AST_in = (AST)_t;
 			match(_t,UNARY_PLUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -40990,7 +40989,7 @@
 		case UNARY_MINUS:
 		{
 			AST __t2480 = _t;
-			AST tmp2518_AST_in = (AST)_t;
+			AST tmp2517_AST_in = (AST)_t;
 			match(_t,UNARY_MINUS);
 			_t = _t.getFirstChild();
 			exprt(_t);
@@ -41008,7 +41007,7 @@
 				inputState.guessing++;
 				try {
 					{
-					AST tmp2519_AST_in = (AST)_t;
+					AST tmp2518_AST_in = (AST)_t;
 					match(_t,LEFTPAREN);
 					_t = _t.getNextSibling();
 					}
@@ -41021,12 +41020,12 @@
 			}
 			if ( synPredMatched2482 ) {
 				AST __t2483 = _t;
-				AST tmp2520_AST_in = (AST)_t;
+				AST tmp2519_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getFirstChild();
 				sqlexpression(_t);
 				_t = _retTree;
-				AST tmp2521_AST_in = (AST)_t;
+				AST tmp2520_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				_t = __t2483;
@@ -41048,7 +41047,7 @@
 		AST sqlupdate_equal_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2409 = _t;
-		AST tmp2522_AST_in = (AST)_t;
+		AST tmp2521_AST_in = (AST)_t;
 		match(_t,EQUAL);
 		_t = _t.getFirstChild();
 		field(_t);
@@ -41084,7 +41083,7 @@
 		
 		AST sqlaggregatefunc_arg_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
-		AST tmp2523_AST_in = (AST)_t;
+		AST tmp2522_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		{
@@ -41092,7 +41091,7 @@
 		switch ( _t.getType()) {
 		case DISTINCT:
 		{
-			AST tmp2524_AST_in = (AST)_t;
+			AST tmp2523_AST_in = (AST)_t;
 			match(_t,DISTINCT);
 			_t = _t.getNextSibling();
 			{
@@ -41100,12 +41099,12 @@
 			switch ( _t.getType()) {
 			case LEFTPAREN:
 			{
-				AST tmp2525_AST_in = (AST)_t;
+				AST tmp2524_AST_in = (AST)_t;
 				match(_t,LEFTPAREN);
 				_t = _t.getNextSibling();
 				field(_t);
 				_t = _retTree;
-				AST tmp2526_AST_in = (AST)_t;
+				AST tmp2525_AST_in = (AST)_t;
 				match(_t,RIGHTPAREN);
 				_t = _t.getNextSibling();
 				break;
@@ -41126,7 +41125,7 @@
 		}
 		case STAR:
 		{
-			AST tmp2527_AST_in = (AST)_t;
+			AST tmp2526_AST_in = (AST)_t;
 			match(_t,STAR);
 			_t = _t.getNextSibling();
 			break;
@@ -41137,7 +41136,7 @@
 				{
 				if (_t==null) _t=ASTNULL;
 				if ((_t.getType()==ALL)) {
-					AST tmp2528_AST_in = (AST)_t;
+					AST tmp2527_AST_in = (AST)_t;
 					match(_t,ALL);
 					_t = _t.getNextSibling();
 				}
@@ -41156,7 +41155,7 @@
 		}
 		}
 		}
-		AST tmp2529_AST_in = (AST)_t;
+		AST tmp2528_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_retTree = _t;
@@ -41167,7 +41166,7 @@
 		AST sql_comp_query_AST_in = (_t == ASTNULL) ? null : (AST)_t;
 		
 		AST __t2469 = _t;
-		AST tmp2530_AST_in = (AST)_t;
+		AST tmp2529_AST_in = (AST)_t;
 		match(_t,Sql_comp_query);
 		_t = _t.getFirstChild();
 		{
@@ -41175,21 +41174,21 @@
 		switch ( _t.getType()) {
 		case ANY:
 		{
-			AST tmp2531_AST_in = (AST)_t;
+			AST tmp2530_AST_in = (AST)_t;
 			match(_t,ANY);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case ALL:
 		{
-			AST tmp2532_AST_in = (AST)_t;
+			AST tmp2531_AST_in = (AST)_t;
 			match(_t,ALL);
 			_t = _t.getNextSibling();
 			break;
 		}
 		case SOME:
 		{
-			AST tmp2533_AST_in = (AST)_t;
+			AST tmp2532_AST_in = (AST)_t;
 			match(_t,SOME);
 			_t = _t.getNextSibling();
 			break;
@@ -41204,12 +41203,12 @@
 		}
 		}
 		}
-		AST tmp2534_AST_in = (AST)_t;
+		AST tmp2533_AST_in = (AST)_t;
 		match(_t,LEFTPAREN);
 		_t = _t.getNextSibling();
 		selectstatea(_t);
 		_t = _retTree;
-		AST tmp2535_AST_in = (AST)_t;
+		AST tmp2534_AST_in = (AST)_t;
 		match(_t,RIGHTPAREN);
 		_t = _t.getNextSibling();
 		_t = __t2469;
@@ -41299,7 +41298,7 @@
 		}
 		case USERID:
 		{
-			AST tmp2536_AST_in = (AST)_t;
+			AST tmp2535_AST_in = (AST)_t;
 			match(_t,USERID);
 			_t = _t.getNextSibling();
 			break;



